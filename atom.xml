<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ya</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.chenyalun.com/"/>
  <updated>2019-08-28T12:12:51.409Z</updated>
  <id>http://blog.chenyalun.com/</id>
  
  <author>
    <name>Ya</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开源项目：YAPageView</title>
    <link href="http://blog.chenyalun.com/2019/08/07/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9AYAPageView/"/>
    <id>http://blog.chenyalun.com/2019/08/07/开源项目：YAPageView/</id>
    <published>2019-08-07T01:45:09.000Z</published>
    <updated>2019-08-28T12:12:51.409Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 轻量级、新样式轮播视图。 </p><br><a id="more"></a><p></p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在拜读<a href="http://adad184.com/" target="_blank" rel="noopener">里脊串的开发随笔</a>大神的博客时，发现个好玩的东西：<a href="http://adad184.com/2015/07/01/opensource-xxpagingscrollview/" target="_blank" rel="noopener">《开源项目:XXPagingScrollView》</a>。虽然是很常见的轮播视图，但是这种新样式的实现思路挺有意思。记得两年前在写某个项目时也遇到过这个，但是当然确实没有想出来咋实现这种非全屏有间隙的轮播控件。</p><p>读完大神的文章，很是兴奋，一般是不爱造重复的轮子，但是作者这个是<a href="https://github.com/adad184/XXPagingScrollView/blob/master/Classes/XXPagingScrollView.swift" target="_blank" rel="noopener">Swift版本</a>的，而且是基础组件，少了很多功能，所以心血来潮，在大神基础上再进一步。</p><p>相比较来说更加完善了：</p><ul><li>支持设置pagingWidth</li><li>支持设置pageInset</li><li>支持无限循环轮播</li><li>支持本地图片</li><li>支持网络图片</li><li>支持自动轮播、设置轮播时间间隔</li><li>支持点击回调</li></ul><p>整体代码约150行左右，更加精简。<br><img src="https://image.chenyalun.com/2019/08/07/003.gif"><br>项目地址:<a href="https://github.com/ChenYalun/YAPageView" target="_blank" rel="noopener">https://github.com/ChenYalun/YAPageView</a></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>实际上轮播视图是烂大街的东西了，网上现成代码特别多。一般而言，假定需要n个页面，实现方式有：</p><ol><li>使用<code>UIScrollView</code>，添加 n 个<code>UIImageView</code>。</li><li>使用<code>UIScrollView</code>，添加两个<code>UIImageView</code>，动态循环调整。</li><li>使用<code>UICollectionView</code>。</li></ol><p>方法1比较基础，更适合非循环；方法3比较简单，但是<code>UICollectionView</code>过于heavily。<br>方法2，很精简轻量，就是处理起来有点绕。然而，绕一次，换来永久的舒适，很值得。</p><p>如何实现自定义<code>Page width</code>的视图，作者给出的方案是：</p><blockquote><p>方案1: 不使用<code>pagingEnabled</code>属性 而是手动的计算并设置滑动偏移<br>方案2: 使用<code>pagingEnabled</code>属性 扩大<code>UIScrollview</code>的显示范围即可</p></blockquote><p>很明显，方案2更好。思路是，扩大<code>UIScrollView</code>的可显示范围并让UIScrollView响应超出其本身范围的触摸事件。思路知道了，实现起来很简单，就是<code>clipsToBounds</code>属性和<code>pointInside</code>方法。</p><h4 id="间距处理"><a href="#间距处理" class="headerlink" title="间距处理"></a>间距处理</h4><p>核心有三条：</p><ol><li><code>UIScrollView</code>的宽度就是<code>pageWidth + pageInset</code>。</li><li>为了保持左右显示区域的对称性，<code>UIScrollView</code>的<code>x</code>是<code>(superView.width - pageWidth) * 0.5</code>。</li><li>子视图的frame是<code>CGRectMake(idx * (pageWidth + pageInset), 0, pageWidth, height)</code>，也即，子视图的宽度与<code>UIScrollView</code>的宽度保持一致。</li></ol><h4 id="无限循环处理"><a href="#无限循环处理" class="headerlink" title="无限循环处理"></a>无限循环处理</h4><ol><li>视图循环利用<br>使用三个<code>UIImageView</code>，记为左、中、右，重复利用。默认显示中间的imageView。</li><li>刷新逻辑<br>在<code>scrollViewDidScroll</code>回调中，当<code>UIScrollView</code>即将显示出下一个（可能是左、也可能是右）视图时，立即调用刷新方法。刷新的逻辑是：</li></ol><ul><li><p>重新计算left、currentIndex、right三个索引</p>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kLeft (_currentIndex == 0 ? kCount - 1 : _currentIndex - 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRight (_currentIndex == kCount - 1 ? 0 : _currentIndex + 1)</span></span><br></pre></td></tr></table></figure></li><li><p>对左、中、右三个<code>UIImageView</code>重新设置配图</p>  <figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">self.pageArray<span class="string">[0]</span>.image = self.imageArray<span class="string">[kLeft]</span>;</span><br><span class="line">self.pageArray<span class="string">[1]</span>.image = self.imageArray<span class="string">[_currentIndex]</span>;</span><br><span class="line">self.pageArray<span class="string">[2]</span>.image = self.imageArray<span class="string">[kRight]</span>;</span><br></pre></td></tr></table></figure></li><li><p>以非动画方式设置<code>UIScrollView</code>的偏移量</p>  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> x = <span class="keyword">self</span>.scrollView.contentOffset.x;</span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">   x = width;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   x += x &gt; width ? -width : width;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="keyword">self</span>.scrollView setContentOffset:<span class="built_in">CGPointMake</span>(x, <span class="number">0</span>)];</span><br></pre></td></tr></table></figure><p>  这样便实现了无限循环。</p></li></ul><ol start="3"><li><p>刷新时机处理<br><code>scrollViewDidScroll</code>会回调很多次，本来以为使用一个标志位就可以控制只刷新一次，但是并没有实现😂 所以，退一步，用了两个标志位：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> leftLock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> rightLock;</span><br></pre></td></tr></table></figure><p>逻辑是这样的：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Turn left.</span></span><br><span class="line"><span class="keyword">if</span> (offsetX &gt; <span class="number">2</span> * (width - <span class="keyword">self</span>.pageInset)) <span class="keyword">self</span>.rightLock = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.leftLock &amp;&amp; offsetX &lt; width - <span class="number">2</span> * <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">    <span class="keyword">self</span>.leftLock = <span class="literal">YES</span>;</span><br><span class="line">    _currentIndex = kLeft;</span><br><span class="line">    [<span class="keyword">self</span> refresh];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Turn right.</span></span><br><span class="line"><span class="keyword">if</span> (offsetX &lt; <span class="number">2</span> * <span class="keyword">self</span>.pageInset) <span class="keyword">self</span>.leftLock = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.rightLock &amp;&amp; offsetX &gt; width + <span class="number">2</span> * <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">    <span class="keyword">self</span>.rightLock = <span class="literal">YES</span>;</span><br><span class="line">    _currentIndex = kRight;</span><br><span class="line">    [<span class="keyword">self</span> refresh];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 请牢记<code>UIScrollView</code>的宽度width是<code>width=pageWidth+pageInset</code>，这里以即将显示右边视图为例：<br> scrollView的初始偏移量是<code>width</code>，逐渐偏移，直到越过空白间距(pageInset)要显示下一个视图时，此时offsetX为<code>width + (pageWidth - pageInset)</code>，也即代码中的<code>2 * (width - pageInset)</code>，立即将offsetX还原为<code>2 * (width - pageInset) - (width)</code>也就是<code>pageWidth-pageInset</code>，对leftLock加锁，更新当前索引。</p></li></ol><h4 id="点击事件处理"><a href="#点击事件处理" class="headerlink" title="点击事件处理"></a>点击事件处理</h4><p>对<code>UIScrollView</code>添加点击手势，计算出当前点击位置在图片数组中的索引即可：<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> pointX = [tap locationInView:tap.view].x;</span><br><span class="line"><span class="built_in">NSUInteger</span> idx = _currentIndex;</span><br><span class="line"><span class="keyword">if</span> (pointX &lt; <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">   idx = kLeft;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pointX &gt; <span class="number">2</span> * <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">   idx = kRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="自动轮播处理"><a href="#自动轮播处理" class="headerlink" title="自动轮播处理"></a>自动轮播处理</h4><p>当设置<code>timeInterval</code>属性时，说明需要自动轮播，懒加载创建定时器：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">_timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:_timeInterval repeats:<span class="literal">YES</span> block:^(<span class="built_in">NSTimer</span> *timer) &#123;</span><br><span class="line">    [<span class="keyword">self</span>.scrollView setContentOffset:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.scrollView.frame) * <span class="number">2</span>, <span class="number">0</span>) animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>并把定时器放到<code>currentRunLoop</code>中，设置<code>NSRunLoopCommonModes</code>。当然，需要在ScrollView的一些代理中处理用户手动滑动与定时器设置的滑动的冲突。</p><h4 id="定时器循环引用处理"><a href="#定时器循环引用处理" class="headerlink" title="定时器循环引用处理"></a>定时器循环引用处理</h4><p>在<a href="https://blog.chenyalun.com/2018/09/30/PerformSelector原理/">《PerformSelector原理》</a>一文中，已经详细分析了定时器造成循环引用的原因，这里不做赘述。<br>解决方式是，当PageView从父视图上移除时，手动销毁定时器：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">- (void)willMoveToSuperview:<span class="type"></span>(UIView *)<span class="keyword">new</span><span class="type">Superview</span> &#123;</span><br><span class="line">    [<span class="keyword">super</span> willMoveToSuperview:<span class="type">newSuperview</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Superview</span> == nil) &#123; <span class="comment">// 视图从父视图移除时, 销毁定时器</span></span><br><span class="line">        [_timer invalidate];</span><br><span class="line">        _timer = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="点击回调循环引用处理"><a href="#点击回调循环引用处理" class="headerlink" title="点击回调循环引用处理"></a>点击回调循环引用处理</h4><p>点击事件给出的接口我选择使用block，（使用弱引用的代理就不会有这个问题了，但是代理会增加调用的复杂性，设置代理、遵守协议、实现方法巴拉巴拉。。。）</p><p>然而，同许多视图的block回调一样，会有循环引用的问题，只能这样使用：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) <span class="keyword">self</span> = weakSelf;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"self = %@, index = %lu, url = %@"</span>, <span class="keyword">self</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)idx, url);</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>万一调用方忘了呢，那就内存泄漏了。</p><p>大神<a href="https://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/" target="_blank" rel="noopener">玉令天下</a>的方式是使用弱引用的变量持有外界的调用者，然后在适当时机将组件“自己”置为空。不过需要给调用者写个分类（属性）持有组件，还需要明确切断循环引用的时机，对于我的这个100来行的PageView，可能有点不太合适。</p><p>想到一个方法，显式让使用方传进来调用者，重新定义外界的<code>self</code>，将其作为一个回调参数传递给使用方（PageView内部使用weak持有外界的<code>self</code>）。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^tapHandler)(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="keyword">id</span> <span class="keyword">self</span>);</span><br></pre></td></tr></table></figure><p>外界使用的时候像这样：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="built_in">UIViewController</span> *<span class="keyword">self</span>) &#123;</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>确实能解决循环引用，而且不是很费事。但是，实际使用的时候是这样的：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="keyword">id</span> controller) &#123;</span><br><span class="line">   <span class="comment">// 需要手动把id类型改成实际的类型，如UIViewController、UIView等等</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>并不知道外界的<code>self</code>是啥类型，只能用<code>id</code>。我感觉也不是很巧妙。我还没有想到更好的办法，所以，暂时还是使用苹果推荐的主流的方式吧：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^tapHandler)(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url);</span><br></pre></td></tr></table></figure><p>就让外界使用weak-strong来解决循环引用问题。</p><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><p>本地图片直接传入UIImage数组即可。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定构造器，设定pageWidth、pageInset等</span></span><br><span class="line">YAPageView *pageView = [[YAPageView alloc] <span class="string">initWithFrame:</span>CGRectMake(<span class="number">0</span>, <span class="number">200</span>, kScreenWidth, <span class="number">200</span>) <span class="string">controller:</span>self <span class="string">pageWidth:</span><span class="number">300</span> <span class="string">pageInset:</span><span class="number">20</span>];</span><br><span class="line">pageView.imageArray = @[</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"1"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"2"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"3"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"4"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"5"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"6"</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h4><p>网络图片传入图片URL数组，并设置处理图片的block。这个block指的是给UIImageView设置图片URL的方式。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果使用SDWebImage，可以这么设置</span></span><br><span class="line">pageView.configImageHandler = ^(<span class="built_in">UIImageView</span> *imageView, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   [imageView sd_setImageWithURL:url];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pageView.imageURLArray = @[</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/230/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/231/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/232/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/233/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/234/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/235/350/200"</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="设置自动轮播时间"><a href="#设置自动轮播时间" class="headerlink" title="设置自动轮播时间"></a>设置自动轮播时间</h4><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">pageView.timeInterval = <span class="number">3</span>.f<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="设置点击回调"><a href="#设置点击回调" class="headerlink" title="设置点击回调"></a>设置点击回调</h4><p>别忘了循环引用的问题。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) <span class="keyword">self</span> = weakSelf;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"self = %@, index = %lu, url = %@"</span>, <span class="keyword">self</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)idx, url);</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整体而言，没有冗余逻辑，能优化的也优化了（比如索引计算对取模的优化、定时器懒加载、刷新时机次数等等），应该算是比较轻量了吧哈哈哈哈。</p><p>具体应用方面，比如腾讯视频App中的首页Tab、会员Tab都有这种custom width的轮播图。<br><img src="https://image.chenyalun.com/2019/08/07/002.gif" style="zoom:80%"></p><p>QQ音乐中的发现Tab也是这种轮播图，不过不能无限循环（不能无限循环岂不是更简单。。）。<br><img src="https://image.chenyalun.com/2019/08/07/001.gif" style="zoom:80%"></p><p>好了，把两年前的坑填上了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 轻量级、新样式轮播视图。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="开源项目" scheme="http://blog.chenyalun.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>数据结构的Swift实现</title>
    <link href="http://blog.chenyalun.com/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84Swift%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.chenyalun.com/2019/07/31/数据结构的Swift实现/</id>
    <published>2019-07-31T03:39:23.000Z</published>
    <updated>2019-08-15T06:28:17.052Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 使用Swift实现常见的数据结构。 </p><br><a id="more"></a><p></p><h2 id="1-动态数组"><a href="#1-动态数组" class="headerlink" title="1.动态数组"></a>1.动态数组</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量(只读)</span></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ensureCapacity()</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (index...<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">            elements[idx + <span class="number">1</span>] = elements[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        elements[index] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> elements[index]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        elements[index] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = <span class="keyword">get</span>(index)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> index..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = elements[idx + <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        elements[<span class="built_in">count</span> - <span class="number">1</span>] = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// item 不可能为nil</span></span><br><span class="line">        <span class="keyword">return</span> indexOf(item) != <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某个元素对应的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的item不可能为nil</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> elements[idx]! == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &gt; elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.elements[idx] = elements[idx]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现过程中几个需要注意的点:</p><ol><li>在<code>indexOf()</code>函数中，元素使用<code>==</code>判等，需要遵守Equatable协议</li><li>数组的扩容中，使用位运算符可以避免产生浮点数</li><li>由于Swift中可选类型的存在，可以使用nil来占位。当然，在<code>set()、append()</code>等函数中，由于类型确定也省略了外界传参时对空值的判断</li></ol><h3 id="动态数组优化"><a href="#动态数组优化" class="headerlink" title="动态数组优化"></a>动态数组优化</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPArrayList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量(只读)</span></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 首位元素索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ensureCapacity()</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (index..&lt;<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">            elements[actualIndex(idx + <span class="number">1</span>)] = elements[actualIndex(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        elements[actualIndex(index)] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> elements[actualIndex(index)]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        elements[actualIndex(index)] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[actualIndex(index)]!</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">            frontIndex += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> index..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                elements[actualIndex(idx)] = elements[actualIndex(idx + <span class="number">1</span>)]</span><br><span class="line">            &#125;</span><br><span class="line">            elements[actualIndex(<span class="built_in">count</span> - <span class="number">1</span>)] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[actualIndex(idx)] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// item 不可能为nil</span></span><br><span class="line">        <span class="keyword">return</span> indexOf(item) != <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某个元素对应的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的item不可能为nil</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> elements[actualIndex(idx)]! == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取真实索引: (frontIndex + index) % elements.count</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">actualIndex</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (frontIndex + idx) % elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> index = (frontIndex + idx) % elements.<span class="built_in">count</span></span><br><span class="line">                <span class="keyword">self</span>.elements[idx] = elements[index]</span><br><span class="line">            &#125;</span><br><span class="line">            frontIndex = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组内容打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"["</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="string">", "</span></span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                a = <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> elements[idx] != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">"<span class="subst">\(a)</span><span class="subst">\(elements[idx]!)</span>"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">"<span class="subst">\(a)</span>nil"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">"], frontIndex = <span class="subst">\(frontIndex)</span>, count = <span class="subst">\(<span class="built_in">count</span>)</span>"</span></span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-单向链表"><a href="#2-单向链表" class="headerlink" title="2.单向链表"></a>2.单向链表</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneWayLinkedList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素没有找到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> first: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> firstEle: <span class="type">T</span>?) &#123;</span><br><span class="line">        <span class="keyword">if</span> firstEle == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            first = <span class="type">Node</span>(ele: firstEle!, next: <span class="literal">nil</span>)</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利构造</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(ele: <span class="type">T</span>, next: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.next = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引所在元素获取</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在某索引处插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = first</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, next: prev)</span><br><span class="line">            first = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = node(index - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, next: prev.next)</span><br><span class="line">            prev.next = newNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除某索引的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> noe = node(index - <span class="number">1</span>)</span><br><span class="line">            noe.next = noe.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某元素所在索引</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node!.ele == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.first = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                str += <span class="string">"first:<span class="subst">\(node!.ele)</span>,"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node!.next != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, <span class="subst">\(node!.next!.ele)</span>]"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, nil]"</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">","</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在的结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">node</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">self</span>.first</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;index &#123;</span><br><span class="line">            node = node?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-单向循环链表"><a href="#3-单向循环链表" class="headerlink" title="3.单向循环链表"></a>3.单向循环链表</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">class OneWayCircularLinkedList&lt;T: Equatable&gt;: OneWayLinkedList<span class="symbol">&lt;T&gt;</span> &#123;</span><br><span class="line">    override func <span class="keyword">insert</span>(_ item: T, _ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> &lt; <span class="number">0</span> || <span class="built_in">index</span> &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            // 越界</span><br><span class="line">            fatalError(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">first</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, nex<span class="variable">t:</span> <span class="keyword">prev</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">prev</span> == nil &#123;</span><br><span class="line">                // 只有一个元素</span><br><span class="line">                newNode.<span class="keyword">next</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">first</span> = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = node(<span class="built_in">index</span> - <span class="number">1</span>)</span><br><span class="line">            // 处理添加到最后一个位置</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">fir</span> = (<span class="built_in">index</span> == <span class="built_in">count</span>) ? <span class="keyword">first</span> : <span class="keyword">prev</span>.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, nex<span class="variable">t:</span> <span class="keyword">fir</span>)</span><br><span class="line">            <span class="keyword">prev</span>.<span class="keyword">next</span> = newNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="built_in">remove</span>(_ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        checkBounds(<span class="built_in">index</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">last</span> = node(<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">            // 对最后一个元素的处理</span><br><span class="line">            <span class="keyword">first</span> = (<span class="built_in">count</span> - <span class="number">1</span> == <span class="built_in">index</span>) ? nil : <span class="keyword">first</span>?.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">last</span>.<span class="keyword">next</span> = <span class="keyword">first</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> noe = node(<span class="built_in">index</span> - <span class="number">1</span>)</span><br><span class="line">            noe.<span class="keyword">next</span> = noe.<span class="keyword">next</span>?.<span class="keyword">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func clear() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">last</span> = node(<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">        // 打破循环引用</span><br><span class="line">        <span class="keyword">last</span>.<span class="keyword">next</span> = nil</span><br><span class="line">        // 调用父类</span><br><span class="line">        super.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-双向链表"><a href="#4-双向链表" class="headerlink" title="4.双向链表"></a>4.双向链表</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoWayLinkedList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素没有找到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> first: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> last: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> ele: <span class="type">T</span>?) &#123;</span><br><span class="line">        <span class="keyword">if</span> ele == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = <span class="literal">nil</span></span><br><span class="line">            last = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            first = <span class="type">Node</span>(ele: ele!, prev: <span class="literal">nil</span>, next: <span class="literal">nil</span>)</span><br><span class="line">            last = first</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利构造</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(ele: <span class="type">T</span>, prev: <span class="type">Node</span>?, next: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.prev = prev</span><br><span class="line">            <span class="keyword">self</span>.next = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引所在元素获取</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> node(index).ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在某索引处插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = last</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, prev: prev, next: <span class="literal">nil</span>)</span><br><span class="line">            last = newNode</span><br><span class="line">            prev?.next = newNode</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                first = last</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> next = node(index)</span><br><span class="line">            <span class="keyword">let</span> prev = next.prev</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, prev: prev, next: next)</span><br><span class="line">            next.prev = newNode</span><br><span class="line">            prev?.next = newNode</span><br><span class="line">            <span class="keyword">if</span> newNode.prev == <span class="literal">nil</span> &#123;</span><br><span class="line">                first = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除某索引的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">let</span> old = node(index)</span><br><span class="line">        <span class="keyword">let</span> prev = old.prev</span><br><span class="line">        <span class="keyword">let</span> next = old.next</span><br><span class="line">        <span class="keyword">if</span> next == <span class="literal">nil</span> &#123;</span><br><span class="line">            last = prev</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next?.prev = prev</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> prev == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev?.next = next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> old.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某元素所在索引</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node!.ele == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 打破循环引用</span></span><br><span class="line">        <span class="keyword">var</span> first = <span class="keyword">self</span>.first</span><br><span class="line">        <span class="keyword">while</span> first != <span class="literal">nil</span> &#123;</span><br><span class="line">            first?.prev = <span class="literal">nil</span></span><br><span class="line">            first = first?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.first = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">self</span>.last = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                str += <span class="string">"first:<span class="subst">\(node!.ele)</span>,"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node!.next != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, <span class="subst">\(node!.next!.ele)</span>]"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, nil]"</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">","</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> idx == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                str += <span class="string">" last:<span class="subst">\(node!.ele)</span>"</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在的结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">node</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="built_in">count</span> &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="comment">// 在前半部分查找</span></span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">self</span>.first</span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;index &#123;</span><br><span class="line">                node = node?.next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node!</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在后半部分查找</span></span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">self</span>.last</span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> (index + <span class="number">1</span>..&lt;<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">                node = node?.prev</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-双向循环链表"><a href="#5-双向循环链表" class="headerlink" title="5.双向循环链表"></a>5.双向循环链表</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">class TwoWayCircularLinkedList&lt;T: Equatable&gt;: TwoWayLinkedList<span class="symbol">&lt;T&gt;</span> &#123;</span><br><span class="line">    override func <span class="keyword">insert</span>(_ item: T, _ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> &lt; <span class="number">0</span> || <span class="built_in">index</span> &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            // 越界</span><br><span class="line">            fatalError(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">last</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, <span class="keyword">pre</span><span class="variable">v:</span> <span class="keyword">prev</span>, nex<span class="variable">t:</span> <span class="keyword">first</span>)</span><br><span class="line">            <span class="keyword">last</span> = newNode</span><br><span class="line">            <span class="keyword">prev</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">first</span> = <span class="keyword">last</span></span><br><span class="line">                <span class="keyword">last</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">first</span>?.<span class="keyword">prev</span> = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">next</span> = node(<span class="built_in">index</span>)</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">next</span>.<span class="keyword">prev</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, <span class="keyword">pre</span><span class="variable">v:</span> <span class="keyword">prev</span>, nex<span class="variable">t:</span> <span class="keyword">next</span>)</span><br><span class="line">            <span class="keyword">next</span>.<span class="keyword">prev</span> = newNode</span><br><span class="line">            <span class="keyword">prev</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">                // 首位插入元素</span><br><span class="line">                <span class="keyword">first</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="built_in">remove</span>(_ <span class="built_in">index</span>: Int) -&gt; T &#123;</span><br><span class="line">        checkBounds(<span class="built_in">index</span>)</span><br><span class="line">        <span class="keyword">let</span> old: Node = node(<span class="built_in">index</span>)</span><br><span class="line">        var <span class="keyword">prev</span> = old.<span class="keyword">prev</span></span><br><span class="line">        var <span class="keyword">next</span> = old.<span class="keyword">next</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">1</span> &amp;&amp; <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            // 只有一个元素</span><br><span class="line">            <span class="keyword">prev</span> = nil</span><br><span class="line">            <span class="keyword">next</span> = nil</span><br><span class="line">            old.<span class="keyword">next</span> = nil</span><br><span class="line">            old.<span class="keyword">prev</span> = nil</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">first</span> = <span class="keyword">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">last</span> = <span class="keyword">prev</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">prev</span>?.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line">        <span class="keyword">next</span>?.<span class="keyword">prev</span> = <span class="keyword">prev</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> old.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func clear() &#123;</span><br><span class="line">        // 打破循环引用</span><br><span class="line">        var <span class="keyword">first</span> = self.<span class="keyword">first</span></span><br><span class="line">        <span class="keyword">for</span> idx in <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">first</span>?.<span class="keyword">prev</span> = nil</span><br><span class="line">            <span class="keyword">first</span> = <span class="keyword">first</span>?.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">if</span> idx == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">first</span>?.<span class="keyword">next</span> = nil</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        self.<span class="keyword">first</span> = nil</span><br><span class="line">        self.<span class="keyword">last</span> = nil</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-栈"><a href="#6-栈" class="headerlink" title="6.栈"></a>6.栈</h2><p>使用动态数组实现。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 设置容量默认为10, 可自动扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">ArrayList</span>&lt;<span class="type">T</span>&gt; = <span class="type">ArrayList</span>(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(size() - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span> ? <span class="literal">nil</span> : list.<span class="keyword">get</span>(size() - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-队列"><a href="#7-队列" class="headerlink" title="7.队列"></a>7.队列</h2><p>因为频繁地在开头末尾添加删除元素所以使用链表实现<br>又因为双向链表有头指针和尾指针而单向链表只有头指针所以使用双向链表实现(减少遍历)</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">TwoWayLinkedList</span>&lt;<span class="type">T</span>&gt; = <span class="type">TwoWayLinkedList</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.first?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.desc()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用栈实现队列"><a href="#使用栈实现队列" class="headerlink" title="使用栈实现队列"></a>使用栈实现队列</h4><p>原理:</p><ol><li>入队时, 把元素放入inStack中</li><li>出队时, 如果outStack为空, 则把inStack中的全部栈顶元素依次放到outStack中, 返回outStack的栈顶元素, 否则, 直接返回outStack的栈顶元素<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue_UseStack</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 维护两个栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> inStack: <span class="type">Stack</span>&lt;<span class="type">T</span>&gt; = <span class="type">Stack</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> outStack: <span class="type">Stack</span>&lt;<span class="type">T</span>&gt; = <span class="type">Stack</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inStack.size() + outStack.size()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        inStack.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> outStack.isEmpty() &#123;</span><br><span class="line">            <span class="keyword">while</span> inStack.isEmpty() == <span class="literal">false</span> &#123;</span><br><span class="line">                outStack.push(inStack.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> outStack.isEmpty() &#123;</span><br><span class="line">            <span class="keyword">while</span> inStack.isEmpty() == <span class="literal">false</span> &#123;</span><br><span class="line">                outStack.push(inStack.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.top()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        inStack.clear()</span><br><span class="line">        outStack.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-循环队列"><a href="#8-循环队列" class="headerlink" title="8.循环队列"></a>8.循环队列</h2><p>使用动态数组实现, 且各接口优化到O(1)时间复杂度<br>要点:</p><ol><li>有一个指向队头元素的索引frontIndex, 必不可少</li><li>接口索引与真实索引的互换: 真实索引 = (frontIndex + index) % elements.count</li><li>入队</li></ol><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指向队头的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        elements[index(<span class="built_in">count</span>)] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[frontIndex]</span><br><span class="line">        <span class="keyword">if</span> ele == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">        <span class="comment">// 不是frontIndex += 1, 要考虑frontIndex == elements.count但是elements有空闲位置的情况</span></span><br><span class="line">        <span class="comment">// 这时应该是frontIndex = (frontIndex + 1) % elements.count, 也就是index(1)</span></span><br><span class="line">        frontIndex = index(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[frontIndex]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> capacity: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 不需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> elements.<span class="built_in">count</span> &gt;= capacity &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">        <span class="comment">// 扩容1.5倍</span></span><br><span class="line">        <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> newElements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            newElements[idx] = elements[index(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.elements = newElements</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引对应真实索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (frontIndex + index) % elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"frontIndex: <span class="subst">\(frontIndex)</span>"</span> + <span class="string">" eles: <span class="subst">\(elements)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-双端队列"><a href="#9-双端队列" class="headerlink" title="9.双端队列"></a>9.双端队列</h2><p>两端都可以入队和出队</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleEndedQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">TwoWayLinkedList</span>&lt;<span class="type">T</span>&gt; = <span class="type">TwoWayLinkedList</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueFront</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.insert(item, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueRear</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueFront</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueRear</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(list.<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.first?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rear</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.last?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.desc()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-循环双端队列"><a href="#10-循环双端队列" class="headerlink" title="10.循环双端队列"></a>10.循环双端队列</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleDoubleEndedQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指向队头的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueFront</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        frontIndex = index(-<span class="number">1</span>)</span><br><span class="line">        elements[frontIndex] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueRear</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        elements[index(<span class="built_in">count</span>)] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueFront</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[frontIndex]</span><br><span class="line">        elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">        frontIndex = index(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueRear</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[index(<span class="built_in">count</span> - <span class="number">1</span>)]!</span><br><span class="line">        elements[index(<span class="built_in">count</span> - <span class="number">1</span>)] = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[frontIndex]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rear</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[index(<span class="built_in">count</span> - <span class="number">1</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> capacity: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 不需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> elements.<span class="built_in">count</span> &gt;= capacity &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">        <span class="comment">// 扩容1.5倍</span></span><br><span class="line">        <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> newElements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            newElements[idx] = elements[index(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.elements = newElements</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引对应真实索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = index</span><br><span class="line">        index += frontIndex</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index + elements.<span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//        return index % elements.count</span></span><br><span class="line">        <span class="keyword">return</span> index - (index &gt;= elements.<span class="built_in">count</span> ? elements.<span class="built_in">count</span> : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"frontIndex: <span class="subst">\(frontIndex)</span>"</span> + <span class="string">",eles: <span class="subst">\(elements)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-二叉树"><a href="#11-二叉树" class="headerlink" title="11. 二叉树"></a>11. 二叉树</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> nodeCount = <span class="number">0</span> <span class="comment">// 结点数量</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> root: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二叉树是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        root = <span class="literal">nil</span></span><br><span class="line">        nodeCount = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前序遍历(一般是根左右)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是前序遍历的递归方式结果---------"</span>)</span><br><span class="line">        preorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是前序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 先访问 根</span></span><br><span class="line">                results.append(p!.ele)</span><br><span class="line">                stack.push(p!)</span><br><span class="line">                <span class="comment">// 再访问 左 (持续遍历左子树)</span></span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = stack.pop()</span><br><span class="line">            <span class="comment">// 最后访问 右</span></span><br><span class="line">            p = p?.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">        preorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        preorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历(一般是左根右)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是中序遍历的递归方式结果---------"</span>)</span><br><span class="line">        inorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是中序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 持续访问左子树</span></span><br><span class="line">                stack.push(p!)</span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            p = stack.pop()</span><br><span class="line">            <span class="comment">// 先访问左子树</span></span><br><span class="line">            results.append(p!.ele)</span><br><span class="line">            p = p?.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">        inorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历(一般是左右根)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是后序遍历的递归方式结果---------"</span>)</span><br><span class="line">        postorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是后序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">var</span> last: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 持续访问左子树</span></span><br><span class="line">                stack.push(p!)</span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = stack.top()</span><br><span class="line">            <span class="keyword">if</span> p?.<span class="keyword">right</span> == <span class="literal">nil</span> || p?.<span class="keyword">right</span> == last &#123;</span><br><span class="line">                <span class="comment">// 没有右子树或者访问过右子树</span></span><br><span class="line">                results.append(p!.ele)</span><br><span class="line">                <span class="number">_</span> = stack.pop()</span><br><span class="line">                last = p</span><br><span class="line">                p = <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = p?.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        postorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        postorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 层序遍历--使用队列实现</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrderTranversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            results.append(r.ele)</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是层序遍历的结果---------"</span>)</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否是一颗完全二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isComplete</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 树为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> isAllLeaf = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            <span class="keyword">if</span> isAllLeaf &amp;&amp; !r.isLeaf() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> r.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 左子树为空而右子树不为空, 不是完全二叉树</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 左不为空右为空  或者 左右都为空, 要求之后的必须都是叶子结点</span></span><br><span class="line">                isAllLeaf = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找前驱结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">precursor</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="comment">// 1. 空结点, 其前驱为空</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 前驱结点在左结点的右子树上, 比如找6的前驱</span></span><br><span class="line">        <span class="keyword">var</span> p = node!.<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p!.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                p = p!.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 前驱结点在父节点\祖父结点上, 比如找9的前驱</span></span><br><span class="line">        p = node</span><br><span class="line">        <span class="keyword">while</span> p!.parent != <span class="literal">nil</span> &amp;&amp; p == p!.parent?.<span class="keyword">left</span> &#123;</span><br><span class="line">            p = p!.parent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p!.parent</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找后继结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">successor</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="comment">// 1. 空结点, 其后继为空</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 后继结点在右结点的左子树上, 比如找7的后继</span></span><br><span class="line">        <span class="keyword">var</span> p = node!.<span class="keyword">right</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p!.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                p = p!.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 后继结点在父节点\祖父结点上, 比如找5的后继</span></span><br><span class="line">        p = node</span><br><span class="line">        <span class="keyword">while</span> p!.parent != <span class="literal">nil</span> &amp;&amp; p == p!.parent?.<span class="keyword">right</span> &#123;</span><br><span class="line">            p = p!.parent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p!.parent</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 树的高度--迭代写法</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 层序遍历法</span></span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> level = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0</span></span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            level -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> level == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 这一层遍历结束</span></span><br><span class="line">                level = queue.size()</span><br><span class="line">                height += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height</span><br><span class="line">        <span class="comment">//return height(root)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 树的高度--递归写法</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(height(node!.<span class="keyword">left</span>), height(node!.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt;: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> parent: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(<span class="number">_</span> ele: <span class="type">T</span>, <span class="number">_</span> parent: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 叶子结点, 左右结点均为空</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isLeaf</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 有两个结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">hasTwoChildren</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是左子结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isLeftChild</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="comment">// 比较指针是否一致</span></span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">nil</span> &amp;&amp; parent?.<span class="keyword">left</span> === <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是右子结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isRightChild</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="comment">// 比较指针是否一致</span></span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">nil</span> &amp;&amp; parent?.<span class="keyword">right</span> === <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对等比较</span></span><br><span class="line">        <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Node&lt;T&gt;, rhs: Node&lt;T&gt;)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.ele == rhs.ele</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-二叉搜索树"><a href="#12-二叉搜索树" class="headerlink" title="12.二叉搜索树"></a>12.二叉搜索树</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">BinaryTree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 查找结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">findNode</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ele == p!.ele &#123;</span><br><span class="line">                <span class="comment">// 元素相等, 直接替换</span></span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ele &lt; p!.ele &#123;</span><br><span class="line">                <span class="comment">// 位于左子树</span></span><br><span class="line">                p = p!.<span class="keyword">left</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 位于右子树</span></span><br><span class="line">                p = p!.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加结点</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addNode</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 添加的是根节点</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            root = <span class="type">Node</span>(ele, <span class="literal">nil</span>)</span><br><span class="line">            nodeCount += <span class="number">1</span></span><br><span class="line">            afterAdd(root!)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 添加的不是根结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = root</span><br><span class="line">            <span class="keyword">var</span> parent = root</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                parent = p</span><br><span class="line">                <span class="keyword">if</span> ele == p!.ele &#123;</span><br><span class="line">                    <span class="comment">// 元素相等, 直接替换</span></span><br><span class="line">                    p?.ele = ele</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ele &lt; p!.ele &#123;</span><br><span class="line">                    <span class="comment">// 位于左子树</span></span><br><span class="line">                    p = p!.<span class="keyword">left</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 位于右子树</span></span><br><span class="line">                    p = p!.<span class="keyword">right</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 得到parent结点</span></span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele, parent)</span><br><span class="line">            <span class="keyword">if</span> ele &gt; parent!.ele &#123;</span><br><span class="line">                parent?.<span class="keyword">right</span> = newNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent?.<span class="keyword">left</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 总结点数量加1</span></span><br><span class="line">            nodeCount += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            afterAdd(newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除结点</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? = findNode(ele)</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 没有找到需要删除的结点</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结点数量减1</span></span><br><span class="line">        nodeCount -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 度为2的结点</span></span><br><span class="line">        <span class="keyword">if</span> node!.hasTwoChildren() &#123;</span><br><span class="line">            <span class="comment">// 找它的后继结点</span></span><br><span class="line">            <span class="keyword">let</span> p = successor(node)</span><br><span class="line">            <span class="comment">// 用后继结点内容替换待删除结点内容</span></span><br><span class="line">            node!.ele = p!.ele</span><br><span class="line">            <span class="comment">// 需要删的结点就是node结点了</span></span><br><span class="line">            node = p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// node是叶子结点而且也是根结点</span></span><br><span class="line">        <span class="keyword">if</span> node?.parent == <span class="literal">nil</span> &#123;</span><br><span class="line">            root = <span class="literal">nil</span></span><br><span class="line">            afterRemove(node!)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 需要替换的结点</span></span><br><span class="line">        <span class="keyword">let</span> replace = node?.<span class="keyword">left</span> == <span class="literal">nil</span> ? node?.<span class="keyword">right</span> : node?.<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">if</span> replace == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// node没有左子树也没有右子树, 说明node是叶子结点</span></span><br><span class="line">            <span class="keyword">if</span> node?.parent?.<span class="keyword">left</span> == node &#123;</span><br><span class="line">                <span class="comment">// node是父结点的左结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">left</span> = <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// node是父结点的右结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">right</span> = <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            afterRemove(node!)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node?.parent == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 是根结点</span></span><br><span class="line">                root = replace</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> node?.parent?.<span class="keyword">left</span> == node &#123;</span><br><span class="line">                <span class="comment">// 是左结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">left</span> = replace</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是右结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">right</span> = replace</span><br><span class="line">            &#125;</span><br><span class="line">            afterRemove(node!)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">afterAdd</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">afterRemove</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-AVLTree"><a href="#13-AVLTree" class="headerlink" title="13.AVLTree"></a>13.AVLTree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">BinarySearchTree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">afterAdd</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"已经添加<span class="subst">\(node)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">afterRemove</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"已经移除<span class="subst">\(node)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还木有写完。。。。</p><h2 id="14-红黑树"><a href="#14-红黑树" class="headerlink" title="14.红黑树"></a>14.红黑树</h2><h2 id="15-二叉堆"><a href="#15-二叉堆" class="headerlink" title="15.二叉堆"></a>15.二叉堆</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Heap</span>  </span>&#123;</span><br><span class="line">    associatedtype <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> ele: T)</span></span></span><br><span class="line">    <span class="comment">// 获取堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="comment">// 删除堆顶元素的同时插入一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replace</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">T</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryHeap</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">Heap</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> size = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        list = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> <span class="built_in">count</span>: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &gt; list.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> oldList = <span class="keyword">self</span>.list</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = oldList.<span class="built_in">count</span> + oldList.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.list = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">                <span class="keyword">self</span>.list[idx] = oldList[idx]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">            list[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>)</span><br><span class="line">        list[size] = ele</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">        siftUp(size - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> first = list[<span class="number">0</span>]!</span><br><span class="line">        list[<span class="number">0</span>] = list[size]</span><br><span class="line">        list[size] = <span class="literal">nil</span></span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除堆顶元素的同时插入一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replace</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> root: <span class="type">T</span>?</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            list[<span class="number">0</span>] = ele</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = list[<span class="number">0</span>];</span><br><span class="line">            list[<span class="number">0</span>] = ele;</span><br><span class="line">            siftDown(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(<span class="number">_</span> eles: [T])</span></span> &#123;</span><br><span class="line">        size = eles.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;eles.<span class="built_in">count</span> &#123;</span><br><span class="line">            list[idx] = eles[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自上而下的上滤O(nlogn)</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         for idx in 0..&lt;size &#123;</span></span><br><span class="line"><span class="comment">         siftUp(idx)</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自下而上的上滤O(n)</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (<span class="number">0</span>...size &gt;&gt; <span class="number">1</span>).reversed() &#123;</span><br><span class="line">            siftDown(idx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// index位置的元素下滤</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">siftDown</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = list[idx]!</span><br><span class="line">        <span class="keyword">var</span> idx = idx</span><br><span class="line">        <span class="keyword">while</span> idx &lt; size &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="comment">// 左结点</span></span><br><span class="line">            <span class="keyword">var</span> childIdx = idx &lt;&lt; <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> child = list[childIdx]!</span><br><span class="line">            <span class="comment">// 右结点索引</span></span><br><span class="line">            <span class="keyword">let</span> rightIdx = childIdx + <span class="number">1</span></span><br><span class="line">            <span class="comment">// 如果右结点存在, 则取出左右结点中较大的一个</span></span><br><span class="line">            <span class="keyword">if</span> rightIdx &lt; size &amp;&amp; list[rightIdx]! &gt; child &#123;</span><br><span class="line">                childIdx = rightIdx</span><br><span class="line">                child = list[childIdx]!</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果自己不小于较大子结点, 停止下滤</span></span><br><span class="line">            <span class="keyword">if</span> ele &gt;= child &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换自己与较大子结点的位置</span></span><br><span class="line">            list[idx] = child</span><br><span class="line">            idx = childIdx</span><br><span class="line">        &#125;</span><br><span class="line">        list[idx] = ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// index位置的元素上滤</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">siftUp</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> idx = idx</span><br><span class="line">        <span class="keyword">let</span> ele = list[idx]!</span><br><span class="line">        <span class="keyword">while</span> idx &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> parentIdx = (idx - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> parent = list[parentIdx]!</span><br><span class="line">            <span class="keyword">if</span> parent &gt;= ele &#123;</span><br><span class="line">                <span class="comment">// 父结点不小于自己, 停止上滤</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换自己与父结点的位置</span></span><br><span class="line">            list[idx] = parent</span><br><span class="line">            idx = parentIdx</span><br><span class="line">        &#125;</span><br><span class="line">        list[idx] = ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(list)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上滤</strong><br>1、当插入一个新元素时，放在最末尾。<br>2、若有父节点，将插入节点和父节点比较，如果插入节点大于父节点，交换位置。<br>3、重复2，直至插入节点不小于父节点或者没有父节点，上滤结束。</p><p><strong>下滤</strong><br>1、删除首元素，将最后一个元素移到首节点。<br>2、若有孩子，则比较该节点和最大孩子的值，若小于最大孩子的值，与最大的孩子互换位置。<br>3、重复2，直至该节点的值大于最大孩子的值或者没有孩子，下滤结束，堆序性得以满足。</p><h2 id="16-优先级队列"><a href="#16-优先级队列" class="headerlink" title="16.优先级队列"></a>16.优先级队列</h2><p>使用二叉堆实现。</p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> heap: <span class="type">BinaryHeap</span> = <span class="type">BinaryHeap</span>&lt;<span class="type">T</span>&gt;(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.size</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        heap.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        heap.add(ele)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.remove()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="keyword">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 使用Swift实现常见的数据结构。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.chenyalun.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Key-Value Observing源码初探</title>
    <link href="http://blog.chenyalun.com/2019/05/31/Key-Value%20Observing%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2/"/>
    <id>http://blog.chenyalun.com/2019/05/31/Key-Value Observing源码初探/</id>
    <published>2019-05-31T11:37:45.000Z</published>
    <updated>2019-08-22T09:52:48.519Z</updated>
    
    <content type="html"><![CDATA[<p align="center"> KVO源码阅读。 </p><a id="more"></a><p>尝试去读一遍KVO的源码，发现它比KVC复杂的多，只能明白个大概。<br>文章最后按照自己的理解，再结合源码的实现流程自己写了一个KVO，锻炼锻炼。</p><h1 id="一、常用接口"><a href="#一、常用接口" class="headerlink" title="一、常用接口"></a>一、常用接口</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KVO的回调</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueObserving</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object change:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *)change context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加及移除观察者</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueObserverRegistration</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context API_AVAILABLE(macos(<span class="number">10.7</span>), ios(<span class="number">5.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h1 id="二、技巧回顾"><a href="#二、技巧回顾" class="headerlink" title="二、技巧回顾"></a>二、技巧回顾</h1><h2 id="1-如何使得属性在未改变的情况下不发送通知-手动控制"><a href="#1-如何使得属性在未改变的情况下不发送通知-手动控制" class="headerlink" title="1.如何使得属性在未改变的情况下不发送通知(手动控制)?"></a>1.如何使得属性在未改变的情况下不发送通知(手动控制)?</h2><p>示例如下，主要有:</p><ol><li>重写<code>automaticallyNotifiesObserversForKey:</code>方法</li><li>重写<code>setter</code>方法</li></ol><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAObject</span></span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@"name"</span>]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> automaticallyNotifiesObserversForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name != _name) &#123;</span><br><span class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"name"</span>];</span><br><span class="line">        _name = name;</span><br><span class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"name"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="2-如何注册依赖键-多个属性影响到某一个属性"><a href="#2-如何注册依赖键-多个属性影响到某一个属性" class="headerlink" title="2.如何注册依赖键(多个属性影响到某一个属性)?"></a>2.如何注册依赖键(多个属性影响到某一个属性)?</h2><ol><li>重写<code>getter</code>方法，定义依赖关系</li><li>重写<code>keyPathsForValuesAffectingValueForKey:</code>方法，添加依赖的key集合</li></ol><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAObject</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="comment">// 定义依赖关系</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"firstName is %@ and lastName is %@"</span>, <span class="keyword">self</span>.firstName, <span class="keyword">self</span>.lastName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPathsForValuesAffectingValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSSet</span> *keyPaths = [<span class="keyword">super</span> keyPathsForValuesAffectingValueForKey:key];</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@"name"</span>]) &#123;</span><br><span class="line">        keyPaths = [keyPaths setByAddingObjectsFromArray:@[<span class="string">@"firstName"</span>, <span class="string">@"lastName"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyPaths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> // 也可以命名为keyPathsForValuesAffecting&lt;Key&gt;的类方法来达到同样的目的</span></span><br><span class="line"><span class="comment"> + (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingName &#123;</span></span><br><span class="line"><span class="comment">     return [NSSet setWithObjects:@"firstName", @"lastName", nil];</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="3-当NSMutableArray中元素增加和减少时如何监听到"><a href="#3-当NSMutableArray中元素增加和减少时如何监听到" class="headerlink" title="3.当NSMutableArray中元素增加和减少时如何监听到?"></a>3.当NSMutableArray中元素增加和减少时如何监听到?</h2><p>示例代码:</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAObject </span>: NSObject</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) NSMutableArray *nameList;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"><span class="variable">@implementation</span> YAObject</span><br><span class="line"><span class="comment">// 实现集合代理对象: 一般建议-countOf&lt;Key&gt;和-objectIn&lt;Key&gt;AtIndex:</span></span><br><span class="line">- (NSUInteger)countOfNameList &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[_nameList count]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">objectInNameListAtIndex</span><span class="selector-pseudo">:(NSUInteger)index</span> &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[_nameList objectAtIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至少实现一个插入方法和一个删除方法</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">insertObject</span><span class="selector-pseudo">:(id)object</span> <span class="selector-tag">inNameListAtIndex</span><span class="selector-pseudo">:(NSUInteger)index</span> &#123;</span><br><span class="line">    <span class="selector-attr">[_nameList insertObject:object atIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">removeObjectFromNameListAtIndex</span>:(NSUInteger)index &#123;</span><br><span class="line">    <span class="selector-attr">[_nameList removeObjectAtIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p>使用:</p><ol><li>务必使用<code>mutableArrayValueForKey</code>获取集合</li><li>使用<code>insertObject</code>方法添加元素</li></ol><p>比如:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSMutableArray *nameList = [self.obj <span class="string">mutableArrayValueForKey:</span>@<span class="string">"nameList"</span>];</span><br><span class="line">[nameList <span class="string">insertObject:</span>obj <span class="string">atIndex:</span><span class="number">0</span>];</span><br></pre></td></tr></table></figure><h1 id="三、几个问题"><a href="#三、几个问题" class="headerlink" title="三、几个问题"></a>三、几个问题</h1><p>总结的几个问题。</p><h2 id="1-KVO的实现原理是什么"><a href="#1-KVO的实现原理是什么" class="headerlink" title="1.KVO的实现原理是什么?"></a>1.KVO的实现原理是什么?</h2><blockquote><p>Objective-C依托于强大的runtime机制来实现KVO。当我们第一次观察某个对象的属性时，runtime会创建一个新的继承自这个对象的class的subclass(前缀是<code>NSKVONotifying_</code>)。在这个新的subclass中，它会重写所有被观察的key的setter，然后将object的isa指针指向新创建的class(这个指针告诉Objective-C运行时某个object到底是什么类型的)。所以object神奇地变成了新的子类的实例。</p></blockquote><p>——摘自南峰子的博客。</p><h2 id="2-KVO源码中添加观察者时整体的大致流程是什么"><a href="#2-KVO源码中添加观察者时整体的大致流程是什么" class="headerlink" title="2.KVO源码中添加观察者时整体的大致流程是什么?"></a>2.KVO源码中添加观察者时整体的大致流程是什么?</h2><ol><li>将<code>keyPath</code>、<code>class</code>等信息封装成<code>NSKeyValueProperty</code>，分别解析一般属性(<code>@&quot;aa&quot;</code>)、可计算属性(<code>@&quot;@aa&quot;</code>)、属性链(<code>@&quot;aa.bb.@cc.dd&quot;</code>)，进行子类化，缓存在<code>CFMutableSet</code>中方便下次快速取出。</li><li>将<code>NSKeyValueProperty</code>、<code>context</code>、<code>options</code>、<code>observer</code>等信息封装成<code>NSKeyValueObservance</code>，缓存在<code>NSHashTable</code>中。</li><li>倘若设置了<code>NSKeyValueObservingOptionInitial</code>选项，会在注册观察服务时调用一次触发方法。</li><li>动态创建名为<code>NSKVONotifying_+原来类名</code>的新类，重写其<code>dealloc</code>、<code>_isKVOA</code>方法，再重写<code>class</code>方法，利用<code>object_setClass()</code>函数将其isa指针指向原先的类。</li><li>重写<code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code>方法，重写被观察属性的<code>setter</code>方法，在<code>setter</code>中先调用<code>willChangeValueForKey:</code>方法，然后调用父类的 <code>setter</code> 方法对成员变量赋值，之后再调用 <code>didChangeValueForKey:</code> 方法。</li><li><code>didChangeValueForKey:</code> 方法中会调用<code>observeValueForKeyPath:ofObject:change:context:</code>方法。</li></ol><h2 id="3-KVO中所封装组件的关系是怎样的"><a href="#3-KVO中所封装组件的关系是怎样的" class="headerlink" title="3.KVO中所封装组件的关系是怎样的?"></a>3.KVO中所封装组件的关系是怎样的?</h2><ol><li>将<code>keyPath、class</code>等信息封装成<code>NSKeyValueProperty</code>，使用<code>CFMutableSet</code>缓存<code>NSKeyValueProperty</code>。</li><li>将<code>observer、property、options、context 、originalObservable</code>等信息封装成<code>NSKeyValueObservance</code>，<code>使用NSHashTable(NSKeyValueShareableObservationInfos)</code>缓存。</li><li><code>NSKeyValueObservationInfo</code>与<code>NSKeyValueObservance</code>的关系是: <code>NSKeyValueObservationInfo</code>中有一个<code>observances</code>数组，数组里面是<code>NSKeyValueObservance</code>对象。</li><li>每一个<code>object</code>都有一个<code>observationInfo</code>属性(<code>void *</code>类型)，它与<code>NSKeyValueObservationInfo</code>会相互转化。</li></ol><p>如图所示:</p><p>图片</p><p><code>class</code>和<code>keyPath</code>决定了是否是同一个<code>NSKeyValueProperty</code>。<br><code>NSKeyValueProperty</code>、<code>Observer</code>、<code>options</code>、<code>context</code> 决定了是否是同一个<code>NSKeyValueObservance</code>。</p><h2 id="4-KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到"><a href="#4-KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到" class="headerlink" title="4.KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到?"></a>4.KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到?</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br></pre></td></tr></table></figure><p>如上面代码，会有四次回调。</p><p>在每次添加观察者时，都会获取<code>NSKeyValueObservance</code>对象(可能从缓存中获取也可能新建)，并把它追加到object的<code>observances</code>数组中(即使该数组中已经存在完全相同（指针一致）的<code>NSKeyValueObservance</code>对象)，由此保证了多次<code>addObserver</code>操作会有多次回调。</p><p>通过打印可以证明：</p><p><img src="https://image.chenyalun.com/2019/05/30/001.png" style="zoom:50%"></p><h1 id="四、添加观察者"><a href="#四、添加观察者" class="headerlink" title="四、添加观察者"></a>四、添加观察者</h1><p>这一步骤中封装出了许多的类，同时也把产生的许多对象做了进一步的缓存处理。</p><h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><h3 id="1-1接口方法"><a href="#1-1接口方法" class="headerlink" title="1.1接口方法"></a>1.1接口方法</h3><p>加锁，接口方法中使用<code>pthread</code>中的<code>pthread_mutex_lock()</code>和<code>pthread_mutex_unlock</code>函数。</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是个接口方法, 添加观察者分为两个流程: 1，根据class和keyPath获取NSKeyValueProperty对象。2，添加对property的观察。</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">d_addObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">context:</span>(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    pthread_mutex_lock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">    <span class="comment">// 获取当前线程pthread</span></span><br><span class="line">    _NSKeyValueObserverRegistrationLockOwner = pthread_self();</span><br><span class="line">    <span class="comment">// 根据class和keyPath获取NSKeyValueProperty</span></span><br><span class="line">    NSKeyValueProperty *property = NSKeyValuePropertyForIsaAndKeyPath(object_getClass(self),keyPath);</span><br><span class="line">    <span class="comment">// 添加对property的观察</span></span><br><span class="line">    [self <span class="string">_d_addObserver:</span>observer <span class="string">forProperty:</span>property <span class="string">options:</span>options <span class="string">context:</span>context];</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    pthread_mutex_unlock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-2-添加对NSKeyValueProperty的观察的具体实现"><a href="#1-2-添加对NSKeyValueProperty的观察的具体实现" class="headerlink" title="1.2.添加对NSKeyValueProperty的观察的具体实现"></a>1.2.添加对NSKeyValueProperty的观察的具体实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加观察者过程中, 不是单纯地'观察'keyPath, 而是观察对keyPath封装的NSKeyValueProperty</span></span><br><span class="line">- (<span class="keyword">void</span>)_addObserver:(<span class="keyword">id</span>)observer forProperty:(<span class="built_in">NSKeyValueProperty</span> *)property options:(<span class="keyword">int</span>)options context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span>(options &amp; <span class="built_in">NSKeyValueObservingOptionInitial</span>) &#123;</span><br><span class="line">        <span class="comment">// NSKeyValueObservingOptionInitial: 观察最初的值（在注册观察服务时会调用一次触发方法）</span></span><br><span class="line">        <span class="built_in">NSString</span> *keyPath = [property keyPath];</span><br><span class="line">        _NSKeyValueObserverRegistrationLockOwner = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        pthread_mutex_unlock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">            <span class="comment">// newValue就是当前的值</span></span><br><span class="line">            newValue = [<span class="keyword">self</span> valueForKeyPath:keyPath];</span><br><span class="line">            <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">                newValue = [<span class="built_in">NSNull</span> null]; <span class="comment">// 使用NSNull对象</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSKeyValueChangeDictionary</span> *changeDictionary = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 创建NSKeyValueChangeDetails结构体</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         typedef struct &#123;</span></span><br><span class="line"><span class="comment">             NSKeyValueChange kind;</span></span><br><span class="line"><span class="comment">             id oldValue;</span></span><br><span class="line"><span class="comment">             id newValue;</span></span><br><span class="line"><span class="comment">             NSIndexSet *indexes;</span></span><br><span class="line"><span class="comment">             id extraData;</span></span><br><span class="line"><span class="comment">         &#125; NSKeyValueChangeDetails;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">NSKeyValueChangeDetails</span> changeDetails = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        changeDetails.kind = <span class="built_in">NSKeyValueChangeSetting</span>;</span><br><span class="line">        changeDetails.oldValue = <span class="literal">nil</span>;</span><br><span class="line">        changeDetails.newValue = newValue;</span><br><span class="line">        changeDetails.indexes = <span class="literal">nil</span>;</span><br><span class="line">        changeDetails.extraData = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 函数1: 通知观察者, 传递结构体changeDetails</span></span><br><span class="line">        <span class="built_in">NSKeyValueNotifyObserver</span>(observer,keyPath, <span class="keyword">self</span>, context, <span class="literal">nil</span>, <span class="literal">NO</span>,changeDetails, &amp;changeDictionary);</span><br><span class="line">        </span><br><span class="line">        [changeDictionary release];</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        pthread_mutex_lock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">        <span class="comment">// 获取当前pthread</span></span><br><span class="line">        _NSKeyValueObserverRegistrationLockOwner = pthread_self();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数2: 获取oldObservationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *oldObservationInfo = _NSKeyValueRetainedObservationInfoForObject(<span class="keyword">self</span>,property.containerClass);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> cacheHit = <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *addedObservance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> originalObservable = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((options &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x01</span>) &#123;</span><br><span class="line">        <span class="comment">// _CFGetTSD: 获取线程信息</span></span><br><span class="line">        <span class="comment">// Get some thread specific data from a pre-assigned slot.</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservingTSD</span> *TSD = _CFGetTSD(<span class="built_in">NSKeyValueObservingTSDKey</span>);</span><br><span class="line">        <span class="keyword">if</span> (TSD) &#123;</span><br><span class="line">            originalObservable = TSD-&gt;implicitObservanceAdditionInfo.originalObservable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数3: 获取newObservationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *newObservationInfo = _NSKeyValueObservationInfoCreateByAdding(oldObservationInfo, observer, property, options, context, originalObservable,&amp;cacheHit,&amp;addedObservance);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数4: 将self的observationInfo设置为newObservationInfo</span></span><br><span class="line">    _NSKeyValueReplaceObservationInfoForObject(<span class="keyword">self</span>,property.containerClass,oldObservationInfo,newObservationInfo);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// - (void)object:(id)object didAddObservance:(NSKeyValueObservance *)observance recurse:(BOOL)recurse &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 实际上这个方法啥事也没做</span></span><br><span class="line">    [property object:<span class="keyword">self</span> didAddObservance:addedObservance recurse:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心方法: 获取property中已经修改过的class</span></span><br><span class="line">    Class isaForAutonotifying = [property isaForAutonotifying];</span><br><span class="line">    <span class="keyword">if</span>(isaForAutonotifying) &#123;</span><br><span class="line">        Class cls = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">if</span>(cls != isaForAutonotifying) &#123;</span><br><span class="line">            <span class="comment">// 通过 object_setClass()修改isa指针, 设置自己的class为property的isaForAutonotifying</span></span><br><span class="line">            object_setClass(<span class="keyword">self</span>,isaForAutonotifying);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [newObservationInfo release];</span><br><span class="line">    [oldObservationInfo release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数1-设置changeDictionary并调用NSKVONotify-函数"><a href="#函数1-设置changeDictionary并调用NSKVONotify-函数" class="headerlink" title="函数1: 设置changeDictionary并调用NSKVONotify()函数"></a>函数1: 设置changeDictionary并调用NSKVONotify()函数</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="built_in">NSKeyValueNotifyObserver</span>(<span class="keyword">id</span> observer,<span class="built_in">NSString</span> * keyPath, <span class="keyword">id</span> object, <span class="keyword">void</span> *context, <span class="keyword">id</span> originalObservable, <span class="built_in">BOOL</span> isPriorNotification, <span class="built_in">NSKeyValueChangeDetails</span> changeDetails, <span class="built_in">NSKeyValueChangeDictionary</span> **changeDictionary) &#123;</span><br><span class="line">    <span class="keyword">if</span>(*changeDictionary) &#123;</span><br><span class="line">        [*changeDictionary setDetailsNoCopy:changeDetails originalObservable:originalObservable];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *changeDictionary =  [[<span class="built_in">NSKeyValueChangeDictionary</span> alloc] initWithDetailsNoCopy:changeDetails originalObservable:originalObservable isPriorNotification:isPriorNotification];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSUInteger</span> retainCountBefore = [*changeDictionary retainCount];</span><br><span class="line">    <span class="built_in">NSKVONotify</span>(observer, keyPath, object, *changeDictionary, context);</span><br><span class="line">    <span class="keyword">if</span>(retainCountBefore != (<span class="built_in">NSUInteger</span>)INTMAX_MAX &amp;&amp; retainCountBefore != [*changeDictionary retainCount]) &#123;</span><br><span class="line">        [*changeDictionary retainObjects];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKVONotify()函数就是调用observeValueForKeyPath方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">NSKVONotify</span>(<span class="keyword">id</span> observer, <span class="built_in">NSString</span> *keyPath, <span class="keyword">id</span> object, <span class="built_in">NSDictionary</span> *changeDictionary, <span class="keyword">void</span> *context) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservingAssertRegistrationLockNotHeld</span>();</span><br><span class="line">    [observer observeValueForKeyPath:keyPath ofObject:object change:changeDictionary context:context];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数2-获取object的observationInfo对象"><a href="#函数2-获取object的observationInfo对象" class="headerlink" title="函数2: 获取object的observationInfo对象"></a>函数2: 获取object的observationInfo对象</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueRetainedObservationInfoForObject(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueContainerClass</span> *containerClass) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *observationInfo = <span class="literal">nil</span>;</span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    <span class="keyword">if</span> (containerClass) &#123;</span><br><span class="line">        <span class="comment">// 调用containerClass的cachedObservationInfoImplementation实现</span></span><br><span class="line">        observationInfo = ((<span class="built_in">NSKeyValueObservationInfo</span> * (*)(<span class="keyword">id</span>,SEL))containerClass.cachedObservationInfoImplementation)(object, <span class="keyword">@selector</span>(observationInfo));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接获取object的d_observationInfo对象</span></span><br><span class="line">        observationInfo = (<span class="built_in">NSKeyValueObservationInfo</span> *)[object d_observationInfo];</span><br><span class="line">    &#125;</span><br><span class="line">    [observationInfo <span class="keyword">retain</span>];</span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    <span class="keyword">return</span>  observationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数3-获取’添加观察者’时所需要的NSKeyValueObservationInfo"><a href="#函数3-获取’添加观察者’时所需要的NSKeyValueObservationInfo" class="headerlink" title="函数3: 获取’添加观察者’时所需要的NSKeyValueObservationInfo"></a>函数3: 获取’添加观察者’时所需要的NSKeyValueObservationInfo</h4><p>如果<code>baseObservationInfo</code>存在，则一顿封装操作后，会把封装完毕的<code>NSKeyValueObservance</code>“追加”到<code>baseObservationInfo</code>的<code>observances</code>数组中。如果<code>baseObservationInfo</code>不存在，则一顿封装操作后，会把封装完毕的<code>NSKeyValueObservance</code>放到新创建的<code>NSKeyValueObservationInfo</code>对象的<code>observances</code>数组中。最后，<code>cacheHit</code>告诉调用者是否有命中缓存，<code>*addedObservance</code>指向了<code>observance</code>对象。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueObservationInfoCreateByAdding(<span class="built_in">NSKeyValueObservationInfo</span> *baseObservationInfo, <span class="keyword">id</span> observer, <span class="built_in">NSKeyValueProperty</span> *property, <span class="keyword">int</span> options, <span class="keyword">void</span> *context, <span class="keyword">id</span> originalObservable,  <span class="built_in">BOOL</span> *cacheHit, <span class="built_in">NSKeyValueObservance</span> **addedObservance) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *createdObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用弱引用表NSKeyValueShareableObservationInfos缓存观察者对象</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">        <span class="comment">// 自定义NSPointerFunctions</span></span><br><span class="line">        <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">        <span class="comment">// 设置hash函数</span></span><br><span class="line">        [pointerFunctions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">        <span class="comment">// 设置判等函数</span></span><br><span class="line">        [pointerFunctions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">        <span class="comment">// 创建NSHashTable</span></span><br><span class="line">        <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span>) &#123;</span><br><span class="line">        <span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span> = [<span class="built_in">NSKeyValueShareableObservationInfoKey</span> <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过这个公共key到缓存表NSKeyValueShareableObservationInfos中查找</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservationInfoKey</span> * shareableObservationInfoKey;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!shareableObservationInfoKey) &#123;</span><br><span class="line">        <span class="comment">// 第一次使用, 为空时创建</span></span><br><span class="line">        shareableObservationInfoKey = [[<span class="built_in">NSKeyValueShareableObservationInfoKey</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置key的信息</span></span><br><span class="line">    shareableObservationInfoKey.addingNotRemoving = <span class="literal">YES</span>;</span><br><span class="line">    shareableObservationInfoKey.baseObservationInfo = baseObservationInfo;</span><br><span class="line">    shareableObservationInfoKey.additionObserver = observer;</span><br><span class="line">    shareableObservationInfoKey.additionProperty = property;</span><br><span class="line">    shareableObservationInfoKey.additionOptions = options;</span><br><span class="line">    shareableObservationInfoKey.additionContext = context;</span><br><span class="line">    shareableObservationInfoKey.additionOriginalObservable = originalObservable;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据shareableObservationInfoKey的已有信息进行查找</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> * existsObservationInfo = [<span class="built_in">NSKeyValueShareableObservationInfos</span> member:shareableObservationInfoKey];</span><br><span class="line">    <span class="comment">// 清空shareableObservationInfoKey的废弃信息(主要是减少对observer的引用计数)</span></span><br><span class="line">    shareableObservationInfoKey.additionOriginalObservable = <span class="literal">nil</span>;</span><br><span class="line">    shareableObservationInfoKey.additionObserver = <span class="literal">nil</span>;</span><br><span class="line">    shareableObservationInfoKey.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!existsObservationInfo) &#123; <span class="comment">// 缓存中不存在</span></span><br><span class="line">        <span class="comment">// (一般是第一次使用时)NSHashTable为空, 创建</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservances</span>) &#123;</span><br><span class="line">            <span class="built_in">NSKeyValueShareableObservances</span> = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过这个公共key到缓存表NSKeyValueShareableObservances中查找</span></span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservanceKey</span> *shareableObservanceKey;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!shareableObservanceKey) &#123; <span class="comment">// key不存在时创建</span></span><br><span class="line">            shareableObservanceKey = [[<span class="built_in">NSKeyValueShareableObservanceKey</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置key的信息</span></span><br><span class="line">        shareableObservanceKey.observer = observer;</span><br><span class="line">        shareableObservanceKey.property = property;</span><br><span class="line">        shareableObservanceKey.options = options;</span><br><span class="line">        shareableObservanceKey.context = context;</span><br><span class="line">        shareableObservanceKey.originalObservable = originalObservable;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找Observance缓存</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *existsObservance = [<span class="built_in">NSKeyValueShareableObservances</span> member:shareableObservanceKey];</span><br><span class="line">        <span class="comment">// 清空shareableObservanceKey的废弃信息</span></span><br><span class="line">        shareableObservanceKey.originalObservable = <span class="literal">nil</span>;</span><br><span class="line">        shareableObservanceKey.observer = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *observance = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!existsObservance) &#123;</span><br><span class="line">            <span class="comment">// 没有找到, 则创建observance</span></span><br><span class="line">            observance = [[<span class="built_in">NSKeyValueObservance</span> alloc] _initWithObserver:observer property:property options:options context:context originalObservable:originalObservable];</span><br><span class="line">            <span class="keyword">if</span>(observance.cachedIsShareable) &#123;</span><br><span class="line">                <span class="comment">// 可以缓存, 放入NSKeyValueShareableObservances中</span></span><br><span class="line">                [<span class="built_in">NSKeyValueShareableObservances</span> addObject:observance];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到了, observance就指向existsObservance</span></span><br><span class="line">            observance = existsObservance;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (baseObservationInfo) &#123;</span><br><span class="line">            <span class="comment">// 复制baseObservationInfo并追加observance</span></span><br><span class="line">            createdObservationInfo = [baseObservationInfo _copyByAddingObservance:observance];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建新的ObservationInfo</span></span><br><span class="line">            createdObservationInfo = [[<span class="built_in">NSKeyValueObservationInfo</span> alloc] _initWithObservances:&amp;observance count:<span class="number">1</span> hashValue:<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (createdObservationInfo.cachedIsShareable)&#123;</span><br><span class="line">            <span class="comment">// 允许缓存, 添加到NSKeyValueShareableObservationInfos中</span></span><br><span class="line">            [<span class="built_in">NSKeyValueShareableObservationInfos</span> addObject:createdObservationInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有命中缓存</span></span><br><span class="line">        *cacheHit = <span class="literal">NO</span>;</span><br><span class="line">        <span class="comment">// 设置新添加的Observance</span></span><br><span class="line">        *addedObservance = observance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 缓存中存在</span></span><br><span class="line">        <span class="comment">// 设置命中缓存</span></span><br><span class="line">        *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">// observance必定就是已存在的info.observance列表最后一个, 因为判断equal就是按照这个原则去判断的</span></span><br><span class="line">        <span class="comment">// 判等函数: NSKeyValueShareableObservationInfoNSHTIsEqual()</span></span><br><span class="line">        *addedObservance = existsObservationInfo.observances.lastObject;</span><br><span class="line">        <span class="comment">// 设置createdObservationInfo</span></span><br><span class="line">        createdObservationInfo = existsObservationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">    <span class="keyword">return</span> createdObservationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="函数4-将object的observationInfo设置为newObservationInfo"><a href="#函数4-将object的observationInfo设置为newObservationInfo" class="headerlink" title="函数4:将object的observationInfo设置为newObservationInfo"></a>函数4:将object的observationInfo设置为newObservationInfo</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _NSKeyValueReplaceObservationInfoForObject(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueContainerClass</span> * containerClass, <span class="built_in">NSKeyValueObservationInfo</span> *oldObservationInfo, <span class="built_in">NSKeyValueObservationInfo</span> *newObservationInfo) &#123;</span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (newObservationInfo) [newObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不理解??????</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     typedef struct &#123;</span></span><br><span class="line"><span class="comment">         CFMutableArrayRef pendingArray;//0</span></span><br><span class="line"><span class="comment">         ObservationInfoWatcher *firstWatcher;//4</span></span><br><span class="line"><span class="comment">         ImplicitObservanceAdditionInfo  implicitObservanceAdditionInfo;</span></span><br><span class="line"><span class="comment">         ImplicitObservanceRemovalInfo implicitObservanceRemovalInfo;</span></span><br><span class="line"><span class="comment">     &#125; NSKeyValueObservingTSD;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservingTSD</span> *TSD = _CFGetTSD(<span class="built_in">NSKeyValueObservingTSDKey</span>);</span><br><span class="line">    <span class="keyword">if</span>(TSD) &#123;</span><br><span class="line">        ObservationInfoWatcher *next = TSD-&gt;firstWatcher;</span><br><span class="line">        <span class="keyword">while</span>(next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next-&gt;object == object) &#123;</span><br><span class="line">                [next-&gt;observationInfo release];</span><br><span class="line">                next-&gt;observationInfo = [newObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next = next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(containerClass) &#123;</span><br><span class="line">        <span class="comment">// 调用object的d_setObservationInfo:方法, 并传参数newObservationInfo</span></span><br><span class="line">        containerClass.cacheNSetObservationInfoImplementation(object, <span class="keyword">@selector</span>(d_setObservationInfo:), newObservationInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接设置新值</span></span><br><span class="line">        [object d_setObservationInfo: newObservationInfo];</span><br><span class="line">    &#125;</span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-缓存"><a href="#2-缓存" class="headerlink" title="2.缓存"></a>2.缓存</h2><p>缓存查找逻辑是一致的: 确定这些对象的<code>hash</code>和<code>isEqual:</code>方法，通过创建与目标对象判等属性一致的key去查找。</p><h3 id="2-1-NSKeyValueProperty的缓存"><a href="#2-1-NSKeyValueProperty的缓存" class="headerlink" title="2.1.NSKeyValueProperty的缓存"></a>2.1.NSKeyValueProperty的缓存</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueProperties</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建集合NSKeyValueProperties</span></span><br><span class="line">    <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    callbacks.version =  kCFTypeSetCallBacks.version;</span><br><span class="line">    callbacks.retain =  kCFTypeSetCallBacks.retain;</span><br><span class="line">    callbacks.release =  kCFTypeSetCallBacks.release;</span><br><span class="line">    callbacks.copyDescription =  kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">    <span class="comment">// 设置CFSet集合中元素判等的依据</span></span><br><span class="line">    callbacks.equal =  (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValuePropertyIsEqual</span>;</span><br><span class="line">    <span class="comment">// 设置CFSet集合中元素的hash值获取函数</span></span><br><span class="line">    callbacks.hash =  (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValuePropertyHash</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueProperties</span> =  <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;callbacks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把property添加到NSKeyValueProperties集合中</span></span><br><span class="line"><span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueProperties</span>, property);</span><br></pre></td></tr></table></figure><p>CFSet集合中元素判等的依据</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> <span class="built_in">NSKeyValuePropertyIsEqual</span>(<span class="built_in">NSKeyValueProperty</span> *property1, <span class="built_in">NSKeyValueProperty</span> *property2) &#123;</span><br><span class="line">    <span class="keyword">return</span> (property1.containerClass == property2.containerClass) &amp;&amp;</span><br><span class="line">    (property1.keyPath == property2.keyPath || [property1.keyPath isEqual: property2.keyPath]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回NSKeyValueProperty的hash值</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">NSUInteger NSKeyValuePropertyHash(NSKeyValueProperty *<span class="keyword">property</span><span class="title"></span>) &#123;</span><br><span class="line">    return <span class="keyword">property</span>.<span class="title"></span>keyPath.hash ^ (NSUInteger)(void *)<span class="keyword">property</span>.<span class="title"></span>containerClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次证明了 <code>class</code>和<code>keyPath</code>决定了是否是同一个<code>NSKeyValueProperty</code>。</p><h3 id="2-2-NSKeyValueObservance的缓存"><a href="#2-2-NSKeyValueObservance的缓存" class="headerlink" title="2.2.NSKeyValueObservance的缓存"></a>2.2.NSKeyValueObservance的缓存</h3><p>缓存查找</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *<span class="built_in">NSKeyValueShareableObservances</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservances</span>) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueShareableObservances</span> = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observance查找key</span></span><br><span class="line"><span class="keyword">static</span> DNSKeyValueShareableObservanceKey *shareableObservanceKey;</span><br><span class="line"><span class="keyword">if</span>(!shareableObservanceKey) &#123;</span><br><span class="line">    shareableObservanceKey = [[DNSKeyValueShareableObservanceKey alloc] init];</span><br><span class="line">&#125;</span><br><span class="line">shareableObservanceKey.observer = observer;</span><br><span class="line">shareableObservanceKey.property = property;</span><br><span class="line">shareableObservanceKey.options = options;</span><br><span class="line">shareableObservanceKey.context = context;</span><br><span class="line">shareableObservanceKey.originalObservable = originalObservable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找缓存</span></span><br><span class="line"><span class="built_in">NSKeyValueObservance</span> *existsObservance = [<span class="built_in">NSKeyValueShareableObservances</span> member:shareableObservanceKey];</span><br><span class="line">shareableObservanceKey.originalObservable = <span class="literal">nil</span>;</span><br><span class="line">shareableObservanceKey.observer = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><p>重写<code>NSKeyValueObservance</code>的<code>hash</code>和<code>isEqual:</code>方法</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line">    <span class="keyword">return</span> _NSKVOPointersHash(<span class="number">5</span>, _observer, _property, (<span class="keyword">void</span> *)(<span class="built_in">NSUInteger</span>)(_options), _context, _originalObservable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (![object isKindOfClass: <span class="keyword">self</span>.class])  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *other = (<span class="built_in">NSKeyValueObservance</span> *)object;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> other.observer == <span class="keyword">self</span>.observer &amp;&amp;</span><br><span class="line">    other.options == <span class="keyword">self</span>.options &amp;&amp;</span><br><span class="line">    other.context == <span class="keyword">self</span>.context &amp;&amp;</span><br><span class="line">    other.originalObservable == <span class="keyword">self</span>.originalObservable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-NSKeyValueObservationInfo的缓存"><a href="#2-3-NSKeyValueObservationInfo的缓存" class="headerlink" title="2.3.NSKeyValueObservationInfo的缓存"></a>2.3.NSKeyValueObservationInfo的缓存</h3><p>缓存查找</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *<span class="built_in">NSKeyValueShareableObservationInfos</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observationInfo缓存</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">    <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">    [pointerFunctions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">    [pointerFunctions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">    <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-NSKeyValueObservationInfo的存储-observationInfo"><a href="#2-4-NSKeyValueObservationInfo的存储-observationInfo" class="headerlink" title="2.4.NSKeyValueObservationInfo的存储(observationInfo)"></a>2.4.NSKeyValueObservationInfo的存储(observationInfo)</h3><p>当封装成<code>NSKeyValueObservationInfo</code>时，<code>weak</code>的<code>NSHashTable</code>并不负责存储，那么，谁负责真正的存储呢?</p><p>Take or return a pointer that identifies information about all of the observers that are registered with the receiver, the options that were used at registration-time, etc. The default implementation of these methoNS store observation info in a global dictionary keyed by the receivers’ pointers. For improved performance, you can override these methoNS to store the opaque data pointer in an instance variable. Overrides of these methoNS must not attempt to send Objective-C messages to the passed-in observation info, including -retain and -release.</p><blockquote><p>这个方法的默认实现是以对象的指针作为key，从一个全局的字典中获取信息。</p></blockquote><p>如何获取对象的指针？这里有个定义：<br><code>OBSERVATION_INFO_KEY</code>的定义是: <code>#define OBSERVATION_INFO_KEY(object) ((void *)(~(NSUInteger)(object)))</code></p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFMutableDictionaryRef</span> <span class="built_in">NSKeyValueObservationInfoPerObject</span> = <span class="literal">NULL</span>;</span><br><span class="line">- (<span class="keyword">void</span> *)observationInfo &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSKeyValueObservationInfoPerObject</span> ? (<span class="keyword">void</span> *)<span class="built_in">CFDictionaryGetValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>)) : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObservationInfo:(<span class="keyword">void</span> *)info &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueObservationInfoPerObject</span>) &#123;</span><br><span class="line">        <span class="built_in">NSKeyValueObservationInfoPerObject</span> = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info) &#123;</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>), info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryRemoveValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>即这个方法的默认实现是以对象的指针作为key，从一个全局的字典中获取信息。由此，我们可以理解为，KVO的信息是存储在一个全局字典中，而不是存储在对象本身。<br>不过，为了提高效率，我们可以重写observationInfo属性的set和get方法，以将这个不透明的数据指针存储到一个实例变量中。但是，在重写时，我们不应该尝试去向这些数据发送一个Objective-C消息，包括retain和release。</p></blockquote><h2 id="3-新建与重写"><a href="#3-新建与重写" class="headerlink" title="3.新建与重写"></a>3.新建与重写</h2><p>在这一步骤中，动态创建了原来class的子类，当然，也重写和添加了许多方法。</p><h3 id="3-1动态创建子类的核心实现"><a href="#3-1动态创建子类的核心实现" class="headerlink" title="3.1动态创建子类的核心实现"></a>3.1动态创建子类的核心实现</h3><p>动态创建子类中，重写了<code>dealloc、class、_isKVOA</code>方法。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueNotifyingInfo</span> *_NSKVONotifyingCreateInfoWithOriginalClass(Class originalClass) &#123;</span><br><span class="line">    <span class="keyword">static</span> IMP <span class="built_in">NSObjectWillChange</span>;</span><br><span class="line">    <span class="keyword">static</span> IMP <span class="built_in">NSObjectDidChange</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造新的子类名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originalClassName = class_getName(originalClass);</span><br><span class="line">    size_t size = strlen(originalClassName) + <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">char</span> *newClassName = (<span class="keyword">char</span> *)malloc(size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// #define NOTIFY_CLASSNAME_PREFIX "NSKVONotifying_"</span></span><br><span class="line">    strlcpy(newClassName, NOTIFY_CLASSNAME_PREFIX, size);</span><br><span class="line">    strlcat(newClassName, originalClassName, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建子类</span></span><br><span class="line">    Class newSubClass = objc_allocateClassPair(originalClass, newClassName, <span class="keyword">sizeof</span>(<span class="built_in">NSKeyValueNotifyingInfo</span>));</span><br><span class="line">    objc_registerClassPair(newSubClass);</span><br><span class="line">    </span><br><span class="line">    free(newClassName);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *ivars = object_getIndexedIvars(newSubClass);</span><br><span class="line">    <span class="comment">// 创建NSKeyValueNotifyingInfo对象, 封装子类\原始类等信息</span></span><br><span class="line">    <span class="built_in">NSKeyValueNotifyingInfo</span> *notifyingInfo = (<span class="built_in">NSKeyValueNotifyingInfo</span> *)ivars;</span><br><span class="line">    notifyingInfo-&gt;originalClass = originalClass;</span><br><span class="line">    notifyingInfo-&gt;newSubClass = newSubClass;</span><br><span class="line">    notifyingInfo-&gt;notifyingKeys = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;kCFCopyStringSetCallBacks);</span><br><span class="line">    notifyingInfo-&gt;selKeyMap = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">    </span><br><span class="line">    pthread_mutexattr_t mutexattr;</span><br><span class="line">    pthread_mutexattr_init(&amp;mutexattr);</span><br><span class="line">    pthread_mutexattr_settype(&amp;mutexattr, PTHREAD_MUTEX_RECURSIVE);</span><br><span class="line">    pthread_mutex_init(&amp;notifyingInfo-&gt;mutex, &amp;mutexattr);</span><br><span class="line">    pthread_mutexattr_destroy(&amp;mutexattr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取NSObject类的 willChangeValueForKey 和 didChangeValueForKey实现</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> <span class="built_in">NSObjectIMPLookupOnce</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;<span class="built_in">NSObjectIMPLookupOnce</span>, ^&#123;</span><br><span class="line">        <span class="built_in">NSObjectWillChange</span> = class_getMethodImplementation([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(d_willChangeValueForKey:));</span><br><span class="line">        <span class="built_in">NSObjectDidChange</span> = class_getMethodImplementation([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(d_didChangeValueForKey:));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断originalClass类是否重写了 willChangeValueForKey 或  didChangeValueForKey</span></span><br><span class="line">    <span class="comment">// 就是拿NSObject的实现与originalClass的实现做对比(函数指针IMP比较)</span></span><br><span class="line">    notifyingInfo-&gt;overrideWillOrDidChange = class_getMethodImplementation(notifyingInfo-&gt;originalClass, <span class="keyword">@selector</span>(d_willChangeValueForKey:)) != <span class="built_in">NSObjectWillChange</span> || class_getMethodImplementation(notifyingInfo-&gt;originalClass, <span class="keyword">@selector</span>(d_didChangeValueForKey:)) != <span class="built_in">NSObjectDidChange</span>;</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 _isKVOA方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, ISKVOA_SELECTOR, (IMP)<span class="built_in">NSKVOIsAutonotifying</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 dealloc方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, <span class="keyword">@selector</span>(dealloc), (IMP)<span class="built_in">NSKVODeallocate</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 class方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, <span class="keyword">@selector</span>(<span class="keyword">class</span>), (IMP)<span class="built_in">NSKVOClass</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> notifyingInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加-isKVOA方法"><a href="#添加-isKVOA方法" class="headerlink" title="添加_isKVOA方法"></a>添加_isKVOA方法</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> <span class="built_in">NSKVOIsAutonotifying</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写class方法"><a href="#重写class方法" class="headerlink" title="重写class方法"></a>重写class方法</h4><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">NSKVOClass</span>(<span class="title">id</span> <span class="title">object</span>, <span class="title">SEL</span> <span class="title">selector</span>) &#123;</span></span><br><span class="line">    // 新的<span class="class"><span class="keyword">class</span>: <span class="title">NSKVONotifying_XXXX</span></span></span><br><span class="line">    <span class="class"><span class="keyword">Class</span> <span class="title">currentClass</span> = <span class="title">object_getClass</span>(<span class="title">object</span>);</span></span><br><span class="line">    // 原先的<span class="class"><span class="keyword">class</span>: <span class="title">XXXX</span></span></span><br><span class="line">    <span class="class"><span class="keyword">Class</span> <span class="title">originalClass</span> =  <span class="title">_NSKVONotifyingOriginalClassForIsa</span>(<span class="title">currentClass</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (currentClass == originalClass) &#123;</span><br><span class="line">        // 相同, 返回object的currentClass</span><br><span class="line">        <span class="function"><span class="keyword">Method</span> <span class="title">m</span> =</span> class_getInstanceMethod(currentClass, selector);</span><br><span class="line">        <span class="keyword">return</span> ((<span class="class"><span class="keyword">Class</span> (*)(<span class="title">id</span>,<span class="title">Method</span>))<span class="title">method_invoke</span>)(<span class="title">object</span>, <span class="title">m</span>);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 不同, 返回originalClass</span><br><span class="line">        <span class="keyword">return</span> [originalClass <span class="class"><span class="keyword">class</span>];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写dealloc方法"><a href="#重写dealloc方法" class="headerlink" title="重写dealloc方法"></a>重写dealloc方法</h4><p>获取<code>object</code>对应的<code>observationInfo</code>(对象)并把它放到结构体中，在调用完<code>object</code>原先的<code>dealloc</code>方法之后判断<code>observationInfo</code>是否还存在，若存在说明<code>observer</code>没有在<code>dealloc</code>之前被移除掉，进而抛出异常。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="built_in">NSKVODeallocate</span>(<span class="keyword">id</span> object, SEL selector) &#123;</span><br><span class="line">    <span class="comment">// 获取object对应的observationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *observationInfo = _NSKeyValueRetainedObservationInfoForObject(object, <span class="literal">nil</span>);</span><br><span class="line">    ObservationInfoWatcher watcher = &#123;object, observationInfo, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    _NSKeyValueAddObservationInfoWatcher(&amp;watcher);</span><br><span class="line">    <span class="comment">// 获取notifyInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueNotifyingInfo</span> *notifyInfo = (<span class="built_in">NSKeyValueNotifyingInfo</span> *)object_getIndexedIvars(object_getClass(object));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用object原来的dealloc实现</span></span><br><span class="line">    Method originDellocMethod = class_getInstanceMethod(notifyInfo-&gt;originalClass, selector);</span><br><span class="line">    ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>,Method))method_invoke)(object, originDellocMethod);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(watcher.observationInfo) &#123;</span><br><span class="line">            <span class="comment">// observationInfo不存在才对, 如果还存在, 说明没有正确地移除observer</span></span><br><span class="line">            <span class="built_in">BOOL</span> keyExistsAndHasValidFormat = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">BOOL</span> cleansUpBeforeThrowing = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            cleansUpBeforeThrowing = (<span class="built_in">BOOL</span>)<span class="built_in">CFPreferencesGetAppBooleanValue</span>(<span class="built_in">CFSTR</span>(<span class="string">"NSKVODeallocateCleansUpBeforeThrowing"</span>), kCFPreferencesCurrentApplication, (Boolean *)&amp;keyExistsAndHasValidFormat);</span><br><span class="line">            <span class="comment">// key存在且key对应的value为YES</span></span><br><span class="line">            cleansUpBeforeThrowing = cleansUpBeforeThrowing &amp;&amp; keyExistsAndHasValidFormat;</span><br><span class="line">            <span class="comment">// dyld_get_program_sdk_version返回系统版本</span></span><br><span class="line">            <span class="keyword">if</span> (dyld_get_program_sdk_version() &gt; <span class="number">0x7FFFF</span> || cleansUpBeforeThrowing) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cleansUpBeforeThrowing) &#123;</span><br><span class="line">                    _NSKeyValueRemoveObservationInfoForObject(object, watcher.observationInfo);</span><br><span class="line">                &#125;</span><br><span class="line">                [<span class="built_in">NSException</span> raise:<span class="built_in">NSInternalInconsistencyException</span> format:<span class="string">@"An instance %p of class %@ was deallocated while key value observers were still registered with it. Current observation info: %@"</span>, object, notifyInfo-&gt;originalClass, watcher.observationInfo];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSKVODeallocateBreak</span>(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        [exception raise];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@finally</span> &#123;</span><br><span class="line">        <span class="comment">// 移除watcher</span></span><br><span class="line">        _NSKeyValueRemoveObservationInfoWatcher(&amp;watcher);</span><br><span class="line">        </span><br><span class="line">        [watcher.observationInfo release];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-回调通知"><a href="#4-回调通知" class="headerlink" title="4.回调通知"></a>4.回调通知</h2><p>上文分析，<code>NSKeyValueNotifyObserver()</code>就是回调的函数，通过它调用<code>observeValueForKeyPath:ofObject:change:context:</code>方法。这里还剩下最后一个问题，回调是怎么处理的?</p><p>在<code>NSKVONotifyingEnableForInfoAndKey()</code>函数中重写setter方法，之后在<code>NSSetPrimitiveValueAndNotify()</code>函数中先调用<code>willChangeValueForKey</code>，再调用原先的setter方法，再调用<code>didChangeValueForKey</code>。</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">static inline void NSSetPrimitiveValueAndNotify(id object,SEL selector, void (^setValueWithImplementation)(IMP imp)) &#123;</span><br><span class="line">    NSKeyValueNotifyingInfo *info = object_getIndexedIvars(object_getClass(object));</span><br><span class="line">    <span class="function"><span class="title">pthread_mutex_lock</span>(&amp;info-&gt;</span>mutex);</span><br><span class="line">    NSS<span class="function"><span class="title">tring</span> *key = CFDictionaryGetValue(info-&gt;</span>selKeyMap, selector);</span><br><span class="line">    key = [key copyWithZone:<span class="literal">nil</span>];</span><br><span class="line">    <span class="function"><span class="title">pthread_mutex_unlock</span>(&amp;info-&gt;</span>mutex);</span><br><span class="line">    <span class="function"><span class="title">if</span> (info-&gt;</span>overrideWillOrDidChange) &#123;</span><br><span class="line">        [object willChangeValueForKey:key];</span><br><span class="line">        IMP <span class="function"><span class="title">imp</span> = class_getMethodImplementation(info-&gt;</span>originalClass, selector);</span><br><span class="line">        setValueWithImplementation(imp);</span><br><span class="line">        [object didChangeValueForKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [object changeValueForKey:key key:<span class="literal">nil</span> key:<span class="literal">nil</span> usingBlock:^&#123;</span><br><span class="line">            IMP <span class="function"><span class="title">imp</span> = class_getMethodImplementation(info-&gt;</span>originalClass, selector);</span><br><span class="line">            setValueWithImplementation(imp);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    [key release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这里的<code>didChangeValueForKey</code>也被重写实现了，它会调用真正的回调<code>observeValueForKeyPath:ofObject:change:context:</code>方法。</p><h1 id="五、移除观察者"><a href="#五、移除观察者" class="headerlink" title="五、移除观察者"></a>五、移除观察者</h1><p>找到NSKeyValueObservance移除即可。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueObservationInfoCreateByRemoving(<span class="built_in">NSKeyValueObservationInfo</span> *baseObservationInfo, <span class="keyword">id</span> observer, <span class="built_in">NSKeyValueProperty</span> *property, <span class="keyword">void</span> *context, <span class="built_in">BOOL</span> shouldCompareContext,  <span class="keyword">id</span> originalObservable,  <span class="built_in">BOOL</span> *cacheHit, <span class="built_in">NSKeyValueObservance</span> **removalObservance) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *createdObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前已经存在的observance的数量</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> observanceCount = <span class="built_in">CFArrayGetCount</span>((<span class="built_in">CFArrayRef</span>)baseObservationInfo.observances);</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *observancesBuff[observanceCount];</span><br><span class="line">    <span class="built_in">CFArrayGetValues</span>((<span class="built_in">CFArrayRef</span>)baseObservationInfo.observances, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, observanceCount), (<span class="keyword">const</span> <span class="keyword">void</span> **)observancesBuff);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSUInteger</span> removalObservanceIndex = <span class="built_in">NSNotFound</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = observanceCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">// 逐个遍历observancesBuff数组中的元素</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *observance = observancesBuff[i];</span><br><span class="line">        <span class="comment">// property和observer一致</span></span><br><span class="line">        <span class="keyword">if</span> (observance.property == property &amp;&amp; observance.observer == observer) &#123;</span><br><span class="line">            <span class="comment">// 不需要比较context或者context一致</span></span><br><span class="line">            <span class="keyword">if</span> (!shouldCompareContext || observance.context == context) &#123;</span><br><span class="line">                <span class="comment">// originalObservable一致</span></span><br><span class="line">                <span class="keyword">if</span> (!originalObservable || observance.originalObservable == originalObservable) &#123;</span><br><span class="line">                    <span class="comment">// 需要移除的observance</span></span><br><span class="line">                    *removalObservance = observance;</span><br><span class="line">                    <span class="comment">// 确定了将要移除的observance的索引</span></span><br><span class="line">                    removalObservanceIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 已经找到需要移除的observance</span></span><br><span class="line">    <span class="keyword">if</span> (*removalObservance) &#123;</span><br><span class="line">        <span class="comment">// 原先observance的数量大于1个</span></span><br><span class="line">        <span class="keyword">if</span> (observanceCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">            <span class="comment">// NSKeyValueShareableObservationInfos缓存不存在, 创建</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">                <span class="built_in">NSPointerFunctions</span> *functions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">                [functions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">                [functions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:functions capacity:<span class="number">0</span>];</span><br><span class="line">                </span><br><span class="line">                [functions release];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span>) &#123;</span><br><span class="line">                <span class="comment">// 就是NSKeyValueShareableObservationInfoKey.class</span></span><br><span class="line">                <span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span> = <span class="built_in">NSKeyValueShareableObservationInfoKey</span>.self;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservationInfoKey</span> * shareableObservationInfoKey = <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">// 构建查找缓存的Key</span></span><br><span class="line">            <span class="keyword">if</span> (!shareableObservationInfoKey) &#123;</span><br><span class="line">                shareableObservationInfoKey = [[<span class="built_in">NSKeyValueShareableObservationInfoKey</span> alloc] init];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            shareableObservationInfoKey.addingNotRemoving = <span class="literal">NO</span>;</span><br><span class="line">            shareableObservationInfoKey.baseObservationInfo = baseObservationInfo;</span><br><span class="line">            shareableObservationInfoKey.removalObservance = *removalObservance;</span><br><span class="line">            shareableObservationInfoKey.removalObservanceIndex = removalObservanceIndex;</span><br><span class="line">            shareableObservationInfoKey.cachedHash = <span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>(shareableObservationInfoKey, <span class="literal">NULL</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 尝试在缓存中查找NSKeyValueObservationInfo</span></span><br><span class="line">            <span class="built_in">NSKeyValueObservationInfo</span> *existsObservationInfo = [<span class="built_in">NSKeyValueShareableObservationInfos</span> member:shareableObservationInfoKey];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重置key的数据</span></span><br><span class="line">            shareableObservationInfoKey.removalObservance = <span class="literal">nil</span>;</span><br><span class="line">            shareableObservationInfoKey.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSUInteger</span> cachedHash = shareableObservationInfoKey.cachedHash;</span><br><span class="line">            </span><br><span class="line">            shareableObservationInfoKey.cachedHash = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!existsObservationInfo) &#123;</span><br><span class="line">                <span class="comment">// 在缓存中没有找到, 移除removalObservanceIndex对应的元素</span></span><br><span class="line">                memmove(observancesBuff + removalObservanceIndex, observancesBuff + removalObservanceIndex + <span class="number">1</span>, (observanceCount - (removalObservanceIndex + <span class="number">1</span>)) * <span class="keyword">sizeof</span>(<span class="built_in">NSKeyValueObservance</span> *));</span><br><span class="line">                <span class="comment">// 重新创建ObservationInfo, 数量为observanceCount - 1</span></span><br><span class="line">                createdObservationInfo = [[<span class="built_in">NSKeyValueObservationInfo</span> alloc] _initWithObservances:observancesBuff count:observanceCount - <span class="number">1</span> hashValue:cachedHash];</span><br><span class="line">                <span class="keyword">if</span> (createdObservationInfo.cachedIsShareable) &#123;</span><br><span class="line">                    <span class="comment">// 缓存ObservationInfo</span></span><br><span class="line">                    [<span class="built_in">NSKeyValueShareableObservationInfos</span> addObject:createdObservationInfo];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 没有命中缓存</span></span><br><span class="line">                *cacheHit = <span class="literal">NO</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 命中缓存</span></span><br><span class="line">                *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">                <span class="comment">// 直接赋值existsObservationInfo</span></span><br><span class="line">                createdObservationInfo = [existsObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> createdObservationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 原先只有一个observance, 命中缓存</span></span><br><span class="line">            *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有找到需要移除的observance, 返回nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h1><p>这里学到一个技巧：如何确认<code>NSUserDefaults</code>中某个key是否存在?</p><p>比如</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BOOL result</span> = [NSUserDefaults.standardUserDefaults boolForKey:@<span class="string">"key"</span>];</span><br></pre></td></tr></table></figure><p>当result为NO时，怎么判断是存储键<code>@&quot;key&quot;</code>对应的value是NO，还是说压根就没有存过这个key呢?可以使用<code>CFPreferencesGetAppBooleanValue()</code>函数。<br>KVO中有这么一段代码:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> keyExistsAndHasValidFormat = <span class="literal">false</span>; <span class="comment">// key是否存在</span></span><br><span class="line"><span class="built_in">BOOL</span> cleansUpBeforeThrowing = <span class="literal">false</span>; <span class="comment">// 存储的值为YES或者NO</span></span><br><span class="line"></span><br><span class="line">cleansUpBeforeThrowing = (<span class="built_in">BOOL</span>)<span class="built_in">CFPreferencesGetAppBooleanValue</span>(<span class="built_in">CFSTR</span>(<span class="string">"key"</span>), kCFPreferencesCurrentApplication, (Boolean *)&amp;keyExistsAndHasValidFormat);</span><br><span class="line"><span class="comment">// 能判断出key存在</span></span><br><span class="line">cleansUpBeforeThrowing = cleansUpBeforeThrowing &amp;&amp; keyExistsAndHasValidFormat;</span><br></pre></td></tr></table></figure><h1 id="七、手动实现KVO"><a href="#七、手动实现KVO" class="headerlink" title="七、手动实现KVO"></a>七、手动实现KVO</h1><p>有很多同学尝试自己实现了KVO，有按照原生接口的，也有自我发挥直接传递block的。由于之前我已经读过一些开源的代码，见<a href="https://blog.chenyalun.com/2019/01/12/「KVOController」的封装/">《「KVOController」的封装》</a>，作者就是使用了block很好地封装了KVO的回调。所以，这里还是试着按照原生接口实现一下。</p><p>由于对源码理解地不是十分透彻，再加上能力有限，在尝试实现过程中遇到不少问题，幸好都解决了。<br>比如：</p><ol><li>如何更好地重写<code>hash</code>方法？</li><li>一个包含n个完全相同元素的数组，如果做到只移除一个元素？</li></ol><p>当然，代码肯定有不少问题的，而且仅仅实现一点核心功能，姑且当做玩具看看吧。</p><h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> NSObject(YAKVO)</span><br><span class="line"><span class="meta">@property</span> <span class="keyword">void</span> *ya_observationInfo;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_willChangeValueForKey:</span>(NSString *)key;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_didChangeValueForKey:</span>(NSString *)key;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_addObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_removeObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_observeValueForKeyPath:</span>(NSString *)keyPath <span class="string">ofObject:</span>(id)object <span class="string">change:</span>(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#define ClassPrefixCStr <span class="meta-string">"YAKVONotifying_"</span> // 新类的前缀</span></span><br><span class="line"><span class="meta">#define ClassPrefix     @ ClassPrefixCStr</span></span><br><span class="line"><span class="meta">#define OBSERVATION_INFO_KEY(object) ((void *)(~(NSUInteger)(object)))</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableDictionary</span> *YAKeyValueChangeDictionary = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 一些私有方法和属性</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">YAKVOPrivate</span>)</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">YAKVOPrivate</span>)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)ya_isKVOClass &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_changeValueForKey:(<span class="built_in">NSString</span> *)key usingBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [<span class="keyword">self</span> ya_willChangeValueForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (block) block();</span><br><span class="line">    [<span class="keyword">self</span> ya_didChangeValueForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装keyPath和originalClass</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueProperty</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) Class isaForAutonotifying;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *keyPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) Class originalClass;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithOriginalClass:(Class)originalClass keyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueProperty</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithOriginalClass:(Class)originalClass</span><br><span class="line">                              keyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _originalClass = originalClass;</span><br><span class="line">        _keyPath = keyPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)isaForAutonotifying &#123;</span><br><span class="line">    <span class="comment">// 构造新的子类名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originalClassName = class_getName(_originalClass);</span><br><span class="line">    size_t size = strlen(originalClassName) + <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">char</span> *newClassName = (<span class="keyword">char</span> *)malloc(size);</span><br><span class="line">    </span><br><span class="line">    strlcpy(newClassName, ClassPrefixCStr, size);</span><br><span class="line">    strlcat(newClassName, originalClassName, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建子类</span></span><br><span class="line">    Class newSubClass = objc_allocateClassPair(_originalClass, newClassName, <span class="number">0</span>);</span><br><span class="line">    objc_registerClassPair(newSubClass);</span><br><span class="line">    free(newClassName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter方法替换</span></span><br><span class="line">    <span class="built_in">NSString</span> *uppercase= [[_keyPath substringToIndex:<span class="number">1</span>] uppercaseString];</span><br><span class="line">    <span class="built_in">NSString</span> *last = [_keyPath substringFromIndex:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *<span class="keyword">setter</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@%@:"</span>, uppercase, last];</span><br><span class="line">    SEL sel = <span class="built_in">NSSelectorFromString</span>(<span class="keyword">setter</span>);</span><br><span class="line">    Method method = class_getInstanceMethod(newSubClass, sel);</span><br><span class="line">    <span class="keyword">if</span> (method) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *typeEncoding = method_getTypeEncoding(method);</span><br><span class="line">        class_replaceMethod(newSubClass, sel, (IMP)YASetValueAndNotifyForKey, typeEncoding);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"缺少参数"</span> reason:<span class="string">@"没有实现Setter方法"</span> userInfo:<span class="literal">nil</span>] raise];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// class方法替换、ya_isKVOClass方法替换</span></span><br><span class="line">    YAKVONotifyingSetMethodImplementation(newSubClass, <span class="keyword">@selector</span>(ya_isKVOClass), (IMP)YAKVOIsAutonotifying);</span><br><span class="line">    YAKVONotifyingSetMethodImplementation(newSubClass, <span class="keyword">@selector</span>(<span class="keyword">class</span>), (IMP)YAKVOClass);</span><br><span class="line">    <span class="keyword">return</span> newSubClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的ya_isKVOClass方法</span></span><br><span class="line"><span class="built_in">BOOL</span> YAKVOIsAutonotifying(<span class="keyword">id</span> object, SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的class方法</span></span><br><span class="line">Class YAKVOClass(<span class="keyword">id</span> object, SEL sel) &#123;</span><br><span class="line">    <span class="comment">// 新的class: NSKVONotifying_XXXX</span></span><br><span class="line">    Class currentClass = object_getClass(object);</span><br><span class="line">    <span class="keyword">if</span> ([object ya_isKVOClass]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *clsStr = [<span class="built_in">NSStringFromClass</span>(currentClass) stringByReplacingOccurrencesOfString:ClassPrefix withString:<span class="string">@""</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">NSClassFromString</span>(clsStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的setter方法</span></span><br><span class="line"><span class="keyword">void</span> YASetValueAndNotifyForKey(<span class="keyword">id</span> obj, SEL sel, <span class="keyword">id</span> value, IMP imp) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = [[<span class="built_in">NSStringFromSelector</span>(sel) substringFromIndex:<span class="number">3</span>] lowercaseString];</span><br><span class="line">    key = [key substringToIndex:key.length - <span class="number">1</span>];</span><br><span class="line">    [obj ya_changeValueForKey:key usingBlock:^&#123;</span><br><span class="line">        Class cls = [obj <span class="keyword">class</span>];</span><br><span class="line">        <span class="comment">// 调用父类的setter方法</span></span><br><span class="line">        IMP superImp = class_getMethodImplementation(cls, sel);</span><br><span class="line">        ((<span class="keyword">void</span> (*)(<span class="keyword">id</span> ,SEL , <span class="keyword">id</span>))superImp)(obj, sel, value);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对某个class添加实例方法</span></span><br><span class="line"><span class="keyword">void</span> YAKVONotifyingSetMethodImplementation(Class cls, SEL sel, IMP imp) &#123;</span><br><span class="line">    Method originMethod = class_getInstanceMethod(cls, sel);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *encoding = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (originMethod) &#123;</span><br><span class="line">        encoding = method_getTypeEncoding(originMethod);</span><br><span class="line">        class_addMethod(cls, sel, imp, encoding);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装property、observer、context、options</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservance</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) YAKeyValueProperty *property;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> observer;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">void</span> *context;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> options;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">id</span>)observer property:(YAKeyValueProperty *)property options:(<span class="keyword">int</span>)options context:(<span class="keyword">void</span> *)context;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservance</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">id</span>)observer</span><br><span class="line">                        property:(YAKeyValueProperty *)property</span><br><span class="line">                         options:(<span class="keyword">int</span>)options</span><br><span class="line">                         context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observer = observer;</span><br><span class="line">        _property = property;</span><br><span class="line">        _options = options;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> observerContextHash = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-%p"</span>, _observer, _context] hash];</span><br><span class="line">    <span class="keyword">return</span> observerContextHash ^ _property.hash ^ _options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (![object isKindOfClass:object_getClass(<span class="keyword">self</span>)]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    YAKeyValueObservance *other = (YAKeyValueObservance *)object;</span><br><span class="line">    <span class="keyword">return</span> other.observer == <span class="keyword">self</span>.observer &amp;&amp;</span><br><span class="line">    other.options == <span class="keyword">self</span>.options &amp;&amp;</span><br><span class="line">    other.context == <span class="keyword">self</span>.context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装YAKeyValueObservance数组</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservationInfo</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observances;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObservances:(<span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *)observances</span><br><span class="line">                              count:(<span class="built_in">NSUInteger</span>)count;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservationInfo</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObservances:(<span class="built_in">NSArray</span>&lt;YAKeyValueObservance *&gt; *)observances</span><br><span class="line">                              count:(<span class="built_in">NSUInteger</span>)count &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observances = [[<span class="built_in">NSArray</span> alloc] initWithArray:observances];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 配置YAKeyValueObservationInfoKey，去查询匹配的YAKeyValueObservationInfo</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservationInfoKey</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) YAKeyValueObservationInfo *baseObservationInfo;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *additionObserver;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) YAKeyValueProperty *additionProperty;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> additionOptions;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">void</span>* additionContext;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservationInfoKey</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Private methods</span></span><br><span class="line"><span class="built_in">BOOL</span> YAKeyValuePropertyIsEqual(YAKeyValueProperty *property1, YAKeyValueProperty *property2) &#123;</span><br><span class="line">    <span class="keyword">return</span> (property1.originalClass == property2.originalClass) &amp;&amp;</span><br><span class="line">    (property1.keyPath == property2.keyPath || [property1.keyPath isEqual: property2.keyPath]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> YAKeyValuePropertyHash(YAKeyValueProperty *property) &#123;</span><br><span class="line">    <span class="keyword">return</span> property.keyPath.hash ^ (<span class="built_in">NSUInteger</span>)(__bridge <span class="keyword">void</span> *)property.originalClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取YAKeyValueProperty</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> YAKeyValueProperty *getKeyValueProperty(Class cls, <span class="built_in">NSString</span> *keyPath) &#123;</span><br><span class="line">    <span class="comment">// 缓存集合</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">CFMutableSetRef</span> YAKeyValueProperties;</span><br><span class="line">    <span class="keyword">if</span>(!YAKeyValueProperties) &#123;</span><br><span class="line">        <span class="comment">// 创建YAKeyValueProperties</span></span><br><span class="line">        <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        callbacks.version =  kCFTypeSetCallBacks.version;</span><br><span class="line">        callbacks.retain =  kCFTypeSetCallBacks.retain;</span><br><span class="line">        callbacks.release =  kCFTypeSetCallBacks.release;</span><br><span class="line">        callbacks.copyDescription =  kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">        callbacks.equal =  (<span class="built_in">CFSetEqualCallBack</span>)YAKeyValuePropertyIsEqual;</span><br><span class="line">        callbacks.hash =  (<span class="built_in">CFSetHashCallBack</span>)YAKeyValuePropertyHash;</span><br><span class="line">        YAKeyValueProperties = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueProperty *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) finder = [YAKeyValueProperty new];</span><br><span class="line">    finder.originalClass = cls;</span><br><span class="line">    finder.keyPath = keyPath;</span><br><span class="line">    YAKeyValueProperty *property = <span class="built_in">CFSetGetValue</span>(YAKeyValueProperties, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(finder));</span><br><span class="line">    <span class="keyword">if</span> (!property) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        property = [[YAKeyValueProperty alloc] initWithOriginalClass:cls keyPath:keyPath];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        <span class="built_in">CFSetAddValue</span>(YAKeyValueProperties, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(property));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取YAKeyValueObservance</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> YAKeyValueObservance *getKeyValueObservance(YAKeyValueProperty *property,</span><br><span class="line">                                                          <span class="keyword">id</span> observer,</span><br><span class="line">                                                          <span class="keyword">void</span> *context,</span><br><span class="line">                                                          <span class="keyword">int</span> options) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSHashTable</span> *YAKeyValueShareableObservances;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueShareableObservances) &#123;</span><br><span class="line">        YAKeyValueShareableObservances = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueObservance *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) finder = [YAKeyValueObservance new];</span><br><span class="line">    finder.property = property;</span><br><span class="line">    finder.context = context;</span><br><span class="line">    finder.observer = observer;</span><br><span class="line">    finder.options = options;</span><br><span class="line">    YAKeyValueObservance *observance = [YAKeyValueShareableObservances member:finder];</span><br><span class="line">    <span class="keyword">if</span> (!observance) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        observance = [[YAKeyValueObservance alloc] initWithObserver:observer property:property options:options context:context];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        [YAKeyValueShareableObservances addObject:observance];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> observance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> YAKeyValueObservationInfoNSHTHash(<span class="keyword">const</span> <span class="keyword">void</span> *item, <span class="built_in">NSUInteger</span> (*size)(<span class="keyword">const</span> <span class="keyword">void</span> *item)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">        YAKeyValueObservationInfoKey *key = (__bridge YAKeyValueObservationInfoKey *)item;</span><br><span class="line">        <span class="keyword">return</span> key.baseObservationInfo.observances.firstObject.hash;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        YAKeyValueObservationInfo *info = (__bridge YAKeyValueObservationInfo *)item;</span><br><span class="line">        <span class="keyword">return</span> info.observances.firstObject.hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> YAKeyValueObservationInfoNSHTIsEqual(<span class="keyword">const</span> <span class="keyword">void</span> *item1, <span class="keyword">const</span> <span class="keyword">void</span> *item2, <span class="built_in">NSUInteger</span> (* size)(<span class="keyword">const</span> <span class="keyword">void</span> * item)) &#123;</span><br><span class="line">    <span class="comment">// 这里仅仅写了YAKeyValueObservationInfoKey与YAKeyValueObservationInfo的比较</span></span><br><span class="line">    <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item1) == YAKeyValueObservationInfoKey.class || object_getClass((__bridge <span class="keyword">id</span>)item2) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">        YAKeyValueObservationInfo *info = <span class="literal">nil</span>;</span><br><span class="line">        YAKeyValueObservationInfoKey *key = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定哪一个是info, 哪一个是key</span></span><br><span class="line">        <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item1) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">            info = (__bridge YAKeyValueObservationInfo *)item2;</span><br><span class="line">            key = (__bridge YAKeyValueObservationInfoKey *)item1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info = (__bridge YAKeyValueObservationInfo *)item1;</span><br><span class="line">            key = (__bridge YAKeyValueObservationInfoKey *)item2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observancesInKey = key.baseObservationInfo.observances;</span><br><span class="line">        <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observancesInInfo = info.observances;</span><br><span class="line">        <span class="comment">// key中observance的数量</span></span><br><span class="line">        <span class="built_in">NSUInteger</span> countInkey = observancesInKey.count;</span><br><span class="line">        <span class="comment">// info中observance的数量</span></span><br><span class="line">        <span class="built_in">NSUInteger</span> countInInfo = observancesInInfo.count;</span><br><span class="line">        <span class="keyword">if</span> (countInkey != countInInfo) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; countInkey; i++) &#123;</span><br><span class="line">            <span class="comment">// 保证每个observance完全匹配</span></span><br><span class="line">            <span class="keyword">if</span> (observancesInKey[i] != observancesInInfo[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Public methods</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">YAKVO</span>)</span></span><br><span class="line"><span class="built_in">CFMutableDictionaryRef</span> YAKeyValueObservationInfoPerObject = <span class="literal">NULL</span>;</span><br><span class="line">- (<span class="keyword">void</span> *)ya_observationInfo &#123;</span><br><span class="line">    <span class="keyword">return</span> YAKeyValueObservationInfoPerObject ? (<span class="keyword">void</span> *)<span class="built_in">CFDictionaryGetValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>)) : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setYa_observationInfo:(<span class="keyword">void</span> *)info &#123;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueObservationInfoPerObject) &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryValueCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        callbacks.version = kCFTypeDictionaryKeyCallBacks.version;</span><br><span class="line">        callbacks.retain = kCFTypeDictionaryKeyCallBacks.retain;</span><br><span class="line">        callbacks.release = kCFTypeDictionaryKeyCallBacks.release;</span><br><span class="line">        callbacks.copyDescription = kCFTypeDictionaryKeyCallBacks.copyDescription;</span><br><span class="line">        YAKeyValueObservationInfoPerObject = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info) &#123;</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>), info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryRemoveValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_willChangeValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueChangeDictionary) &#123;</span><br><span class="line">        YAKeyValueChangeDictionary = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">id</span> oldValue = <span class="literal">nil</span>;</span><br><span class="line">    oldValue = [<span class="keyword">self</span> valueForKeyPath:key];</span><br><span class="line">    <span class="keyword">if</span> (!oldValue) oldValue = [<span class="built_in">NSNull</span> null];</span><br><span class="line">    [YAKeyValueChangeDictionary setObject:oldValue forKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_didChangeValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, key);</span><br><span class="line">        YAKeyValueObservationInfo *observation = <span class="keyword">self</span>.ya_observationInfo;</span><br><span class="line">        [observation.observances enumerateObjectsUsingBlock:^(YAKeyValueObservance *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj.property isEqual:property]) &#123;</span><br><span class="line">                <span class="built_in">NSMutableDictionary</span> *change = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">                <span class="keyword">if</span> (obj.options &amp; <span class="built_in">NSKeyValueObservingOptionOld</span>) &#123;</span><br><span class="line">                    <span class="keyword">id</span> old = [YAKeyValueChangeDictionary objectForKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                    [change setObject:old forKey:<span class="string">@"old"</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [YAKeyValueChangeDictionary removeObjectForKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (obj.options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">                    <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">                    newValue = [<span class="keyword">self</span> valueForKeyPath:key];</span><br><span class="line">                    <span class="keyword">if</span> (!newValue) newValue = [<span class="built_in">NSNull</span> null];</span><br><span class="line">                    [YAKeyValueChangeDictionary setObject:newValue forKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-new"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                    [change setObject:newValue forKey:<span class="string">@"new"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [obj.observer ya_observeValueForKeyPath:key ofObject:<span class="keyword">self</span> change:change context:<span class="literal">nil</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_addObserver:(<span class="built_in">NSObject</span> *)observer</span><br><span class="line">            forKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">               options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">               context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, keyPath);</span><br><span class="line">    YAKeyValueObservance *observance = getKeyValueObservance(property, observer, context, options);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSHashTable</span> *YAKeyValueShareableObservationInfos;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueShareableObservationInfos) &#123;</span><br><span class="line">        <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">        [pointerFunctions setHashFunction:YAKeyValueObservationInfoNSHTHash];</span><br><span class="line">        [pointerFunctions setIsEqualFunction:YAKeyValueObservationInfoNSHTIsEqual];</span><br><span class="line">        YAKeyValueShareableObservationInfos = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueObservationInfoKey *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) &#123;</span><br><span class="line">        finder = [YAKeyValueObservationInfoKey new];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueObservationInfo *info = (__bridge <span class="keyword">id</span>)[<span class="keyword">self</span> ya_observationInfo];</span><br><span class="line">    finder.baseObservationInfo = info;</span><br><span class="line">    finder.additionObserver = observer;</span><br><span class="line">    finder.additionContext = context;</span><br><span class="line">    finder.additionOptions = options;</span><br><span class="line">    finder.additionProperty = property;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueObservationInfo *observation = [YAKeyValueShareableObservationInfos member:finder];</span><br><span class="line">    <span class="comment">// 重置finder数据</span></span><br><span class="line">    finder.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    finder.additionObserver = <span class="literal">nil</span>;</span><br><span class="line">    finder.additionContext = <span class="literal">NULL</span>;</span><br><span class="line">    finder.additionOptions = <span class="number">0</span>;</span><br><span class="line">    finder.additionProperty = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!observation) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        observation = [[YAKeyValueObservationInfo alloc] initWithObservances:@[observance] count:<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        [YAKeyValueShareableObservationInfos addObject:observation];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *buffer = [<span class="built_in">NSMutableArray</span> arrayWithArray:observation.observances];</span><br><span class="line">        [buffer addObject:observance];</span><br><span class="line">        observation.observances = [<span class="built_in">NSArray</span> arrayWithArray:buffer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.ya_observationInfo = (__bridge <span class="keyword">void</span> *)(observation);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        Class isaForAutonotifying = [property isaForAutonotifying];</span><br><span class="line">        <span class="comment">// 更改isa指针</span></span><br><span class="line">        object_setClass(<span class="keyword">self</span>, isaForAutonotifying);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionInitial</span>) &#123;</span><br><span class="line">        <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">            newValue = [<span class="keyword">self</span> valueForKeyPath:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!newValue) newValue = [<span class="built_in">NSNull</span> null]; <span class="comment">// 使用NSNull对象</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *change = @&#123;<span class="string">@"new"</span>: newValue&#125;;</span><br><span class="line">        [observer ya_observeValueForKeyPath:keyPath ofObject:<span class="keyword">self</span> change:change context:context];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, keyPath);</span><br><span class="line">        YAKeyValueObservationInfo *observation = <span class="keyword">self</span>.ya_observationInfo;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *diff = [<span class="built_in">NSMutableArray</span> arrayWithArray:observation.observances];</span><br><span class="line">        __block <span class="built_in">NSInteger</span> removeIdx = <span class="number">-1</span>;</span><br><span class="line">        [diff enumerateObjectsUsingBlock:^(YAKeyValueObservance *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj.property isEqual:property] &amp;&amp; obj.observer == observer &amp;&amp; obj.context == context) &#123;</span><br><span class="line">                removeIdx = idx;</span><br><span class="line">                *stop = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">if</span> (removeIdx != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到需要移除的元素</span></span><br><span class="line">            [diff removeObjectAtIndex:removeIdx];</span><br><span class="line">            observation.observances = [<span class="built_in">NSArray</span> arrayWithArray:diff];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context&#123;&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="功能check"><a href="#功能check" class="headerlink" title="功能check"></a>功能check</h2><p>1.添加观察者与设置回调：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> [<span class="keyword">self</span>.obj ya_addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"name"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> | <span class="built_in">NSKeyValueObservingOptionOld</span> context:<span class="string">"NULL"</span>];</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)ya_observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.obj.name = <span class="string">@"Aaron"</span>;</span><br><span class="line"><span class="keyword">self</span>.obj.name = <span class="string">@"Jack"</span>;</span><br></pre></td></tr></table></figure><p>打印：</p><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">2019<span class="string">-05</span><span class="string">-30</span> 09:41:23.595046<span class="string">+0800</span> Aaron[24893:604622] &#123;</span><br><span class="line">    new = Aaron;</span><br><span class="line">    old = "&lt;null&gt;";</span><br><span class="line">&#125;</span><br><span class="line">2019<span class="string">-05</span><span class="string">-30</span> 09:41:23.595215<span class="string">+0800</span> Aaron[24893:604622] &#123;</span><br><span class="line">    new = Jack;</span><br><span class="line">    old = Aaron;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.使用NSKeyValueObservingOptionInitial</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionInitial <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">self.obj.name = @<span class="string">"Aaron"</span>;</span><br></pre></td></tr></table></figure><p>打印<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-05</span><span class="number">-30</span> <span class="number">09</span>:<span class="type">45</span>:<span class="number">01.717131</span>+<span class="number">0800</span> Aaron[<span class="number">25010</span>:<span class="type">609398</span>] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type"></span>= <span class="string">"&lt;null&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.多次添加观察者</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">self.obj.name = @<span class="string">"Aaron"</span>;</span><br></pre></td></tr></table></figure><p>打印</p><pre><code>2019-05-30 09:47:20.625826+0800 Aaron[25107:613531] {    new = Aaron;}2019-05-30 09:47:20.625992+0800 Aaron[25107:613531] {    new = Aaron;}2019-05-30 09:47:20.626128+0800 Aaron[25107:613531] {    new = Aaron;}</code></pre><p>具体的代码放到了github上：<a href="https://github.com/ChenYalun/Project/tree/master/KVO" target="_blank" rel="noopener">https://github.com/ChenYalun/Project/tree/master/KVO</a></p><p>KVO的源码来自：<a href="https://github.com/renjinkui2719/DIS_KVC_KVO" target="_blank" rel="noopener">https://github.com/renjinkui2719/DIS_KVC_KVO</a> 。感谢作者。</p><blockquote><p>参考文章<br><a href="http://southpeak.github.io/2015/04/23/cocoa-foundation-nskeyvalueobserving/" target="_blank" rel="noopener">http://southpeak.github.io/2015/04/23/cocoa-foundation-nskeyvalueobserving/</a><br><a href="https://tech.glowing.com/cn/implement-kvo/" target="_blank" rel="noopener">https://tech.glowing.com/cn/implement-kvo/</a><br><a href="https://knightsj.github.io/2017/05/15/使用Block实现KVO/" target="_blank" rel="noopener">https://knightsj.github.io/2017/05/15/使用Block实现KVO/</a><br><a href="https://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/" target="_blank" rel="noopener">https://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/</a><br><a href="http://chuquan.me/2018/12/12/kvo-principle/" target="_blank" rel="noopener">http://chuquan.me/2018/12/12/kvo-principle/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt; KVO源码阅读。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>详解Key-Value Coding源码</title>
    <link href="http://blog.chenyalun.com/2019/05/05/%E8%AF%A6%E8%A7%A3Key-Value%20Coding%E6%BA%90%E7%A0%81/"/>
    <id>http://blog.chenyalun.com/2019/05/05/详解Key-Value Coding源码/</id>
    <published>2019-05-05T12:12:24.000Z</published>
    <updated>2019-09-16T08:13:42.006Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> KVC源码阅读。 </p><br><a id="more"></a><p></p><h1 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line"><span class="comment">// 是否可以直接访问实例变量(实例变量访问开关, 默认YES)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> accessInstanceVariablesDirectly;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过key访问</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 尝试验证将要设定的value(ioValue指针指向的对象)是否合理有效</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)validateValue:(<span class="keyword">inout</span> <span class="keyword">id</span> _Nullable * _Nonnull)ioValue forKey:(<span class="built_in">NSString</span> *)inKey error:(<span class="keyword">out</span> <span class="built_in">NSError</span> **)outError;</span><br><span class="line"><span class="comment">// 获取相对应的精确容器类型</span></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)mutableArrayValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="built_in">NSMutableOrderedSet</span> *)mutableOrderedSetValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="built_in">NSMutableSet</span> *)mutableSetValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过keyPath访问</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">BOOL</span>)validateValue:(<span class="keyword">inout</span> <span class="keyword">id</span> _Nullable * _Nonnull)ioValue forKeyPath:(<span class="built_in">NSString</span> *)inKeyPath error:(<span class="keyword">out</span> <span class="built_in">NSError</span> **)outError;</span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)mutableArrayValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">NSMutableOrderedSet</span> *)mutableOrderedSetValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">NSMutableSet</span> *)mutableSetValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找key失败默认抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 设置value失败默认抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 设置value为nil时抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">void</span>)setNilValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 传入key数组, 返回一个成员变量名和变量值的键值对组成的字典(可用于模型转字典)</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)dictionaryWithValuesForKeys:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keys;</span><br><span class="line"><span class="comment">// 字典转模型</span></span><br><span class="line">- (<span class="keyword">void</span>)setValuesForKeysWithDictionary:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)keyedValues;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 容器扩展</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDictionary</span>&lt;<span class="title">KeyType</span>, <span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">nullable</span> ObjectType)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableDictionary</span>&lt;<span class="title">KeyType</span>, <span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> ObjectType)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSSet</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSOrderedSet</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="集合代理对象"><a href="#集合代理对象" class="headerlink" title="集合代理对象"></a>集合代理对象</h2><p>这里简单总结集合代理对象的使用。</p><blockquote><p>当我们在对象上调用 <code>-valueForKey:</code> 的时候，它可以返回 <code>NSArray</code>，<code>NSSet</code> 或是 <code>NSOrderedSet</code> 的集合代理对象。这个类没有实现通常的 <code>-&lt;Key&gt;</code> 方法，但是它实现了代理对象所需要使用的很多方法。</p></blockquote><h3 id="NSArray"><a href="#NSArray" class="headerlink" title="NSArray"></a>NSArray</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Primes</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *primes;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Primes</span></span></span><br><span class="line"><span class="keyword">@dynamic</span> primes; <span class="comment">// 不要生成get方法</span></span><br><span class="line"><span class="keyword">static</span> int32_t <span class="keyword">const</span> primes[] = &#123;</span><br><span class="line">    <span class="number">2</span>, <span class="number">101</span>, <span class="number">233</span>, <span class="number">383</span>, <span class="number">3</span>, <span class="number">103</span>, <span class="number">239</span>, <span class="number">389</span>, <span class="number">5</span>, <span class="number">107</span>, <span class="number">241</span>, <span class="number">397</span>, <span class="number">7</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">251</span>, <span class="number">401</span>, <span class="number">11</span>, <span class="number">113</span>, <span class="number">257</span>, <span class="number">409</span>, <span class="number">13</span>, <span class="number">127</span>, <span class="number">263</span>, <span class="number">419</span>, <span class="number">17</span>, <span class="number">131</span>, <span class="number">269</span>,</span><br><span class="line">    <span class="number">421</span>, <span class="number">19</span>, <span class="number">137</span>, <span class="number">271</span>, <span class="number">431</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">277</span>, <span class="number">433</span>, <span class="number">29</span>, <span class="number">149</span>, <span class="number">281</span>, <span class="number">439</span>,</span><br><span class="line">    <span class="number">31</span>, <span class="number">151</span>, <span class="number">283</span>, <span class="number">443</span>, <span class="number">37</span>, <span class="number">157</span>, <span class="number">293</span>, <span class="number">449</span>, <span class="number">41</span>, <span class="number">163</span>, <span class="number">307</span>, <span class="number">457</span>, <span class="number">43</span>,</span><br><span class="line">    <span class="number">167</span>, <span class="number">311</span>, <span class="number">461</span>, <span class="number">47</span>, <span class="number">173</span>, <span class="number">313</span>, <span class="number">463</span>, <span class="number">53</span>, <span class="number">179</span>, <span class="number">317</span>, <span class="number">467</span>, <span class="number">59</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">331</span>, <span class="number">479</span>, <span class="number">61</span>, <span class="number">191</span>, <span class="number">337</span>, <span class="number">487</span>, <span class="number">67</span>, <span class="number">193</span>, <span class="number">347</span>, <span class="number">491</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">349</span>,</span><br><span class="line">    <span class="number">499</span>, <span class="number">73</span>, <span class="number">199</span>, <span class="number">353</span>, <span class="number">503</span>, <span class="number">79</span>, <span class="number">211</span>, <span class="number">359</span>, <span class="number">509</span>, <span class="number">83</span>, <span class="number">223</span>, <span class="number">367</span>, <span class="number">521</span>,</span><br><span class="line">    <span class="number">89</span>, <span class="number">227</span>, <span class="number">373</span>, <span class="number">523</span>, <span class="number">97</span>, <span class="number">229</span>, <span class="number">379</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">701</span>, <span class="number">877</span>, <span class="number">1049</span>,</span><br><span class="line">    <span class="number">557</span>, <span class="number">709</span>, <span class="number">881</span>, <span class="number">1051</span>, <span class="number">563</span>, <span class="number">719</span>, <span class="number">883</span>, <span class="number">1061</span>, <span class="number">569</span>, <span class="number">727</span>, <span class="number">887</span>,</span><br><span class="line">    <span class="number">1063</span>, <span class="number">571</span>, <span class="number">733</span>, <span class="number">907</span>, <span class="number">1069</span>, <span class="number">577</span>, <span class="number">739</span>, <span class="number">911</span>, <span class="number">1087</span>, <span class="number">587</span>, <span class="number">743</span>,</span><br><span class="line">    <span class="number">919</span>, <span class="number">1091</span>, <span class="number">593</span>, <span class="number">751</span>, <span class="number">929</span>, <span class="number">1093</span>, <span class="number">599</span>, <span class="number">757</span>, <span class="number">937</span>, <span class="number">1097</span>, <span class="number">601</span>,</span><br><span class="line">    <span class="number">761</span>, <span class="number">941</span>, <span class="number">1103</span>, <span class="number">607</span>, <span class="number">769</span>, <span class="number">947</span>, <span class="number">1109</span>, <span class="number">613</span>, <span class="number">773</span>, <span class="number">953</span>, <span class="number">1117</span>,</span><br><span class="line">    <span class="number">617</span>, <span class="number">787</span>, <span class="number">967</span>, <span class="number">1123</span>, <span class="number">619</span>, <span class="number">797</span>, <span class="number">971</span>, <span class="number">1129</span>, <span class="number">631</span>, <span class="number">809</span>, <span class="number">977</span>,</span><br><span class="line">    <span class="number">1151</span>, <span class="number">641</span>, <span class="number">811</span>, <span class="number">983</span>, <span class="number">1153</span>, <span class="number">643</span>, <span class="number">821</span>, <span class="number">991</span>, <span class="number">1163</span>, <span class="number">647</span>, <span class="number">823</span>,</span><br><span class="line">    <span class="number">997</span>, <span class="number">1171</span>, <span class="number">653</span>, <span class="number">827</span>, <span class="number">1009</span>, <span class="number">1181</span>, <span class="number">659</span>, <span class="number">829</span>, <span class="number">1013</span>, <span class="number">1187</span>, <span class="number">661</span>,</span><br><span class="line">    <span class="number">839</span>, <span class="number">1019</span>, <span class="number">1193</span>, <span class="number">673</span>, <span class="number">853</span>, <span class="number">1021</span>, <span class="number">1201</span>, <span class="number">677</span>, <span class="number">857</span>, <span class="number">1031</span>,</span><br><span class="line">    <span class="number">1213</span>, <span class="number">683</span>, <span class="number">859</span>, <span class="number">1033</span>, <span class="number">1217</span>, <span class="number">691</span>, <span class="number">863</span>, <span class="number">1039</span>, <span class="number">1223</span>, <span class="number">1229</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">sizeof</span>(primes) / <span class="keyword">sizeof</span>(*primes));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectInPrimesAtIndex:(<span class="built_in">NSUInteger</span>)idx &#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(idx &lt; <span class="keyword">sizeof</span>(primes) / <span class="keyword">sizeof</span>(*primes));</span><br><span class="line">    <span class="keyword">return</span> @(primes[idx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>对于NSArray， 实现<code>-countOf&lt;Key&gt;</code>方法，<code>-objectIn&lt;Key&gt;AtIndex:</code>或者<code>-&lt;key&gt;AtIndexes:</code>中的一个即可，当然如果再实现<code>-get&lt;Key&gt;:range:</code>将会增强性能。</p><p>上面的例子中，key是“primes”，实际上并没有这个primes数组，而是用了一个C数组代理了。<code>@property (nonatomic, copy, readonly) NSArray *primes;</code>和<code>@dynamic primes;</code> 这两句话可以省略（下文的例子就省略了），这里加上的原因是，便于外界知晓具体的key值。</p><p>使用：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Primes *primes = [Primes <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueArray</span>'</span></span><br><span class="line">id obj = [primes valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure><p>可见，获得的对象并不是一个NSArray，而是<code>NSKeyValueArray</code>。</p><h3 id="NSSet"><a href="#NSSet" class="headerlink" title="NSSet"></a>NSSet</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PrimesSet</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PrimesSet</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSSet</span> *_numSet;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _numSet = [<span class="built_in">NSSet</span> setWithObjects:@<span class="number">0</span>, @<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numSet.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSEnumerator</span> *)enumeratorOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numSet.objectEnumerator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)memberOfPrimes:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numSet member:obj];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>对于NSSet，要实现<code>-countOf&lt;Key&gt;</code>、<code>-enumeratorOf&lt;Key&gt;</code>和<code>-memberOf&lt;Key&gt;:</code>这三个方法。</p><p>使用：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">PrimesSet *primesSet = [PrimesSet <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueSet</span>'</span></span><br><span class="line">id obj = [primesSet valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure><p>获取到的对象是<code>NSKeyValueSet</code>。</p><h3 id="NSOrderedSet"><a href="#NSOrderedSet" class="headerlink" title="NSOrderedSet"></a>NSOrderedSet</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PrimesOrderedSet</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PrimesOrderedSet</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSOrderedSet</span> *_numOrderedSet;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _numOrderedSet = [<span class="built_in">NSOrderedSet</span> orderedSetWithObjects:@<span class="number">0</span>, @<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numOrderedSet.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)indexInPrimesOfObject:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numOrderedSet indexOfObject:obj];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectInPrimesAtIndex:(<span class="built_in">NSUInteger</span>)idx &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numOrderedSet objectAtIndex:idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于提高性能</span></span><br><span class="line">- (<span class="keyword">void</span>)getPrimes:(<span class="keyword">id</span> __<span class="keyword">unsafe_unretained</span> *)buffer range:(<span class="built_in">NSRange</span>)inRange &#123;</span><br><span class="line">    <span class="comment">// 返回提供的缓冲区内指定范围内的数据集合</span></span><br><span class="line">    [_numOrderedSet getObjects:buffer range:inRange];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>必须实现的方法是<code>-countOf&lt;Key&gt;</code>和<code>-indexIn&lt;Key&gt;OfObject:</code>。二选一实现的方法是<code>-objectIn&lt;Key&gt;AtIndex:</code>和<code>-&lt;key&gt;AtIndexes:</code>。如果再实现<code>-get&lt;Key&gt;:range:</code>将会增强性能。</p><p>使用：</p><figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">PrimesOrderedSet *primesOrderedSet = [PrimesOrderedSet <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueOrderedSet</span>'</span></span><br><span class="line">id obj = [primesOrderedSet valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure><p>获取到的对象是<code>NSKeyValueOrderedSet</code>。</p><h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>数组最大值：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">NSArray <span class="symbol">*</span>array = <span class="meta">@[</span><span class="meta">@1,</span> <span class="meta">@8,</span> <span class="meta">@5];</span></span><br><span class="line">[array valueForKeyPath:<span class="meta">@"</span><span class="meta">@max.self"];</span></span><br></pre></td></tr></table></figure><p>模型数组最大值：</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">NSArray *<span class="keyword">array</span> = @[person1, person2, person3];</span><br><span class="line">[<span class="keyword">array</span> valueForKeyPath:@<span class="string">"@max.age"</span>];</span><br></pre></td></tr></table></figure><p>其他操作符：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@max</span> <span class="variable">@min</span>: 获得数组中最大(或者最小)的一个元素</span><br><span class="line"><span class="variable">@avg</span>: 将集合中对象转换成double类型，返回数组中指定的平均值的number对象</span><br><span class="line"><span class="variable">@sum</span>: 将集合中每个对象都转换成double类型，然后计算总和，最后返回一个值为这个总和的NSNumber对象</span><br><span class="line"><span class="variable">@count</span>：返回集合中对象总数的NSNumber对象</span><br><span class="line"></span><br><span class="line">返回一个由操作符右边的key path指定的对象属性组成的数组，distincUnionOfObjects会对数组去重。</span><br><span class="line">示例：</span><br><span class="line">[personList <span class="attribute">valueForKeyPath</span>:@<span class="string">"@unionOfObjects.name"</span>];</span><br><span class="line"><span class="selector-attr">[personList valueForKeyPath:@"@distinctUnionOfObjects.name"]</span>;</span><br><span class="line">操作对象：<span class="variable">@unionOfObjects</span>/<span class="variable">@distincUnionOfObjects</span> </span><br><span class="line">操作数组：<span class="variable">@distinctUnionOfArrays</span>/<span class="variable">@unionOfArrays</span></span><br><span class="line">操作集合：<span class="variable">@distinctUnionOfSets</span> 和<span class="variable">@distinctUnionOfArrays</span></span><br></pre></td></tr></table></figure><h2 id="分类的KVC"><a href="#分类的KVC" class="headerlink" title="分类的KVC"></a>分类的KVC</h2><p>一般的场景是这样：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> :  <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> (<span class="title">PrimitiveAccessors</span>)</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span> (<span class="title">PrimitiveAccessors</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *gVolume;</span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume &#123;</span><br><span class="line">    <span class="keyword">return</span> gVolume;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value &#123;</span><br><span class="line">    gVolume = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>对于主类中没有的key，分类实现特定的方法后，KVC也将会生效。如果是取值，分类必须实现这样的方法：<code>getPrimitive&lt;key&gt;</code>或者<code>primitive&lt;key&gt;</code>。上面的例子中，key是volume。如果是设值，分类必须实现<code>setPrimitive&lt;key&gt;:</code>方法。</p><p>使用：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Portion *p = [Portion <span class="keyword">new</span>];</span><br><span class="line">[p <span class="string">setValue:</span>@<span class="number">234</span> <span class="string">forKey:</span>@<span class="string">"volume"</span>];</span><br><span class="line">id m = [p <span class="string">valueForKey:</span>@<span class="string">"volume"</span>];</span><br></pre></td></tr></table></figure><p>当然，本质上来讲，KVC并不介意这些方法在主类还是分类实现的，只要有实现就成。上面的只是一个例子，实际上，完全依靠主类也是无妨的。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> :  <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *gVolume;</span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume &#123;</span><br><span class="line">    <span class="keyword">return</span> gVolume;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value &#123;</span><br><span class="line">    gVolume = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h1 id="二、取值"><a href="#二、取值" class="headerlink" title="二、取值"></a>二、取值</h1><h2 id="valueForKey"><a href="#valueForKey" class="headerlink" title="valueForKey:"></a>valueForKey:</h2><p>苹果在接口这里已经给出了其基本原理：</p><blockquote><p>The default implementation of this method does the following:</p><ol><li><p>Searches the class of the receiver for an accessor method whose name matches the pattern <code>-get&lt;Key&gt;, -&lt;key&gt;, or -is&lt;Key&gt;</code>, in that order. If such a method is found it is invoked. If the type of the method’s result is an object pointer type the result is simply returned. If the type of the result is one of the scalar types supported by NSNumber conversion is done and an NSNumber is returned. Otherwise, conversion is done and an NSValue is returned (new in Mac OS 10.5: results of arbitrary type are converted to NSValues, not just NSPoint, NRange, NSRect, and NSSize).</p></li><li><p>(introduced in Mac OS 10.7). Otherwise (no simple accessor method is found), searches the class of the receiver for methods whose names match the patterns <code>-countOf&lt;Key&gt; and -indexIn&lt;Key&gt;OfObject: and -objectIn&lt;Key&gt;AtIndex:</code>(corresponding to the primitive methods defined by the NSOrderedSet class) and also <code>-&lt;key&gt;AtIndexes:</code> (corresponding to -[NSOrderedSet objectsAtIndexes:]). If a count method and an indexOf method and at least one of the other two possible methods are found, a collection proxy object that responds to all NSOrderedSet methods is returned. Each NSOrderedSet message sent to the collection proxy object will result in some combination of<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:, -objectIn&lt;Key&gt;AtIndex:, and -&lt;key&gt;AtIndexes:</code> messages being sent to the original receiver of <code>-valueForKey:</code>. If the class of the receiver also implements an optional method whose name matches the pattern -get<key>:range: that method will be used when appropriate for best performance.</key></p></li></ol><ol start="3"><li><p>Otherwise (no simple accessor method or set of ordered set access methods is found), searches the class of the receiver for methods whose names match the patterns <code>-countOf&lt;Key&gt; and -objectIn&lt;Key&gt;AtIndex:</code>(corresponding to the primitive methods defined by the NSArray class) and (introduced in Mac OS 10.4) also<code>-&lt;key&gt;AtIndexes:</code>(corresponding to -[NSArray objectsAtIndexes:]). If a count method and at least one of the other two possible methods are found, a collection proxy object that responds to all NSArray methods is returned. Each NSArray message sent to the collection proxy object will result in some combination of <code>-countOf&lt;Key&gt;, -objectIn&lt;Key&gt;AtIndex:, and -&lt;key&gt;AtIndexes:</code> messages being sent to the original receiver of <code>-valueForKey:</code>. If the class of the receiver also implements an optional method whose name matches the pattern <code>-get&lt;Key&gt;:range:</code> that method will be used when appropriate for best performance.</p></li><li><p>(introduced in Mac OS 10.4). Otherwise (no simple accessor method or set of ordered set or array access methods is found), searches the class of the receiver for a threesome of methods whose names match the patterns <code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;, and -memberOf&lt;Key&gt;:</code> (corresponding to the primitive methods defined by the NSSet class). If all three such methods are found a collection proxy object that responds to all NSSet methods is returned. Each NSSet message sent to the collection proxy object will result in some combination of <code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;, and -memberOf&lt;Key&gt;:</code>messages being sent to the original receiver of <code>-valueForKey:</code>.</p></li><li><p>Otherwise (no simple accessor method or set of collection access methods is found), if the receiver’s class’ +accessInstanceVariablesDirectly property returns YES, searches the class of the receiver for an instance variable whose name matches the pattern <code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, or is&lt;Key&gt;</code>, in that order. If such an instance variable is found, the value of the instance variable in the receiver is returned, with the same sort of conversion to NSNumber or NSValue as in step 1.</p></li><li><p>Otherwise (no simple accessor method, set of collection access methods, or instance variable is found), invokes <code>-valueForUndefinedKey:</code> and returns the result. The default implementation of <code>-valueForUndefinedKey:</code> raises an NSUndefinedKeyException, but you can override it in your application.</p></li></ol><p>Compatibility notes:</p><ul><li>For backward binary compatibility, an accessor method whose name matches the pattern <code>-_get&lt;Key&gt;</code>, or <code>-_&lt;key&gt;</code> is searched for between steps 1 and 3. If such a method is found it is invoked, with the same sort of conversion to NSNumber or NSValue as in step 1. KVC accessor methods whose names start with underscores were deprecated as of Mac OS 10.3 though.</li><li>The behavior described in step 5 is a change from Mac OS 10.2, in which the instance variable search order was <code>&lt;key&gt;, _&lt;key&gt;</code>.</li><li>For backward binary compatibility, <code>-handleQueryWithUnboundKey:</code> will be invoked instead of <code>-valueForUndefinedKey:</code> in step 6, if the implementation of <code>-handleQueryWithUnboundKey:</code> in the receiver’s class is not NSObject’s.</li></ul></blockquote><p>简单翻译如下：</p><ol><li>按照<code>-get&lt;Key&gt;, -&lt;key&gt;, -is&lt;Key&gt;</code>的顺序搜索该类的存取器方法，若找到，则直接调用。如果方法调用的结果是<code>id</code>类型，直接把结果返回。如果方法调用的结果是能够被<code>NSNumber</code>转换的标量类型，则结果会被转为<code>NSNumber</code>返回。否则对于一般的标量类型，这些类型将会被转化为<code>NSValue</code>（在Mac OS 10.5及以后，不仅仅支持<code>NSPoint, NRange, NSRect</code>，以及<code>NSSize</code>这些类型）。</li><li>如果简单的存取器方法没有找到，那么搜索该类的<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:</code>方法，还有<code>-objectIn&lt;Key&gt;AtIndex:</code>（对应被<code>NSOrderedSet</code>类所定义的方法），<code>-&lt;key&gt;AtIndexes:</code>（对应<code>-[NSOrderedSet objectsAtIndexes:]</code>）方法。如果<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:</code>这两个方法被找到，另外两个方法中的至少一个被找到，那么这个能响应<code>NSOrderedSet</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:, -objectIn&lt;Key&gt;AtIndex:, -&lt;key&gt;AtIndexes:</code>这些方法共同处理。如果这个代理对象也实现了可选的<code>-get&lt;Key&gt;:range:</code>方法，这将有助于增强性能。</li><li>如果存取器方法和<code>ordered set</code>的代理方法没有被找到，那么搜索该类的<code>-countOf&lt;Key&gt;</code>方法，还有<code>-objectIn&lt;Key&gt;AtIndex:</code>（对应被<code>NSArray</code>类所定义的方法），<code>-&lt;key&gt;AtIndexes:</code>（对应<code>-[NSArray objectsAtIndexes:]</code>）方法。如果<code>-countOf&lt;Key&gt;</code>这个方法被找到，另外两个方法中的至少一个被找到，那么这个能响应<code>NSArray</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>-countOf&lt;Key&gt;, -objectIn&lt;Key&gt;AtIndex:, -&lt;key&gt;AtIndexes:</code>这些方法共同处理。如果这个代理对象也实现了可选的<code>-get&lt;Key&gt;:range:</code>方法，这将有助于增强性能。</li><li>如果存取器方法、<code>ordered set</code>和<code>array</code>的代理方法都没有被找到，那么尝试搜索<code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;,  -memberOf&lt;Key&gt;:</code>这些(被<code>NSSet</code>类所定义的)方法。如果这三个方法都能被找到，那么这个能响应<code>NSSet</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;,  -memberOf&lt;Key&gt;:</code>这些方法共同处理。</li><li>如果存取器方法、<code>ordered set</code>、<code>array</code>以及<code>set</code>的代理方法都没有被找到，倘若此时消息接收者的<code>+accessInstanceVariablesDirectly</code>属性返回的是<code>YES</code>（默认实现就是返回<code>YES</code>），那么按照<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>的顺序搜索该类的实例变量。如果找到这个实例变量，那么按照步骤1中的类型转换规则返回这个实例变量的值。</li><li>否则(啥也没找到)，调用<code>-valueForUndefinedKey:</code>方法并返回结果。这个方法的默认实现是抛出<code>NSUndefinedKeyException</code>异常，不过你可以重写该方法自行实现。</li></ol><p>兼容性：</p><ul><li><p>为了向后兼容，会在步骤1中查找名称为<code>-_get&lt;Key&gt;,  -_&lt;key&gt;</code>的存取器方法。如果找到了，会进行调用并按照步骤1中的类型转换规则返回调用的结果。</p></li><li><p>从Mac OS 10.2开始，步骤5中的实例变量搜索顺序从原先的<code>&lt;key&gt;, _&lt;key&gt;</code>改为现在的<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>。</p></li><li><p>如果<code>-handleQueryWithUnboundKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-handleQueryWithUnboundKey:</code>方法），那在步骤6中，<code>-handleQueryWithUnboundKey:</code>方法将会代替<code>-valueForUndefinedKey:</code>方法被调用。</p></li></ul><p>说得清晰明了。流程图如下：</p><p><img src="https://image.chenyalun.com/2019/05/05/001.png" alt></p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(key) &#123;</span><br><span class="line">        OSSpinLockLock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 创建缓存getter的CFSet集合NSKeyValueCachedGetters</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">NSKeyValueCachedGetters</span>) &#123;</span><br><span class="line">            <span class="comment">// CFSet对象需要的结构体参数, 告诉这个集合怎么管理容器中的对象</span></span><br><span class="line">            <span class="comment">// retain\release是内存管理 equal\hash是对象处理 copyDescription是复制处理</span></span><br><span class="line">            <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            callbacks.version = kCFTypeSetCallBacks.version;</span><br><span class="line">            <span class="comment">// 也可以禁用掉retain和release, 这样当对象销毁时需要及时将其从集合中移除否则会崩溃</span></span><br><span class="line">            <span class="comment">// callbacks.retain = NULL;</span></span><br><span class="line">            <span class="comment">// callbacks.release = NULL;</span></span><br><span class="line">            callbacks.retain = kCFTypeSetCallBacks.retain;</span><br><span class="line">            callbacks.release = kCFTypeSetCallBacks.release;</span><br><span class="line">            callbacks.copyDescription = kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">            callbacks.equal = (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValueAccessorIsEqual</span>;</span><br><span class="line">            callbacks.hash = (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValueAccessorHash</span>;</span><br><span class="line">            <span class="built_in">NSKeyValueCachedGetters</span> = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>,<span class="number">0</span>,&amp;callbacks);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据class、key和hash创建唯一的NSKeyValueGetter对象, 作为从缓存集合中查找的"引子"</span></span><br><span class="line">        <span class="comment">// 只要hashValue一致, 不管其他属性是否一致, 就可以判定这两个对象是一致的</span></span><br><span class="line">        <span class="comment">// 这也是为啥首先根据class和key, 创建一个"简单"的finder到缓存集合中查找的原因</span></span><br><span class="line">        <span class="built_in">NSKeyValueGetter</span> *finder = [<span class="built_in">NSKeyValueGetter</span> new];</span><br><span class="line">        finder.containerClassID = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        finder.key = key;</span><br><span class="line">        finder.hashValue = <span class="built_in">CFHash</span>(key) ^ (<span class="built_in">NSUInteger</span>)(object_getClass(<span class="keyword">self</span>));</span><br><span class="line">        <span class="comment">// 缓存集合中是否含有特定的NSKeyValueGetter</span></span><br><span class="line">        <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span> =  <span class="built_in">CFSetGetValue</span>(<span class="built_in">NSKeyValueCachedGetters</span>, finder);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">getter</span>) &#123;</span><br><span class="line">            <span class="comment">// 缓存中没有找到, 创建getter</span></span><br><span class="line">            <span class="keyword">getter</span> = [object_getClass(<span class="keyword">self</span>) _createValueGetterWithContainerClassID:object_getClass(<span class="keyword">self</span>) key:key];</span><br><span class="line">            <span class="comment">// 这里的getter相比上面的finder更加具体详细, 虽然根据哈希来说, 二者是"相同的对象"</span></span><br><span class="line">            <span class="comment">// 创建好getter后, 把它放到缓存集合中</span></span><br><span class="line">            <span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueCachedGetters</span>, <span class="keyword">getter</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        OSSpinLockUnlock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 找到getter, 交给_NSGetUsingKeyValueGetter函数处理</span></span><br><span class="line">        <span class="keyword">return</span> _NSGetUsingKeyValueGetter(<span class="keyword">self</span>, <span class="keyword">getter</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// key为空, 抛出异常</span></span><br><span class="line">        [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"%@: attempt to retrieve a value for a nil key"</span>,_NSMethodExceptionProem(<span class="keyword">self</span>,_cmd)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要做了四件事:</p><ol><li><p>取值时，使用<code>OSSpinLockLock</code>保证线程安全</p></li><li><p>根据class和key，生成一个<code>NSKeyValueGetter</code>对象，用于封装信息</p></li><li><p>取值时，会根据class和key配置一个简单的<code>Getter</code>，首先到<code>CFSet</code>缓存集合中进行查找，以提高查找速度</p></li><li><p>当<code>key</code>不存在时，直接抛出异常: 参数有误</p></li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>当缓存集合中不存在时，便进入了更为具体的“查找”流程中。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详细的查找流程(此处假定key为"name")</span></span><br><span class="line">+ (<span class="built_in">NSKeyValueGetter</span> *)_createValueGetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueGetter</span> * <span class="keyword">getter</span> = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取字节长度</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> keyLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 这个数组用于存放首字符大写的key, 例如: "Name"</span></span><br><span class="line">    <span class="keyword">char</span> keyCStrUpFirst[keyLen + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 将key转为C字符串, 存储在keyCStrUpFirst数组中</span></span><br><span class="line">    [key getCString:keyCStrUpFirst maxLength:keyLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span> (key.length) &#123;</span><br><span class="line">        <span class="comment">// 将小写字母转为大写字母</span></span><br><span class="line">        keyCStrUpFirst[<span class="number">0</span>] = toupper(keyCStrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个数组用于存放与key一致的字符, 例如: "name"</span></span><br><span class="line">    <span class="keyword">char</span> keyCStr[keyLen + <span class="number">16</span>];</span><br><span class="line">    <span class="comment">// 再将key转为C字符串, 存储在keyCStr数组中</span></span><br><span class="line">    [key getCString:keyCStr maxLength:keyLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    Method getMethod = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 查询方法指针, 使用'逻辑或'固定了默认顺序:getName==&gt;name==&gt;isName==&gt;_getName==&gt;_name</span></span><br><span class="line">    <span class="comment">// 此处证明了接口文档中的第一步</span></span><br><span class="line">    <span class="comment">// 1. Whose name matches the pattern -get&lt;Key&gt;, -&lt;key&gt;, or -is&lt;Key&gt;, in that order.</span></span><br><span class="line">    <span class="comment">// 2. For backward binary compatibility, an accessor method whose name matches the pattern -_get&lt;Key&gt;, or -_&lt;key&gt; is searched for between steps 1 and 3.</span></span><br><span class="line">    <span class="keyword">if</span>((getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"get%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"%s"</span>,keyCStr)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"is%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"_get%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"_%s"</span>,keyCStr))) &#123;</span><br><span class="line">        <span class="comment">// 成功找到, 创建NSKeyValueMethodGetter对象, 保存找到的method</span></span><br><span class="line">        <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueMethodGetter</span> alloc] initWithContainerClassID:containerClassID key:key method:getMethod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有找到, 进入下个流程, 假定key为"name", 则:</span></span><br><span class="line"><span class="comment">        ountOf_Method 对应 countOfName</span></span><br><span class="line"><span class="comment">        ObjectIn_AtIndexMethod 对应 objectInNameAtIndex:</span></span><br><span class="line"><span class="comment">        _AtIndexesMethod 对应 nameAtIndexes:</span></span><br><span class="line"><span class="comment">        IndexIn_OfObjectMethod 对应 indexInNameOfObject:</span></span><br><span class="line"><span class="comment">        enumeratorOf_Method 对应 enumeratorOfName</span></span><br><span class="line"><span class="comment">        memberOf_Method 对应 memberOfName:</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method ountOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"countOf%"</span>, keyCStrUpFirst);</span><br><span class="line">        Method ObjectIn_AtIndexMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"objectIn%sAtIndex:"</span>, keyCStrUpFirst);</span><br><span class="line">        Method _AtIndexesMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"%sAtIndexes:"</span>, keyCStr);</span><br><span class="line">        Method IndexIn_OfObjectMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"indexIn%sOfObject:"</span>, keyCStrUpFirst);</span><br><span class="line">        </span><br><span class="line">        Method enumeratorOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"enumeratorOf%s"</span>, keyCStrUpFirst);</span><br><span class="line">        Method memberOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"memberOf%s:"</span>, keyCStrUpFirst);</span><br><span class="line">        <span class="keyword">if</span>(ountOf_Method &amp;&amp; IndexIn_OfObjectMethod &amp;&amp; (ObjectIn_AtIndexMethod || _AtIndexesMethod)) &#123;</span><br><span class="line">            <span class="comment">// 第二步, 针对NSOrderedSet, ountOf_Method、IndexIn_OfObjectMethod，以及ObjectIn_AtIndexMethod或者_AtIndexesMethod中的一个存在(实现代理集合对象)</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingOrderedSetMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingOrderedSetMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.objectAtIndex =  ObjectIn_AtIndexMethod;</span><br><span class="line">            methodSet.indexOfObject =  IndexIn_OfObjectMethod;</span><br><span class="line">            methodSet.objectsAtIndexes =  _AtIndexesMethod;</span><br><span class="line">            <span class="comment">// eg: getName:range:方法(用于增强性能)</span></span><br><span class="line">            methodSet.getObjectsRange =  <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"get%s:range:"</span>, keyCStrUpFirst);</span><br><span class="line">            <span class="comment">// NSKeyValueNonmutatingOrderedSetMethodSet就是一个拥有几个属性的简单的对象, 用于保存count、objectAtIndex等方法指针信息</span></span><br><span class="line">            <span class="comment">// 成功找到, 创建NSKeyValueCollectionGetter对象, 保存保存好的methodSet对象</span></span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueOrderedSet</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ountOf_Method &amp;&amp; (ObjectIn_AtIndexMethod || _AtIndexesMethod))&#123;</span><br><span class="line">            <span class="comment">// 第三步, 针对NSArray, ountOf_Method、以及ObjectIn_AtIndexMethod或者_AtIndexesMethod中的一个存在</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingArrayMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingArrayMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.objectAtIndex =  ObjectIn_AtIndexMethod;</span><br><span class="line">            methodSet.objectsAtIndexes =  _AtIndexesMethod;</span><br><span class="line">            methodSet.getObjectsRange =  <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"get%s:range:"</span>, keyCStrUpFirst);</span><br><span class="line">            <span class="comment">// 同样的, 成功找到, 创建NSKeyValueCollectionGetter对象,保存methodSet</span></span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueArray</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ountOf_Method &amp;&amp; enumeratorOf_Method &amp;&amp; memberOf_Method)&#123;</span><br><span class="line">            <span class="comment">// 第四步, 针对NSSet, ountOf_Method、enumeratorOf_Method以及memberOf_Method</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingSetMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingSetMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.enumerator =  enumeratorOf_Method;</span><br><span class="line">            methodSet.member =  memberOf_Method;</span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueSet</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">            <span class="comment">// 第五步, 如果允许直接访问实例变量, 也即accessInstanceVariablesDirectly为YES, 则直接取出实例变量</span></span><br><span class="line">            <span class="comment">// 默认顺序为_name==&gt;_isName==&gt;name==&gt;isName</span></span><br><span class="line">            Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span>((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCStr)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCStrUpFirst)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCStr)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCStrUpFirst))</span><br><span class="line">               ) &#123;</span><br><span class="line">                <span class="comment">// 此时ivar有值, 创建NSKeyValueIvarGetter</span></span><br><span class="line">                <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueIvarGetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">getter</span>) &#123;</span><br><span class="line">        <span class="comment">// 最后, getter创建失败, 说明方法、实例变量查询失败, 进入下个流程</span></span><br><span class="line">        <span class="keyword">getter</span> = [<span class="keyword">self</span> _createValuePrimitiveGetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">getter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法详细地设定了查找的顺序，值得关注的是，<code>NSKeyValueMethodForPattern()</code>这个函数调用的次数相当的多。</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最后一次查找</span></span><br><span class="line">+ (<span class="built_in">NSKeyValueGetter</span> *)_createValuePrimitiveGetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> keyCstrLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">char</span> keyCstrUpFirst[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstrUpFirst maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span>(key.length) &#123;</span><br><span class="line">        keyCstrUpFirst[<span class="number">0</span>] = toupper(keyCstrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> keyCstr[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstr maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    Method getMethod = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 同样的套路, 查找顺序: getPrimitiveName==&gt;primitiveName</span></span><br><span class="line">    <span class="keyword">if</span>((getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"getPrimitive%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"primitive%s"</span>, keyCstrUpFirst))</span><br><span class="line">       ) &#123;</span><br><span class="line">        <span class="keyword">getter</span> =  [[<span class="built_in">NSKeyValueMethodGetter</span> alloc] initWithContainerClassID:containerClassID key:key method:getMethod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">        Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 直接访问实例变量</span></span><br><span class="line">        <span class="comment">// 在方法二中找过一遍了, 为啥还要再找一遍?</span></span><br><span class="line">        <span class="comment">// 说明要么是根本没有找到, 要么是虽然找到了, 但是在创建NSKeyValueIvarGetter或者NSKeyValueMethodGetter的时候失败了, 最终的getter还是nil</span></span><br><span class="line">        <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCstrUpFirst))</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueIvarGetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">getter</span>) &#123;</span><br><span class="line">        <span class="keyword">getter</span> = [<span class="keyword">self</span> _createOtherValueGetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">getter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转发处理给NSKeyValueUndefinedGetter对象</span></span><br><span class="line">+ (id)<span class="string">_createOtherValueGetterWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [[NSKeyValueUndefinedGetter alloc] <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">containerIsa:</span>self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueUndefinedGetter负责调用其父类(NSKeyValueGetter)的构造方法</span></span><br><span class="line"><span class="meta">@implementation</span> NSKeyValueUndefinedGetter</span><br><span class="line">- (id)<span class="string">initWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key <span class="string">containerIsa:</span>(Class)containerIsa &#123;</span><br><span class="line">    <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    arguments[<span class="number">0</span>] = key;</span><br><span class="line">    <span class="comment">// 调用valueForUndefinedKey方法, 该方法默认实现抛出异常</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">implementation:</span>methogetImplementation(class_getInstanceMethod(containerIsa,<span class="meta">@selector</span>(<span class="string">valueForUndefinedKey:</span>))) <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">valueForUndefinedKey:</span>) <span class="string">extraArguments:</span>arguments <span class="string">count:</span><span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure><h3 id="方法怎么查找"><a href="#方法怎么查找" class="headerlink" title="方法怎么查找"></a>方法怎么查找</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueMethodForPattern</span></span><br><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">NSKeyValueMethodForPattern</span><span class="params">(<span class="keyword">Class</span> <span class="keyword">class</span>, <span class="keyword">const</span> char *pattern,<span class="keyword">const</span> char *param)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    size_t paramLen = strlen(param);</span></span></span><br><span class="line"><span class="function"><span class="comment">    size_t patternLen = strlen(pattern);</span></span></span><br><span class="line"><span class="function"><span class="comment">    char selName[patternLen + paramLen * 2 + 1];</span></span></span><br><span class="line"><span class="function"><span class="comment">    snprintf(selName, (patternLen + paramLen * 2 + 1), pattern,param,param);</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 依赖Runtime的class_getInstanceMethod</span></span></span><br><span class="line"><span class="function"><span class="comment">    return class_getInstanceMethod(class, sel_registerName(selName));</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="实例变量怎么查找"><a href="#实例变量怎么查找" class="headerlink" title="实例变量怎么查找"></a>实例变量怎么查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueIvarForPattern</span></span><br><span class="line"><span class="function">Ivar <span class="title">NSKeyValueIvarForPattern</span><span class="params">(Class class, <span class="keyword">const</span> <span class="keyword">char</span> *pattern,<span class="keyword">const</span> <span class="keyword">char</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> paramLen = <span class="built_in">strlen</span>(param);</span><br><span class="line">    <span class="keyword">size_t</span> patternLen = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    <span class="keyword">char</span> ivarName[paramLen + patternLen + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(ivarName, paramLen + patternLen + <span class="number">1</span>, pattern,param);</span><br><span class="line">    <span class="comment">// 依赖Runtime的class_getInstanceVariable</span></span><br><span class="line">    <span class="keyword">return</span> class_getInstanceVariable(class, ivarName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NSKeyValueMethodGetter如何创建"><a href="#NSKeyValueMethodGetter如何创建" class="headerlink" title="NSKeyValueMethodGetter如何创建"></a>NSKeyValueMethodGetter如何创建</h3><h4 id="1-NSKeyValueMethodGetter构造方法中生成IMP"><a href="#1-NSKeyValueMethodGetter构造方法中生成IMP" class="headerlink" title="1. NSKeyValueMethodGetter构造方法中生成IMP"></a>1. NSKeyValueMethodGetter构造方法中生成IMP</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSKeyValueMethodGetter</span></span></span><br><span class="line">- (<span class="keyword">id</span>)initWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key method:(Method)method &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> methodArgumentsCount = methogetNumberOfArguments(method);</span><br><span class="line">    <span class="built_in">NSUInteger</span> extraAtgumentCount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 默认两个参数((void (*)(id, SEL))objc_msgSend)</span></span><br><span class="line">    <span class="keyword">if</span>(methodArgumentsCount == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> *returnType = methocopyReturnType(method);</span><br><span class="line">        IMP imp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">switch</span> (returnType[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">                <span class="comment">// 返回类型是对象时, 直接获取method的函数指针</span></span><br><span class="line">                <span class="comment">// 还是以key为"name"举例, 则方法为- (NSString *)name; 这里直接获取其IMP</span></span><br><span class="line">                imp = methogetImplementation(method);</span><br><span class="line">                extraAtgumentCount = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>: &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 // 获取将BOOL类型转为NSNumber对象类型的函数指针</span></span><br><span class="line"><span class="comment">                 NSNumber * _NSGetBoolValueWithMethod(id object, SEL selctor, Method method) &#123;</span></span><br><span class="line"><span class="comment">                 return [[[NSNumber alloc] initWithBool: ((BOOL (*)(id,SEL))methogetImplementation(method))(object, methogetName(method))] autorelease];</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 // 比如key为"isMan", 则方法为 - (BOOL)iaMan;</span></span><br><span class="line"><span class="comment">                 // 获取的IMP便是将普通BOOL类型值转化为NSNumber类型对象的函数指针, 其他类似</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetBoolValueWithMethod;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: &#123;imp = (IMP)_NSGetUnsignedCharValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>: &#123;imp = (IMP)_NSGetUnsignedIntValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: &#123;imp = (IMP)_NSGetUnsignedLongLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>: &#123;imp = (IMP)_NSGetUnsignedLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>: &#123;imp = (IMP)_NSGetUnsignedShortValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>: &#123;imp = (IMP)_NSGetCharValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>: &#123;imp = (IMP)_NSGetDoubleValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'f'</span>: &#123;imp = (IMP)_NSGetFloatValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'i'</span>: &#123;imp = (IMP)_NSGetIntValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'l'</span>: &#123;imp = (IMP)_NSGetLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'q'</span>: &#123;imp = (IMP)_NSGetLongLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>: &#123;imp = (IMP)_NSGetShortValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetPointValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">NSRange</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetRangeValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGRect</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetRectValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetSizeValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    imp = (IMP)_NSGetValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        free(returnType);</span><br><span class="line">        <span class="keyword">if</span>(imp) &#123;</span><br><span class="line">            <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(extraAtgumentCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arguments[<span class="number">0</span>] = method;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将class key selector imp method 参数 参数数量等信息交给父类处理</span></span><br><span class="line">            <span class="keyword">return</span> [<span class="keyword">super</span> initWithContainerClassID:containerClassID key:key implementation:imp selector:methogetName(method) extraArguments:arguments count:extraAtgumentCount];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            [<span class="keyword">self</span> release];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> release];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>由于KVC返回的类型为对象<code>(NSObject)</code>，所以需要对方法返回值类型分别进行判断从而为<code>Getter</code>赋值不同的函数指针。也即从<code>BOOL、double、int、CGSize</code>等普通类型转化为<code>NSNumber、NSValue、id</code>等对象类型的函数(指针)。</p><h4 id="2-在父类NSKeyValueAccessor中-对class-key-selector-imp-method-参数-参数数量等信息进行保存"><a href="#2-在父类NSKeyValueAccessor中-对class-key-selector-imp-method-参数-参数数量等信息进行保存" class="headerlink" title="2. 在父类NSKeyValueAccessor中, 对class key selector imp method 参数 参数数量等信息进行保存"></a>2. 在父类<code>NSKeyValueAccessor</code>中, 对<code>class key selector imp method</code> 参数 参数数量等信息进行保存</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">@implementation NSKeyValueAccessor</span><br><span class="line">- (id)initWithContainerClassID:(id)containerClassID key:(NSString *)key implementation:(IMP)implementation selector:(SEL)selector extraArguments:(void *[<span class="number">3</span>])extraArguments <span class="built_in">count</span>:(NSUInteger)<span class="built_in">count</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (self = [super init]) &#123;</span><br><span class="line">        <span class="variable">_containerClassID</span> = containerClassID;</span><br><span class="line">        <span class="variable">_key</span> = key.copy;</span><br><span class="line">        <span class="variable">_implementation</span> = implementation;</span><br><span class="line">        <span class="variable">_selector</span> = selector;</span><br><span class="line">        </span><br><span class="line">        NSUInteger hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (key) &#123;</span><br><span class="line">            hash = CFHash(key);</span><br><span class="line">        &#125;</span><br><span class="line">        hash ^= (NSUInteger)containerClassID;</span><br><span class="line">        <span class="variable">_hashValue</span> = hash;</span><br><span class="line">        <span class="variable">_extraArgumentCount</span> = <span class="built_in">count</span>;</span><br><span class="line">        <span class="variable">_extraArgument1</span> = extraArguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">_extraArgument1</span> == key) &#123;</span><br><span class="line">            <span class="variable">_extraArgument1</span> = <span class="variable">_key</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">_extraArgument2</span> = extraArguments[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">_extraArgument2</span> == key) &#123;</span><br><span class="line">            <span class="variable">_extraArgument2</span> = <span class="variable">_key</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">_extraArgument3</span> = extraArguments[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="NSKeyValueIvarGetter如何创建"><a href="#NSKeyValueIvarGetter如何创建" class="headerlink" title="NSKeyValueIvarGetter如何创建"></a>NSKeyValueIvarGetter如何创建</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key containerIsa:(Class)containerIsa ivar:(Ivar)ivar &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ivarEncoding = ivar_getTypeEncoding(ivar);</span><br><span class="line">    IMP imp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">switch</span> (ivarEncoding[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">            objc_ivar_memory_management_t mngment = objc_ivar_memoryUnknown;<span class="comment">//_class_getIvarMemoryManagement(containerIsa, ivar);</span></span><br><span class="line">            <span class="keyword">if</span>(mngment &lt; objc_ivar_memoryWeak) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 id _NSGetObjectGetAssignValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">                 return *(id *)object_getIvarAddress(object, ivar);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetObjectGetAssignValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mngment == objc_ivar_memoryWeak) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 id _NSGetObjectGetWeakValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">                 return objc_loadWeak((id *)object_getIvarAddress(object, ivar));</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetObjectGetWeakValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mngment == objc_ivar_memoryUnretained) &#123;</span><br><span class="line">                imp = (IMP)_NSGetObjectGetAssignValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                imp = (IMP)_NSGetObjectGetIvarValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'C'</span>: &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             NSNumber * _NSGetUnsignedCharValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">             unsigned char value = *(unsigned char *)object_getIvarAddress(object, ivar);</span></span><br><span class="line"><span class="comment">             return [[[NSNumber alloc] initWithUnsignedChar:value] autorelease];</span></span><br><span class="line"><span class="comment">             &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            imp = (IMP)_NSGetUnsignedCharValueInIvar;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'B'</span>: &#123;imp = (IMP)_NSGetBoolValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>: &#123;imp = (IMP)_NSGetUnsignedIntValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'L'</span>: &#123;imp = (IMP)_NSGetUnsignedLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Q'</span>: &#123;imp = (IMP)_NSGetUnsignedLongLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'S'</span>: &#123;imp = (IMP)_NSGetUnsignedShortValueInIvar;&#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">            <span class="keyword">char</span>* idx = index(ivarEncoding, <span class="string">'='</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                imp = (IMP)_NSGetValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetPointValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">NSRange</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetRangeValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGRect</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetRectValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetSizeValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                imp = (IMP)_NSGetValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>: &#123;imp = (IMP)_NSGetCharValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>: &#123;imp = (IMP)_NSGetDoubleValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'f'</span>: &#123;imp = (IMP)_NSGetFloatValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>: &#123;imp = (IMP)_NSGetIntValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>: &#123;imp = (IMP)_NSGetLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'q'</span>: &#123;imp = (IMP)_NSGetLongLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>: &#123;imp = (IMP)_NSGetShortValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(imp) &#123;</span><br><span class="line">        <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        arguments[<span class="number">0</span>] = ivar;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> initWithContainerClassID:containerClassID key:key implementation:imp selector:<span class="literal">NULL</span> extraArguments:arguments count:<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> release];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样地，判断实例变量的类型编码，进而赋值不同的IMP。</p><h3 id="怎么根据Getter取值"><a href="#怎么根据Getter取值" class="headerlink" title="怎么根据Getter取值"></a>怎么根据Getter取值</h3><h4 id="1-线程校验"><a href="#1-线程校验" class="headerlink" title="1. 线程校验"></a>1. 线程校验</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">void NSKeyValueObservingAssertRegistrationLockNotHeld() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">_NSKeyValueObserverRegistrationEnableLockingAssertions</span> &amp;&amp; <span class="variable">_NSKeyValueObserverRegistrationLockOwner</span> == pthreaself()) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(pthreaself() != <span class="variable">_NSKeyValueObserverRegistrationLockOwner</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-直接调用Getter中存储的方法实现-getter-implementation"><a href="#2-直接调用Getter中存储的方法实现-getter-implementation" class="headerlink" title="2. 直接调用Getter中存储的方法实现(getter.implementation)"></a>2. 直接调用Getter中存储的方法实现(getter.implementation)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> _NSGetUsingKeyValueGetter(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span>) &#123;</span><br><span class="line">    <span class="comment">// 线程判断</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservingAssertRegistrationLockNotHeld</span>();</span><br><span class="line">    <span class="comment">// 根据其他参数数量extraArgumentCount分别进行函数调用</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">getter</span>.extraArgumentCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1, <span class="keyword">getter</span>.extraArgument2);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1, <span class="keyword">getter</span>.extraArgument2, <span class="keyword">getter</span>.extraArgument3);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="valueForKeyPath"><a href="#valueForKeyPath" class="headerlink" title="valueForKeyPath:"></a>valueForKeyPath:</h2><p>假定这里的keyPath为<code>@&quot;key1.key2.key3.key4&quot;</code>。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span>(keyPath) &#123;</span><br><span class="line">        <span class="comment">// 字符串编码判断</span></span><br><span class="line">        <span class="built_in">CFStringEncoding</span> encoding = __CFDefaultEightBitStringEncoding;</span><br><span class="line">        <span class="keyword">if</span>(encoding == kCFStringEncodingInvalidId) &#123;</span><br><span class="line">            <span class="comment">// 编码无效 kCFStringEncodingInvalidId就是 (0xffffffffU)</span></span><br><span class="line">            encoding = __CFStringComputeEightBitStringEncoding();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建C字符串: "key1.key2.key3.key4"</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *cStr = <span class="built_in">CFStringGetCStringPtr</span>((<span class="built_in">CFStringRef</span>)keyPath, encoding);</span><br><span class="line">        <span class="keyword">if</span>(cStr) &#123;</span><br><span class="line">            <span class="comment">// memchr函数:从头开始搜寻s 所指的内存内容前n 个字节，直到发现第一个值为c 的字节，则返回指向该字节的指针</span></span><br><span class="line">            <span class="comment">// 所以最后获取到包含'点符号'的后部分 即firstDotPointers为 ".key2.key3.key4"</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *firstDotPointer = memchr(cStr, <span class="string">'.'</span>, keyPath.length);</span><br><span class="line">            <span class="keyword">if</span>(firstDotPointer) &#123;</span><br><span class="line">                <span class="comment">// 这里的subKey是 "key1"</span></span><br><span class="line">                <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, firstDotPointer - cStr)] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="comment">// 这里的subKeyPathLeft是 "key2.key3.key4"</span></span><br><span class="line">                <span class="built_in">NSString</span> *subKeyPathLeft =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(firstDotPointer - cStr + <span class="number">1</span>, keyPath.length -  (firstDotPointer - cStr + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="comment">// 先获取到subKey的结果, 然后用它的结果再求subKeyPathLeft, 进入递归中</span></span><br><span class="line">                <span class="keyword">id</span> value = [[<span class="keyword">self</span> valueForKey:subKey] valueForKeyPath:subKeyPathLeft];</span><br><span class="line">                [subKey release];</span><br><span class="line">                [subKeyPathLeft release];</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// firstDotPointer不存在, 说明keyPath中没有'点符号', 则直接调用valueForKey</span></span><br><span class="line">                <span class="keyword">return</span> [<span class="keyword">self</span> valueForKey:keyPath];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 走到这里, 上面代码没有return, 说明keyPath为nil或者cStr为nil</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">    <span class="keyword">if</span>(range.length) &#123;</span><br><span class="line">        <span class="comment">// range.length不为0, 也即keyPath中有'点符号'</span></span><br><span class="line">        <span class="comment">// subKey为"key1"</span></span><br><span class="line">        <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, range.location)] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="comment">// subKeyPathLeft为"key2.key3.key4"</span></span><br><span class="line">        <span class="built_in">NSString</span> *subKeyPathLeft =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(range.location + <span class="number">1</span>, keyPath.length -  (range.location + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="comment">// 同样的, 先获取到subKey的结果, 然后用它的结果再求subKeyPathLeft, 进入递归中</span></span><br><span class="line">        <span class="keyword">id</span> value = [[<span class="keyword">self</span> valueForKey:subKey] valueForKeyPath:subKeyPathLeft];</span><br><span class="line">        [subKey release];</span><br><span class="line">        [subKeyPathLeft release];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// keyPath为nil或者keyPath中没有'点符号', 直接调用valueForKey</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> valueForKey:keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里就有一个问题了，相似的把keyPath拆分逻辑的逻辑为啥要写两个，一个转为C字符串拆分，一个直接拆分?  揣测两者的区别主要是对字符串编码的判断。</p><h1 id="三、设值"><a href="#三、设值" class="headerlink" title="三、设值"></a>三、设值</h1><p>设值的流程就比较简单了。</p><blockquote><p>The default implementation of this method does the following:</p><ol><li><p>Searches the class of the receiver for an accessor method whose name matches the pattern <code>-set&lt;Key&gt;:</code>. If such a method is found the type of its parameter is checked. If the parameter type is not an object pointer type but the value is nil <code>-setNilValueForKey:</code> is invoked. The default implementation of <code>-setNilValueForKey:</code> raises an NSInvalidArgumentException, but you can override it in your application. Otherwise, if the type of the method’s parameter is an object pointer type the method is simply invoked with the value as the argument. If the type of the method’s parameter is some other type the inverse of the NSNumber/NSValue conversion done by <code>-valueForKey:</code> is performed before the method is invoked.</p></li><li><p>Otherwise (no accessor method is found), if the receiver’s class’ <code>+accessInstanceVariablesDirectly</code> property returns YES, searches the class of the receiver for an instance variable whose name matches the pattern <code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, or is&lt;Key&gt;</code>, in that order. If such an instance variable is found and its type is an object pointer type the value is retained and the result is set in the instance variable, after the instance variable’s old value is first released. If the instance variable’s type is some other type its value is set after the same sort of conversion from NSNumber or NSValue as in step 1.</p></li><li><p>Otherwise (no accessor method or instance variable is found), invokes <code>-setValue:forUndefinedKey:</code>. The default implementation of <code>-setValue:forUndefinedKey:</code> raises an NSUndefinedKeyException, but you can override it in your application.</p></li></ol><p>Compatibility notes:</p><ul><li>For backward binary compatibility with <code>-takeValue:forKey:</code>‘s behavior, a method whose name matches the pattern <code>-_set&lt;Key&gt;:</code> is also recognized in step 1. KVC accessor methods whose names start with underscores were deprecated as of Mac OS 10.3 though.</li><li>For backward binary compatibility, -unableToSetNilForKey: will be invoked instead of <code>-setNilValueForKey:</code> in step 1, if the implementation of <code>-unableToSetNilForKey:</code> in the receiver’s class is not NSObject’s.</li><li>The behavior described in step 2 is different from <code>-takeValue:forKey:</code>‘s, in which the instance variable search order is <code>&lt;key&gt;, _&lt;key&gt;</code>.</li><li>For backward binary compatibility with <code>-takeValue:forKey:</code>‘s behavior, <code>-handleTakeValue:forUnboundKey:</code> will be invoked instead of <code>-setValue:forUndefinedKey:</code> in step 3, if the implementation of <code>-handleTakeValue:forUnboundKey:</code> in the receiver’s class is not NSObject’s.</li></ul></blockquote><p>翻译如下：<br>这个方法的默认实现是这样的：</p><ol><li>搜索该类名称为<code>-set&lt;Key&gt;:</code>的存取器方法，如果找到，检查其参数类型。如果参数为<code>nil</code>，<code>-setNilValueForKey:</code>方法将会被调用。这个方法的默认实现是抛出<code>NSInvalidArgumentException</code>异常，不过你可以重写该方法自行实现。如果参数类型为对象类型，该存取器方法会被直接调用，这个参数也会被直接使用。如果参数能被转化为<code>NSNumber/NSValue</code>类型，参数会在存取器方法被调用之前进行转换。</li><li>如果存取器方法没有被找到，倘若此时消息接收者的<code>+accessInstanceVariablesDirectly</code>属性返回的是<code>YES</code>，那么按照<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>的顺序搜索该类的实例变量。如果找到这个实例变量，当其为对象类型时，该实例变量会在旧值释放之后被设置新值。当其为其他类型时，那么按照步骤1中的类型转换规则设置这个实例变量的值。</li><li>如果存取器方法和实例变量都没有被找到，<code>-setValue:forUndefinedKey:</code>方法将会被调用。这个方法的默认实现是抛出<code>NSUndefinedKeyException</code>异常，不过你可以重写该方法自行实现。</li></ol><p>兼容性：</p><ul><li>为了向后兼容<code>-takeValue:forKey:</code>，名称为<code>-_set&lt;Key&gt;:</code>的方法也会在步骤1中被查找。</li><li>如果<code>-unableToSetNilForKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-unableToSetNilForKey:</code>方法），那在步骤1中，<code>-unableToSetNilForKey:</code>方法将会代替<code>-setNilValueForKey:</code>方法被调用。</li><li>对于<code>-takeValue:forKey:</code>，其实例变量的查找顺序不同于步骤2所描述的，调用它时，实例变量查找顺序是<code>&lt;key&gt;, _&lt;key&gt;</code>。</li><li>为了向后兼容<code>-takeValue:forKey:</code>，如果<code>-handleTakeValue:forUnboundKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-handleTakeValue:forUnboundKey:</code>方法），那在步骤3中，<code>-handleTakeValue:forUnboundKey:</code>方法将会代替<code>-setValue:forUndefinedKey:</code>方法被调用。</li></ul><p>流程图如下：<br><img src="https://image.chenyalun.com/2019/05/05/002.png" alt></p><h2 id="setValue"><a href="#setValue" class="headerlink" title="setValue:"></a>setValue:</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>这里使用<code>NSKeyValueCachedSetters</code>缓存<code>setter</code>。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定key为@"name"</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        OSSpinLockLock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">NSKeyValueCachedSetters</span>) &#123;</span><br><span class="line">            <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            callbacks.version = kCFTypeSetCallBacks.version;</span><br><span class="line">            callbacks.retain = kCFTypeSetCallBacks.retain;</span><br><span class="line">            callbacks.release = kCFTypeSetCallBacks.release;</span><br><span class="line">            callbacks.copyDescription = kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">            callbacks.equal = (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValueAccessorIsEqual</span>;</span><br><span class="line">            callbacks.hash = (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValueAccessorHash</span>;</span><br><span class="line">            <span class="built_in">NSKeyValueCachedSetters</span> = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>,<span class="number">0</span>,&amp;callbacks);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSKeyValueSetter</span> *finder = [<span class="built_in">NSKeyValueSetter</span> new];</span><br><span class="line">        finder.containerClassID = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        finder.key = key;</span><br><span class="line">        finder.hashValue = <span class="built_in">CFHash</span>((<span class="built_in">CFTypeRef</span>)key) ^ (<span class="built_in">NSUInteger</span>)(object_getClass(<span class="keyword">self</span>));</span><br><span class="line">        <span class="comment">// 缓存中取Setter</span></span><br><span class="line">        <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> =  <span class="built_in">CFSetGetValue</span>(<span class="built_in">NSKeyValueCachedSetters</span>, (<span class="keyword">void</span> *)finder);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">setter</span>) &#123;</span><br><span class="line">            <span class="keyword">setter</span> = [object_getClass(<span class="keyword">self</span>) _createValueSetterWithContainerClassID:object_getClass(<span class="keyword">self</span>) key:key];</span><br><span class="line">            <span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueCachedSetters</span>, (<span class="keyword">void</span>*)<span class="keyword">setter</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        OSSpinLockUnlock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 设值</span></span><br><span class="line">        _NSSetUsingKeyValueSetter(<span class="keyword">self</span>,<span class="keyword">setter</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"%@: attempt to set a value for a nil key"</span>,_NSMethodExceptionProem(<span class="keyword">self</span>,_cmd)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSKeyValueSetter</span> *)_createValueSetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> key_cstr_len = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 首字符大写的key</span></span><br><span class="line">    <span class="keyword">char</span> key_cstr_upfirst[key_cstr_len + <span class="number">1</span>];</span><br><span class="line">    [key getCString:key_cstr_upfirst maxLength:key_cstr_len + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span> (key.length) &#123;</span><br><span class="line">        key_cstr_upfirst[<span class="number">0</span>] = toupper(key_cstr_upfirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原来的key</span></span><br><span class="line">    <span class="keyword">char</span> key_cstr[key_cstr_len + <span class="number">1</span>];</span><br><span class="line">    [key getCString:key_cstr maxLength:key_cstr_len + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    Method method = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 查找方法顺序, 假定key为@"name"</span></span><br><span class="line">    <span class="comment">// setName: ==&gt; _setName: ==&gt; setIsName:</span></span><br><span class="line">    <span class="keyword">if</span> ((method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"set%s:"</span>, key_cstr_upfirst)) ||</span><br><span class="line">        (method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"_set%s:"</span>, key_cstr_upfirst)) ||</span><br><span class="line">        (method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"setIs%s:"</span>, key_cstr_upfirst))</span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueMethodSetter</span> alloc] initWithContainerClassID:containerClassID key:key method:method];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">        Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 允许直接访问实例变量, 查找顺序为: _name ==&gt; _isName ==&gt; name ==&gt; isName</span></span><br><span class="line">        <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, key_cstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, key_cstr_upfirst)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, key_cstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, key_cstr_upfirst))</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueIvarSetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">setter</span>) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [<span class="keyword">self</span> _createValuePrimitiveSetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">setter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法三-1"><a href="#方法三-1" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSKeyValueSetter</span> *)_createValuePrimitiveSetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> keyCstrLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">char</span> keyCstrUpFirst[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    [key getCString:keyCstrUpFirst maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(key.length) &#123;</span><br><span class="line">        keyCstrUpFirst[<span class="number">0</span>] = toupper(keyCstrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> keyCstr[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstr maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 假定key为@"name", 查询 setPrimitiveName:方法</span></span><br><span class="line">    Method method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"setPrimitive%s:"</span>,keyCstrUpFirst);</span><br><span class="line">    <span class="keyword">if</span>(method) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueMethodSetter</span> alloc] initWithContainerClassID:containerClassID key:key method:method];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">            Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCstr)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCstr)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCstrUpFirst))</span><br><span class="line">                ) &#123;</span><br><span class="line">                <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueIvarSetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">setter</span>) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [<span class="keyword">self</span> _createOtherValueSetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">setter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法四-1"><a href="#方法四-1" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">+ (NSKeyValueSetter *)<span class="string">_createOtherValueSetterWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [[NSKeyValueUndefinedSetter alloc] <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">containerIsa:</span>self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="怎么根据Setter设值"><a href="#怎么根据Setter设值" class="headerlink" title="怎么根据Setter设值"></a>怎么根据Setter设值</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _NSSetUsingKeyValueSetter(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span>, <span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">setter</span>.extraArgumentCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector,value);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1, <span class="keyword">setter</span>.extraArgument2);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1, <span class="keyword">setter</span>.extraArgument2, <span class="keyword">setter</span>.extraArgument3);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接调用Setter中存储的方法实现(getter.implementation)。</p><h2 id="setValue-forKeyPath"><a href="#setValue-forKeyPath" class="headerlink" title="setValue:forKeyPath:"></a>setValue:forKeyPath:</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span>(keyPath) &#123;</span><br><span class="line">        <span class="built_in">CFStringEncoding</span> encoding = __CFDefaultEightBitStringEncoding;</span><br><span class="line">        <span class="keyword">if</span>(encoding == kCFStringEncodingInvalidId) &#123;</span><br><span class="line">            encoding = __CFStringComputeEightBitStringEncoding();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *keyPathCStr = <span class="built_in">CFStringGetCStringPtr</span>((<span class="built_in">CFStringRef</span>)keyPath, encoding);</span><br><span class="line">        <span class="keyword">if</span>(keyPathCStr) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *firstDotPointer = memchr(keyPathCStr, <span class="string">'.'</span>, keyPath.length);</span><br><span class="line">            <span class="keyword">if</span>(firstDotPointer) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, firstDotPointer - keyPathCStr)] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="built_in">NSString</span> *subKeyPathAfterDot =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(firstDotPointer - keyPathCStr + <span class="number">1</span>, keyPath.length -  (firstDotPointer - keyPathCStr + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">                </span><br><span class="line">                [[<span class="keyword">self</span> valueForKey:subKey] setValue:value forKeyPath:subKeyPathAfterDot];</span><br><span class="line">                </span><br><span class="line">                [subKey release];</span><br><span class="line">                [subKeyPathAfterDot release];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                [<span class="keyword">self</span> setValue:value forKey:keyPath];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSRange</span> dotRange = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">    <span class="keyword">if</span>(dotRange.length) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, dotRange.location)] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *subKeyPathAfterDot =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(dotRange.location + <span class="number">1</span>, keyPath.length -  (dotRange.location + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">        </span><br><span class="line">        [[<span class="keyword">self</span> valueForKey:subKey] setValue:value forKeyPath:subKeyPathAfterDot];</span><br><span class="line">        </span><br><span class="line">        [subKey release];</span><br><span class="line">        [subKeyPathAfterDot release];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         [<span class="keyword">self</span> setValue:value forKey:keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本是与取值类似的逻辑。</p><h1 id="四、集合对象的KVC"><a href="#四、集合对象的KVC" class="headerlink" title="四、集合对象的KVC"></a>四、集合对象的KVC</h1><h2 id="NSArray的KVC"><a href="#NSArray的KVC" class="headerlink" title="NSArray的KVC"></a>NSArray的KVC</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line"><span class="comment">// 返回Array内每个对象的“key”对应值组成的数组</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 如果keyPath中包含集合运算符, 则返回运算结果, 否则返回Array内每个对象的“keyPath”对应值组成的数组</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="comment">// 设置Array里每个对象的key对应值为value</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *operationKey = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// 集合运算符:如@count, @firstObject, @lastObject等</span></span><br><span class="line">    <span class="keyword">if</span> (key.length &amp;&amp; [key characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span> &amp;&amp; (operationKey = [key substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, key.length - <span class="number">1</span>)])) &#123;</span><br><span class="line">        <span class="comment">// 去掉'@'便是operationKey</span></span><br><span class="line">        <span class="keyword">id</span> value =  [<span class="keyword">super</span> valueForKey:operationKey];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建与自身相等数量的array</span></span><br><span class="line">        <span class="keyword">id</span> *objectsBuff = <span class="built_in">NSAllocateObjectArray</span>(<span class="keyword">self</span>.count);</span><br><span class="line">        <span class="comment">// 现在, 指针p与指针objectsBuff指向一致</span></span><br><span class="line">        <span class="keyword">id</span> *p = objectsBuff;</span><br><span class="line">        <span class="comment">// 遍历自身</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="comment">// 取出容器中的元素对应的value</span></span><br><span class="line">            <span class="keyword">id</span> eachValue = [object valueForKey:key];</span><br><span class="line">            <span class="comment">// 如果eachValue不存在, 则p的next指针指向的对象设置成 NSNull实例对象</span></span><br><span class="line">            <span class="comment">// 如果eachValue有值, 则p的next指针指向的对象设置为eachValue</span></span><br><span class="line">            *(p++) = (eachValue ? : [<span class="built_in">NSNull</span> null]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据objectsBuff创建一个数组, 这个objectsBuff就是'eachValue'的集合</span></span><br><span class="line">        <span class="comment">// 也即假定key为@"name", 遍历容器中所有元素, 取出每个元素key为@"name"对应的值, 这些值的集合就是数组arrayValue</span></span><br><span class="line">        <span class="built_in">NSArray</span> *arrayValue = [[[<span class="built_in">NSArray</span> alloc] initWithObjects:objectsBuff count:<span class="keyword">self</span>.count] autorelease];</span><br><span class="line">        <span class="comment">// 释放objectsBuff</span></span><br><span class="line">        <span class="built_in">NSFreeObjectArray</span>(objectsBuff);</span><br><span class="line">        <span class="keyword">return</span> arrayValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="comment">// 集合运算符: 如@count, @firstObject, @"@unionOfObjects.friend.name"等</span></span><br><span class="line">    <span class="comment">// 这里以 @"@unionOfObjects.friend"为例</span></span><br><span class="line">    <span class="keyword">if</span>(keyPath.length &amp;&amp; [keyPath characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明keyPath中有'@符号', 且'@符号'在第0个位置处</span></span><br><span class="line">        <span class="built_in">NSRange</span> dotRange = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">        <span class="keyword">if</span>(dotRange.length) &#123;</span><br><span class="line">            <span class="comment">// dotRange.length不为0, 说明keyPath中有'@符号', 而且还有'点符号'</span></span><br><span class="line">            <span class="comment">// 取出包含运算符的那部分,如 @"unionOfObjects"</span></span><br><span class="line">            <span class="built_in">NSString</span> *operator = [keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, dotRange.location)];</span><br><span class="line">            <span class="comment">// 取出除运算符之外的那部分,如 @"friend"</span></span><br><span class="line">            <span class="built_in">NSString</span> *keyPathForOperator = [keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(dotRange.location + <span class="number">1</span>, keyPath.length - (dotRange.location + <span class="number">1</span>))];</span><br><span class="line">            <span class="keyword">if</span>(keyPathForOperator) &#123;</span><br><span class="line">                <span class="comment">// 说明含运算符的那部分如 @"unionOfObjects" 和除运算符之外的那部分如 @"friend" 都存在</span></span><br><span class="line">                <span class="built_in">NSUInteger</span> operatorCStrLength = [operator lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                <span class="keyword">char</span> operatorCStr[operatorCStrLength + <span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 转为C字符串operatorCStr, 也即 @"unionOfObjects" 转为 "unionOfObjects"</span></span><br><span class="line">                [operator getCString:operatorCStr maxLength:operatorCStrLength + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                <span class="comment">// 查找方法, 即: "unionOfObjectsForKeyPath:"</span></span><br><span class="line">                Method operatorMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>.class, <span class="string">"%sForKeyPath:"</span>, operatorCStr);</span><br><span class="line">                <span class="keyword">if</span>(!operatorMethod) &#123;</span><br><span class="line">                    <span class="comment">// 上面的方法没找到, 就查找带下划线的那个: "_unionOfObjectsForKeyPath:"</span></span><br><span class="line">                    operatorMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>.class, <span class="string">"_%sForKeyPath:"</span>, operatorCStr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (operatorMethod) &#123;</span><br><span class="line">                    <span class="comment">// 查找成功, 调用运算符对应的方法</span></span><br><span class="line">                    <span class="keyword">id</span> value = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>,Method,<span class="built_in">NSString</span> *))methoinvoke)(<span class="keyword">self</span>,operatorMethod,keyPathForOperator);</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 没有找到, 说明是不支持的运算符</span></span><br><span class="line">                    [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"[&lt;%@ %p&gt; valueForKeyPath:]: this class does not implement the %@ operation."</span>, <span class="keyword">self</span>.class,<span class="keyword">self</span>,operator];</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 说明只有包含运算符的那部分如 @"friend", 走NSObject的valueForKey逻辑</span></span><br><span class="line">                <span class="keyword">id</span> value = [<span class="keyword">super</span> valueForKey:operator];</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// keyPath中有'@符号', 但是没有'点符号', 取出除'@符号'之外的key</span></span><br><span class="line">            <span class="built_in">NSString</span> *key = [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, keyPath.length - <span class="number">1</span>)] <span class="keyword">retain</span>];</span><br><span class="line">            <span class="comment">// 走NSObject的valueForKey逻辑</span></span><br><span class="line">            <span class="keyword">id</span> value = [<span class="keyword">super</span> valueForKey:key];</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有'@符号',可能有'点符号', 走NSObject的valueForKeyPath逻辑</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> valueForKeyPath: keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 对容器内的每一个元素都设值</span></span><br><span class="line">        [object setValue:value forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @sum.keyPath, 例如 @"@sum.price", 传递到这个方法中, 参数keyPath为@"price"</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_sumForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSDecimal</span> resultDecimal = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">NSDecimalNumber</span> *zero = [<span class="built_in">NSDecimalNumber</span> zero];</span><br><span class="line">    <span class="keyword">if</span> (zero) resultDecimal = [zero decimalValue];</span><br><span class="line">    <span class="comment">// 这里使用NSDecimalNumber 保证精确度</span></span><br><span class="line">    <span class="built_in">NSDecimal</span> eachDecimal = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="comment">// 获取每个对象的keyPath(如@"price")对应值</span></span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            eachDecimal = [eachValue decimalValue];</span><br><span class="line">            <span class="comment">// 累加</span></span><br><span class="line">            <span class="built_in">NSDecimalAdd</span>(&amp;resultDecimal, &amp;resultDecimal, &amp;eachDecimal, <span class="built_in">NSRoundBankers</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDecimalNumber</span> decimalNumberWithDecimal:resultDecimal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求平均值</span></span><br><span class="line"><span class="comment">// @avg.keyPath</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_avgForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.count) &#123;</span><br><span class="line">        <span class="comment">//总和 / 对象数</span></span><br><span class="line">        <span class="keyword">return</span> [(<span class="built_in">NSDecimalNumber</span>*)[<span class="keyword">self</span> _sumForKeyPath:keyPath]  decimalNumberByDividingBy:(<span class="built_in">NSDecimalNumber</span>*)[<span class="built_in">NSDecimalNumber</span> numberWithUnsignedInteger:<span class="keyword">self</span>.count]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求数量"><a href="#求数量" class="headerlink" title="求数量"></a>求数量</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对象数目</span></span><br><span class="line"><span class="comment">// @count</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_countForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSNumber</span> numberWithInteger:<span class="keyword">self</span>.count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求最大值"><a href="#求最大值" class="headerlink" title="求最大值"></a>求最大值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求最大值</span></span><br><span class="line"><span class="comment">// @max.keyPath</span></span><br><span class="line">- (<span class="keyword">id</span>)_maxForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">id</span> maxValue = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!maxValue) &#123;</span><br><span class="line">                maxValue = eachValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([maxValue compare:eachValue] == <span class="built_in">NSOrderedAscending</span>)&#123;</span><br><span class="line">                maxValue = eachValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="求最小值"><a href="#求最小值" class="headerlink" title="求最小值"></a>求最小值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求最小值</span></span><br><span class="line"><span class="comment">// @min.keyPath</span></span><br><span class="line">- (<span class="keyword">id</span>)_minForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">id</span> minValue = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!minValue) &#123;</span><br><span class="line">                minValue = eachValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([minValue compare:eachValue] == <span class="built_in">NSOrderedDescending</span>)&#123;</span><br><span class="line">                minValue = eachValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组"><a href="#获取数组" class="headerlink" title="获取数组"></a>获取数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应值 组成数组</span></span><br><span class="line"><span class="comment">// @unionOfObjects.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfObjectsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObject:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取去重数组"><a href="#获取去重数组" class="headerlink" title="获取去重数组"></a>获取去重数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应值 组成去重数组</span></span><br><span class="line"><span class="comment">// @distinctUnionOfObjects.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfObjectsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *unionArray = [<span class="keyword">self</span> _unionOfObjectsForKeyPath:keyPath];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithArray:unionArray].allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取成员数组"><a href="#获取成员数组" class="headerlink" title="获取成员数组"></a>获取成员数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应数组的每个成员 组成数组 这里每个keyPath对应值是也是数组，获取的是每个数组展开后组成的总数组</span></span><br><span class="line"><span class="comment">// @unionOfArrays.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfArraysForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObjectsFromArray:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取去重的成员数组"><a href="#获取去重的成员数组" class="headerlink" title="获取去重的成员数组"></a>获取去重的成员数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应数组的每个成员 组成的去重复数组.</span></span><br><span class="line"><span class="comment">// @distinctUnionOfArrays.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfArraysForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *unionArray = [<span class="keyword">self</span> _unionOfArraysForKeyPath:keyPath];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithArray:unionArray].allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取集合数组"><a href="#获取集合数组" class="headerlink" title="获取集合数组"></a>获取集合数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应集合的每个成员 组成的数组. 这里每个keyPath对应值是是集合，获取的是每个集合展开后组成的总数组</span></span><br><span class="line"><span class="comment">// @unionOfSets.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfSetsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObjectsFromArray:[eachValue allObjects]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取去重的集合数组"><a href="#获取去重的集合数组" class="headerlink" title="获取去重的集合数组"></a>获取去重的集合数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应集合的每个成员 组成的去重复数组.</span></span><br><span class="line"><span class="comment">// @distinctUnionOfSets.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfSetsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *unionSet = [<span class="built_in">NSMutableSet</span> setWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionSet unionSet:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet.allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NSSet的KVC"><a href="#NSSet的KVC" class="headerlink" title="NSSet的KVC"></a>NSSet的KVC</h2><p>与NSArray的逻辑基本保持一致。</p><h2 id="NSOrderedSet的KVC"><a href="#NSOrderedSet的KVC" class="headerlink" title="NSOrderedSet的KVC"></a>NSOrderedSet的KVC</h2><p>与NSArray的逻辑基本保持一致。</p><h2 id="NSDictionary的KVC"><a href="#NSDictionary的KVC" class="headerlink" title="NSDictionary的KVC"></a>NSDictionary的KVC</h2><p>与NSArray相比，主要区别在于：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">- (id)<span class="symbol">valueForKey:</span>(NSString *)key &#123;</span><br><span class="line">    NSString *operationKey = <span class="literal">nil</span>;</span><br><span class="line">    /<span class="regexp">/ key中包含'@字符', 且'@字符'在第0位, 如 @"@count"</span></span><br><span class="line"><span class="regexp">    if(key.length &amp;&amp; [key characterAtIndex:0] == '@' &amp;&amp; (operationKey = [key substringWithRange:NSMakeRange(1, key.length - 1)])) &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 此时, operationKey为 @"count"</span></span><br><span class="line"><span class="regexp">        return [super valueForKey:operationKey];</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 没有'@字符', 走字典的objectForKey逻辑</span></span><br><span class="line"><span class="regexp">        return [self objectForKey:key];</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><code>valueForKey:</code>取值逻辑多了对<code>@</code>字符的处理。</p><p><code>valueForKeyPath:</code>与NSArray的逻辑一致。</p><h1 id="五、其他分类的KVC"><a href="#五、其他分类的KVC" class="headerlink" title="五、其他分类的KVC"></a>五、其他分类的KVC</h1><h2 id="NSMutableDictionary的KVC"><a href="#NSMutableDictionary的KVC" class="headerlink" title="NSMutableDictionary的KVC"></a>NSMutableDictionary的KVC</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@implementation</span> NSMutableDictionary (NSKeyValueCoding)</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">setValue:</span>(id)value <span class="string">forKey:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(value) &#123;</span><br><span class="line">        [self <span class="string">setObject:</span>value <span class="string">forKey:</span>key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [self <span class="string">removeObjectForKey:</span>key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure><p>相比主类增加的特性是：在<code>NSMutableDictionary</code>中，如果设置的<code>value</code>为空，则自动将<code>key</code>对应的<code>value</code>移除。</p><h2 id="NSUserDefaults的KVC"><a href="#NSUserDefaults的KVC" class="headerlink" title="NSUserDefaults的KVC"></a>NSUserDefaults的KVC</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSUserDefaults</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *subKey = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span>(key.length &amp;&amp; [key characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span> &amp;&amp; (subKey = [key substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, key.length - <span class="number">1</span>)])) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> valueForKey:subKey];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> objectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(value) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setObject:value forKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>整合了<code>NSDictionary</code>与<code>NSMutableDictionary</code>的特色。</p><ol><li>增加了对<code>@</code>字符的处理。</li><li>如果设置的<code>value</code>为空，则自动将<code>key</code>对应的<code>value</code>移除。</li></ol><h2 id="NSNull的KVC"><a href="#NSNull的KVC" class="headerlink" title="NSNull的KVC"></a>NSNull的KVC</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSNull</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>对于<code>NSNull</code>来说，无论怎么设值，取出来的值总是<code>NSNull</code>对象。</p><h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>纵观全流程，使用KVC与直接使用存取器相比，速度方面稍有逊色，揣测主要原因如下：</p><ol><li>字符串处理。尤其是含有键路径的时候，使用到递归（函数调用栈）。（当然，含有<code>@</code>字符的集合运算符也算。）</li><li>方法查找。流程颇多，尽管有使用<code>CFSet</code>作为缓存。</li><li>装箱拆箱。KVC要求设值参数和取值参数均为对象，这就需要一般值类型和对象类型的相互转换。</li></ol><p>这也是为啥现在字典转模型都不使用KVC了，参见<a href="https://blog.chenyalun.com/2018/12/20/读「YYModel」/">《读YYModel》</a>。</p><p>KVC并没有那么高性能，那么就无用武之地了吗？非也。</p><p><strong>1.访问私有成员变量</strong><br>对于只给出存取方法的对象，可以使用KVC直接访问私有成员变量。不过可能会破坏封装性，毕竟人家没暴露私有成员变量说明不想让人访问。更多的其实是体现在对系统库上访问上，“一不留神”就用到私有API了，我是乖孩子，不敢这么用，万一被苹果发现整个手百App就要被打回了。。。不过非私有API倒也可以尝试下，<a href="https://blog.chenyalun.com/2019/04/25/读「FDFullscreenPopGesture」/">FDFullscreenPopGesture</a>就用到了私有成员变量，极其巧妙地解决了全屏侧滑的问题。</p><p><strong>2.集合操作</strong><br>在文章的第四部分【集合对象的KVC】，就已经描述过，求和、求平均值、去重巴拉巴拉，聊胜于无。</p><p><strong>3.JSON解析</strong><br>前些日子，图搜进行框架改版，下发接口需要完全重构。这可是个危险的工作，今年后端已经出现两次问题了，主要是字段的类型出现错误，造成端启动的Crash。端上做了大量的防护工作，防不胜防，而且代码越来越难看。于是我想到了使用KVC解析字段，重新整理现有逻辑，脱敏后大致是这样：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">handleResponse:</span>(NSDictionary *)response &#123;</span><br><span class="line">    <span class="keyword">if</span> (![response <span class="string">isKindOfClass:</span>NSDictionary.<span class="keyword">class</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理苹果业务</span></span><br><span class="line">    [self <span class="string">handleAppleConfigWithResponse:</span>[response <span class="string">valueForKeyPath:</span>@<span class="string">"dataset.config1.apple"</span>]];</span><br><span class="line">    <span class="comment">// 处理香蕉业务</span></span><br><span class="line">    [self <span class="string">handleBananaConfigWithResponse:</span>[response <span class="string">valueForKeyPath:</span>@<span class="string">"dataset.config2.banana"</span>]];</span><br><span class="line">    <span class="comment">// 处理橘子业务</span></span><br><span class="line">    [self <span class="string">handleOrangeConfigWithResponse:</span>[response <span class="string">valueForKeyPath:</span>@<span class="string">"dataset.config3.orange"</span>]];</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用keyPath对应到具体的处理逻辑，我想到的好处有：</p><ol><li>不同字段之间逻辑隔离，一个字段出错，并不影响其他字段；</li><li>字段、方法、逻辑一一对应，后期增加或者删减很方便，新同学熟悉业务逻辑也清晰明了；</li><li>response是字典，大可放心，不会出现<code>valueForUndefinedKey</code>的异常；</li><li>在每条处理逻辑中做类型保护工作，方便review，不会遗漏；</li></ol><p>一点点想法而已，如果你有更好的点子，请指教。</p><hr><p>强烈建议阅读：</p><blockquote><p><a href="https://myzerone.com/posts/2016/10/20/KVC(Key-Value-Coding)/" target="_blank" rel="noopener">https://myzerone.com/posts/2016/10/20/KVC(Key-Value-Coding)/</a><br><a href="https://objccn.io/issue-7-3/" target="_blank" rel="noopener">KVC 和 KVO</a></p></blockquote><p>源码来自：<a href="https://github.com/renjinkui2719/DIS_KVC_KVO" target="_blank" rel="noopener">https://github.com/renjinkui2719/DIS_KVC_KVO</a> 。感谢作者。</p><blockquote><p>参考资料<br><a href="https://nshipster.cn/kvc-collection-operators/" target="_blank" rel="noopener">KVC Collection Operators</a><br><a href="https://www.jianshu.com/p/a50ea091e1f4" target="_blank" rel="noopener">iOS KVC</a><br><a href="http://hufeng825.github.io/2013/09/23/ios33/" target="_blank" rel="noopener">iOS开发之你真的了解了KVC吗？</a><br><a href="https://www.jianshu.com/p/938855e842e4" target="_blank" rel="noopener">KVC集合操作符</a><br><a href="https://suhou.github.io/2017/09/29/KVC原理小记/" target="_blank" rel="noopener">KVC原理小记</a><br><a href="http://blog.cocoabit.com/ios-settter-benchmark/" target="_blank" rel="noopener">iOS 对象的 setter 方法性能测试</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; KVC源码阅读。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>读「FDFullscreenPopGesture」</title>
    <link href="http://blog.chenyalun.com/2019/04/25/%E8%AF%BB%E3%80%8CFDFullscreenPopGesture%E3%80%8D/"/>
    <id>http://blog.chenyalun.com/2019/04/25/读「FDFullscreenPopGesture」/</id>
    <published>2019-04-25T11:52:23.000Z</published>
    <updated>2019-09-16T08:55:27.196Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2019.5.29 修改Method Swizzling部分内容</p></blockquote><p></p><p align="center"> 优雅地开启全屏侧滑手势。 </p><br><a id="more"></a><p></p><h2 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h2><p>作者给UINavigationController和UIViewController都添加了分类，并进行了默认的参数设置，因此不做任何配置就能拥有这个功能。</p><h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>作者通过方法交换，hook到系统原生push方法中的手势中的target和动画调用selector，创建自己的UIPanGestureRecognizer，并设置它的target和selector。</p><h2 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h2> <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> UINavigationController (FDFullscreenPopGesture)</span><br><span class="line"><span class="comment">// 获取重新实现的侧滑返回手势对象</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong, readonly) UIPanGestureRecognizer *fd_fullscreenPopGestureRecognizer;</span><br><span class="line"><span class="comment">// 是否允许视图控制器单独管理它对应的NavigationBar显示与隐藏.默认是YES</span></span><br><span class="line"><span class="comment">// 这个需要配合视图控制器的fd_prefersNavigationBarHidden属性来使用</span></span><br><span class="line"><span class="comment">// 也就是说如果把这个属性设置为NO, 视图控制器对应的导航栏的隐藏与否不由视图控制器决定</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_viewControllerBasedNavigationBarAppearanceEnabled;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">@interface</span> UIViewController (FDFullscreenPopGesture)</span><br><span class="line"><span class="comment">// 是否禁用全屏侧滑手势(默认NO)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_interactivePopDisabled;</span><br><span class="line"><span class="comment">// 表明当前控制器的导航栏是显示还是隐藏, 默认NO (显示导航栏)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_prefersNavigationBarHidden;</span><br><span class="line"><span class="comment">// 设置能够响应侧滑的最大边界(距离)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) CGFloat fd_interactivePopMaxAllowedInitialDistanceToLeftEdge;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><h2 id="四、源码阅读"><a href="#四、源码阅读" class="headerlink" title="四、源码阅读"></a>四、源码阅读</h2><h3 id="FDFullscreenPopGestureRecognizerDelegate"><a href="#FDFullscreenPopGestureRecognizerDelegate" class="headerlink" title="_FDFullscreenPopGestureRecognizerDelegate"></a>_FDFullscreenPopGestureRecognizerDelegate</h3><p><code>_FDFullscreenPopGestureRecognizerDelegate</code>对象。遵循<code>UIGestureRecognizerDelegate</code>协议，主要用于决定控制器是否能响应手势。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_FDFullscreenPopGestureRecognizerDelegate</span> : <span class="title">NSObject</span> &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UINavigationController</span> *navigationController;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_FDFullscreenPopGestureRecognizerDelegate</span></span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line">    <span class="comment">// 栈的最顶层, 不需要响应手势</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打开了禁用手势的开关</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *topViewController = <span class="keyword">self</span>.navigationController.viewControllers.lastObject;</span><br><span class="line">    <span class="keyword">if</span> (topViewController.fd_interactivePopDisabled) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 超过自己设置的left edge</span></span><br><span class="line">    <span class="built_in">CGPoint</span> beginningLocation = [gestureRecognizer locationInView:gestureRecognizer.view];</span><br><span class="line">    <span class="built_in">CGFloat</span> maxAllowedInitialDistance = topViewController.fd_interactivePopMaxAllowedInitialDistanceToLeftEdge;</span><br><span class="line">    <span class="keyword">if</span> (maxAllowedInitialDistance &gt; <span class="number">0</span> &amp;&amp; beginningLocation.x &gt; maxAllowedInitialDistance) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正在执行Transition动画</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span>.navigationController valueForKey:<span class="string">@"_isTransitioning"</span>] boolValue]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手机横屏状态下, 适配侧滑方向</span></span><br><span class="line">    <span class="comment">// It tells you how far the touch moved since it was last reset. It resets when the touch goes down or if you reset it yourself.</span></span><br><span class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:gestureRecognizer.view];</span><br><span class="line">    <span class="built_in">BOOL</span> isLeftToRight = [<span class="built_in">UIApplication</span> sharedApplication].userInterfaceLayoutDirection == <span class="built_in">UIUserInterfaceLayoutDirectionLeftToRight</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> multiplier = isLeftToRight ? <span class="number">1</span> : - <span class="number">1</span>; <span class="comment">// 只能是从左向右滑</span></span><br><span class="line">    <span class="keyword">if</span> ((translation.x * multiplier) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="UIViewController-FDFullscreenPopGesturePrivate"><a href="#UIViewController-FDFullscreenPopGesturePrivate" class="headerlink" title="UIViewController (FDFullscreenPopGesturePrivate)"></a>UIViewController (FDFullscreenPopGesturePrivate)</h3><p>UIViewController的分类。给其添加关联属性<code>fd_willAppearInjectBlock</code>。hook <code>viewWillAppear</code>方法并在其中调用<code>fd_willAppearInjectBlock</code>回调，hook <code>viewWillDisappear</code>方法，并在其中根据控制器的<code>fd_prefersNavigationBarHidden</code>属性来设置状态栏的显示与否。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^_FDViewControllerWillAppearInjectBlock)(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">BOOL</span> animated);</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesturePrivate</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) _FDViewControllerWillAppearInjectBlock fd_willAppearInjectBlock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesturePrivate</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="comment">// 方法交换, viewWillAppear和fd_viewWillAppear互换, viewWillDisappear和fd_viewWillDisappear互换</span></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Method viewWillAppear_originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewWillAppear:));</span><br><span class="line">        Method viewWillAppear_swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_viewWillAppear:));</span><br><span class="line">        method_exchangeImplementations(viewWillAppear_originalMethod, viewWillAppear_swizzledMethod);</span><br><span class="line">    </span><br><span class="line">        Method viewWillDisappear_originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewWillDisappear:));</span><br><span class="line">        Method viewWillDisappear_swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_viewWillDisappear:));</span><br><span class="line">        method_exchangeImplementations(viewWillDisappear_originalMethod, viewWillDisappear_swizzledMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// 主类的实现 Forward to primary implementation.</span></span><br><span class="line">    [<span class="keyword">self</span> fd_viewWillAppear:animated];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.fd_willAppearInjectBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.fd_willAppearInjectBlock(<span class="keyword">self</span>, animated);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// Forward to primary implementation.</span></span><br><span class="line">    [<span class="keyword">self</span> fd_viewWillDisappear:animated];</span><br><span class="line">    <span class="comment">// 延迟为0相当于直接调用异步</span></span><br><span class="line">    <span class="comment">// dispatch_async(dispatch_get_main_queue(), ^&#123;&#125;);</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIViewController</span> *viewController = <span class="keyword">self</span>.navigationController.viewControllers.lastObject;</span><br><span class="line">        <span class="comment">// viewController存在而且它的fd_prefersNavigationBarHidden为NO, 把NavigationBar显示出来</span></span><br><span class="line">        <span class="keyword">if</span> (viewController &amp;&amp; !viewController.fd_prefersNavigationBarHidden) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">NO</span> animated:<span class="literal">NO</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_FDViewControllerWillAppearInjectBlock)fd_willAppearInjectBlock &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_willAppearInjectBlock:(_FDViewControllerWillAppearInjectBlock)block &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_willAppearInjectBlock), block, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="UINavigationController-FDFullscreenPopGesture"><a href="#UINavigationController-FDFullscreenPopGesture" class="headerlink" title="UINavigationController (FDFullscreenPopGesture)"></a>UINavigationController (FDFullscreenPopGesture)</h3><p>UINavigationController的分类。hook<code>pushViewController:animated:</code>方法，给响应push手势的view添加自定义的<code>fd_fullscreenPopGestureRecognizer</code>手势。当然，<code>fd_fullscreenPopGestureRecognizer</code>的target和selector与push原生手势的target及selector保持一致。除此之外，<code>fd_fullscreenPopGestureRecognizer</code>手势的代理是上面的<code>_FDFullscreenPopGestureRecognizerDelegate</code>对象，目的是决定是否响应手势。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UINavigationController</span> (<span class="title">FDFullscreenPopGesture</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// Inject "-pushViewController:animated:"</span></span><br><span class="line">    <span class="comment">// 交换pushViewController与fd_pushViewController</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">        </span><br><span class="line">        SEL originalSelector = <span class="keyword">@selector</span>(pushViewController:animated:);</span><br><span class="line">        SEL swizzledSelector = <span class="keyword">@selector</span>(fd_pushViewController:animated:);</span><br><span class="line">        </span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            class_replaceMethod(<span class="keyword">class</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_pushViewController:(<span class="built_in">UIViewController</span> *)viewController</span><br><span class="line">                     animated:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// 保证view只添加一次fd_fullscreenPopGestureRecognizer手势</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.interactivePopGestureRecognizer.view.gestureRecognizers containsObject:<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Add our own gesture recognizer to where the onboard screen edge pan gesture recognizer is attached to.</span></span><br><span class="line">        [<span class="keyword">self</span>.interactivePopGestureRecognizer.view addGestureRecognizer:<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取私有变量target和selector</span></span><br><span class="line">        <span class="built_in">NSArray</span> *internalTargets = [<span class="keyword">self</span>.interactivePopGestureRecognizer valueForKey:<span class="string">@"targets"</span>];</span><br><span class="line">        <span class="keyword">id</span> internalTarget = [internalTargets.firstObject valueForKey:<span class="string">@"target"</span>];</span><br><span class="line">        SEL internalAction = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</span><br><span class="line">        <span class="comment">// 设置滑动手势的代理</span></span><br><span class="line">        <span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer.delegate = <span class="keyword">self</span>.fd_popGestureRecognizerDelegate;</span><br><span class="line">        [<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer addTarget:internalTarget action:internalAction];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 禁用原生的手势</span></span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理navigation bar 的显示与隐藏</span></span><br><span class="line">    [<span class="keyword">self</span> fd_setupViewControllerBasedNavigationBarAppearanceIfNeeded:viewController];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用原来的方法实现(加一个判断, 避免重复push)</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.viewControllers containsObject:viewController]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> fd_pushViewController:viewController animated:animated];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_setupViewControllerBasedNavigationBarAppearanceIfNeeded:(<span class="built_in">UIViewController</span> *)appearingViewController &#123;</span><br><span class="line">    <span class="comment">// 如果fd_viewControllerBasedNavigationBarAppearanceEnabled设置为NO, 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.fd_viewControllerBasedNavigationBarAppearanceEnabled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配合fd_prefersNavigationBarHidden来使用</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    _FDViewControllerWillAppearInjectBlock block = ^(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">BOOL</span> animated) &#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) strongSelf = weakSelf;</span><br><span class="line">        <span class="keyword">if</span> (strongSelf) &#123;</span><br><span class="line">            [strongSelf setNavigationBarHidden:viewController.fd_prefersNavigationBarHidden animated:animated];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置appearingViewController、disappearingViewController的fd_willAppearInjectBlock</span></span><br><span class="line">    appearingViewController.fd_willAppearInjectBlock = block;</span><br><span class="line">    <span class="built_in">UIViewController</span> *disappearingViewController = <span class="keyword">self</span>.viewControllers.lastObject;</span><br><span class="line">    <span class="keyword">if</span> (disappearingViewController &amp;&amp; !disappearingViewController.fd_willAppearInjectBlock) &#123;</span><br><span class="line">        disappearingViewController.fd_willAppearInjectBlock = block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_FDFullscreenPopGestureRecognizerDelegate *)fd_popGestureRecognizerDelegate &#123;</span><br><span class="line">    _FDFullscreenPopGestureRecognizerDelegate *delegate = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="comment">// 只初始化delegate一次</span></span><br><span class="line">    <span class="keyword">if</span> (!delegate) &#123;</span><br><span class="line">        delegate = [[_FDFullscreenPopGestureRecognizerDelegate alloc] init];</span><br><span class="line">        delegate.navigationController = <span class="keyword">self</span>;</span><br><span class="line">        </span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIPanGestureRecognizer</span> *)fd_fullscreenPopGestureRecognizer &#123;</span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGestureRecognizer = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="comment">// 只初始化panGestureRecognizer一次</span></span><br><span class="line">    <span class="keyword">if</span> (!panGestureRecognizer) &#123;</span><br><span class="line">        panGestureRecognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] init];</span><br><span class="line">        panGestureRecognizer.maximumNumberOfTouches = <span class="number">1</span>;</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, panGestureRecognizer, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> panGestureRecognizer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_viewControllerBasedNavigationBarAppearanceEnabled &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *number = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="keyword">if</span> (number) &#123; <span class="comment">// BOOL值被封装成对象了</span></span><br><span class="line">        <span class="keyword">return</span> number.boolValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 走到这一步说明还没有设置过关联属性, 手动设置</span></span><br><span class="line">    <span class="keyword">self</span>.fd_viewControllerBasedNavigationBarAppearanceEnabled = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_viewControllerBasedNavigationBarAppearanceEnabled:(<span class="built_in">BOOL</span>)enabled &#123;</span><br><span class="line">    SEL key = <span class="keyword">@selector</span>(fd_viewControllerBasedNavigationBarAppearanceEnabled);</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, @(enabled), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="UIViewController-FDFullscreenPopGesture"><a href="#UIViewController-FDFullscreenPopGesture" class="headerlink" title="UIViewController (FDFullscreenPopGesture)"></a>UIViewController (FDFullscreenPopGesture)</h3><p>UIViewController的分类。给其添加关联属性<code>fd_interactivePopDisabled</code>、<code>fd_interactivePopMaxAllowedInitialDistanceToLeftEdge</code>和<code>fd_prefersNavigationBarHidden</code>。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesture</span>)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_interactivePopDisabled &#123;</span><br><span class="line">    <span class="comment">// 关于_cmd: 这行代码等价于 return [objc_getAssociatedObject(self, @selector(fd_interactivePopDisabled)) boolValue];</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_interactivePopDisabled:(<span class="built_in">BOOL</span>)disabled &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_interactivePopDisabled), @(disabled), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_prefersNavigationBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_prefersNavigationBarHidden:(<span class="built_in">BOOL</span>)hidden &#123;</span><br><span class="line">    <span class="comment">// 存储的时候需要把基本数据类型包装成对象 @(hidden)</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_prefersNavigationBarHidden), @(hidden), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)fd_interactivePopMaxAllowedInitialDistanceToLeftEdge &#123;</span><br><span class="line"><span class="meta">#if CGFLOAT_IS_DOUBLE // CGFLOAT_IS_DOUBLE宏: 64位下是1 否则0, 特别严谨</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) doubleValue];</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) floatValue];</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_interactivePopMaxAllowedInitialDistanceToLeftEdge:(<span class="built_in">CGFloat</span>)distance &#123;</span><br><span class="line">    SEL key = <span class="keyword">@selector</span>(fd_interactivePopMaxAllowedInitialDistanceToLeftEdge);</span><br><span class="line">    <span class="comment">// 使用@(MAX(0, distance), 适配distance被外界设置为负值的情况</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, @(MAX(<span class="number">0</span>, distance)), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="五、再谈Method-Swizzling"><a href="#五、再谈Method-Swizzling" class="headerlink" title="五、再谈Method Swizzling"></a>五、再谈Method Swizzling</h2><h3 id="实例方法交换"><a href="#实例方法交换" class="headerlink" title="实例方法交换"></a>实例方法交换</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">@interface ViewController ()</span><br><span class="line">@end</span><br><span class="line">@implementation ViewController</span><br><span class="line">- (void)viewWillAppear:(<span class="keyword">BOOL)animated </span>&#123;</span><br><span class="line">    [super viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"原始的方法实现"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line">@implementation ViewController (MethodSwizzling1)</span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</span><br><span class="line">        Class cls = [self class]<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">originalSel </span>= @selector(viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">swizzledSel </span>= @selector(ya1_viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        Method <span class="keyword">originalMethod </span>= class_getInstanceMethod(cls, <span class="keyword">originalSel);</span></span><br><span class="line"><span class="keyword"> </span>       Method <span class="keyword">swizzledMethod </span>= class_getInstanceMethod(cls, <span class="keyword">swizzledSel);</span></span><br><span class="line"><span class="keyword"> </span>       if (class_addMethod(cls, <span class="keyword">originalSel, </span>method_getImplementation(<span class="keyword">swizzledMethod), </span>method_getTypeEncoding(<span class="keyword">swizzledMethod))) </span>&#123;</span><br><span class="line">            class_replaceMethod(cls, <span class="keyword">swizzledSel, </span>method_getImplementation(<span class="keyword">originalMethod), </span>method_getTypeEncoding(<span class="keyword">originalMethod));</span></span><br><span class="line"><span class="keyword"> </span>       &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(<span class="keyword">originalMethod, </span><span class="keyword">swizzledMethod);</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)ya1_viewWillAppear:(<span class="keyword">BOOL)animated </span> &#123;</span><br><span class="line">    [self ya1_viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"第一次在分类里面互换"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><h3 id="类方法交换"><a href="#类方法交换" class="headerlink" title="类方法交换"></a>类方法交换</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 交换类方法</span></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        SEL originalSel = <span class="meta">@selector(a)</span>;</span><br><span class="line">        SEL swizzledSel = <span class="meta">@selector(b)</span>;</span><br><span class="line">        Class <span class="class"><span class="keyword">class</span> = <span class="title">object_getClass</span></span>(self);</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">originalSel);</span></span></span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">swizzledSel);</span></span></span><br><span class="line">        <span class="keyword">if</span> (class_addMethod(<span class="class"><span class="keyword">class</span>, <span class="type">originalSel</span>, <span class="type">method_getImplementation</span></span>(swizzledMethod), method_getTypeEncoding(swizzledMethod))) &#123;</span><br><span class="line">            class_replaceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">swizzledSel</span>, <span class="type">method_getImplementation</span></span>(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)b &#123;</span><br><span class="line">    NSLog(@<span class="string">"b"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题1：实例方法交换与类方法交换有什么区别？"><a href="#问题1：实例方法交换与类方法交换有什么区别？" class="headerlink" title="问题1：实例方法交换与类方法交换有什么区别？"></a>问题1：实例方法交换与类方法交换有什么区别？</h3><p>没有大的变化，唯一的区别在于获取方法所属的对象上，一个获取的是类对象一个获取的是元类对象。即一个是<code>[self class]</code>或者说<code>[self self]</code>，一个是<code>object_getClass(self)</code>（在类方法load中调用的）。<br>为什么会有这种区别？原因在于，实例方法存储在类对象中，类方法存储在元类对象中。</p><p>再一个，看看<code>class</code>的实现：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">+ (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网上许多文章这么说的：</p><blockquote><p>object_getClass与self.class的区别<br>self.class:当self是实例对象的时候，返回的是类对象，否则则返回自身。<br>object_getClass:获得的是isa的指向</p></blockquote><p>这个“返回自身”很含糊。</p><p><code>object_getClass()</code>获取isa指向毋庸置疑。实例对象的isa指向类对象，类对象的isa指向元类对象，元类对象的isa指向根元类，根元类的isa指向它自己，耳熟能详。</p><p>关键是<code>class</code>，self指向了消息的接收者（“the object that’s received this message”），很自然地，实例方法的消息接收者是实例对象，类方法的消息接收者是类对象。根据代码实现来看，实例方法调用<code>class</code>是获取实例对象的isa指向，即类对象。而类对象调用<code>class</code>返回的消息接收者自己，<strong>这个“自身”指的就是类对象</strong>。于是，不管是实例对象还是类对象调用<code>class</code>方法，返回的总是类对象。</p><p>同样地，在实例方法的交换中，这几种获取类对象的方式是等价的：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">self</span>];</span><br><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><p>调用<code>self</code>的<code>self</code>方法也没啥奇怪的，源码是这样的：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题2：能否做到实例方法与类方法交换？"><a href="#问题2：能否做到实例方法与类方法交换？" class="headerlink" title="问题2：能否做到实例方法与类方法交换？"></a>问题2：能否做到实例方法与类方法交换？</h3><p>实例方法与实例方法互换、类方法与类方法互换都很容易做到。那一个实例方法与一个类方法互换，或者一个类方法与一个实例方法互换可以做到吗？答案是肯定的。<br>根据上文讨论，关键在于获取方法所属的对象上，即巧妙控制好获取的类对象和元类对象即可。</p><h4 id="（1）实例方法与类方法互换（新的实例方法交换原先的类方法）"><a href="#（1）实例方法与类方法互换（新的实例方法交换原先的类方法）" class="headerlink" title="（1）实例方法与类方法互换（新的实例方法交换原先的类方法）"></a>（1）实例方法与类方法互换（新的实例方法交换原先的类方法）</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SEL originalSel</span> = @selector(classMethod);</span><br><span class="line"><span class="attribute">SEL swizzledSel</span> = @selector(newInstanceMethod);</span><br><span class="line"><span class="attribute">Class originClass</span> = object_getClass(self);</span><br><span class="line"><span class="attribute">Class swizzleClass</span> = self;</span><br></pre></td></tr></table></figure><h4 id="（2）类方法与实例方法互换（新的类方法交换原先的实例方法）"><a href="#（2）类方法与实例方法互换（新的类方法交换原先的实例方法）" class="headerlink" title="（2）类方法与实例方法互换（新的类方法交换原先的实例方法）"></a>（2）类方法与实例方法互换（新的类方法交换原先的实例方法）</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SEL originalSel</span> = @selector(instanceMethod);</span><br><span class="line"><span class="attribute">SEL swizzledSel</span> = @selector(newClassMethod);</span><br><span class="line"><span class="attribute">Class originClass</span> = self;</span><br><span class="line"><span class="attribute">Class swizzleClass</span> = object_getClass(self);</span><br></pre></td></tr></table></figure><p>二者的共同实现是这样的：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">originalMethod</span> = <span class="title">class_getInstanceMethod</span><span class="params">(originClass, originalSel)</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">swizzledMethod</span> = <span class="title">class_getInstanceMethod</span><span class="params">(swizzleClass, swizzledSel)</span>;</span></span><br><span class="line"><span class="keyword">if</span> (class_addMethod(originClass, originalSel, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">       class_replaceMethod(originClass, swizzledSel, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span></span><br><span class="line"><span class="comment">&#125;</span> <span class="keyword">else</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">       method_exchangeImplementations(originalMethod, swizzledMethod);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？"><a href="#问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？" class="headerlink" title="问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？"></a>问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？</h3><p>比如：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@implementation ViewController (MethodSwizzling2)</span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</span><br><span class="line">        SEL <span class="keyword">originalSel </span>= @selector(viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">swizzledSel </span>= @selector(ya2_viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        Method <span class="keyword">originalMethod </span>= class_getInstanceMethod(self, <span class="keyword">originalSel);</span></span><br><span class="line"><span class="keyword"> </span>       Method <span class="keyword">swizzledMethod </span>= class_getInstanceMethod(self, <span class="keyword">swizzledSel);</span></span><br><span class="line"><span class="keyword"> </span>       if (class_addMethod(self, <span class="keyword">originalSel, </span>method_getImplementation(<span class="keyword">swizzledMethod), </span>method_getTypeEncoding(<span class="keyword">swizzledMethod))) </span>&#123;</span><br><span class="line">            class_replaceMethod(self, <span class="keyword">swizzledSel, </span>method_getImplementation(<span class="keyword">originalMethod), </span>method_getTypeEncoding(<span class="keyword">originalMethod));</span></span><br><span class="line"><span class="keyword"> </span>       &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(<span class="keyword">originalMethod, </span><span class="keyword">swizzledMethod);</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)ya2_viewWillAppear:(<span class="keyword">BOOL)animated </span> &#123;</span><br><span class="line">    [self ya2_viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"第二次在分类里面互换"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>很明显不会。</p><p>原因: <code>Compile Sources</code>中设定了分类的编译顺序为<code>ViewController+MethodSwizzling.m --&gt; ViewController+MethodSwizzling2.m</code>，<code>load</code>方法的调用顺序也是这样。最新先调用主类的<code>viewWillAppear:</code>方法不必多说，接着调用分类<code>ViewController+MethodSwizzling</code>中的方法互换逻辑，使得第一次方法互换成功。紧接着调用分类<code>ViewController+MethodSwizzling2</code>中的方法互换逻辑，这个不会影响第一次方法互换的逻辑，相当于在第一次的方法互换之后再互换一次。<br><img src="https://image.chenyalun.com/2019/04/23/001.png" style="zoom:50%"></p><p>第一次: <code>ya_viewWillAppear</code>的实现与<code>viewWillAppear</code>的实现互换<br>第二次: <code>ya2_viewWillAppear</code>的实现与<code>ya_viewWillAppear</code>的实现互换，因为<code>viewWillAppear</code>的实现被<code>ya_viewWillAppear</code>代替了。所以主类和各个分类的方法都被清晰地调用了。<br><img src="https://image.chenyalun.com/2019/04/23/002.png" style="zoom:50%"></p><h3 id="问题4：为什么需要class-replaceMethod-函数"><a href="#问题4：为什么需要class-replaceMethod-函数" class="headerlink" title="问题4：为什么需要class_replaceMethod()函数?"></a>问题4：为什么需要class_replaceMethod()函数?</h3><p>原先的方法存在(有实现)，自不必说，使用<code>method_exchangeImplementations()</code>直接交换函数指针即可。<br>那么有个问题，假定原先的方法不存在，那直接使用<code>class_addMethod()</code>函数把swizzledMethod方法的实现“交给了”原先的originalMethod方法，此时原先的originalMethod方法和新的swizzledMethod方法都指向了同一个实现：swizzledMethod方法的实现。进行到这一步足够了，<code>class_addMethod()</code>函数既判断了原先的方法是否实现，倘若未实现又自动把新方法的实现“交给了”它，完全解决了问题，还需要<code>class_replaceMethod()</code>函数做啥?</p><p>首先要明确：<strong><code>class_addMethod()</code>的实现会覆盖父类的方法实现，但不会取代本类中已存在的实现，如果本类中包含一个同名的实现，则函数会返回NO。</strong>“原先的方法没有实现”有两种情况，第一种:该方法是仅仅属于这个类的，父类没有。第二种:该方法是继承自这个类的父类的，父类中有实现，而它自己却没有实现。<br>对于第二种情况，倘若仅仅使用<code>class_addMethod()</code>函数而没有使用<code>class_replaceMethod()</code>函数，会造成<strong>“丢失掉原先的父类的实现”</strong>。</p><p>示例代码:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MainObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MainObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)a &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"super-main"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// AObject继承自MainObject</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AObject</span> : <span class="title">MainObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AObject</span> (<span class="title">Object</span>)</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AObject</span> (<span class="title">Object</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        SEL originalSel = <span class="keyword">@selector</span>(a);</span><br><span class="line">        SEL swizzledSel = <span class="keyword">@selector</span>(b);</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSel);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSel);</span><br><span class="line">        <span class="keyword">if</span> (class_addMethod(<span class="keyword">self</span>, originalSel, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))) &#123;</span><br><span class="line">            <span class="comment">// 什么也不做</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)b &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"b-method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">AObject *obj = [AObject new];</span><br><span class="line">[obj performSelector:<span class="keyword">@selector</span>(a)];</span><br><span class="line">[obj performSelector:<span class="keyword">@selector</span>(b)];</span><br></pre></td></tr></table></figure><p>很明显，打印了两次”b-method”。</p><blockquote><p>2019-05-29 20:01:19.934449+0800 Aaron[35973:604269] b-method<br>2019-05-29 20:01:19.934591+0800 Aaron[35973:604269] b-method</p></blockquote><p>而如果添加上<code>class_replaceMethod()</code>函数，先给originalSel添加上swizzledMethod的实现，再把父类的实现originalMethod替换到swizzledSel中，这样父类的实现就会得到调用:</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">///......</span><br><span class="line"><span class="symbol">if</span> (class_addMethod(<span class="keyword">self, </span>originalSel, method_getImplementation(<span class="keyword">swizzledMethod), </span>method_getTypeEncoding(<span class="keyword">swizzledMethod))) </span>&#123;</span><br><span class="line">    class_replaceMethod(<span class="keyword">self, </span><span class="keyword">swizzledSel, </span>method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod))<span class="comment">;</span></span><br><span class="line">&#125; <span class="meta">else</span> &#123;</span><br><span class="line">    method_exchangeImplementations(originalMethod, <span class="keyword">swizzledMethod);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br><span class="line"><span class="keyword">///......</span></span><br></pre></td></tr></table></figure><p>打印：</p><blockquote><p>2019-05-29 20:06:39.298454+0800 Aaron[36191:611275] b-method<br>2019-05-29 20:06:39.298605+0800 Aaron[36191:611275] super-main</p></blockquote><p>因此，当“主类本身没有实现需要替换的方法，而是继承了父类的实现”时，比如一开始的例子<code>viewWillAppear</code>方法，就可以调用到父类的实现，避免出现问题。对于完全“无中生有”的比如<code>aaa</code>方法，用不用<code>class_replaceMethod()</code>都无妨。</p><h3 id="问题5：方法交换的标准姿势为什么是load方法配合dispatch-once？"><a href="#问题5：方法交换的标准姿势为什么是load方法配合dispatch-once？" class="headerlink" title="问题5：方法交换的标准姿势为什么是load方法配合dispatch_once？"></a>问题5：方法交换的标准姿势为什么是load方法配合dispatch_once？</h3><p>常与<code>+ (void)load;</code>方法在一起比较的是<code>+ (void)initialize;</code>方法。<br><strong>为什么是<code>+ (void)load;</code>方法？</strong></p><ol><li><code>+ (void)load;</code>是在该类被加载到Runtime时调用的，在手动实现之后，一定会被调用，且正常情况下只会被调用一次，子类也不会多次调用父类的load方法（因为load方法时通过函数指针直接调用，而普通方法是通过消息机制调用。）。</li><li><code>+ (void)initialize;</code>是在该类收到第一条消息前被调用，如果不向它发送消息（调用类方法或者实例方法），则该方法不会被调用。如果一个子类没有实现<code>+ (void)initialize;</code>方法，那么父类的该方法会被调用多次。</li></ol><p>希望方法交换的逻辑一定会被执行，所以选择了load方法。</p><p><strong>为什么是<code>dispatch_once</code>？</strong><br>正常情况下load方法只会被执行一次，但是要考虑手动调用的情况：<code>[ViewController load];</code>。使用dispatch_once更加完备地保证只执行一次。</p><h2 id="六、自定义侧滑手势"><a href="#六、自定义侧滑手势" class="headerlink" title="六、自定义侧滑手势"></a>六、自定义侧滑手势</h2><p>除了全屏侧滑之外，有些情况下需要自定义侧滑手势，这时可以使用<code>UIScreenEdgePanGestureRecognizer</code>实现。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIView</span> *orangeView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">    orangeView.backgroundColor = <span class="built_in">UIColor</span>.orangeColor;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:orangeView];</span><br><span class="line">    <span class="built_in">UIScreenEdgePanGestureRecognizer</span> *pan = [[<span class="built_in">UIScreenEdgePanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(handlePop:)];</span><br><span class="line">    pan.edges = <span class="built_in">UIRectEdgeLeft</span>;</span><br><span class="line">    [orangeView addGestureRecognizer:pan];</span><br><span class="line">    <span class="keyword">self</span>.orangeView = orangeView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)handlePop:(<span class="built_in">UIScreenEdgePanGestureRecognizer</span> *)pan &#123;</span><br><span class="line">    <span class="keyword">void</span> (^setOriginX)(<span class="built_in">UIView</span> *, <span class="built_in">CGFloat</span>) = ^(<span class="built_in">UIView</span> *view, <span class="built_in">CGFloat</span> x) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.15</span> animations:^&#123;</span><br><span class="line">            <span class="built_in">CGRect</span> frame = view.frame;</span><br><span class="line">            frame.origin.x = x;</span><br><span class="line">            view.frame = frame;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *targetView = pan.view;</span><br><span class="line">    <span class="built_in">CGFloat</span> offsetX = [pan translationInView:targetView].x;</span><br><span class="line">    <span class="keyword">if</span> (pan.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        targetView.center = <span class="built_in">CGPointMake</span>(targetView.center.x + offsetX, targetView.center.y);</span><br><span class="line">        [pan setTranslation:<span class="built_in">CGPointZero</span> inView:targetView.superview];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pan.state == <span class="built_in">UIGestureRecognizerStateEnded</span> || pan.state == <span class="built_in">UIGestureRecognizerStateCancelled</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetView.frame.origin.x / targetView.frame.size.width &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">            setOriginX(targetView, targetView.bounds.size.width);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setOriginX(targetView, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>作为FDFullscreenPopGesture的源码阅读文章，实际上重心却不在它这。拜读下来，其实都是些常见的东西：关联属性，方法交换。其实解决问题最重要的，是思路。不然可能自己写了一大堆代码，也不能很好高效地解决问题。</p><p>以FDFullscreenPopGesture为引子，又重点回顾了方法交换，作为拓展，回答了引出的许多问题，像实例方法与类方法交换完全是脑洞来的，工作中我还没这么用过😂😂。最后简单介绍了UIScreenEdgePanGestureRecognizer，这个很好使的。</p><blockquote><p>参考资料<br><a href="http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/" target="_blank" rel="noopener">一个丝滑的全屏滑动返回手势</a><br><a href="https://www.jianshu.com/p/d39f7d22db6c" target="_blank" rel="noopener">iOS利用Runtime自定义控制器POP手势动画</a><br><a href="https://juejin.im/entry/5bea8d6de51d454fbd6b472f" target="_blank" rel="noopener">iOS-FDFullscreenPopGesture详解</a> </p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2019.5.29 修改Method Swizzling部分内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 优雅地开启全屏侧滑手势。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>开源项目：PageMenu</title>
    <link href="http://blog.chenyalun.com/2019/03/21/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9APageMenu/"/>
    <id>http://blog.chenyalun.com/2019/03/21/开源项目：PageMenu/</id>
    <published>2019-03-21T11:42:23.000Z</published>
    <updated>2019-09-16T09:10:17.293Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 一个使用Swift写的PageMenu。 </p><br><a id="more"></a><p></p><p>一个使用Swift写的PageMenu。没有那么多接口，自己可以根据实际需要扩展。写这个的目的一是为了练手，毕竟工作中使用Swift极少，再一个，PageMenu使用场景挺多的，我遇到过好几次，这次做一个总结。</p><p>项目地址:<a href="https://github.com/ChenYalun/PageMenu" target="_blank" rel="noopener">https://github.com/ChenYalun/PageMenu</a></p><h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>MenuStyle: 用于标题的样式配置<br>PageTitleView: 私有的单个标题控件<br>PageTitle: 标题区视图<br>PageContent: 内容区视图<br>PageMenu: 继承自UIViewController的视图控制器，用于连接PageTitle和PageContent<br>UIColor+RGB: 一些对UIColor的拓展，主要是支持RGB的方式设置颜色</p><h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="MenuStyle"><a href="#MenuStyle" class="headerlink" title="MenuStyle"></a>MenuStyle</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuStyle</span>: <span class="type">UIView &#123;</span></span></span><br><span class="line">    <span class="comment">// 标题之间的间距</span></span><br><span class="line">    <span class="keyword">var</span> margin: CGFloat = <span class="number">10</span></span><br><span class="line">    <span class="comment">// 默认颜色</span></span><br><span class="line">    <span class="keyword">var</span> defaultColor = UIColor(r: <span class="number">0</span>, g: <span class="number">0</span>, b: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 默认字体</span></span><br><span class="line">    <span class="keyword">var</span> defaultFont = UIFont.systemFont(ofSize: <span class="number">17</span>)</span><br><span class="line">    <span class="comment">// 选中态颜色</span></span><br><span class="line">    <span class="keyword">var</span> selectedColor = UIColor(r: <span class="number">239</span>, g: <span class="number">154</span>, b: <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 选中态字体</span></span><br><span class="line">    <span class="keyword">var</span> selectedFont = UIFont.systemFont(ofSize: <span class="number">18</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指示条高度, 为0表示隐藏</span></span><br><span class="line">    <span class="keyword">var</span> lineHeight: CGFloat = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 指示条宽度, 为0表示自适应</span></span><br><span class="line">    <span class="keyword">var</span> lineWidth: CGFloat = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指示条颜色, 默认与selectedColor保持一致</span></span><br><span class="line">    <span class="keyword">var</span> lineColor: UIColor?</span><br><span class="line">    <span class="comment">// 是否开启指示条颜色渐变</span></span><br><span class="line">    <span class="keyword">var</span> lineColorGradual = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 指示条圆角</span></span><br><span class="line">    <span class="keyword">var</span> lineCornerRadius: CGFloat = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标题区的frame</span></span><br><span class="line">    <span class="keyword">var</span> pageTitleFrame = CGRect(x: <span class="number">0</span>, y: <span class="number">20</span>, width: UIScreen.main.bounds.width, height: <span class="number">25</span>)</span><br><span class="line">    <span class="comment">// 标题区与内容区的间距</span></span><br><span class="line">    <span class="keyword">var</span> titleContentMargin: CGFloat = <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PageTitle"><a href="#PageTitle" class="headerlink" title="PageTitle"></a>PageTitle</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PageTitleDelegate</span> : <span class="title">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageTitleDidSelected</span><span class="params">(pageTitle: PageTitle, pageTitleView: PageTitleView)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题视图组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTitleView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 索引</span></span><br><span class="line">    <span class="keyword">var</span> index: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="comment">// 渐变颜色</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">UIColor</span>? &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            label.textColor = color</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 样式</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> style: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="comment">// 选中状态</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> isSelected: <span class="type">Bool</span> = <span class="literal">false</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123; reloadState() &#125;<span class="comment">// 刷新数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自身宽度</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> width: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title?.size(withAttributes: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: font]).width ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 字体大小</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> font: <span class="type">UIFont</span> &#123; <span class="keyword">return</span> isSelected ? style.selectedFont : style.defaultFont &#125;</span><br><span class="line">    <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> fontColor: <span class="type">UIColor</span> &#123; <span class="keyword">return</span> isSelected ? style.selectedColor : style.defaultColor &#125;</span><br><span class="line">    <span class="comment">// 点击回调</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> tapCallBack: ((<span class="number">_</span> view: <span class="type">PageTitleView</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> label: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        <span class="keyword">let</span> gesture = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(action(<span class="number">_</span>:)))</span><br><span class="line">        label.addGestureRecognizer(gesture)</span><br><span class="line">        label.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>?, isSelected: <span class="type">Bool</span>, style: <span class="type">MenuStyle</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.isSelected = isSelected</span><br><span class="line">        <span class="keyword">self</span>.style = style</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.zero)</span><br><span class="line">        reloadState()</span><br><span class="line">        <span class="keyword">self</span>.addSubview(label)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 动态链接</span></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(<span class="number">_</span> tap: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> tapCallBack != <span class="literal">nil</span> &#123;</span><br><span class="line">            tapCallBack!(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reloadState</span><span class="params">()</span></span> &#123;</span><br><span class="line">        label.text = title</span><br><span class="line">        label.textColor = fontColor</span><br><span class="line">        label.font = font</span><br><span class="line">        label.sizeToFit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTitle</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理</span></span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">PageTitleDelegate</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> titleList: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> scrollView: <span class="type">UIScrollView</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> scrollView = <span class="type">UIScrollView</span>(frame: bounds)</span><br><span class="line">        scrollView.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">        addSubview(scrollView)</span><br><span class="line">        <span class="keyword">return</span> scrollView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 指示器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> lineView: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> lineView = <span class="type">UIView</span>()</span><br><span class="line">        lineView.backgroundColor = menuStyle.lineColor ?? menuStyle.selectedColor</span><br><span class="line">        lineView.layer.cornerRadius = menuStyle.lineCornerRadius</span><br><span class="line">        lineView.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">        scrollView.addSubview(lineView)</span><br><span class="line">        <span class="keyword">return</span> lineView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> menuStyle: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="comment">// 当前选中标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentSelectedView: <span class="type">PageTitleView</span>?</span><br><span class="line">    <span class="comment">// 标题列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> titleViewList = [<span class="type">PageTitleView</span>]()</span><br><span class="line">    <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, menuStyle: <span class="type">MenuStyle</span>, titleList: [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.menuStyle = menuStyle</span><br><span class="line">        <span class="keyword">self</span>.titleList = titleList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setupSubViews()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupSubViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> totalWidth: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 设置子控件</span></span><br><span class="line">        <span class="keyword">for</span> (idx, title) <span class="keyword">in</span> titleList.enumerated() &#123;</span><br><span class="line">            <span class="keyword">let</span> view = <span class="type">PageTitleView</span>(title: title <span class="keyword">as</span> <span class="type">String</span>, isSelected: <span class="literal">false</span>, style: menuStyle)</span><br><span class="line">            view.index = idx</span><br><span class="line">            titleViewList.append(view)</span><br><span class="line">            <span class="keyword">let</span> x = <span class="type">CGFloat</span>(idx + <span class="number">1</span>) * menuStyle.margin + totalWidth</span><br><span class="line">            view.frame = <span class="type">CGRect</span>(x: x, y: <span class="number">0</span>, width: view.width, height: frame.height - menuStyle.lineHeight)</span><br><span class="line">            totalWidth += view.width</span><br><span class="line">            scrollView.addSubview(view)</span><br><span class="line">            view.tapCallBack = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] view <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                <span class="keyword">self</span>.changeToSelectedIndex(idx: view.index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scrollView.contentSize = <span class="type">CGSize</span>(width: totalWidth + <span class="type">CGFloat</span>(titleList.<span class="built_in">count</span> + <span class="number">1</span>) * menuStyle.margin, height: <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 默认选中的索引 0</span></span><br><span class="line">        changeToSelectedIndex()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: 切换过程中需要调用的函数</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageTitle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">changeToSelectedIndex</span><span class="params">(idx: Int = <span class="number">0</span>, progress: CGFloat = <span class="number">1</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 索引值越界</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; titleViewList.<span class="built_in">count</span> - <span class="number">1</span> || idx &lt; <span class="number">0</span> || titleViewList.<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> fromView, toView: <span class="type">PageTitleView</span></span><br><span class="line">        <span class="keyword">if</span> currentSelectedView == <span class="literal">nil</span> &#123;</span><br><span class="line">            fromView = titleViewList.first!</span><br><span class="line">            toView = fromView</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fromView = currentSelectedView!</span><br><span class="line">            toView = titleViewList[idx]</span><br><span class="line">            <span class="comment">// 同一个标题</span></span><br><span class="line">            <span class="keyword">if</span> fromView == toView &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> menuStyle.lineHeight != <span class="number">0</span> &#123;</span><br><span class="line">            refreshBottomLineFrame(fromView.frame, toView.frame, progress)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> menuStyle.lineColorGradual &#123;</span><br><span class="line">            refreshTitleViewColor(fromView, toView, progress)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> progress == <span class="number">1</span> &#123;</span><br><span class="line">            refreshTitleViewState(fromView, toView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置指示条frame</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshBottomLineFrame</span><span class="params">(<span class="number">_</span> from: CGRect, <span class="number">_</span> to: CGRect, <span class="number">_</span> progress: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> from = from</span><br><span class="line">        <span class="keyword">var</span> to = to</span><br><span class="line">        <span class="keyword">let</span> lineHeight = menuStyle.lineHeight</span><br><span class="line">        <span class="keyword">let</span> lineWidth = menuStyle.lineWidth</span><br><span class="line">        <span class="keyword">let</span> y = frame.height - lineHeight</span><br><span class="line">        <span class="keyword">let</span> isFixedLineWidth = lineWidth != <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> fromWidth = isFixedLineWidth ? lineWidth : from.width</span><br><span class="line">        <span class="keyword">let</span> toWidth = isFixedLineWidth ? lineWidth : to.width</span><br><span class="line">        <span class="keyword">let</span> fromMinX = isFixedLineWidth ? from.midX - lineWidth * <span class="number">0.5</span> : from.minX</span><br><span class="line">        <span class="keyword">let</span> fromMaxX = isFixedLineWidth ? fromMinX + lineWidth : from.maxX</span><br><span class="line">        <span class="keyword">let</span> toMinX = isFixedLineWidth ? to.midX - lineWidth * <span class="number">0.5</span> : to.minX</span><br><span class="line">        <span class="keyword">let</span> toMaxX = isFixedLineWidth ? toMinX + lineWidth : to.maxX</span><br><span class="line">        from = <span class="type">CGRect</span>(x: fromMinX, y: y, width: fromWidth, height: lineHeight)</span><br><span class="line">        to = <span class="type">CGRect</span>(x: toMinX, y: y, width: toWidth, height: lineHeight)</span><br><span class="line">        <span class="keyword">let</span> isToLeft = toMinX &lt; fromMinX <span class="comment">// 向左</span></span><br><span class="line">        <span class="keyword">if</span> progress &lt; <span class="number">0.5</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isToLeft &#123; <span class="comment">// 向左移动</span></span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (fromMinX - toMinX) * <span class="number">2</span> * progress</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: fromMinX - offsetWidth, y: y, width:  fromMaxX - fromMinX + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (toMaxX - fromMaxX) * <span class="number">2</span> * progress</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: fromMinX, y: y, width:from.width + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isToLeft &#123; <span class="comment">// 向左移动</span></span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (fromMaxX - to.maxX) * (<span class="number">1</span> - (progress - <span class="number">0.5</span>) * <span class="number">2</span>)</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: toMinX, y: y, width:to.width + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (toMinX - fromMinX) * (<span class="number">1</span> - (progress - <span class="number">0.5</span>) * <span class="number">2</span>)</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: toMinX - offsetWidth, y: y, width:toMaxX - toMinX + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新标题状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshTitleViewState</span><span class="params">(<span class="number">_</span> fromView: PageTitleView, <span class="number">_</span> toView: PageTitleView)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 更新currentSelectedView</span></span><br><span class="line">        currentSelectedView?.isSelected = <span class="literal">false</span></span><br><span class="line">        toView.isSelected = <span class="literal">true</span></span><br><span class="line">        currentSelectedView = toView</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置标题居中</span></span><br><span class="line">        <span class="keyword">let</span> width = scrollView.bounds.width</span><br><span class="line">        <span class="keyword">let</span> contentWidth = scrollView.contentSize.width</span><br><span class="line">        <span class="keyword">var</span> offsetX = toView.center.x - width * <span class="number">0.5</span></span><br><span class="line">        offsetX = <span class="built_in">max</span>(offsetX, <span class="number">0</span>)</span><br><span class="line">        offsetX = <span class="built_in">min</span>(contentWidth - width, offsetX)</span><br><span class="line">        <span class="keyword">if</span> contentWidth &lt;= width &#123; <span class="comment">// 保持居中</span></span><br><span class="line">            <span class="keyword">let</span> viewWidth = <span class="type">CGFloat</span>(titleViewList.last?.frame.maxX ?? <span class="number">0</span>) - <span class="type">CGFloat</span>(titleViewList.first?.frame.minX ?? <span class="number">0</span>)</span><br><span class="line">            offsetX = -(width - viewWidth) * <span class="number">0.5</span> + menuStyle.margin</span><br><span class="line">        &#125;</span><br><span class="line">        scrollView.setContentOffset(<span class="type">CGPoint</span>(x: offsetX, y: <span class="number">0</span>), animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">            delegate?.pageTitleDidSelected(pageTitle: <span class="keyword">self</span>, pageTitleView: toView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标题颜色渐变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshTitleViewColor</span><span class="params">(<span class="number">_</span> fromView: PageTitleView, <span class="number">_</span> toView: PageTitleView, <span class="number">_</span> progress: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> toRGB = <span class="type">UIColor</span>.rgbValue(menuStyle.selectedColor)</span><br><span class="line">        <span class="keyword">let</span> fromRGB = <span class="type">UIColor</span>.rgbValue(menuStyle.defaultColor)</span><br><span class="line">        <span class="keyword">let</span> deltaRGB = (toRGB.<span class="number">0</span> - fromRGB.<span class="number">0</span>, toRGB.<span class="number">1</span> - fromRGB.<span class="number">1</span>, toRGB.<span class="number">2</span> - fromRGB.<span class="number">2</span>)</span><br><span class="line">        fromView.color = <span class="type">UIColor</span>(r: toRGB.<span class="number">0</span> - deltaRGB.<span class="number">0</span> * progress, g: toRGB.<span class="number">1</span> - deltaRGB.<span class="number">1</span> * progress, b: toRGB.<span class="number">2</span> - deltaRGB.<span class="number">2</span> * progress)</span><br><span class="line">        toView.color = <span class="type">UIColor</span>(r: fromRGB.<span class="number">0</span> + deltaRGB.<span class="number">0</span> * progress, g: fromRGB.<span class="number">1</span> + deltaRGB.<span class="number">1</span> * progress, b: fromRGB.<span class="number">2</span> + deltaRGB.<span class="number">2</span> * progress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: PageContentDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageTitle</span> : <span class="title">PageContentDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageContentDidChange</span><span class="params">(pageContent: PageContent, targetIndex: Int, progress: CGFloat)</span></span> &#123;</span><br><span class="line">        changeToSelectedIndex(idx: targetIndex, progress: progress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PageContent"><a href="#PageContent" class="headerlink" title="PageContent"></a>PageContent</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PageContentDelegate</span> : <span class="title">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageContentDidChange</span><span class="params">(pageContent: PageContent, targetIndex: Int, progress: CGFloat)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageContent</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">PageContentDelegate</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> controllerList: [<span class="type">UIViewController</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> identifier = <span class="string">"PageMenu_CollectionView_Identifier"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> shouldCallDelegate = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> layout = <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        layout.itemSize = bounds.size</span><br><span class="line">        layout.scrollDirection = .horizontal</span><br><span class="line">        layout.minimumLineSpacing = <span class="number">0</span></span><br><span class="line">        layout.minimumInteritemSpacing = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> collectionView = <span class="type">UICollectionView</span>(frame: bounds, collectionViewLayout: layout)</span><br><span class="line">        collectionView.dataSource = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UICollectionViewDataSource</span></span><br><span class="line">        collectionView.delegate = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UICollectionViewDelegate</span></span><br><span class="line">        collectionView.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">        collectionView.scrollsToTop = <span class="literal">false</span></span><br><span class="line">        collectionView.isPagingEnabled = <span class="literal">true</span></span><br><span class="line">        collectionView.bounces = <span class="literal">false</span></span><br><span class="line">        collectionView.backgroundColor = <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="comment">// 注册cell</span></span><br><span class="line">        collectionView.register(<span class="type">UICollectionViewCell</span>.<span class="keyword">self</span>, forCellWithReuseIdentifier: identifier)</span><br><span class="line">        addSubview(collectionView)</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, controllerList: [<span class="type">UIViewController</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.controllerList = controllerList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        <span class="keyword">self</span>.collectionView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UICollectionViewDataSource</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">UICollectionViewDataSource</span>, <span class="title">UICollectionViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> controllerList.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, <span class="keyword">for</span>: indexPath)</span><br><span class="line">        <span class="keyword">let</span> view = controllerList[indexPath.row].view!</span><br><span class="line">        view.frame = cell.bounds</span><br><span class="line">        cell.contentView.addSubview(view)</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UIScrollViewDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">UIScrollViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="type">Int</span>(scrollView.contentOffset.x / scrollView.bounds.width)</span><br><span class="line">        currentIndex = index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        shouldCallDelegate = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !shouldCallDelegate &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> width = scrollView.bounds.width</span><br><span class="line">        <span class="keyword">let</span> offsetX = scrollView.contentOffset.x - <span class="type">CGFloat</span>(currentIndex) * width</span><br><span class="line">        <span class="keyword">let</span> offsetIndex = offsetX &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> progress = <span class="built_in">abs</span>(offsetX) / width</span><br><span class="line">        <span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">            delegate?.pageContentDidChange(pageContent: <span class="keyword">self</span>, targetIndex: currentIndex + offsetIndex, progress: progress)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: PageTitleDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">PageTitleDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">pageTitleDidSelected</span><span class="params">(pageTitle: PageTitle, pageTitleView: PageTitleView)</span></span> &#123;</span><br><span class="line">        shouldCallDelegate = <span class="literal">false</span></span><br><span class="line">        collectionView.scrollToItem(at: <span class="type">IndexPath</span>(item: pageTitleView.index, section: <span class="number">0</span>), at: .<span class="keyword">left</span>, animated: <span class="literal">false</span>)</span><br><span class="line">        currentIndex = pageTitleView.index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PageMenu"><a href="#PageMenu" class="headerlink" title="PageMenu"></a>PageMenu</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageMenu</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pageTitle: <span class="type">PageTitle</span></span><br><span class="line">    <span class="keyword">var</span> pageContent: <span class="type">PageContent</span></span><br><span class="line">    <span class="keyword">var</span> menuStyle: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> controllerList: [<span class="type">UIViewController</span>]</span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> menuStyle: <span class="type">MenuStyle</span>, <span class="number">_</span> controllerList: [<span class="type">UIViewController</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> titleList = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">for</span> controller <span class="keyword">in</span> controllerList &#123;</span><br><span class="line">            titleList.append(controller.title ?? <span class="string">"null"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.pageTitle = <span class="type">PageTitle</span>(frame: menuStyle.pageTitleFrame, menuStyle: menuStyle, titleList: titleList)</span><br><span class="line">        <span class="keyword">self</span>.pageContent = <span class="type">PageContent</span>(frame: <span class="type">CGRect</span>(x: pageTitle.frame.minX, y: pageTitle.frame.maxY + menuStyle.titleContentMargin, width: pageTitle.frame.width, height: <span class="type">UIScreen</span>.main.bounds.height - pageTitle.frame.height), controllerList: controllerList)</span><br><span class="line">        <span class="keyword">self</span>.menuStyle = menuStyle</span><br><span class="line">        <span class="keyword">self</span>.controllerList = controllerList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        configureComponent()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configureComponent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        view.addSubview(pageTitle)</span><br><span class="line">        view.addSubview(pageContent)</span><br><span class="line">        <span class="keyword">for</span> controller <span class="keyword">in</span> controllerList &#123;</span><br><span class="line">            addChild(controller)</span><br><span class="line">        &#125;</span><br><span class="line">        pageTitle.delegate = pageContent</span><br><span class="line">        pageContent.delegate = pageTitle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="UIColor-RGB"><a href="#UIColor-RGB" class="headerlink" title="UIColor+RGB"></a>UIColor+RGB</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(r : <span class="type">CGFloat</span>, g : <span class="type">CGFloat</span>, b : <span class="type">CGFloat</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: r / <span class="number">255.0</span>, green: g / <span class="number">255.0</span>, blue: b / <span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">rgbValue</span>(<span class="title">_</span> <span class="title">color</span> : <span class="title">UIColor</span>) -&gt; (<span class="title">CGFloat</span>, <span class="title">CGFloat</span>, <span class="title">CGFloat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> components = color.cgColor.components <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"颜色按照RGB设置"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (components[<span class="number">0</span>] * <span class="number">255</span>, components[<span class="number">1</span>] * <span class="number">255</span>, components[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>简单配置一下MenuStyle，创建自己的视图控制器，就能直接使用了。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    <span class="selector-tag">var</span> controllerList = [UIViewController]()</span><br><span class="line">    let style: MenuStyle = MenuStyle()</span><br><span class="line">    <span class="comment">// 创建style并配置样式</span></span><br><span class="line">    style<span class="selector-class">.margin</span> = <span class="number">30</span></span><br><span class="line">    style<span class="selector-class">.defaultColor</span> = UIColor(r: <span class="number">135</span>, g: <span class="number">135</span>, <span class="selector-tag">b</span>: <span class="number">135</span>)</span><br><span class="line">    style<span class="selector-class">.selectedColor</span> = UIColor(r: <span class="number">0</span>, g: <span class="number">0</span>, <span class="selector-tag">b</span>: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 创建控制器</span></span><br><span class="line">    let red = UIViewController()</span><br><span class="line">    red<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.red</span><br><span class="line">    red<span class="selector-class">.title</span> = <span class="string">"关注"</span></span><br><span class="line">    let blue = UIViewController()</span><br><span class="line">    blue<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.blue</span><br><span class="line">    blue<span class="selector-class">.title</span> = <span class="string">"热门"</span></span><br><span class="line">    controllerList = [red, blue]</span><br><span class="line">    <span class="comment">// 创建PageMenu</span></span><br><span class="line">    let pageMenu = PageMenu(style, controllerList)</span><br><span class="line">    pageMenu<span class="selector-class">.pageTitle</span><span class="selector-class">.backgroundColor</span> = UIColor(r: <span class="number">45</span>, g: <span class="number">184</span>, <span class="selector-tag">b</span>: <span class="number">105</span>)</span><br><span class="line">    addChild(pageMenu)</span><br><span class="line">    view.addSubview(pageMenu.view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p>微博样式：<br><img src="https://image.chenyalun.com/2019/03/22/weibo.gif" style="zoom:60%"></p><p>it之家样式：<br><img src="https://image.chenyalun.com/2019/03/22/ithome.gif" style="zoom:60%"></p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>处理起来比较麻烦一点的就是，标题区指示条的frame渐变，要考虑左滑和右滑的情况，还要考虑进度progress的问题。不过还好，仔细想想都能解决的。</p><p>再一个，PageTitle和PageContent之间互相通信的方案，我选择的是代理。PageTitle是PageContent的代理，同时，PageContent又是PageTitle的代理。由PageMenu负责连接。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 一个使用Swift写的PageMenu。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="开源项目" scheme="http://blog.chenyalun.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>实现通知中心</title>
    <link href="http://blog.chenyalun.com/2019/01/28/%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%9F%A5%E4%B8%AD%E5%BF%83/"/>
    <id>http://blog.chenyalun.com/2019/01/28/实现通知中心/</id>
    <published>2019-01-28T13:12:23.000Z</published>
    <updated>2019-05-20T07:00:23.582Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 自己去实现NotificationCenter。 </p><br><a id="more"></a><p></p><p>有几个弱引用容器在日常工作中没有用过，但是又特别想亲手实践一番。偶尔看到一篇文章，说是自己实现了系统中通知中心的功能，出于好奇，于是自己也尝试一番。</p><p>主要原理就是创建一个字典observerMap，notificationName作为key，NSMapTable作为value。在这个NSMapTable中，观察者observer作为key，用于存放观察者的NSHashSet作为value。挺绕的。</p><h1 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h1><p>接口与系统保持一致。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSString</span> *YANotificationName <span class="built_in">NS_EXTENSIBLE_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YANotificationCenter</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) YANotificationCenter *defaultCenter;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>)observer selector:(SEL)aSelector name:(<span class="keyword">nullable</span> YANotificationName)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject userInfo:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)aUserInfo;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer name:(<span class="keyword">nullable</span> YANotificationName)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure><h1 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist"></a>Checklist</h1><ul><li style="list-style: none"><input type="checkbox" checked> 不增加observer和object的引用计数</li><li style="list-style: none"><input type="checkbox" checked> 支持携带参数信息userInfo</li><li style="list-style: none"><input type="checkbox" checked> 可以不指定object</li><li style="list-style: none"><input type="checkbox" checked> 添加观察者时指定object，post通知时只有相同的object才会有效</li><li style="list-style: none"><input type="checkbox" checked> observer为nil，发送通知时没有作用</li><li style="list-style: none"><input type="checkbox" checked> 指定线程发送通知，则在指定线程调用</li><li style="list-style: none"><input type="checkbox" checked> 没有及时移除通知，observer销毁之后继续发送通知不会产生异常<br>(从iOS 9开始，即使不移除观察者对象，程序也不会出现异常。)</li><li style="list-style: none"><input type="checkbox" checked> 支持多个observer监听同一个通知</li><li style="list-style: none"><input type="checkbox" checked> 如果notificationName为nil，object有值，则接收所有指定为object的通知</li><li style="list-style: none"><input type="checkbox" checked> 如果notificationName为nil，且object也为nil，则接收系统内所有通知<br>(也即YANotificationCenter发出的所有通知)</li><li style="list-style: none"><input type="checkbox" checked> 移除所有通知后，相关方法不再调用</li><li style="list-style: none"><input type="checkbox" checked> 移除指定通知后，相关方法不再调用</li><li style="list-style: none"><input type="checkbox" checked> 同步传递通知给观察者</li><li style="list-style: none"><input type="checkbox"> 多次添加observer，发送通知时多次调用</li><li style="list-style: none"><input type="checkbox"> 支持异步发布通知（NotificationQueue）</li></ul><p>如果想；<br>“多次添加observer，发送通知时多次调用”这个没有实现。目前是多次添加observer，发送通知时只会调用一次。其实要实现也有办法，只是个人感觉这样是不是更好一点？</p><h1 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 不对observer和object强引用</span><br><span class="line"><span class="number">2.</span> 可以携带参数userInfo</span><br><span class="line"><span class="number">3.</span> 添加观察者时object为nil，post通知时object有值，依然有效(表示不限于指定的object)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_1"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_1"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">4.</span> 添加观察者时指定object，post通知时相同的object，有效，不同的object，无效</span><br><span class="line"><span class="comment">// 有效</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_2"</span> <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_2"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_3"</span> <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_3"</span> <span class="string">object:</span>a <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 可以添加n次observer，发送通知时对应调用n次(不支持)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">6.</span> 未添加observer，发送通知时没有作用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_5"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 指定线程发送通知，则在指定线程调用</span><br><span class="line"><span class="comment">// print方法是在发送通知的线程中调用的</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_6"</span> <span class="string">object:</span>nil];</span><br><span class="line">dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">NSLog(@<span class="string">"当前线程:%@"</span>,[NSThread currentThread]);</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_6"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 没有在observer的dealloc方法中移除通知，observer销毁之后继续发送通知，无影响(从iOS <span class="number">9</span>开始，即使不移除观察者对象，程序也不会出现异常。)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_7"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// a对象销毁之后继续发送通知</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_7"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 多个observer监听同一个通知，所有observer的相关方法均得到调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>b <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>c <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">10.</span> 如果notificationName为nil，object有值，则接收所有指定为object的通知</span><br><span class="line"><span class="comment">// 接收self发送的所有通知</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>nil <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_9"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">11.</span> 如果notificationName为nil，且object也为nil，则接收系统内所有通知(也即YANotificationCenter发出的所有通知)</span><br><span class="line"><span class="comment">// 接收系统内所有通知，也即任意一个通知都会触发</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>nil <span class="string">object:</span>nil];</span><br><span class="line"><span class="number">12.</span> 移除所有通知后，相关方法不再调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>@<span class="string">"Noti_10"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// 移除所有通知后，再次发送通知没有效果</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">removeObserver:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_10"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> 移除指定通知后，相关方法不再调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// 移除指定通知后，再次发送通知没有效果</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">removeObserver:</span>self <span class="string">name:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br></pre></td></tr></table></figure><h1 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"YANotificationCenter.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, YANotificationSenderType) &#123;</span><br><span class="line">    YANotificationSenderTypeObject   = <span class="number">0</span>, <span class="comment">// 指定对象</span></span><br><span class="line">    YANotificationSenderTypeObserver = <span class="number">1</span>, <span class="comment">// 观察者</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YANotificationCenter</span>()</span></span><br><span class="line"><span class="comment">// Recorder observer.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *observerMap;</span><br><span class="line"><span class="comment">// Recorder all the selector.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *selectorMap;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YANotificationCenter</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observerMap = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        _selectorMap = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (YANotificationCenter *)defaultCenter &#123;</span><br><span class="line">    <span class="keyword">static</span> YANotificationCenter *center = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        center = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>)observer selector:(SEL)aSelector name:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    <span class="keyword">if</span> (!observer) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!aName) aName = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="keyword">if</span> (!map) map = [<span class="built_in">NSMapTable</span> weakToStrongObjectsMapTable];</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="built_in">NSHashTable</span> *set = [map objectForKey:observer];</span><br><span class="line">        <span class="keyword">if</span> (!set || ![set isKindOfClass:[<span class="built_in">NSHashTable</span> <span class="keyword">class</span>]]) set = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">        [set addObject:anObject];</span><br><span class="line">        [map setObject:set forKey:observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [map setObject:(<span class="keyword">id</span>)kCFNull forKey:observer];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span>.observerMap setObject:map forKey:aName];</span><br><span class="line">    <span class="built_in">NSString</span> *key = generateKey(observer, anObject, aName);</span><br><span class="line">    [<span class="keyword">self</span>.selectorMap setObject:<span class="built_in">NSStringFromSelector</span>(aSelector) forKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    [<span class="keyword">self</span> postNotificationName:aName object:anObject userInfo:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject userInfo:(<span class="built_in">NSDictionary</span> *)aUserInfo &#123;</span><br><span class="line">    <span class="comment">// When the notification name is nil.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:(<span class="keyword">id</span>)kCFNull];</span><br><span class="line">        <span class="keyword">id</span> key = <span class="literal">nil</span>;</span><br><span class="line">        <span class="built_in">NSEnumerator</span> *enumerator = map.keyEnumerator;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSHashTable</span> *set = [map objectForKey:key];</span><br><span class="line">            <span class="built_in">NSArray</span> *selectorList = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">if</span> (set == (<span class="keyword">id</span>)kCFNull) &#123;</span><br><span class="line">                selectorList = <span class="keyword">self</span>.selectorMap.allValues;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([set containsObject:anObject]) &#123;</span><br><span class="line">                selectorList = selectorListForSender(<span class="keyword">self</span>, anObject, YANotificationSenderTypeObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!selectorList) <span class="keyword">break</span>;</span><br><span class="line">            [selectorList enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *selector, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">                SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">                ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Normal process.</span></span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="keyword">id</span> key = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSEnumerator</span> *enumerator = map.keyEnumerator;</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSHashTable</span> *set = [map objectForKey:key];</span><br><span class="line">            <span class="keyword">if</span> (set == (<span class="keyword">id</span>)kCFNull || [set containsObject:anObject]) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *selector = [<span class="keyword">self</span>.selectorMap objectForKey:generateKey(key, anObject, aName)];</span><br><span class="line">                <span class="keyword">if</span> (!selector) <span class="keyword">return</span>;</span><br><span class="line">                SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">                ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *selector = [<span class="keyword">self</span>.selectorMap objectForKey:generateKey(key, anObject, aName)];</span><br><span class="line">            <span class="keyword">if</span> (!selector) <span class="keyword">return</span>;</span><br><span class="line">            SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">            ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer &#123;</span><br><span class="line">    [<span class="keyword">self</span>.observerMap.allValues enumerateObjectsUsingBlock:^(<span class="built_in">NSMapTable</span> *map, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        [map removeObjectForKey:observer];</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span>.selectorMap removeObjectsForKeys:selectorListForSender(<span class="keyword">self</span>, observer, YANotificationSenderTypeObserver)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer name:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="comment">// Remove selector.</span></span><br><span class="line">    [<span class="keyword">self</span>.selectorMap removeObjectForKey:generateKey(observer, anObject, aName)];</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="built_in">NSHashTable</span> *set = [map objectForKey:observer];</span><br><span class="line">        [set removeObject:anObject];</span><br><span class="line">        <span class="keyword">if</span> (set.count == <span class="number">0</span>) [map removeObjectForKey:observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [map removeObjectForKey:observer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (map.count == <span class="number">0</span>) [<span class="keyword">self</span>.observerMap removeObjectForKey:aName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> *generateKey(<span class="keyword">id</span> observer, <span class="keyword">id</span> anObject, YANotificationName name) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        key = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p_%@_%p"</span> ,anObject, name, observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@_%p"</span>, name, observer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSArray</span> *selectorListForSender(YANotificationCenter *<span class="keyword">self</span>, <span class="keyword">id</span> object, YANotificationSenderType type) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *p = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p"</span>, object];</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicate = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (type == YANotificationSenderTypeObject) &#123;</span><br><span class="line">        predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF BEGINSWITH %@"</span>, p];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF ENDSWITH %@"</span>, p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSArray</span> *keys = [<span class="keyword">self</span>.selectorMap.allKeys filteredArrayUsingPredicate:predicate];</span><br><span class="line">    <span class="built_in">NSArray</span> *result = [<span class="keyword">self</span>.selectorMap objectsForKeys:keys notFoundMarker:(<span class="keyword">id</span>)kCFNull];</span><br><span class="line">    <span class="keyword">return</span> result.count == <span class="number">0</span> ? <span class="literal">nil</span> : result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>参考资料：<br><a href="http://southpeak.github.io/2015/03/20/cocoa-foundation-nsnotificationcenter/" target="_blank" rel="noopener">http://southpeak.github.io/2015/03/20/cocoa-foundation-nsnotificationcenter/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 自己去实现NotificationCenter。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Weak Associated Object</title>
    <link href="http://blog.chenyalun.com/2019/01/20/Weak%20Associated%20Object/"/>
    <id>http://blog.chenyalun.com/2019/01/20/Weak Associated Object/</id>
    <published>2019-01-20T13:22:23.000Z</published>
    <updated>2019-08-28T12:04:08.062Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 给分类添加weak属性的几种方法。 </p><br><a id="more"></a><p></p><p>众所周知，通过Runtime的关联属性来给分类添加“属性”，这里的属性缺少了严格意义上的成员变量，而且是自己手动实现了getter方法和setter方法。几种关联策略中并没有与weak效果相媲美的选项，<code>OBJC_ASSOCIATION_ASSIGN</code>策略与weak效果的主要区别在于weak自动能将指向已销毁对象的指针指为nil。</p><h1 id="危险的ASSIGN"><a href="#危险的ASSIGN" class="headerlink" title="危险的ASSIGN"></a>危险的ASSIGN</h1><p>单纯使用ASSIGN容易诱发坏内存访问，原因无需多言。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">Default</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> strongObj;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">Default</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setStrongObj:(<span class="keyword">id</span>)strongObj &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(strongObj), strongObj, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)strongObj &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(strongObj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例如下</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</span><br><span class="line">    <span class="built_in">NSObject</span> *main = [<span class="built_in">NSObject</span> new];</span><br><span class="line">    main.strongObj = obj;</span><br><span class="line">    obj = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, main.strongObj); <span class="comment">// Crash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="极简方案"><a href="#极简方案" class="headerlink" title="极简方案"></a>极简方案</h1><p>这是一种极好的给分类添加<code>weak</code>属性的实现方式。看到这种实现方式后极为兴奋，实在太简洁、巧妙了。<code>__weak</code>本身就会把指针指向nil，那直接利用就是了。使用<code>OBJC_ASSOCIATION_COPY</code>关联策略将block copy到堆上，利用block把持有的<code>weak</code>对象返回，如果对象不存在了，返回的便是空值。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">Weak</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">Weak</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">id</span> __<span class="keyword">weak</span> weakObject = object;</span><br><span class="line">    <span class="keyword">id</span> (^block)(<span class="keyword">void</span>) = ^&#123; <span class="keyword">return</span> weakObject; &#125;;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(object), block, OBJC_ASSOCIATION_COPY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">id</span> (^block)(<span class="keyword">void</span>) = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(object));</span><br><span class="line">    <span class="keyword">return</span> (block ? block() : <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>这种方式是通过包装一个对象实现的。要求设置的关联对象是<code>YAWeakObject</code>类型。当这个对象销毁的时候调用<code>deallocBlock</code>，而在这个block中把关联的对象重新设置为<code>nil</code>(不可使用<code>objc_removeAssociatedObjects</code>直接移除关联对象)，这样访问这个关联对象的时候得到的就是nil值了。</p><p>这种方式会污染<code>weak</code>属性，要求被设置为<code>weak</code>属性的对象必须是某种类型，不是太好。当然根据这种思路，还可以进一步封装，最终的落脚点无非是提供新的方法接口替代原生的运行时方法(见<a href="https://www.jianshu.com/p/ed65d71554d8" target="_blank" rel="noopener">参考文章</a>)。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">WeakClass</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) YAWeakObject *weakObject;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">WeakClass</span>)</span></span><br><span class="line">- (YAWeakObject *)weakObject &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setWeakObject:(YAWeakObject *)weakObject &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject), weakObject, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    <span class="keyword">typeof</span>(<span class="keyword">self</span>) slf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="keyword">typeof</span>(slf) <span class="keyword">self</span> = slf;</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject), <span class="literal">nil</span>, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    &#125;;</span><br><span class="line">    [weakObject setDeallocBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p><h1 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h1><p>实际上使用支持弱引用的容器如<code>NSHashTable</code>、<code>NSMapTable</code>、<code>NSPointerArray</code>都是可以实现的。原理很简单，使用容器持有关联的对象，当该对象不存在时，容器自身便有自动移除已销毁对象的特性，这样就实现了<code>weak</code>属性。</p><blockquote><p>NSMapTable 可以持有键和值的弱引用，当键或者值当中的一个被释放时，整个这一项就会被移除掉。<br>NSHashTable 可以持有成员的弱引用。<br>NSPointerArray 可以持有成员的弱引用，当成员不存在时自动把所在index置为NULL。</p></blockquote><p>这种做法需要创建一个容器，相对比较麻烦。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">WeakContainer</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> weakObj;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">WeakContainer</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSPointerArray</span> *gPointerArray = <span class="literal">nil</span>;</span><br><span class="line">- (<span class="keyword">id</span>)weakObj &#123;</span><br><span class="line">    <span class="keyword">if</span> (!gPointerArray) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// Removes NULL values from the receiver.(sometimes doesn't work as documented)</span></span><br><span class="line">    [gPointerArray compact];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> gPointerArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObj));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gPointerArray = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setWeakObj:(<span class="keyword">id</span>)weakObj &#123;</span><br><span class="line">    <span class="keyword">if</span> (weakObj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!gPointerArray) gPointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line">        [gPointerArray addPointer:(__bridge <span class="keyword">void</span> *)weakObj];</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObj), weakObj, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实看到作者的思路（极简方案）确实挺有感触的，完全利用现有的<code>__weak</code>关键字配合block，没有冗余的包装，方法精简且巧妙。去年在想这个问题的时候，也是考虑很多，在<a href="https://blog.chenyalun.com/2018/07/10/Runtime基础/#关联引用">《Runtime基础》</a>一文中描述了我当时的思路，基本上也是从<strong>把指针置为nil</strong>这个角度出发，或者派生子类重写dealloc，或者使用弱引用容器，都不够巧妙。</p><p>很多时候，好的思路，灵光一现的想法，真的无比重要。就像bang哥在<a href="https://github.com/bang590/JSPatch/wiki/JSPatch-实现原理详解" target="_blank" rel="noopener">写JSPatch</a>时：</p><blockquote><p>当时继续苦苦寻找解决方案，若按 JS 语法，这是唯一的方法，但若不按 JS 语法呢？突然脑洞开了下，CoffieScript/JSX 都可以用 JS 实现一个解释器实现自己的语法，我也可以通过类似的方式做到，再进一步想到其实我想要的效果很简单，就是调用一个不存在方法时，能转发到一个指定函数去执行，就能解决一切问题了，这其实可以用简单的字符串替换，把 JS 脚本里的方法调用都替换掉。</p></blockquote><p>还有一个东西在作者的文章里看到，比较有意思，这里提一下。</p><p><strong>Weak Singleton</strong></p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedWeakInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> __<span class="keyword">weak</span> <span class="keyword">id</span> weakObj = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> strongObj = weakObj;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strongObj) &#123;</span><br><span class="line">            strongObj = [[<span class="keyword">self</span> <span class="keyword">class</span>] new];</span><br><span class="line">            weakObj = strongObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strongObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>应用场景:不需要保存公共的信息、用户状态等，符合“用完就走”。如果类似LoginManager管理登录状态，继承自 AFHttpSessionManager的NetworkManager单例，App单例ClientManager等则不适用这种方式。</p></blockquote><blockquote><p>参考资料：<br><a href="https://www.jianshu.com/p/ed65d71554d8" target="_blank" rel="noopener">如何使用 Runtime 给现有的类添加 weak 属性</a><br><a href="https://blog.csdn.net/yan_1564335/article/details/53996538" target="_blank" rel="noopener">iOS给类别添加weak属性</a><br><a href="http://mrpeak.cn/blog/ios-weak/" target="_blank" rel="noopener">iOS weak 关键字漫谈</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 给分类添加weak属性的几种方法。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>「KVOController」的封装</title>
    <link href="http://blog.chenyalun.com/2019/01/12/%E3%80%8CKVOController%E3%80%8D%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://blog.chenyalun.com/2019/01/12/「KVOController」的封装/</id>
    <published>2019-01-12T13:45:10.000Z</published>
    <updated>2019-08-28T11:42:20.827Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 学习KVO的封装。 </p><br><a id="more"></a><p></p><p>KVOController源码只有700行左右，读一遍下来还是比较通畅的。这里做一个记录。</p><h1 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h1><p>使用起来极其简便。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置所观察的对象及其keyPath</span></span><br><span class="line">[<span class="keyword">self</span>.KVOController observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change[<span class="built_in">NSKeyValueChangeNewKey</span>]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>这里的<code>self.KVOController</code>可以自己创建，也可以使用默认，因为<code>KVOController</code>是懒加载的。</p><p>一般情况下是像上面这样使用的，还有一种情况，不需要强持有被观察者的时候：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.KVOControllerNonRetaining observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change[<span class="built_in">NSKeyValueChangeNewKey</span>]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>只需使用<code>self.KVOControllerNonRetaining</code>即可不增加被观察者<code>self.myButton</code>的引用计数。</p><h1 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> NSObject (FBKVOController)</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) FBKVOController *KVOController;</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) FBKVOController *KVOControllerNonRetaining;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure><p>要实现以上使用的方式，是给 <code>NSObject</code> 分类添加两个属性:<code>KVOController</code>和<code>KVOControllerNonRetaining</code>。这个比较简单，使用<code>Runtime</code> 的关联属性即可。值得一提的是作者在 <code>getter</code> 方法里使用了懒加载，只有当使用到<code>KVOController</code>或者<code>KVOControllerNonRetaining</code>的时候，才会创建。当然，也可以选择自行创建。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (FBKVOController *)KVOController &#123;</span><br><span class="line">  <span class="keyword">id</span> controller = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="built_in">NSObjectKVOControllerKey</span>);</span><br><span class="line">  <span class="comment">// 懒加载KVOController, 用到时才会创建</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == controller) &#123;</span><br><span class="line">    controller = [FBKVOController controllerWithObserver:<span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.KVOController = controller;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (FBKVOController *)KVOControllerNonRetaining &#123;</span><br><span class="line">  <span class="keyword">id</span> controller = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="built_in">NSObjectKVOControllerNonRetainingKey</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == controller) &#123;</span><br><span class="line">    controller = [[FBKVOController alloc] initWithObserver:<span class="keyword">self</span> retainObserved:<span class="literal">NO</span>];</span><br><span class="line">    <span class="keyword">self</span>.KVOControllerNonRetaining = controller;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两个 <code>getter</code> 方法分别对应强引用被观察者和弱引用被观察者。</p><h1 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h1><p>由此可以看到，核心功能的实现依赖于<code>FBKVOController</code>。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强引用</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)controllerWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定构造器</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer retainObserved:(<span class="built_in">BOOL</span>)retainObserved <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span>;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)new <span class="built_in">NS_UNAVAILABLE</span>;</span><br></pre></td></tr></table></figure><p>构造方法里主要暴露了两种初始化方式，其中通过<code>initWithObserver</code>这个方法可以设置参数<code>retainObserved</code>以表明是否需要强引用被观察者。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> observer;</span><br></pre></td></tr></table></figure><p>只有一个只读属性，给出被观察者对象。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options block:(FBKVONotificationBlock)block;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options action:(SEL)action;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure><p>作者给出了回调的三个选项：block回调，选择子回调以及 KVO 默认方法回调。可以在添加被观察者的时候自行选择。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options block:(FBKVONotificationBlock)block;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options action:(SEL)action;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure><p>考虑到不一定只观察一个对象的一个成员变量，因此作者提供了<code>keyPaths</code>选项，可以同时观察一个对象的多个keyPath：传入一个字符串数组即可。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object;</span><br><span class="line">- (<span class="keyword">void</span>)unobserveAll;</span><br></pre></td></tr></table></figure><p>移除监听提供三种接口：移除某个对象某个keyPath 的监听，移除对某个对象的监听，取消观察者对所有对象的所有监听。</p><h1 id="四、FBKVOController实现"><a href="#四、FBKVOController实现" class="headerlink" title="四、FBKVOController实现"></a>四、FBKVOController实现</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FBKVOController</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSMapTable</span>&lt;<span class="keyword">id</span>, <span class="built_in">NSMutableSet</span>&lt;_FBKVOInfo *&gt; *&gt; *_objectInfosMap;</span><br><span class="line">  pthread_mutex_t _lock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FBKVOController</code>主要维护了一个<code>NSMapTable</code>。<code>key</code> 是所观察的对象，<code>value</code> 是<code>NSMutableSet</code>类型的集合(内部元素是<code>_FBKVOInfo</code>类型)。维护一个<code>NSMapTable</code>的原因是：便于观察一个对象的多个<code>keyPath</code>，这个对象作为 <code>key</code>，这许多个<code>keyPath</code>封装成一个个<code>_FBKVOInfo</code>存入<code>NSMutableSet</code>中。另外一个成员变量<code>_lock</code>主要是保证线程安全。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer retainObserved:(<span class="built_in">BOOL</span>)retainObserved &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123;</span><br><span class="line">    _observer = observer;</span><br><span class="line">    <span class="comment">// 根据是否retainObserved，选择NSMapTable的"强-强"或者"弱-强"</span></span><br><span class="line">    <span class="built_in">NSPointerFunctionsOptions</span> keyOptions = retainObserved ? <span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> : <span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>;</span><br><span class="line">    _objectInfosMap = [[<span class="built_in">NSMapTable</span> alloc] initWithKeyOptions:keyOptions valueOptions:<span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPersonality</span> capacity:<span class="number">0</span>];</span><br><span class="line">    pthread_mutex_init(&amp;_lock, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FBKVOController</code>所有暴露的构造方法接口都指向了上面的那个实现。这个方法只做了三件事: 1，初始化线程锁<code>_lock</code>，2，根据<code>retainObserved</code>参数创建不同类型的<code>NSMapTable</code>，是选择”强-强”还是选择”弱-强”。3，属性<code>observer</code>赋值。</p><p>由此可见，<code>FBKVOController</code>本身对被观察者<code>observer</code>是弱引用的(有一个 <code>weak</code> 属性的<code>observer</code>成员变量)，通过维护一个<code>NSMapTable</code>来最终确定对被观察者的强弱引用关系。</p><h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">observe:</span>(nullable id)object <span class="string">keyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">block:</span>(FBKVONotificationBlock)block &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == object || <span class="number">0</span> == keyPath.length || NULL == block) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建数据结构_FBKVOInfo</span></span><br><span class="line">  _FBKVOInfo *info = [[_FBKVOInfo alloc] <span class="string">initWithController:</span>self <span class="string">keyPath:</span>keyPath <span class="string">options:</span>options <span class="string">block:</span>block];</span><br><span class="line">  <span class="comment">// 添加对object的观察, 并传入info</span></span><br><span class="line">  [self <span class="string">_observe:</span>object <span class="string">info:</span>info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以添加一个被观察者并且回调是 block 为例。在这个方法里首先是对参数的合理性判断，要求<code>object</code>、<code>keyPath</code>以及<code>block</code>均是合理值。<br> 接着把<code>keyPath</code>、<code>options</code>、<code>block</code>包装成一个数据结构<code>_FBKVOInfo</code>。<br> 最后调用自己的<code>_observe:info:</code>方法，传入<code>object</code>和<code>info</code>。</p><h3 id="FBKVOInfo数据结构"><a href="#FBKVOInfo数据结构" class="headerlink" title="_FBKVOInfo数据结构"></a>_FBKVOInfo数据结构</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">_FBKVOInfo </span>: NSObject</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> _FBKVOInfo &#123;</span><br><span class="line"><span class="variable">@public</span></span><br><span class="line">  __weak FBKVOController *_controller;</span><br><span class="line">  <span class="selector-tag">NSString</span> *<span class="selector-tag">_keyPath</span>;</span><br><span class="line">  <span class="selector-tag">NSKeyValueObservingOptions</span> <span class="selector-tag">_options</span>;</span><br><span class="line">  <span class="selector-tag">SEL</span> <span class="selector-tag">_action</span>;</span><br><span class="line">  <span class="selector-tag">void</span> *<span class="selector-tag">_context</span>;</span><br><span class="line">  <span class="selector-tag">FBKVONotificationBlock</span> <span class="selector-tag">_block</span>;</span><br><span class="line">  <span class="selector-tag">_FBKVOInfoState</span> <span class="selector-tag">_state</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_FBKVOInfo</code>是一个数据结构，包含了监听的<code>keyPath</code>、<code>block</code>、选择子、<code>context</code>等等元素。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithController:(FBKVOController *)controller</span><br><span class="line">                           keyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                           options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">                             block:(<span class="keyword">nullable</span> FBKVONotificationBlock)block</span><br><span class="line">                            action:(<span class="keyword">nullable</span> SEL)action</span><br><span class="line">                           context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123;</span><br><span class="line">    _controller = controller;</span><br><span class="line">    _block = [block <span class="keyword">copy</span>];</span><br><span class="line">    _keyPath = [keyPath <span class="keyword">copy</span>];</span><br><span class="line">    _options = options;</span><br><span class="line">    _action = action;</span><br><span class="line">    _context = context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造方法的实现就是这样，不过有两个关键点:<code>block</code>和<code>keyPath</code>调用一下 <code>copy</code> 方法。<br><code>keyPath</code>调用一下 <code>copy</code>的原因是，这里的<code>_keyPath</code>是使用<code>__strong</code>修饰的，如果外面传进来的是不可变字符串，自然没有啥问题，可是一旦传进来一个可变字符串，如果直接赋值<code>_keyPath = keyPath;</code>，当这个可变字符串改变就会造成<code>_keyPath</code>也改变，比较容易产生不可控事件，所以调用 <code>copy</code>方法，也即是深复制浅复制的问题。</p><p>没有深复制的示例如下：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"key"</span>];</span><br><span class="line"><span class="comment">// 假定是_keyPath = keyPath;而不是_keyPath = [keyPath copy];</span></span><br><span class="line">_FBKVOInfo *info = [[_FBKVOInfo alloc] initWithController:<span class="keyword">self</span> keyPath:str options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">   </span><br><span class="line">&#125; action:<span class="keyword">@selector</span>(push) context:<span class="literal">nil</span>];</span><br><span class="line">[str appendString:<span class="string">@"new"</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, info-&gt;_keyPath); <span class="comment">//info-&gt;_keyPath不符合预期的改变了</span></span><br></pre></td></tr></table></figure><p>同样，<code>block</code> 的<code>copy</code>是把<code>block</code>从栈拷贝到堆中，防止被释放。因为<code>block</code>作为参数传入函数不会被 <code>copy</code>，依然在栈上，方法执行完立即释放的。</p><blockquote><p>在ARC下：大部分情况下系统会把Block自动copy到堆上。</p><p>Block作为变量：<br>方法中声明一个 block 的时候是在栈上；<br>引用了外部局部变量或成员变量, 并且有赋值操作（有名字），会被 copy 到堆上；<br>赋值给附有__strong修饰符的id类型的类或者Blcok类型成员变量时；<br>赋值给一个 weak 变量不会被 copy；</p><p>Block作为属性：<br>用 copy 修饰会被 copy；</p><p>Block作为函数参数：<br>作为参数传入函数不会被 copy，依然在栈上，方法执行完即释放；<br>作为函数的返回值会被 copy 到堆；</p></blockquote><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">- (NSUInteger)hash &#123;</span><br><span class="line">  <span class="keyword">return</span> [_keyPath hash];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqual:(id)<span class="keyword">object</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == <span class="keyword">object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NO;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self == <span class="keyword">object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (![<span class="keyword">object</span> isKindOfClass:[self <span class="class"><span class="keyword">class</span>]]) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> NO;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [_keyPath isEqualToString:((_FBKVOInfo *)<span class="keyword">object</span>)-&gt;_keyPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_FBKVOInfo</code>还做了一点其他的事：<br>1.重写了<code>- (NSUInteger)hash;</code>方法，使用<code>_keyPath</code>的 <code>hash</code> 值来作为<code>_FBKVOInfo</code>的 <code>hash</code> 值。分配的这个<code>hash</code>值(即用于查找集合中成员的位置标识)，就是通过<code>hash</code>方法计算得来的，且<code>hash</code>方法返回的<code>hash</code>值最好唯一。<br>2.重写了<code>- (BOOL)isEqual:(id)object;</code>方法，满足<code>Equal</code>的条件有两个: 首先是类对象一致，再者是<code>_keyPath</code>匹配。换句话说，<code>_keyPath</code>决定了<code>_FBKVOInfo</code>是否是同一个。为了优化判等的效率，基于<code>hash</code>的<code>NSSet</code>和<code>NSDictionary</code>在判断成员是否相等时， 会这样做Step1: 成员的<code>hash</code>值是否和目标<code>hash</code>值相等，如果相同进入Step 2，如果不等，直接判断不相等<br>Step 2: <code>hash</code>值相同(即Step 1)的情况下，再进行对象判等， 作为判等的结果。</p><blockquote><p>hash值是对象判等的必要非充分条件</p></blockquote><p><code>NSPointerFunctionsObjectPointerPersonality</code>对于 <code>isEqual:</code> 和 <code>hash</code> 使用直接的指针比较。使用移位指针(shifted pointer)来做hash检测及确定两个对象是否相等；同时使用description方法来做描述字符串。</p><blockquote><p>Personalities determine hashing and equality. NSPointerFunctionsObjectPersonality provides the standard Foundation behavior of using hash and isEqual:. You can also use NSPointerFunctionsObjectPointerPersonality, which treats the contents as objects, but uses direct pointer value comparison; this is useful if you need a collection to work with object identity rather than value.<br>NSPointerFunctionsObjectPointerPersonality 使用 <code>==</code>判断相等<br>NSPointerFunctionsObjectPersonality 使用<code>hash</code>和<code>isEqual:</code>判断相等 </p></blockquote><h3 id="observe-info-方法"><a href="#observe-info-方法" class="headerlink" title="_observe:info:方法"></a>_observe:info:方法</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)<span class="variable">_observe</span>:(id)object info:(<span class="variable">_FBKVOInfo</span> *)info &#123;</span><br><span class="line">  <span class="comment">// lock</span></span><br><span class="line">  pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">  NSMutableSet *infos = [<span class="variable">_objectInfosMap</span> objectForKey:object];</span><br><span class="line">  <span class="comment">// 检查infos是否存在于_objectInfosMap中</span></span><br><span class="line">  <span class="variable">_FBKVOInfo</span> *existingInfo = [infos member:info];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != existingInfo) &#123;</span><br><span class="line">    <span class="comment">// 已经存在了，return</span></span><br><span class="line">    pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不存在，创建infos并保存于_objectInfosMap中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == infos) &#123;</span><br><span class="line">    infos = [NSMutableSet <span class="built_in">set</span>];</span><br><span class="line">    [<span class="variable">_objectInfosMap</span> setObject:infos forKey:object];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把info添加到infos中</span></span><br><span class="line">  [infos addObject:info];</span><br><span class="line">  pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">  <span class="comment">// _FBKVOSharedController添加观察</span></span><br><span class="line">  [[<span class="variable">_FBKVOSharedController</span> sharedController] observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先加锁。把被观察的对象<code>object</code>作为<code>key</code>从自己的<code>_objectInfosMap</code>获取其对应的<code>NSMutableSet</code>类型的集合，如果这个集合包含了已经封装好的<code>info</code>对象，说明已经对这个<code>info</code>添加过监听了，解锁直接 return 就是了。<br>如果这个<code>infos</code>集合不存在，创建。把<code>info</code>元素添加到这个<code>infos</code>集合中。解锁。调用<code>[[_FBKVOSharedController sharedController] observe:object info:info];</code>方法。</p><p>可见这个方法主要是使用<code>_objectInfosMap</code>保存了封装好的<code>info</code>对象，具体监听调用逻辑依赖于<code>_FBKVOSharedController</code>。</p><h1 id="五、-FBKVOSharedController实现"><a href="#五、-FBKVOSharedController实现" class="headerlink" title="五、_FBKVOSharedController实现"></a>五、_FBKVOSharedController实现</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_FBKVOSharedController</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedController;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">id</span>)object info:(<span class="keyword">nullable</span> _FBKVOInfo *)info;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">id</span>)object info:(<span class="keyword">nullable</span> _FBKVOInfo *)info;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">id</span>)object infos:(<span class="keyword">nullable</span> <span class="built_in">NSSet</span> *)infos;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_FBKVOSharedController</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSHashTable</span>&lt;_FBKVOInfo *&gt; *_infos;</span><br><span class="line">  pthread_mutex_t _mutex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_FBKVOSharedController</code>是一个单例。作用是观察 <code>_FBKVOInfo</code> 中的 <code>keyPath</code>，并给予回调(回调的类型可以是 <code>block</code>、<code>selector</code>、系统回调方法)。</p><p> 暴露出两个方法:</p><ol><li>添加监听，参数为<code>_infos</code></li><li><p>移除监听，参数为<code>_FBKVOInfo</code>或者<code>NSSet</code>类型的<code>infos</code>(容器内的元素仍然是<code>_FBKVOInfo</code>)</p><p>内部维护了一个哈希表(NSHashTable)<code>_infos</code>，用于保存这些<code>_FBKVOInfo</code>。除此之外还有一个锁:<code>_mutex</code>，用于实现线程安全。</p><p>哈希表的创建:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *infos = [<span class="built_in">NSHashTable</span> alloc];</span><br><span class="line">_infos = [infos initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> capacity:<span class="number">0</span>];</span><br><span class="line"><span class="built_in">NSPointerFunctionsWeakMemory</span>: 持弱指针引用着_FBKVOInfo对象。</span><br><span class="line"><span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> 使用==判定相等。</span><br></pre></td></tr></table></figure></li></ol><p>可见<code>_FBKVOSharedController</code>只是单纯地掌管<code>_FBKVOInfo</code>集合，它只需要解析<code>_FBKVOInfo</code>并给observer回调即可，其他的一切都不关心。</p><h2 id="添加监听"><a href="#添加监听" class="headerlink" title="添加监听"></a>添加监听</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">observe:</span>(id)object <span class="string">info:</span>(nullable _FBKVOInfo *)info &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == info) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// _infos添加对象</span></span><br><span class="line">  pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">  [_infos <span class="string">addObject:</span>info];</span><br><span class="line">  pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">  <span class="comment">// 添加观察，传入的context是info</span></span><br><span class="line">  [object <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>info-&gt;_keyPath <span class="string">options:</span>info-&gt;_options <span class="string">context:</span>(<span class="keyword">void</span> *)info];</span><br><span class="line">  <span class="keyword">if</span> (info-&gt;_state == _FBKVOInfoStateInitial) &#123;</span><br><span class="line">    info-&gt;_state = _FBKVOInfoStateObserving; <span class="comment">// 初始状态转监听状态</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info-&gt;_state == _FBKVOInfoStateNotObserving) &#123; <span class="comment">// 未监听状态便移除</span></span><br><span class="line">    <span class="comment">// this could happen when `NSKeyValueObservingOptionInitial` is one of the NSKeyValueObservingOptions,</span></span><br><span class="line">    <span class="comment">// and the observer is unregistered within the callback block.</span></span><br><span class="line">    <span class="comment">// at this time the object has been registered as an observer (in Foundation KVO),</span></span><br><span class="line">    <span class="comment">// so we can safely unobserve it.</span></span><br><span class="line">    <span class="comment">// NSKeyValueObservingOptionInitial：添加观察者时就触发回调，并且在后面赋值时也会触发回调，但是都只返回NSKeyValueChangeKindKey。观察者在callback block中取消观察，所以在这里removeObserver</span></span><br><span class="line">    [object <span class="string">removeObserver:</span>self <span class="string">forKeyPath:</span>info-&gt;_keyPath <span class="string">context:</span>(<span class="keyword">void</span> *)info];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器中添加 info 元素，添加监听。</p><h2 id="移除监听"><a href="#移除监听" class="headerlink" title="移除监听"></a>移除监听</h2><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)unobserve:(id)object info:(nullable <span class="variable">_FBKVOInfo</span> *)info &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == info) return;</span><br><span class="line">  <span class="comment">// 哈希表中移除info</span></span><br><span class="line">  pthread_mutex_lock(&amp;<span class="variable">_mutex</span>);</span><br><span class="line">  [<span class="variable">_infos</span> removeObject:info];</span><br><span class="line">  pthread_mutex_unlock(&amp;<span class="variable">_mutex</span>);</span><br><span class="line">  <span class="comment">// 移除监听</span></span><br><span class="line">  <span class="keyword">if</span> (info-&gt;<span class="variable">_state</span> == <span class="variable">_FBKVOInfoStateObserving</span>) &#123;</span><br><span class="line">    [object removeObserver:self forKeyPath:info-&gt;<span class="variable">_keyPath</span> context:(void *)info];</span><br><span class="line">  &#125;</span><br><span class="line">  info-&gt;<span class="variable">_state</span> = <span class="variable">_FBKVOInfoStateNotObserving</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器中移除 info 元素，移除监听。</p><h2 id="系统KVO调用"><a href="#系统KVO调用" class="headerlink" title="系统KVO调用"></a>系统KVO调用</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object</span><br><span class="line">                        change:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *)change</span><br><span class="line">                       context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context &#123;</span><br><span class="line">  _FBKVOInfo *info;</span><br><span class="line">  &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    <span class="comment">// 看看info是否存在于_infos中，如果存在，返回info</span></span><br><span class="line">    info = [_infos member:(__bridge <span class="keyword">id</span>)context];</span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != info) &#123;</span><br><span class="line">    <span class="comment">// 局部变量强引用controller</span></span><br><span class="line">    FBKVOController *controller = info-&gt;_controller;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != controller) &#123;</span><br><span class="line">      <span class="comment">// 局部变量强引用observer</span></span><br><span class="line">      <span class="keyword">id</span> observer = controller.observer;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">nil</span> != observer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (info-&gt;_block) &#123;  <span class="comment">// 回调 block</span></span><br><span class="line">          <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *changeWithKeyPath = change;</span><br><span class="line">          <span class="keyword">if</span> (keyPath) &#123;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *mChange = [<span class="built_in">NSMutableDictionary</span> dictionaryWithObject:keyPath forKey:FBKVONotificationKeyPathKey];</span><br><span class="line">            [mChange addEntriesFromDictionary:change];</span><br><span class="line">            changeWithKeyPath = [mChange <span class="keyword">copy</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          info-&gt;_block(observer, object, changeWithKeyPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info-&gt;_action) &#123; <span class="comment">// 回调 selector</span></span><br><span class="line">          [observer performSelector:info-&gt;_action withObject:change withObject:object];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调用KVO 系统方法</span></span><br><span class="line">          [observer observeValueForKeyPath:keyPath ofObject:object change:change context:info-&gt;_context];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终在系统方法中给予不同类型的回调。</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(uint8_t, <span class="variable">_FBKVOInfoState</span>) &#123;</span><br><span class="line">  <span class="variable">_FBKVOInfoStateInitial</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="variable">_FBKVOInfoStateObserving</span>,</span><br><span class="line">  <span class="variable">_FBKVOInfoStateNotObserving</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>作者使用了三个枚举值来记录监听状态。会不会是多此一举呢？不会。作用主要体现在添加监听的方法里有个移除监听操作：</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 添加观察，传入的context是info</span></span><br><span class="line">[<span class="function"><span class="title">object</span> addObserver:self forKeyPath:info-&gt;</span>_<span class="function"><span class="title">keyPath</span> options:info-&gt;</span>_options context:(void *)info];</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">if</span> (info-&gt;</span>_state == _FBKVOInfoStateInitial) &#123;</span><br><span class="line">    <span class="function"><span class="title">info</span>-&gt;</span>_state = _FBKVOInfoStateObserving; <span class="comment">// 初始状态转监听状态</span></span><br><span class="line">  &#125; <span class="function"><span class="title">else</span> <span class="keyword">if</span> (info-&gt;</span>_state == _FBKVOInfoStateNotObserving) &#123; <span class="comment">// 未监听状态便移除</span></span><br><span class="line">    [<span class="function"><span class="title">object</span> removeObserver:self forKeyPath:info-&gt;</span>_keyPath context:(void *)info];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>“未监听状态便移除“是怎么出现的？示例如下：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.KVOController observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">     [<span class="keyword">self</span>.KVOController unobserve:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><p>包含了<code>NSKeyValueObservingOptionInitial</code>选项且在回调中移除了监听就会出现这种情况。因为如果有<code>NSKeyValueObservingOptionInitial</code>选项，在添加监听的时候就会有回调。调用栈如下：<br><img src="https://image.chenyalun.com/2019/01/07/001.png" style="zoom:70%"><br>执行到<code>[object addObserver:self forKeyPath:info-&gt;_keyPath options:info-&gt;_options context:(void *)info];</code>这行代码的时候，首先添加监听，接着调用回调，而回调中又移除了观察，这时info的状态被设置为<code>_FBKVOInfoStateNotObserving</code>。接着进入了下面的 if-else 判断中，才有了移除监听的操作。可见逻辑非常严谨。</p><p>NSKeyValueObservingOption参考：</p><blockquote><p>NSKeyValueObservingOptionNew：接收方法中使用change参数传入变化后的新值，键为：&gt;NSKeyValueChangeNewKey；<br>NSKeyValueObservingOptionOld：接收方法中使用change参数传入变化前的旧值，键为：&gt;NSKeyValueChangeOldKey；<br>NSKeyValueObservingOptionInitial：注册之后立刻调用接收方法，如果配置了&gt;NSKeyValueObservingOptionNew，change参数内容会包含新值，键为：&gt;NSKeyValueChangeNewKey；<br>NSKeyValueObservingOptionPrior：如果加入这个参数，接收方法会在变化前后分别调用一次，共两&gt;次，变化前的通知change参数包含notificationIsPrior = 1。其他内容根据&gt;NSKeyValueObservingOptionNew和NSKeyValueObservingOptionOld的配置确定。</p></blockquote><h1 id="六、一个函数"><a href="#六、一个函数" class="headerlink" title="六、一个函数"></a>六、一个函数</h1><p>其实不是一个函数，不过是为了实现一个功能，核心还是一个函数。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.枚举字符串化</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *describe_option(<span class="built_in">NSKeyValueObservingOptions</span> option) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionNew</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionNew"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionOld</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionOld"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionInitial</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionInitial"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionPrior</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionPrior"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">NSCAssert</span>(<span class="literal">NO</span>, <span class="string">@"unexpected option %tu"</span>, option);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.拼接option</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> append_option_description(<span class="built_in">NSMutableString</span> *s, <span class="built_in">NSUInteger</span> option) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == s.length) &#123;</span><br><span class="line">        [s appendString:describe_option(option)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [s appendString:<span class="string">@"|"</span>];</span><br><span class="line">        [s appendString:describe_option(option)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.NSKeyValueObservingOptions类型值遍历</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSUInteger</span> enumerate_flags(<span class="built_in">NSUInteger</span> *ptrFlags) &#123;</span><br><span class="line">    <span class="built_in">NSCAssert</span>(ptrFlags, <span class="string">@"expected ptrFlags"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ptrFlags) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> flags = *ptrFlags;</span><br><span class="line">    <span class="keyword">if</span> (!flags)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> flag = <span class="number">1</span> &lt;&lt; __builtin_ctzl(flags);</span><br><span class="line">    flags &amp;= ~flag;</span><br><span class="line">    *ptrFlags = flags;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.把options所有值都拼出来</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *describe_options(<span class="built_in">NSKeyValueObservingOptions</span> options) &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *s = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="built_in">NSUInteger</span> option;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> != (option = enumerate_flags(&amp;options))) &#123;</span><br><span class="line">        append_option_description(s, option);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不使用 switch-case 把位移枚举的值遍历出来了。</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Similar to __builtin_ctz, except the argument type is unsigned long.</span></span><br><span class="line"><span class="comment">// __builtin_ctz(x)：x末尾0的个数</span></span><br><span class="line"><span class="comment">// 左移__builtin_ctz(x)位得到原先的枚举值</span></span><br><span class="line">NSUInteger flag = <span class="number">1</span> &lt;&lt; __builtin_ctzl(<span class="keyword">flags</span>);</span><br><span class="line"><span class="comment">// flags 去除已经取到的值</span></span><br><span class="line"><span class="keyword">flags</span> &amp;= ~flag;</span><br><span class="line"><span class="comment">// 把更新后的flags赋予指向ptrFlags的指针</span></span><br><span class="line">*ptrFlags = <span class="keyword">flags</span>;</span><br></pre></td></tr></table></figure><p>不失为一个好办法。</p><h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><blockquote><p>使用 KVOController 进行键值观测可以说完美地解决了在使用原生 KVO 时遇到的各种问题。</p><p>1.不需要手动移除观察者；<br>2.实现 KVO 与事件发生处的代码上下文相同，不需要跨方法传参数；<br>3.使用 block 来替代方法能够减少使用的复杂度，提升使用 KVO 的体验；<br>4.每一个 keyPath 会对应一个属性，不需要在 block 中使用 if 判断 keyPath；</p></blockquote><p>以上引自draveness。解释如下：<br>1.NSMapTable 可以持有键和值的弱引用，当键或者值当中的一个被释放时，整个这一项就会被移除掉。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里使用被观察者observer作为强引用或者弱引用的key，使用_FBKVOInfo作为强引用的value</span></span><br><span class="line"><span class="built_in">NSPointerFunctionsOptions</span> keyOptions = retainObserved ? <span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> : <span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>;</span><br><span class="line">_objectInfosMap = [[<span class="built_in">NSMapTable</span> alloc] initWithKeyOptions:keyOptions valueOptions:<span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPersonality</span> capacity:<span class="number">0</span>];</span><br></pre></td></tr></table></figure><p>2.因为是在@selector(observeValueForKeyPath:ofObject:change:context:)中处理的回调。<br>3.使用FBKVONotificationBlock。<br>4._FBKVOInfo封装。</p><p>纵观全部代码，作者首先给分类添加了两个属性，用于接口调用。这些属性都指向了FBKVOController，FBKVOController主要维护了一个NSMapTable。key 是所观察的对象，value 是NSMutableSet类型的集合，其内部元素是_FBKVOInfo类型对象。一个_FBKVOInfo对象对应一个信息封装。之所以使用NSMapTable集合是便于对同一个对象的多个keyPath进行观察，同时处理被观察者的强弱引用。另外_FBKVOInfo对象是对FBKVOController、keyPath、context、回调block等信息的封装。最后，各个FBKVOController把所有对观察的处理交给单例_FBKVOSharedController，这个单例调用系统KVO方法回调、处理包含所有_FBKVOInfo对象的NSHashTable集合。</p><blockquote><p>参考资料<br><a href="https://github.com/draveness/analyze/blob/master/contents/KVOController/KVOController.md" target="_blank" rel="noopener">KVOController</a><br><a href="https://blog.csdn.net/DonnyDN/article/details/77750751" target="_blank" rel="noopener">iOS中Block使用注意点</a><br><a href="https://www.jianshu.com/p/915356e280fc" target="_blank" rel="noopener">isEqual与hash</a><br><a href="https://blog.kyleduo.com/2014/10/20/ios_learning-kvo/" target="_blank" rel="noopener">iOS学习笔记——KVO</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 学习KVO的封装。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>读「YYCache」</title>
    <link href="http://blog.chenyalun.com/2019/01/02/%E8%AF%BB%E3%80%8CYYCache%E3%80%8D/"/>
    <id>http://blog.chenyalun.com/2019/01/02/读「YYCache」/</id>
    <published>2019-01-02T07:22:17.000Z</published>
    <updated>2019-07-30T04:04:48.574Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 关于YYCache的简单总结。 </p><br><a id="more"></a><p></p><p>阅读YYCache源码有3遍了，自我感觉“需要理解”的部分掌握的差不多了，做个记录。</p><h1 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h1><p>API 类似字典，比较容易理解。</p><h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) YYMemoryCache *memoryCache;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) YYDiskCache *diskCache;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithPath:(<span class="built_in">NSString</span> *)path <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)cacheWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)cacheWithPath:(<span class="built_in">NSString</span> *)path;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init UNAVAILABLE_ATTRIBUTE;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)new UNAVAILABLE_ATTRIBUTE;</span><br></pre></td></tr></table></figure><h3 id="2-是否存在"><a href="#2-是否存在" class="headerlink" title="2.是否存在"></a>2.是否存在</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key, <span class="built_in">BOOL</span> contains))block;</span><br></pre></td></tr></table></figure><h3 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)objectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)objectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object))block;</span><br></pre></td></tr></table></figure><h3 id="4-设值"><a href="#4-设值" class="headerlink" title="4.设值"></a>4.设值</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="keyword">void</span>))block;</span><br></pre></td></tr></table></figure><h3 id="5-移除"><a href="#5-移除" class="headerlink" title="5.移除"></a>5.移除</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key))block;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithBlock:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithProgressBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="keyword">int</span> removedCount, <span class="keyword">int</span> totalCount))progress endBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> error))end;</span><br></pre></td></tr></table></figure><h1 id="二、YYCache-实现"><a href="#二、YYCache-实现" class="headerlink" title="二、YYCache 实现"></a>二、YYCache 实现</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YYCache</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>) init &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Use \"initWithName\" or \"initWithPath\" to create YYCache instance."</span>);</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithPath:<span class="string">@""</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *cacheFolder = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</span><br><span class="line">    <span class="built_in">NSString</span> *path = [cacheFolder stringByAppendingPathComponent:name];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithPath:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithPath:(<span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    YYDiskCache *diskCache = [[YYDiskCache alloc] initWithPath:path];</span><br><span class="line">    <span class="keyword">if</span> (!diskCache) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *name = [path lastPathComponent];</span><br><span class="line">    YYMemoryCache *memoryCache = [YYMemoryCache new];</span><br><span class="line">    memoryCache.name = name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    _name = name;</span><br><span class="line">    _diskCache = diskCache;</span><br><span class="line">    _memoryCache = memoryCache;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)cacheWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithName:name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)cacheWithPath:(<span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithPath:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [_memoryCache containsObjectForKey:key] || [_diskCache containsObjectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key, <span class="built_in">BOOL</span> contains))block &#123;</span><br><span class="line">    <span class="keyword">if</span> (!block) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([_memoryCache containsObjectForKey:key]) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            block(key, <span class="literal">YES</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        [_diskCache containsObjectForKey:key withBlock:block];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)objectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object = [_memoryCache objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (!object) &#123;</span><br><span class="line">        object = [_diskCache objectForKey:key];</span><br><span class="line">        <span class="keyword">if</span> (object) &#123;</span><br><span class="line">            [_memoryCache setObject:object forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)objectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object))block &#123;</span><br><span class="line">    <span class="keyword">if</span> (!block) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object = [_memoryCache objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (object) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            block(key, object);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [_diskCache objectForKey:key withBlock:^(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object &amp;&amp; ![_memoryCache objectForKey:key]) &#123;</span><br><span class="line">                [_memoryCache setObject:object forKey:key];</span><br><span class="line">            &#125;</span><br><span class="line">            block(key, object);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    [_memoryCache setObject:object forKey:key];</span><br><span class="line">    [_diskCache setObject:object forKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [_memoryCache setObject:object forKey:key];</span><br><span class="line">    [_diskCache setObject:object forKey:key withBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    [_memoryCache removeObjectForKey:key];</span><br><span class="line">    [_diskCache removeObjectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key))block &#123;</span><br><span class="line">    [_memoryCache removeObjectForKey:key];</span><br><span class="line">    [_diskCache removeObjectForKey:key withBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjects];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithBlock:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjectsWithBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithProgressBlock:(<span class="keyword">void</span>(^)(<span class="keyword">int</span> removedCount, <span class="keyword">int</span> totalCount))progress</span><br><span class="line">                                 endBlock:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> error))end &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjectsWithProgressBlock:progress endBlock:end];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name) <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p&gt; (%@)"</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>, _name];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p&gt;"</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>整体来看还是比较容易理解的，YYCache 整合了内存缓存和磁盘缓存，主要做了这些事：</p><ol><li>初始化YYCache实例，要求缓存路径要合理。</li><li>查询缓存对象先从内存缓存中查找，如果没有，再从磁盘缓存中查找。当磁盘缓存中有而内存缓存中没有的时候，把取得的缓存对象保存在内存缓存中。</li><li>缓存对象的存取和移除，内存缓存和磁盘缓存两者保持同步。</li></ol><h2 id="1-YYMemoryCache"><a href="#1-YYMemoryCache" class="headerlink" title="1.YYMemoryCache"></a>1.YYMemoryCache</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) NSString *name;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(readonly) NSUInteger totalCount;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(readonly) NSUInteger totalCost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma mark - Limit</span></span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSUInteger countLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSUInteger costLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSTimeInterval ageLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSTimeInterval autoTrimInterval;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL shouldRemoveAllObjectsOnMemoryWarning;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL shouldRemoveAllObjectsWhenEnteringBackground;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) void(^didReceiveMemoryWarningBlock)(YYMemoryCache *cache);</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) void(^didEnterBackgroundBlock)(YYMemoryCache *cache);</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL releaseOnMainThread;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL releaseAsynchronously;</span><br></pre></td></tr></table></figure><p>类似于NSCache，提供包括缓存数量、缓存花费、缓存时间的管理。除此之外，当接收到内存警告时<code>(shouldRemoveAllObjectsOnMemoryWarning)</code>或者 App 进入到后台时<code>(shouldRemoveAllObjectsWhenEnteringBackground)</code>可以选择释放缓存对象。而对缓存对象释放也可以进行控制，比如可以选择在主线程释放<code>(releaseOnMainThread)</code>或者异步释放<code>(releaseAsynchronously)</code>。</p><h3 id="存取接口"><a href="#存取接口" class="headerlink" title="存取接口"></a>存取接口</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)objectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key withCost:(<span class="built_in">NSUInteger</span>)cost;</span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)trimToCount:(<span class="built_in">NSUInteger</span>)count;</span><br><span class="line">- (<span class="keyword">void</span>)trimToCost:(<span class="built_in">NSUInteger</span>)cost;</span><br><span class="line">- (<span class="keyword">void</span>)trimToAge:(<span class="built_in">NSTimeInterval</span>)age;</span><br></pre></td></tr></table></figure><p> 除了基本的存取方法之外，YYMemoryCache 还暴露了三个移除缓存对象的方法。<br> trimToCount：根据限制的数量(countLimit)进行移除缓存对象操作，直到满足数量限制要求。<br> trimToCost：根据限制的花费(costLimit)进行移除缓存对象操作，直到满足花费限制要求。<br> trimToAge：根据缓存对象的过期时间(ageLimit)进行移除缓存对象操作，直到满足要求。</p><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在具体实现中，作者考虑了以下要求:</p><ol><li>缓存对象的存取。要保证效率就要求存取时间复杂度最好是O(1)。</li><li>缓存对象的移除。要保证能按照 <code>cost、age、count</code> 等条件对所有不符合要求的对象进行移除。</li><li>线程安全。需要加锁。<br>第一条：要求时间复杂度是 O(1)，那就可以采用哈希表、字典等。作者使用了字典，且是效率更高的<code>CFMutableDictionaryRef</code>。<br>第二条：记录 <code>cost、age、count</code>等属性，肯定需要对缓存对象进行包装。再者需要考虑LRU(Least Recently Used)，就需要保证顺序。而要使得字典中的对象(value)有顺序，必须有一个指向其他对象的指针(属性）。可以使用双向链表包装缓存对象。<br>第三条：存取的线程安全，使用GCD线程锁。</li></ol><h4 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">@interface <span class="variable">_YYLinkedMapNode</span> : NSObject &#123;</span><br><span class="line">    @package</span><br><span class="line">    <span class="variable">__unsafe_unretained</span> <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_prev</span>; <span class="comment">// retained by dic</span></span><br><span class="line">    <span class="variable">__unsafe_unretained</span> <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_next</span>; <span class="comment">// retained by dic</span></span><br><span class="line">    id <span class="variable">_key</span>;</span><br><span class="line">    id <span class="variable">_value</span>;</span><br><span class="line">    NSUInteger <span class="variable">_cost</span>;</span><br><span class="line">    NSTimeInterval <span class="variable">_time</span>;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>链表的结点中保存着key 和 value，这是对缓存对象的包装。_cost和_time记录着缓存对象的花费和过期时间。而使用<strong>unsafe_unretained修饰的_prev和_next则分别指向前一个对象和后一个对象。由于这些结点已经被字典持有了，所以直接使用</strong>unsafe_unretained修饰，不必再增加它的引用计数，提高效率。</p><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"> @interface <span class="variable">_YYLinkedMap</span> : NSObject &#123;</span><br><span class="line">    @package</span><br><span class="line">    CFMutableDictionaryRef <span class="variable">_dic</span>; <span class="comment">// do not set object directly</span></span><br><span class="line">    NSUInteger <span class="variable">_totalCost</span>;</span><br><span class="line">    NSUInteger <span class="variable">_totalCount</span>;</span><br><span class="line">    <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_head</span>; <span class="comment">// MRU, do not change it directly</span></span><br><span class="line">    <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_tail</span>; <span class="comment">// LRU, do not change it directly</span></span><br><span class="line">    BOOL <span class="variable">_releaseOnMainThread</span>;</span><br><span class="line">    BOOL <span class="variable">_releaseAsynchronously</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)insertNodeAtHead:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (void)bringNodeToHead:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (void)removeNode:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (<span class="variable">_YYLinkedMapNode</span> *)removeTailNode;</span><br><span class="line">- (void)removeAll;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure><p>一个 <code>YYMemoryCache</code> 对象有一个链表。这个链表使用<code>_dic</code>保存着所有包装好的缓存对象(<code>_YYLinkedMapNode</code>)，记录着总的花费(<code>_totalCost</code>)和总的数量(<code>_totalCount</code>)。当然，还使用<code>_head</code>指着链表的头指针，使用<code>_tail</code>指着链表的尾指针。<code>_releaseOnMainThread</code>和<code>_releaseAsynchronously</code>用于设置对缓存对象释放操作的选项:主线程释放或者异步释放。</p><p><code>_YYLinkedMap</code>暴露出的五个方法很清晰地表明它的作用：每次当缓存取到某个对象时，把它置在头结点的位置。这样随着时间的推移，很轻松地使得那些不经常使用的对象处在链表的后端，经常使用的对象处在链表的前端，这样就实现了 <code>LRU</code>。</p><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">- (void)insertNodeAtHead:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    CFDictionarySetValue</span>(_dic, (__bridge const void *)(<span class="keyword">node</span><span class="title">-&gt;_key</span>), (__bridge const void *)(<span class="keyword">node</span><span class="title">));</span></span><br><span class="line"><span class="title">    _totalCost</span> += <span class="keyword">node</span><span class="title">-&gt;_cost</span>;</span><br><span class="line">    _totalCount++;</span><br><span class="line">    if (_head) &#123;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_next</span> = _head;</span><br><span class="line">        _head-&gt;_prev = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        _head</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125; else</span> &#123;</span><br><span class="line">        _head = _tail = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125;</span></span><br><span class="line"><span class="title">&#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">- (void</span>)bringNodeToHead:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    if</span> (_head == <span class="keyword">node</span><span class="title">) return</span>;</span><br><span class="line">    </span><br><span class="line">    if (_tail == <span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">        _tail</span> = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">        _tail-&gt;_next = nil;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_next-</span>&gt;_prev = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_prev-</span>&gt;_next = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;_next</span> = _head;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;_prev</span> = nil;</span><br><span class="line">    _head-&gt;_prev = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    _head</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">&#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">- (void</span>)removeNode:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    CFDictionaryRemoveValue</span>(_dic, (__bridge const void *)(<span class="keyword">node</span><span class="title">-&gt;_key</span>));</span><br><span class="line">    _totalCost -= <span class="keyword">node</span><span class="title">-&gt;_cost</span>;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    if (<span class="keyword">node</span><span class="title">-&gt;_next</span>) <span class="keyword">node</span><span class="title">-&gt;_next-</span>&gt;_prev = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">    if (<span class="keyword">node</span><span class="title">-&gt;_prev</span>) <span class="keyword">node</span><span class="title">-&gt;_prev-</span>&gt;_next = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    if (_head == <span class="keyword">node</span><span class="title">) _head</span> = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    if (_tail == <span class="keyword">node</span><span class="title">) _tail</span> = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_YYLinkedMapNode *)removeTailNode &#123;</span><br><span class="line">    if (!_tail) return nil;</span><br><span class="line">    _YYLinkedMapNode *tail = _tail;</span><br><span class="line">    CFDictionaryRemoveValue(_dic, (__bridge const void *)(_tail-&gt;_key));</span><br><span class="line">    _totalCost -= _tail-&gt;_cost;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    if (_head == _tail) &#123;</span><br><span class="line">        _head = _tail = nil;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        _tail = _tail-&gt;_prev;</span><br><span class="line">        _tail-&gt;_next = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    return tail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对结点的插入、移除、调整位置，是数据结构的基础操作。令人怀念！</p><p><code>_releaseOnMainThread</code>和<code>_releaseAsynchronously</code>这两个选项的实现也很简单。作者自己维护了一个队列:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> dispatch_queue_t <span class="title">YYMemoryCacheGetReleaseQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>移除的时候有所判断：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">CFMutableDictionaryRef</span> holder = _dic;</span><br><span class="line">      _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> (_releaseAsynchronously) &#123;</span><br><span class="line">          <span class="built_in">dispatch_queue_t</span> queue = _releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">          <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">              <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_releaseOnMainThread &amp;&amp; !pthread_main_np()) &#123;</span><br><span class="line">          <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">              <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">CFRelease</span>(holder);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>要求异步要求主线程：那就在主线程异步释放holder。关于这里使用一个holder的原因，下文有解释。</p><h3 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">@implementation YYMemoryCache &#123;</span><br><span class="line">    pthread_mutex_t _lock<span class="comment">;</span></span><br><span class="line">    _YYLinkedMap *_lru<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_queue_t </span>_queue<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这里可以看出<code>YYMemoryCache</code>使用<code>pthread_mutex_t</code>保证线程安全。</p><p>最关键的还是对无效缓存对象的释放，以 <code>count</code> 为例，当缓存的对象数量超过了 <code>count</code> 限制，就需要对链表后端不常使用的缓存对象进行移除操作，直到满足 <code>count</code> 限制。</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)<span class="variable">_trimToCount</span>:(NSUInteger)countLimit &#123;</span><br><span class="line">    BOOL finish = NO;</span><br><span class="line">    pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    <span class="keyword">if</span> (countLimit == <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="variable">_lru</span> removeAll];</span><br><span class="line">        finish = YES;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">_lru</span>-&gt;<span class="variable">_totalCount</span> &lt;= countLimit) &#123;</span><br><span class="line">        finish = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    <span class="keyword">if</span> (finish) return;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *holder = [NSMutableArray new];</span><br><span class="line">    <span class="keyword">while</span> (!finish) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;<span class="variable">_lock</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">_lru</span>-&gt;<span class="variable">_totalCount</span> &gt; countLimit) &#123;</span><br><span class="line">                <span class="variable">_YYLinkedMapNode</span> *node = [<span class="variable">_lru</span> removeTailNode];</span><br><span class="line">                <span class="keyword">if</span> (node) [holder addObject:node];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish = YES;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.<span class="built_in">count</span>) &#123;</span><br><span class="line">        dispatch_queue_t queue = <span class="variable">_lru</span>-&gt;<span class="variable">_releaseOnMainThread</span> ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            [holder <span class="built_in">count</span>]; <span class="comment">// release in queue</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法做了什么？</p><ol><li>使用<code>pthread_mutex_lock(&amp;_lock);pthread_mutex_unlock(&amp;_lock);</code>对操作加锁解锁来保证线程安全。</li><li>对参数 countLimit 判断：<br>如果countLimit为0，也就是说缓存数量限制为0，那移除所有缓存对象就是了。如果当前所缓存的对象数量小于countLimit，那说明满足数量限制要求，就不需要移除操作了。</li><li>作者创建一个可变字典holder，当不满足countLimit限制要求的时候，对链表尾结点进行移除操作，并把这个尾结点添加到holder中持有。当然，这里有加锁操作。这个 while 循环结束，所有多余的缓存对象就在holder中了。<br>4.对holder中所有元素进行 release 操作。<br>其他的如:</li></ol><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>_trimToAge:<span class="params">(NSTimeInterval)</span>ageLimit; </span><br><span class="line">- <span class="params">(void)</span>_trimToCost:<span class="params">(NSUInteger)</span>costLimit</span><br></pre></td></tr></table></figure><p>操作同理。</p><h3 id="内存警告"><a href="#内存警告" class="headerlink" title="内存警告"></a>内存警告</h3><p>内存警告语 App 进入后台时释放缓存对象的操作，作者接受了系统通知，直接处理即可。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">addObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">selector</span>:@<span class="keyword">selector</span>(<span class="keyword">_appDidReceiveMemoryWarningNotification</span>) name:UIApplicationDidReceiveMemoryWarningNotification object:nil];</span><br><span class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">addObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">selector</span>:@<span class="keyword">selector</span>(<span class="keyword">_appDidEnterBackgroundNotification</span>) name:UIApplicationDidEnterBackgroundNotification object:nil];</span><br></pre></td></tr></table></figure><h3 id="存取实现"><a href="#存取实现" class="headerlink" title="存取实现"></a>存取实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="built_in">BOOL</span> contains = <span class="built_in">CFDictionaryContainsKey</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> contains;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _YYLinkedMapNode *node = <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node-&gt;_time = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">        [_lru bringNodeToHead:node];</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> node ? node-&gt;_value : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    [<span class="keyword">self</span> setObject:object forKey:key withCost:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对缓存对象的读取自然是根据 key 读取到字典中对应的 value，这个 value 是个结点(<code>_YYLinkedMapNode</code>)，再取出这个结点的value 属性，便是最原始的缓存对象了:<code>node-&gt;_value</code>。</p><h2 id="2-关键点"><a href="#2-关键点" class="headerlink" title="2.关键点"></a>2.关键点</h2><p>1.字典</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">声明: <span class="built_in">CFMutableDictionaryRef</span> _dic;</span><br><span class="line">创建: _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">设值: <span class="built_in">CFDictionarySetValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node-&gt;_key), (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node));</span><br><span class="line">取值: <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">移除: <span class="built_in">CFDictionaryRemoveValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node-&gt;_key));</span><br><span class="line">获取数量: <span class="built_in">CFDictionaryGetCount</span>(_dic);</span><br><span class="line">是否存在: <span class="built_in">CFDictionaryContainsKey</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">释放: <span class="built_in">CFRelease</span>(_dic);</span><br></pre></td></tr></table></figure><p>2.容器中对象销毁控制</p><blockquote><p>“对象的销毁虽然消耗资源不多，但累积起来也是不容忽视的。通常当容器类持有大量对象时，其销毁时的资源消耗就非常明显。同样的，如果对象可以放到后台线程去释放，那就挪到后台线程去…”</p></blockquote><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo &#123;</span><br><span class="line"><span class="comment">// 对象销毁和移除容器中元素两件事隔离开</span></span><br><span class="line">&#123; <span class="comment">// 数组中的所有元素在子线程释放</span></span><br><span class="line">   <span class="built_in">NSArray</span> *holder = tmp;</span><br><span class="line">   tmp = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   <span class="keyword">if</span> (holder.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">           [holder count];</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#123; <span class="comment">// 数组中的某个元素在子线程释放</span></span><br><span class="line">   <span class="keyword">id</span> obj = tmp[<span class="number">2</span>];</span><br><span class="line">   <span class="built_in">NSMutableArray</span> *holder = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   [holder addObject:obj];</span><br><span class="line">   [tmp removeObject:obj];</span><br><span class="line">   <span class="keyword">if</span> (holder.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">           [holder count];</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.线程安全的实现</p><figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;  // 取值线程安全</span><br><span class="line">pthread_mutex_lock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">BOOL releaseAsynchronously = _lru-&gt;_releaseAsynchronously;</span><br><span class="line">pthread_mutex_unlock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">return releaseAsynchronously;</span><br><span class="line">&#125;</span><br><span class="line">&#123; // 设值线程安全</span><br><span class="line">pthread_mutex_lock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">_lru-&gt;_releaseAsynchronously = releaseAsynchronously;</span><br><span class="line">pthread_mutex_unlock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.<code>pthread_mutex_lock</code>使用</p><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">声明锁: pthread_mutex_t <span class="variable">_lock</span>;</span><br><span class="line">创建锁: pthread_mutex_init(&amp;<span class="variable">_lock</span>, NULL);</span><br><span class="line">加锁: pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">解锁: pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">尝试加锁:</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_trylock(&amp;<span class="variable">_lock</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">&#125;</span><br><span class="line">销毁锁: pthread_mutex_destroy(&amp;<span class="variable">_lock</span>);</span><br></pre></td></tr></table></figure><p>5.if-else 单句</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_name) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure><h2 id="3-YYDiskCache-实现"><a href="#3-YYDiskCache-实现" class="headerlink" title="3.YYDiskCache 实现"></a>3.YYDiskCache 实现</h2><p>YYDiskCache主要调用了YYKVStorage的接口，并提供对外 API。</p><h4 id="五个函数"><a href="#五个函数" class="headerlink" title="五个函数"></a>五个函数</h4><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">/// <span class="type">Free</span> disk space <span class="keyword">in</span> bytes.</span><br><span class="line"><span class="keyword">static</span> int64_t _YYDiskSpaceFree() &#123;</span><br><span class="line">    <span class="type">NSError</span> *error = <span class="keyword">nil</span>;</span><br><span class="line">    <span class="type">NSDictionary</span> *attrs = [[<span class="type">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="type">NSHomeDirectory</span>() error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    int64_t space =  [[attrs objectForKey:<span class="type">NSFileSystemFreeSize</span>] longLongValue];</span><br><span class="line">    <span class="keyword">if</span> (space &lt; <span class="number">0</span>) space = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// <span class="type">String</span>'s md5 hash.</span><br><span class="line"><span class="keyword">static</span> <span class="type">NSString</span> *_YYNSStringMD5(<span class="type">NSString</span> *<span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">    <span class="type">NSData</span> *data = [<span class="built_in">string</span> dataUsingEncoding:<span class="type">NSUTF8StringEncoding</span>];</span><br><span class="line">    unsigned <span class="built_in">char</span> <span class="literal">result</span>[<span class="type">CC_MD5_DIGEST_LENGTH</span>];</span><br><span class="line">    <span class="type">CC_MD5</span>(data.bytes, (<span class="type">CC_LONG</span>)data.length, <span class="literal">result</span>);</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">NSString</span> stringWithFormat:</span><br><span class="line">                @<span class="string">"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"</span>,</span><br><span class="line">                <span class="literal">result</span>[<span class="number">0</span>],  <span class="literal">result</span>[<span class="number">1</span>],  <span class="literal">result</span>[<span class="number">2</span>],  <span class="literal">result</span>[<span class="number">3</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">4</span>],  <span class="literal">result</span>[<span class="number">5</span>],  <span class="literal">result</span>[<span class="number">6</span>],  <span class="literal">result</span>[<span class="number">7</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">8</span>],  <span class="literal">result</span>[<span class="number">9</span>],  <span class="literal">result</span>[<span class="number">10</span>], <span class="literal">result</span>[<span class="number">11</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">12</span>], <span class="literal">result</span>[<span class="number">13</span>], <span class="literal">result</span>[<span class="number">14</span>], <span class="literal">result</span>[<span class="number">15</span>]</span><br><span class="line">            ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">void</span> _YYDiskCacheInitGlobal() &#123;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _globalInstancesLock = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">        _globalInstances = [[<span class="type">NSMapTable</span> alloc] initWithKeyOptions:<span class="type">NSPointerFunctionsStrongMemory</span> valueOptions:<span class="type">NSPointerFunctionsWeakMemory</span> capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">YYDiskCache</span> *_YYDiskCacheGetGlobal(<span class="type">NSString</span> *path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">    _YYDiskCacheInitGlobal();</span><br><span class="line">    dispatch_semaphore_wait(_globalInstancesLock, <span class="type">DISPATCH_TIME_FOREVER</span>);</span><br><span class="line">    id cache = [_globalInstances objectForKey:path];</span><br><span class="line">    dispatch_semaphore_signal(_globalInstancesLock);</span><br><span class="line">    <span class="keyword">return</span> cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">void</span> _YYDiskCacheSetGlobal(<span class="type">YYDiskCache</span> *cache) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.path.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    _YYDiskCacheInitGlobal();</span><br><span class="line">    dispatch_semaphore_wait(_globalInstancesLock, <span class="type">DISPATCH_TIME_FOREVER</span>);</span><br><span class="line">    [_globalInstances setObject:cache forKey:cache.path];</span><br><span class="line">    dispatch_semaphore_signal(_globalInstancesLock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>_YYDiskSpaceFree()</code>提供剩余磁盘空间的查询。<br><code>_YYNSStringMD5(NSString *string)</code>提供字符串转 md5。</p><p><code>_YYDiskCacheInitGlobal()</code>用于初始化一个强-弱的<code>NSMapTable</code>，保存<code>YYDiskCache</code>对象。<br><code>_YYDiskCacheGetGlobal(NSString *path)</code>用于根据路径 path 获取对应的<code>YYDiskCache</code>对象。<br><code>_YYDiskCacheSetGlobal(YYDiskCache *cache)</code>用于根据路径 path 在<code>NSMapTable</code>保存一个<code>YYDiskCache</code>对象。</p><h4 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h4><p>YYDiskCache的功能比如移除过期的对象、移除超过数量限制的对象等，主要通过YYKVStorage实现。<br>作者把保存类型分为三种：</p><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">YYKVStorageType</span>) &#123;</span><br><span class="line">    /// file system.</span><br><span class="line">    <span class="type">YYKVStorageTypeFile</span> = 0,</span><br><span class="line">    ///  in sqlite.</span><br><span class="line">    <span class="type">YYKVStorageTypeSQLite</span> = 1,</span><br><span class="line">    ///  based on your choice.</span><br><span class="line">    <span class="type">YYKVStorageTypeMixed</span> = 2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>作者指明了原因：Typically, write data to sqlite is faster than extern file, but<br> reading performance is dependent on data size. In my test (on iPhone 6 64G),<br> read data from extern file is faster than from sqlite when the data is larger<br> than 20KB.</p><ul><li>If you want to store large number of small datas (such as contacts cache),<br>use YYKVStorageTypeSQLite to get better performance.</li><li>If you want to store large files (such as image cache),<br>use YYKVStorageTypeFile to get better performance.</li><li><p>You can use YYKVStorageTypeMixed and choice your storage type for each item.</p><p>20kb 以下的持久化，放到文件中。 20kb 以上的持久化，放到数据库sqlite中。也可以选择混合存储。</p></li></ul><h2 id="三-关键点"><a href="#三-关键点" class="headerlink" title="三.关键点"></a>三.关键点</h2><p>1.弱引用+强引用</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) _<span class="keyword">self</span> = <span class="keyword">self</span>;</span><br><span class="line"><span class="built_in">dispatch_async</span>(_queue, ^&#123;</span><br><span class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(_<span class="keyword">self</span>) <span class="keyword">self</span> = _<span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">BOOL</span> contains = [<span class="keyword">self</span> containsObjectForKey:key];<span class="comment">// self 应该是局部变量</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>2, 快速生成时间戳(10位数)</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> timestamp = time(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>3.init构造<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol start="4"><li>抛出异常</li></ol><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@throw</span> [NSException <span class="attribute">exceptionWithName</span>:@<span class="string">"name"</span> <span class="attribute">reason</span>:@<span class="string">"YYDiskCache must be initialized with a path. Use 'initWithPath:' or 'initWithPath:inlineThreshold:' instead."</span> <span class="attribute">userInfo</span>:nil];</span><br></pre></td></tr></table></figure><p>5.尝试捕获异常<br><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="meta">@try</span> &#123;</span><br><span class="line">    <span class="keyword">object</span> = [NSKeyedUnarchiver unarchiveObjectWithData:item.<span class="keyword">value</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@catch</span> (NSException *exception) &#123;</span><br><span class="line">    <span class="comment">// nothing to do...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四-YYKVStorage"><a href="#四-YYKVStorage" class="headerlink" title="四.YYKVStorage"></a>四.YYKVStorage</h2><p>YYKVStorage没有阅读。乍一看是许多琐碎的 SQL 操作和文件操作，没有纳入阅读计划。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 关于YYCache的简单总结。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>读「YYModel」</title>
    <link href="http://blog.chenyalun.com/2018/12/20/%E8%AF%BB%E3%80%8CYYModel%E3%80%8D/"/>
    <id>http://blog.chenyalun.com/2018/12/20/读「YYModel」/</id>
    <published>2018-12-20T11:32:33.000Z</published>
    <updated>2019-03-29T03:01:31.589Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"> 关于YYModel的简单总结。 </p><br><a id="more"></a><p></p><p>尝试阅读YYModel源码，发现有一些细节并不能十分透彻地理解清楚，只能略微窥探到其中主要原理。这里就当做第一遍阅读笔记😂😂😂。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">YYModel</span>)</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)yy_modelWithJSON:(<span class="keyword">id</span>)json;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)yy_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dictionary;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelSetWithJSON:(<span class="keyword">id</span>)json;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelSetWithDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)yy_modelToJSONObject;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)yy_modelToJSONData;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)yy_modelToJSONString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)yy_modelCopy;</span><br><span class="line">- (<span class="keyword">void</span>)yy_modelEncodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder;</span><br><span class="line">- (<span class="keyword">id</span>)yy_modelInitWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder;</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)yy_modelHash;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelIsEqual:(<span class="keyword">id</span>)model;</span><br><span class="line">- (<span class="built_in">NSString</span> *)yy_modelDescription;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">YYModel</span>)</span></span><br><span class="line"><span class="comment">// json到模型数组</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span> *)yy_modelArrayWithClass:(Class)cls json:(<span class="keyword">id</span>)json;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDictionary</span> (<span class="title">YYModel</span>)</span></span><br><span class="line"><span class="comment">// json到字典</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)yy_modelDictionaryWithClass:(Class)cls json:(<span class="keyword">id</span>)json;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">YYModel</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line"><span class="comment">// 自定义模型属性与json's key的映射</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)modelCustomPropertyMapper;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)modelCustomPropertyMapper &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123; <span class="string">@"name"</span> : <span class="string">@"n"</span>,</span><br><span class="line">              <span class="string">@"count"</span> : <span class="string">@"ext.c"</span>,</span><br><span class="line">              <span class="string">@"desc1"</span> : <span class="string">@"ext.d"</span>,</span><br><span class="line">              <span class="string">@"desc4"</span> : <span class="string">@".ext"</span>,</span><br><span class="line">              <span class="string">@"modelID"</span> : @[<span class="string">@"ID"</span>, <span class="string">@"Id"</span>, <span class="string">@"id"</span>, <span class="string">@"ext.id"</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 黑名单, 若实现该方法, 黑名单之内的key均不作处理</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)modelPropertyBlacklist;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)modelPropertyBlacklist &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>, <span class="string">@"age"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 白名单, 若实现该方法, 白名单之外的key均不作处理</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)modelPropertyWhitelist;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)modelPropertyWhitelist &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.要在JSON转Model的过程中根据情况创建不同类型的实例</span></span><br><span class="line">+ (<span class="keyword">nullable</span> Class)modelCustomClassForDictionary:(<span class="built_in">NSDictionary</span> *)dictionary;</span><br><span class="line">+ (Class)modelCustomClassForDictionary:(<span class="built_in">NSDictionary</span>*)dictionary &#123;</span><br><span class="line">    <span class="keyword">if</span> (dictionary[<span class="string">@"localName"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [YYLocalUser <span class="keyword">class</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dictionary[<span class="string">@"remoteName"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [YYRemoteUser <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [YYBaseUser <span class="keyword">class</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.该方法发生在字典转模型之前, 最后对字典做一次处理</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)modelCustomWillTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line"><span class="comment">//- (NSDictionary *)modelCustomWillTransformFromDictionary:(NSDictionary *)dic&#123;</span></span><br><span class="line">    <span class="keyword">if</span> ([dic[<span class="string">@"sex"</span>] isEqualToString:<span class="string">@"Man"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.JSON转为Model后, 进行数据校验</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *timestamp = dic[<span class="string">@"timestamp"</span>];</span><br><span class="line">    <span class="keyword">if</span> (![timestamp isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    _createdAt = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:timestamp.floatValue];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型容器属性中的所需要存放的数据类型</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)modelContainerPropertyGenericClass;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)modelContainerPropertyGenericClass &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;<span class="string">@"shadows"</span> : [Shadow <span class="keyword">class</span>],</span><br><span class="line">             <span class="string">@"borders"</span> : Border.class,</span><br><span class="line">             <span class="string">@"attachments"</span> : <span class="string">@"Attachment"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model转为JSON后, 进行数据校验</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformToDictionary:(<span class="built_in">NSMutableDictionary</span> *)dic;</span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformToDictionary:(<span class="built_in">NSMutableDictionary</span> *)dic &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_createdAt) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    dic[<span class="string">@"timestamp"</span>] = @(_createdAt.timeIntervalSince1970);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 函数1: 根据class信息获取其对应的类型</span></span><br><span class="line"><span class="keyword">static</span> force_inline YYEncodingNSType YYClassGetNSType(Class cls) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> YYEncodingTypeNSUnknown;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableString;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSString;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDecimalNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDecimalNumber;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSNumber;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSValue</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSValue;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableData;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSData;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDate</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDate;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSURL</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSURL;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableArray</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableArray;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSArray;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableDictionary;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDictionary;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableSet</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableSet;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSSet</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSSet;</span><br><span class="line">    <span class="keyword">return</span> YYEncodingTypeNSUnknown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数2: 判断YYEncodingType是不是一个数字(整形\长整型\浮点型等)</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">BOOL</span> YYEncodingTypeIsCNumber(YYEncodingType type) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt8:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt8:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt16:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt16:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt32:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt32:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt64:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt64:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeFloat:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeDouble:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeLongDouble: <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数3: 根据一个id类型的对象创建一个NSNumber类型的对象</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSNumber</span> *YYNSNumberCreateFromID(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSCharacterSet</span> *dot;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDictionary</span> *dic;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        dot = [<span class="built_in">NSCharacterSet</span> characterSetWithRange:<span class="built_in">NSMakeRange</span>(<span class="string">'.'</span>, <span class="number">1</span>)];</span><br><span class="line">        dic = @&#123;<span class="string">@"TRUE"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"True"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"true"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"FALSE"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"False"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"false"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"YES"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"Yes"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"yes"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"NO"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"No"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"no"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"NIL"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"Nil"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"nil"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"NULL"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"Null"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"null"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(NULL)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(Null)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(null)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;NULL&gt;"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;Null&gt;"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;null&gt;"</span> : (<span class="keyword">id</span>)kCFNull&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// kCFNull单例</span></span><br><span class="line">    <span class="keyword">if</span> (!value || value == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// NSNumber直接返回</span></span><br><span class="line">    <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">// NSString, 取出dic中对应的值</span></span><br><span class="line">    <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSNumber</span> *num = dic[value];</span><br><span class="line">        <span class="keyword">if</span> (num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个字符串中含有 ".", 例如 @"12.344"</span></span><br><span class="line">        <span class="keyword">if</span> ([(<span class="built_in">NSString</span> *)value rangeOfCharacterFromSet:dot].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *cstring = ((<span class="built_in">NSString</span> *)value).UTF8String;</span><br><span class="line">            <span class="keyword">if</span> (!cstring) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">double</span> num = atof(cstring);</span><br><span class="line">            <span class="comment">// isfinite()测试某个浮点数是不是有限的数</span></span><br><span class="line">            <span class="comment">// isinf()测试某个浮点数是否是无限大</span></span><br><span class="line">            <span class="comment">// isnan()测试某个浮点数是否是 非数字</span></span><br><span class="line">            <span class="keyword">if</span> (isnan(num) || isinf(num)) <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">// num是否是无限大或者是否是非数字</span></span><br><span class="line">            <span class="keyword">return</span> @(num); <span class="comment">// return @(12.344);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 字符串中没有".", 例如 @"1323"</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *cstring = ((<span class="built_in">NSString</span> *)value).UTF8String;<span class="comment">// 转化为C字符串"1323"</span></span><br><span class="line">            <span class="keyword">if</span> (!cstring) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">// atoi函数：将字符串转化为int类型变量. atol函数：将字符串转化为long类型变量.</span></span><br><span class="line">            <span class="comment">// atoll函数：将字符串转化为long long类型变量.atof函数：将字符串转化为double类型变量</span></span><br><span class="line">            <span class="keyword">return</span> @(atoll(cstring)); <span class="comment">// 转换为long long类型变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数4: 将字符串转化为日期NSDate</span></span><br><span class="line"><span class="comment">// 根据string的length判断需要调用哪一个block, 为了避免效率较低的if-else, 采用block数组的形式, string的length正好对应blocks数组的索引, 即查表法, 效率得到提升.</span></span><br><span class="line"><span class="comment">// YYNSDateParseBlock parser = blocks[string.length];</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSDate</span> *YYNSDateFromString(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^YYNSDateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line">    <span class="meta">#define kParserNum 34</span></span><br><span class="line">    <span class="comment">// 定义一个block数组, 数组是C数组</span></span><br><span class="line">    <span class="keyword">static</span> YYNSDateParseBlock blocks[kParserNum + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20  // Google , 10个字符, 对应blocks[10]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"yyyy-MM-dd"</span>;</span><br><span class="line">            blocks[<span class="number">10</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20 12:24:48 // 19个字符, 对应blocks[19]</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48   // Google, 19个字符, 对应blocks[19]</span></span><br><span class="line"><span class="comment">             2014-01-20 12:24:48.000 // 23个字符, 对应blocks[23]</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000 // 23个字符, 对应blocks[23]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter1 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter1.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter1.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter1.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss"</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter3 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter3.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter3.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter3.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss.SSS"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter4 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter4.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter4.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter4.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss.SSS"</span>;</span><br><span class="line">            </span><br><span class="line">            blocks[<span class="number">19</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([string characterAtIndex:<span class="number">10</span>] == <span class="string">'T'</span>) &#123;<span class="comment">// 2014-01-20T12:24:48</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter1 dateFromString:string];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2014-01-20 12:24:48</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter2 dateFromString:string];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">23</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([string characterAtIndex:<span class="number">10</span>] == <span class="string">'T'</span>) &#123;<span class="comment">// 2014-01-20T12:24:48.000</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter3 dateFromString:string];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2014-01-20 12:24:48.000</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter4 dateFromString:string];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48Z        // Github, Apple</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48+0800    // Facebook</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48+12:00   // Google</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000Z</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000+0800</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000+12:00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ssZ"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss.SSSZ"</span>;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">20</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">24</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]?: [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">25</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">28</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">29</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             Fri Sep 04 00:12:21 +0800 2015 // Weibo, Twitter</span></span><br><span class="line"><span class="comment">             Fri Sep 04 00:12:21.000 +0800 2015</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"EEE MMM dd HH:mm:ss Z yyyy"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"EEE MMM dd HH:mm:ss.SSS Z yyyy"</span>;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">30</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">34</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!string) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (string.length &gt; kParserNum) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    YYNSDateParseBlock parser = blocks[string.length];</span><br><span class="line">    <span class="keyword">if</span> (!parser) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> parser(string);</span><br><span class="line">    <span class="meta">#undef kParserNum</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数5: 获取NSBlock类</span></span><br><span class="line"><span class="keyword">static</span> force_inline Class YYNSBlockClass() &#123;</span><br><span class="line">    <span class="keyword">static</span> Class cls;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;&#125;;</span><br><span class="line">        cls = ((<span class="built_in">NSObject</span> *)block).class;</span><br><span class="line">        <span class="keyword">while</span> (class_getSuperclass(cls) != [<span class="built_in">NSObject</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">            cls = class_getSuperclass(cls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> cls; <span class="comment">// current is "NSBlock"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数6: 获取ISO NSDateFormatter</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> example:</span></span><br><span class="line"><span class="comment"> 2010-07-09T16:13:30+12:00</span></span><br><span class="line"><span class="comment"> 2011-01-11T11:11:11+0000</span></span><br><span class="line"><span class="comment"> 2011-01-26T19:06:43Z</span></span><br><span class="line"><span class="comment"> length: 20/24/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSDateFormatter</span> *YYISODateFormatter() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *formatter = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">        formatter.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ssZ"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> formatter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    "version": "1.1",</span></span><br><span class="line"><span class="comment">    "object": &#123;</span></span><br><span class="line"><span class="comment">        "data": &#123;</span></span><br><span class="line"><span class="comment">            "phone": "12332123"</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数7: 根据keypath从字典中获取对应的值(这个值是id类型)</span></span><br><span class="line"><span class="comment">// keyPaths: @[@"object", @"data", @"phone"] 对应的值是 @"12332123"</span></span><br><span class="line"><span class="comment">// keyPaths: @[@"object", @"data"] 对应的值是 @&#123;@"phone": @"12332123"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">id</span> YYValueForKeyPath(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dic, __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSArray</span> *keyPaths) &#123;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = keyPaths.count; i &lt; max; i++) &#123;</span><br><span class="line">        value = dic[keyPaths[i]];</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; max) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                dic = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数8: 根据可变的keypath从字典中获取对应的值(这个值是id类型)</span></span><br><span class="line"><span class="comment">// multiKeys: @[ @[@"object", @"data"], @"phone"] 对应的值是 @&#123;@"phone": @"12332123"&#125;</span></span><br><span class="line"><span class="comment">// multiKeys: @[@"object", @"data"] 对应的值是 @&#123;@"data": @&#123;@"phone": @"12332123"&#125;&#125;</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">id</span> YYValueForMultiKeys(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dic, __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSArray</span> *multiKeys) &#123;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> multiKeys) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([key isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            value = dic[key];</span><br><span class="line">            <span class="keyword">if</span> (value) <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = YYValueForKeyPath(dic, (<span class="built_in">NSArray</span> *)key);</span><br><span class="line">            <span class="keyword">if</span> (value) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数9: 从模型中的属性(_YYModelPropertyMeta类型)中获取NSNumber</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSNumber</span> *ModelCreateNumberFromProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                                            __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (meta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool: &#123;</span><br><span class="line">            <span class="keyword">return</span> @(((<span class="keyword">bool</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, meta-&gt;_<span class="keyword">getter</span>));&#125;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数10: 对模型中的属性(_YYModelPropertyMeta类型)设值. 和函数9类似</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">void</span> ModelSetNumberToProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                                  __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSNumber</span> *num,</span><br><span class="line">                                                  __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (meta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool: &#123;</span><br><span class="line">            ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">bool</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, meta-&gt;_<span class="keyword">setter</span>, num.boolValue);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数11: 对模型中的属性(_YYModelPropertyMeta类型)设值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetValueForProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                     __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> value,</span><br><span class="line">                                     __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> *modelMeta;  <span class="comment">///&lt; _YYModelMeta</span></span><br><span class="line">    <span class="keyword">void</span> *model;      <span class="comment">///&lt; id (self)</span></span><br><span class="line">    <span class="keyword">void</span> *dictionary; <span class="comment">///&lt; NSDictionary (json)</span></span><br><span class="line">&#125; ModelSetContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数12: 对模型(_context.modelMeta and _context.model)设置 key-value键值对</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetWithDictionaryFunction(<span class="keyword">const</span> <span class="keyword">void</span> *_key, <span class="keyword">const</span> <span class="keyword">void</span> *_value, <span class="keyword">void</span> *_context) &#123;</span><br><span class="line">    ModelSetContext *context = _context;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelMeta *meta = (__bridge _YYModelMeta *)(context-&gt;modelMeta);</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *propertyMeta = [meta-&gt;_mapper objectForKey:(__bridge <span class="keyword">id</span>)(_key)];</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model = (__bridge <span class="keyword">id</span>)(context-&gt;model);</span><br><span class="line">    <span class="keyword">while</span> (propertyMeta) &#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_<span class="keyword">setter</span>) &#123;</span><br><span class="line">            ModelSetValueForProperty(model, (__bridge __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span>)_value, propertyMeta);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有多个属性映射到同一个 key 则指向下一个模型属性元</span></span><br><span class="line">        propertyMeta = propertyMeta-&gt;_next;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Apply function for model property meta, to set dictionary to model.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param _propertyMeta should not be nil, _YYModelPropertyMeta.</span></span><br><span class="line"><span class="comment"> @param _context      _context.model and _context.dictionary should not be nil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数13:</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetWithPropertyMetaArrayFunction(<span class="keyword">const</span> <span class="keyword">void</span> *_propertyMeta, <span class="keyword">void</span> *_context) &#123;</span><br><span class="line">    ModelSetContext *context = _context;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dictionary = (__bridge <span class="built_in">NSDictionary</span> *)(context-&gt;dictionary);</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *propertyMeta = (__bridge _YYModelPropertyMeta *)(_propertyMeta);</span><br><span class="line">    <span class="keyword">if</span> (!propertyMeta-&gt;_<span class="keyword">setter</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyArray) &#123;</span><br><span class="line">        value = YYValueForMultiKeys(dictionary, propertyMeta-&gt;_mappedToKeyArray);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyPath) &#123;</span><br><span class="line">        value = YYValueForKeyPath(dictionary, propertyMeta-&gt;_mappedToKeyPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = [dictionary objectForKey:propertyMeta-&gt;_mappedToKey];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model = (__bridge <span class="keyword">id</span>)(context-&gt;model);</span><br><span class="line">        ModelSetValueForProperty(model, value, propertyMeta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Returns a valid JSON object (NSArray/NSDictionary/NSString/NSNumber/NSNull),</span></span><br><span class="line"><span class="comment"> or nil if an error occurs.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param model Model, can be nil.</span></span><br><span class="line"><span class="comment"> @return JSON object, nil if an error occurs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数14: 模型转 json</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> ModelToJSONObjectRecursive(<span class="built_in">NSObject</span> *model) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!model || model == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:model]) <span class="keyword">return</span> model;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *newDic = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">        [((<span class="built_in">NSDictionary</span> *)model) enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> *key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *stringKey = [key isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] ? key : key.description;</span><br><span class="line">            <span class="keyword">if</span> (!stringKey) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">            <span class="keyword">if</span> (!jsonObj) jsonObj = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line">            newDic[stringKey] = jsonObj;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">return</span> newDic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSSet</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array = ((<span class="built_in">NSSet</span> *)model).allObjects;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:array]) <span class="keyword">return</span> array;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *newArray = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] || [obj isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [newArray addObject:obj];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">                <span class="keyword">if</span> (jsonObj &amp;&amp; jsonObj != (<span class="keyword">id</span>)kCFNull) [newArray addObject:jsonObj];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:model]) <span class="keyword">return</span> model;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *newArray = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> (<span class="built_in">NSArray</span> *)model) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] || [obj isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [newArray addObject:obj];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">                <span class="keyword">if</span> (jsonObj &amp;&amp; jsonObj != (<span class="keyword">id</span>)kCFNull) [newArray addObject:jsonObj];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSURL</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> ((<span class="built_in">NSURL</span> *)model).absoluteString;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSAttributedString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> ((<span class="built_in">NSAttributedString</span> *)model).string;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSDate</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> [YYISODateFormatter() stringFromDate:(<span class="keyword">id</span>)model];</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _YYModelMeta *modelMeta = [_YYModelMeta metaWithClass:[model <span class="keyword">class</span>]];</span><br><span class="line">    <span class="keyword">if</span> (!modelMeta || modelMeta-&gt;_keyMappedCount == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *result = [[<span class="built_in">NSMutableDictionary</span> alloc] initWithCapacity:<span class="number">64</span>];</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSMutableDictionary</span> *dic = result; <span class="comment">// avoid retain and release in block</span></span><br><span class="line">    [modelMeta-&gt;_mapper enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> *propertyMappedKey, _YYModelPropertyMeta *propertyMeta, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propertyMeta-&gt;_<span class="keyword">getter</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_isCNumber) &#123;</span><br><span class="line">            value = ModelCreateNumberFromProperty(model, propertyMeta);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyMeta-&gt;_nsType) &#123;</span><br><span class="line">            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">            value = ModelToJSONObjectRecursive(v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (propertyMeta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeObject: &#123;</span><br><span class="line">                    <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = ModelToJSONObjectRecursive(v);</span><br><span class="line">                    <span class="keyword">if</span> (value == (<span class="keyword">id</span>)kCFNull) value = <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeClass: &#123;</span><br><span class="line">                    Class v = ((Class (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = v ? <span class="built_in">NSStringFromClass</span>(v) : <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeSEL: &#123;</span><br><span class="line">                    SEL v = ((SEL (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = v ? <span class="built_in">NSStringFromSelector</span>(v) : <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!value) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyPath) &#123;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span> *superDic = dic;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span> *subDic = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = propertyMeta-&gt;_mappedToKeyPath.count; i &lt; max; i++) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *key = propertyMeta-&gt;_mappedToKeyPath[i];</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> == max) &#123; <span class="comment">// end</span></span><br><span class="line">                    <span class="keyword">if</span> (!superDic[key]) superDic[key] = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                subDic = superDic[key];</span><br><span class="line">                <span class="keyword">if</span> (subDic) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([subDic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                        subDic = subDic.mutableCopy;</span><br><span class="line">                        superDic[key] = subDic;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subDic = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">                    superDic[key] = subDic;</span><br><span class="line">                &#125;</span><br><span class="line">                superDic = subDic;</span><br><span class="line">                subDic = <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dic[propertyMeta-&gt;_mappedToKey]) &#123;</span><br><span class="line">                dic[propertyMeta-&gt;_mappedToKey] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (modelMeta-&gt;_hasCustomTransformToDictionary) &#123;</span><br><span class="line">        <span class="comment">// 当 Model 转为 JSON 完成后，该方法会被调用。</span></span><br><span class="line">        <span class="comment">// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。</span></span><br><span class="line">        <span class="comment">// 你也可以在这里做一些自动转换不能完成的工作。</span></span><br><span class="line">        <span class="built_in">BOOL</span> suc = [((<span class="keyword">id</span>&lt;YYModel&gt;)model) modelCustomTransformToDictionary:dic];</span><br><span class="line">        <span class="keyword">if</span> (!suc) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 函数15: Add indent to string (exclude first line)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableString</span> *ModelDescriptionAddIndent(<span class="built_in">NSMutableString</span> *desc, <span class="built_in">NSUInteger</span> indent) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = desc.length; i &lt; max; i++) &#123;</span><br><span class="line">        <span class="keyword">unichar</span> c = [desc characterAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'\n'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> j = <span class="number">0</span>; j &lt; indent; j++) &#123;</span><br><span class="line">                [desc insertString:<span class="string">@"    "</span> atIndex:i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            i += indent * <span class="number">4</span>;</span><br><span class="line">            max += indent * <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 函数16: 根据model生成一个描述字符串</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *ModelDescription(<span class="built_in">NSObject</span> *model) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kDescMaxLength = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (!model) <span class="keyword">return</span> <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span> (model == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="string">@"&lt;null&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span> (![model isKindOfClass:[<span class="built_in">NSObject</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,model];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _YYModelMeta *modelMeta = [_YYModelMeta metaWithClass:model.class];</span><br><span class="line">    <span class="keyword">switch</span> (modelMeta-&gt;_nsType) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSString: <span class="keyword">case</span> YYEncodingTypeNSMutableString: &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\"%@\""</span>,model];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSValue:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSData: <span class="keyword">case</span> YYEncodingTypeNSMutableData: &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *tmp = model.description;</span><br><span class="line">            <span class="keyword">if</span> (tmp.length &gt; kDescMaxLength) &#123;</span><br><span class="line">                tmp = [tmp substringToIndex:kDescMaxLength];</span><br><span class="line">                tmp = [tmp stringByAppendingString:<span class="string">@"..."</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSNumber:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDecimalNumber:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDate:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSURL: &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,model];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSSet: <span class="keyword">case</span> YYEncodingTypeNSMutableSet: &#123;</span><br><span class="line">            model = ((<span class="built_in">NSSet</span> *)model).allObjects;</span><br><span class="line">        &#125; <span class="comment">// no break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSArray: <span class="keyword">case</span> YYEncodingTypeNSMutableArray: &#123;</span><br><span class="line">            <span class="built_in">NSArray</span> *array = (<span class="keyword">id</span>)model;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            <span class="keyword">if</span> (array.count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [desc stringByAppendingString:<span class="string">@"[]"</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [desc appendFormat:<span class="string">@"[\n"</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = array.count; i &lt; max; i++) &#123;</span><br><span class="line">                    <span class="built_in">NSObject</span> *obj = array[i];</span><br><span class="line">                    [desc appendString:<span class="string">@"    "</span>];</span><br><span class="line">                    [desc appendString:ModelDescriptionAddIndent(ModelDescription(obj).mutableCopy, <span class="number">1</span>)];</span><br><span class="line">                    [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [desc appendString:<span class="string">@"]"</span>];</span><br><span class="line">                <span class="keyword">return</span> desc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDictionary: <span class="keyword">case</span> YYEncodingTypeNSMutableDictionary: &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *dic = (<span class="keyword">id</span>)model;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            <span class="keyword">if</span> (dic.count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [desc stringByAppendingString:<span class="string">@"&#123;&#125;"</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSArray</span> *keys = dic.allKeys;</span><br><span class="line">                </span><br><span class="line">                [desc appendFormat:<span class="string">@"&#123;\n"</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = keys.count; i &lt; max; i++) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *key = keys[i];</span><br><span class="line">                    <span class="built_in">NSObject</span> *value = dic[key];</span><br><span class="line">                    [desc appendString:<span class="string">@"    "</span>];</span><br><span class="line">                    [desc appendFormat:<span class="string">@"%@ = %@"</span>,key, ModelDescriptionAddIndent(ModelDescription(value).mutableCopy, <span class="number">1</span>)];</span><br><span class="line">                    [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [desc appendString:<span class="string">@"&#125;"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            [desc appendFormat:<span class="string">@"&lt;%@: %p&gt;"</span>, model.class, model];</span><br><span class="line">            <span class="keyword">if</span> (modelMeta-&gt;_allPropertyMetas.count == <span class="number">0</span>) <span class="keyword">return</span> desc;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// sort property names</span></span><br><span class="line">            <span class="built_in">NSArray</span> *properties = [modelMeta-&gt;_allPropertyMetas</span><br><span class="line">                                   sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(_YYModelPropertyMeta *p1, _YYModelPropertyMeta *p2) &#123;</span><br><span class="line">                                       <span class="keyword">return</span> [p1-&gt;_name compare:p2-&gt;_name];</span><br><span class="line">                                   &#125;];</span><br><span class="line">            </span><br><span class="line">            [desc appendFormat:<span class="string">@" &#123;\n"</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = properties.count; i &lt; max; i++) &#123;</span><br><span class="line">                _YYModelPropertyMeta *property = properties[i];</span><br><span class="line">                <span class="built_in">NSString</span> *propertyDesc;</span><br><span class="line">                <span class="keyword">if</span> (property-&gt;_isCNumber) &#123;</span><br><span class="line">                    <span class="built_in">NSNumber</span> *num = ModelCreateNumberFromProperty(model, property);</span><br><span class="line">                    propertyDesc = num.stringValue;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (property-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeObject: &#123;</span><br><span class="line">                            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = ModelDescription(v);</span><br><span class="line">                            <span class="keyword">if</span> (!propertyDesc) propertyDesc = <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeClass: &#123;</span><br><span class="line">                            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = ((<span class="built_in">NSObject</span> *)v).description;</span><br><span class="line">                            <span class="keyword">if</span> (!propertyDesc) propertyDesc = <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeSEL: &#123;</span><br><span class="line">                            SEL sel = ((SEL (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            <span class="keyword">if</span> (sel) propertyDesc = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">                            <span class="keyword">else</span> propertyDesc = <span class="string">@"&lt;NULL&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeBlock: &#123;</span><br><span class="line">                            <span class="keyword">id</span> block = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = block ? ((<span class="built_in">NSObject</span> *)block).description : <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeCArray: <span class="keyword">case</span> YYEncodingTypeCString: <span class="keyword">case</span> YYEncodingTypePointer: &#123;</span><br><span class="line">                            <span class="keyword">void</span> *pointer = ((<span class="keyword">void</span>* (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p"</span>,pointer];</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeStruct: <span class="keyword">case</span> YYEncodingTypeUnion: &#123;</span><br><span class="line">                            <span class="built_in">NSValue</span> *value = [model valueForKey:property-&gt;_name];</span><br><span class="line">                            propertyDesc = value ? value.description : <span class="string">@"&#123;unknown&#125;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>: propertyDesc = <span class="string">@"&lt;unknown&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                propertyDesc = ModelDescriptionAddIndent(propertyDesc.mutableCopy, <span class="number">1</span>);</span><br><span class="line">                [desc appendFormat:<span class="string">@"    %@ = %@"</span>,property-&gt;_name, propertyDesc];</span><br><span class="line">                [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            [desc appendFormat:<span class="string">@"&#125;"</span>];</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p> 1.强制内联</p> <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">#define force_inline __inline__ __attribute__((<span class="name">always_inline</span>))</span><br></pre></td></tr></table></figure><p>2.使用代码块, 节省许多变量名</p> <figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用block数组</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^YYNSDateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line"><span class="comment">// 定义一个block数组</span></span><br><span class="line"><span class="keyword">static</span> YYNSDateParseBlock blocks[<span class="number">35</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>4.获取NSBlock类</p><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;&#125;;</span><br><span class="line">cls = ((NSObject *)block).<span class="keyword">class</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">class</span><span class="number">_</span>getSuperclass(cls) != [NSObject <span class="keyword">class</span>]) &#123;</span><br><span class="line">    cls = <span class="keyword">class</span><span class="number">_</span>getSuperclass(cls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 5.函数参数使用<code>__unsafe_unretained</code><br> 在 ARC 条件下，默认声明的对象是 <code>__strong</code> 类型的，赋值时有可能会产生<code>retain/release</code>调用，如果一个变量在其生命周期内不会被释放，则使用<code>__unsafe_unretained `</code>会节省很大的开销。</p><p> 访问具有 <code>__weak</code>属性的变量时，实际上会调用 <code>objc_loadWeak()</code> 和 <code>objc_storeWeak()</code> 来完成，这也会带来很大的开销，所以要避免使用 <code>__weak</code>属性。</p><p> 创建和使用对象时，要尽量避免对象进入<code>autoreleasepool</code>，以避免额外的资源开销。</p><p> 6.for循环中定义变量, 使用unsigned</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>, <span class="built_in">max</span> = keyPaths.count; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 7.可变量创建静态不变量, 静态常量配合dispatch_once使用</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSSet</span> *types = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"><span class="built_in">NSMutableSet</span> *set = [<span class="built_in">NSMutableSet</span> new];</span><br><span class="line">    types = set;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> 8.线程安全的缓存字典</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> cacheWithKey(<span class="built_in">NSString</span> *key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">CFMutableDictionaryRef</span> cache;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="keyword">static</span> dispatch_semaphore_t lock;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        cache = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">        lock = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</span><br><span class="line">    <span class="keyword">id</span> obj = <span class="built_in">CFDictionaryGetValue</span>(cache, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    dispatch_semaphore_signal(lock);</span><br><span class="line">    <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">        obj = [<span class="built_in">NSObject</span> new]; <span class="comment">// Other operation.</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</span><br><span class="line">            <span class="built_in">CFDictionarySetValue</span>(cache, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key), (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(obj));</span><br><span class="line">            dispatch_semaphore_signal(lock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.消息发送调用格式</p><figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">int32_t</span> (<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))(<span class="name">void</span> *) objc_msgSend)((<span class="name"><span class="builtin-name">id</span></span>)model, meta-&gt;_getter)</span><br></pre></td></tr></table></figure><p>10.<code>NSNull</code>的单例<code>kCFNull</code>, 推荐使用, 而不是创建<code>[NSNull null]</code></p> <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSNull</span> *null1 = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line"><span class="built_in">NSNull</span> *null2 = [<span class="built_in">NSNull</span> null];</span><br><span class="line"></span><br><span class="line">Class <span class="keyword">class</span> = Nil;</span><br><span class="line"><span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>11.<code>YYClassIvarInfo</code>中的 <code>name</code> 和 <code>typeEncoding</code> 属性都用 <code>strong</code> 修饰。<br>NSString 这类属性在确定其不会在初始化之后被修改的情况下，使用 strong 做一次单纯的强引用在性能上讲比 copy 要高一些。</p><p>12.<code>NSString</code>转C字符串</p><p> <code>const char *cstring = ((NSString *)value).UTF8String;</code></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p> YYModel 最核心的便是通过遍历模型的所有属性，根据字典值来调用属性的 setter 方法。没有使用效率低下的 KVC（效率低下的原因可能是需要对方法进行搜索吧，有空深究）。鉴于此，用了300行代码简单写了一个字典转模型的玩具，权当做是读完 YYModel 的实践吧。试了一下，效果还可以😂。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">@protocol</span> <span class="title">YAModelProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span>;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> &lt;<span class="built_in">NSString</span> *, <span class="built_in">NSString</span> *&gt; *)customPropertyKey;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> &lt;<span class="built_in">NSString</span> *, Class&gt;*)classInArray;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">YAModel</span>)</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dict;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithJSON:(<span class="built_in">NSData</span> *)data;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_modelArrayWithKeyValuesArray:(<span class="built_in">NSArray</span> &lt;<span class="built_in">NSDictionary</span> *&gt;*)dictArray;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, YAType) &#123;</span><br><span class="line">    YATypeMask              = <span class="number">0xFF</span>,</span><br><span class="line">    YATypeUnknown           = <span class="number">0</span>,</span><br><span class="line">    YATypeBOOL              = <span class="number">1</span>,</span><br><span class="line">    YATypeNSInteger         = <span class="number">2</span>,</span><br><span class="line">    YATypeNSUInteger        = <span class="number">3</span>,</span><br><span class="line">    YATypeCGFloat           = <span class="number">4</span>,</span><br><span class="line">    YATypeObject            = <span class="number">5</span>,</span><br><span class="line">    YATypeDate              = <span class="number">6</span>,</span><br><span class="line">    YATypeClass             = <span class="number">7</span>,</span><br><span class="line">    YATypeSEL               = <span class="number">8</span>,</span><br><span class="line">    YATypeArray             = <span class="number">9</span>,</span><br><span class="line">    YATypeMutableArray      = <span class="number">10</span>,</span><br><span class="line">    YATypeDictionary        = <span class="number">11</span>,</span><br><span class="line">    YATypeMutableDictionary = <span class="number">12</span>,</span><br><span class="line">    YATypeSet               = <span class="number">13</span>,</span><br><span class="line">    YATypeMutableSet        = <span class="number">14</span>,</span><br><span class="line">    YATypeString            = <span class="number">15</span>,</span><br><span class="line">    YATypeMutableString     = <span class="number">16</span>,</span><br><span class="line">    YATypeData              = <span class="number">17</span>,</span><br><span class="line">    YATypeNumber            = <span class="number">18</span>,</span><br><span class="line">    YATypeDecimalNumber     = <span class="number">19</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">YAModel</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDictionary</span> *classArrayDict = <span class="literal">nil</span>;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dict || ![dict isKindOfClass:<span class="built_in">NSDictionary</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *propertyList = PropertyList(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">self</span> new];</span><br><span class="line">    ObjSetWithKeyValueList(obj, propertyList, dict);</span><br><span class="line">    classArrayDict = <span class="literal">nil</span>; <span class="comment">// Clean memory.</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithJSON:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || ![data isKindOfClass:<span class="built_in">NSData</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> json = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:kNilOptions error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">if</span> ([json isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> ya_modelWithDictionary:json];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_modelArrayWithKeyValuesArray:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSDictionary</span> *&gt; *)dictArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dictArray || ![dictArray isKindOfClass:<span class="built_in">NSArray</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *tmp = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:dictArray.count];</span><br><span class="line">    [dictArray enumerateObjectsUsingBlock:^(<span class="built_in">NSDictionary</span> * _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">            <span class="keyword">id</span> model = [[<span class="keyword">self</span> <span class="keyword">class</span>] ya_modelWithDictionary:obj];</span><br><span class="line">            [tmp addObject:model];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:tmp] ?: <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性列表 key:属性名 value: 属性类型</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDictionary</span> *PropertyList(Class cls) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList(cls, &amp;count);</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *tempDict = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithUTF8String:property_getName(property)];</span><br><span class="line">        <span class="built_in">NSString</span> *propertyAttr = [<span class="built_in">NSString</span> stringWithUTF8String:property_getAttributes(property)];</span><br><span class="line">        <span class="built_in">NSString</span> *type = [propertyAttr substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">if</span> ([type isEqualToString:<span class="string">@"@"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSArray</span> *components = [propertyAttr componentsSeparatedByString:<span class="string">@"\""</span>];</span><br><span class="line">            <span class="keyword">if</span> (components.count &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                Class propCls = <span class="built_in">NSClassFromString</span>(components[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (propCls == <span class="built_in">NSDate</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"1"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSArray</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"2"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableArray</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"3"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSDictionary</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"4"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableDictionary</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"5"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSSet</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"6"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableSet</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"7"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSString</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"8"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableString</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"9"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSData</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"10"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSNumber</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"11"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSDecimalNumber</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"12"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSObject</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"@"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    type = components[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSNumber</span> *myType = TypeForProperty(type);</span><br><span class="line">        [tempDict setObject:myType forKey:propertyName];</span><br><span class="line">        <span class="keyword">if</span> (myType.integerValue == <span class="number">0</span>) &#123;</span><br><span class="line">            [tempDict setObject:type forKey:propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:tempDict];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *TypeForProperty(<span class="built_in">NSString</span> *type) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDictionary</span> *_SELDictionary = <span class="literal">nil</span>;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _SELDictionary = @&#123;</span><br><span class="line">                           <span class="string">@"B"</span>: @(YATypeBOOL),</span><br><span class="line">                           <span class="string">@"q"</span>: @(YATypeNSInteger),</span><br><span class="line">                           <span class="string">@"Q"</span>: @(YATypeNSUInteger),</span><br><span class="line">                           <span class="string">@"d"</span>: @(YATypeCGFloat),</span><br><span class="line">                           <span class="string">@"#"</span>: @(YATypeClass),</span><br><span class="line">                           <span class="string">@":"</span>: @(YATypeSEL),</span><br><span class="line">                           <span class="string">@"@"</span>: @(YATypeObject),</span><br><span class="line">                           <span class="string">@"1"</span>: @(YATypeDate),</span><br><span class="line">                           <span class="string">@"2"</span>: @(YATypeArray),</span><br><span class="line">                           <span class="string">@"3"</span>: @(YATypeMutableArray),</span><br><span class="line">                           <span class="string">@"4"</span>: @(YATypeDictionary),</span><br><span class="line">                           <span class="string">@"5"</span>: @(YATypeMutableDictionary),</span><br><span class="line">                           <span class="string">@"6"</span>: @(YATypeSet),</span><br><span class="line">                           <span class="string">@"7"</span>: @(YATypeMutableSet),</span><br><span class="line">                           <span class="string">@"8"</span>: @(YATypeString),</span><br><span class="line">                           <span class="string">@"9"</span>: @(YATypeMutableString),</span><br><span class="line">                           <span class="string">@"10"</span>: @(YATypeData),</span><br><span class="line">                           <span class="string">@"11"</span>: @(YATypeNumber),</span><br><span class="line">                           <span class="string">@"12"</span>: @(YATypeDecimalNumber),</span><br><span class="line">                           &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _SELDictionary[type] ?: @(YATypeUnknown);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ObjSetWithArray(Class cls, <span class="built_in">NSDictionary</span> *propertyDict, <span class="built_in">NSArray</span> **keyValueArray) &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *tmpArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    [*keyValueArray enumerateObjectsUsingBlock:^(<span class="keyword">id</span> keyValue, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([keyValue isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">            <span class="keyword">id</span> obj = [cls new];</span><br><span class="line">            ObjSetWithKeyValueList(obj, PropertyList([obj <span class="keyword">class</span>]), keyValue);</span><br><span class="line">            [tmpArray addObject:obj];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    *keyValueArray = [<span class="built_in">NSArray</span> arrayWithArray:tmpArray];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ObjSetWithKeyValueList(<span class="keyword">id</span> obj, <span class="built_in">NSDictionary</span> *propertyDict, <span class="built_in">NSDictionary</span> *dict) &#123;</span><br><span class="line">    Class cls = [obj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *customPropertyKeyDict = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> ([cls respondsToSelector:<span class="keyword">@selector</span>(customPropertyKey)]) &#123;</span><br><span class="line">        customPropertyKeyDict = [cls customPropertyKey];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([cls respondsToSelector:<span class="keyword">@selector</span>(classInArray)] &amp;&amp; !classArrayDict) &#123;</span><br><span class="line">        classArrayDict = [cls classInArray];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [propertyDict.allKeys enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *name, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        SEL <span class="keyword">setter</span> = SetterSelectorFromString(name);</span><br><span class="line">        <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (customPropertyKeyDict[name]) &#123;</span><br><span class="line">            value = customPropertyKeyDict[name];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = dict[name];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">id</span> propType = propertyDict[name];</span><br><span class="line">        YAType type = [propType integerValue];</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type &amp; YATypeMask) &#123;</span><br><span class="line">                <span class="keyword">case</span> YATypeBOOL: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">bool</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, [value boolValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeNSInteger: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, int64_t))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (int64_t)[value longLongValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeNSUInteger: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, uint64_t))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (uint64_t)[value unsignedLongLongValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeCGFloat: &#123;</span><br><span class="line">                    <span class="keyword">long</span> <span class="keyword">double</span> d = [value doubleValue];</span><br><span class="line">                    <span class="keyword">if</span> (isnan(d) || isinf(d)) d = <span class="number">0</span>;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">long</span> <span class="keyword">double</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (<span class="keyword">long</span> <span class="keyword">double</span>)d);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeDecimalNumber: &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([value isKindOfClass:<span class="built_in">NSNumber</span>.class]) &#123;</span><br><span class="line">                        <span class="built_in">NSDecimalNumber</span> *decNum = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithDecimal:[value decimalValue]];</span><br><span class="line">                        ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="built_in">NSDecimalNumber</span> *))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, decNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeClass: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, Class))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, <span class="built_in">NSClassFromString</span>(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeSEL:&#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, <span class="built_in">NSSelectorFromString</span>(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeDate:&#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, DateFromString(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeArray: &#123;</span><br><span class="line">                    Class cls = classArrayDict[name];</span><br><span class="line">                    <span class="keyword">if</span> (cls) &#123;</span><br><span class="line">                        ObjSetWithArray(cls, PropertyList(cls), &amp;value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableArray: &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *clsStr = classArrayDict[name];</span><br><span class="line">                    <span class="keyword">if</span> (clsStr) &#123;</span><br><span class="line">                        Class cls = <span class="built_in">NSClassFromString</span>(clsStr);</span><br><span class="line">                        ObjSetWithArray(cls, PropertyList(cls), &amp;value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    value = [<span class="built_in">NSMutableArray</span> arrayWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeSet: &#123;</span><br><span class="line">                    value = [<span class="built_in">NSSet</span> setWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableSet: &#123;</span><br><span class="line">                    value = [<span class="built_in">NSMutableSet</span> setWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableString:</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableDictionary: &#123;</span><br><span class="line">                    value = [value mutableCopy];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeString:</span><br><span class="line">                <span class="keyword">case</span> YATypeDictionary:</span><br><span class="line">                <span class="keyword">case</span> YATypeNumber:</span><br><span class="line">                <span class="keyword">case</span> YATypeUnknown:</span><br><span class="line">                <span class="keyword">case</span> YATypeObject: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (type == YATypeUnknown &amp;&amp; [propType isKindOfClass:<span class="built_in">NSString</span>.class]) &#123; <span class="comment">// 嵌套模型</span></span><br><span class="line">                        Class cls = <span class="built_in">NSClassFromString</span>(propType);</span><br><span class="line">                        <span class="keyword">if</span> (cls &amp;&amp; [value isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">                            <span class="keyword">id</span> obj = [cls new];</span><br><span class="line">                            ObjSetWithKeyValueList(obj, PropertyList(cls), value);</span><br><span class="line">                            value = obj;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name  ==&gt; setName:</span></span><br><span class="line"><span class="keyword">static</span> SEL SetterSelectorFromString(<span class="built_in">NSString</span> *str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || str.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *result = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@%@:"</span>, [str substringToIndex:<span class="number">1</span>].uppercaseString, [str substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSSelectorFromString</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// date string ==&gt; data // @"2016-7-16 09:33:22"</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDate</span> *DateFromString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^DateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line">    <span class="keyword">static</span> DateParseBlock blocks[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">// @"2016-07-16 09:33:22" // 19个字符, 对应blocks[19]</span></span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">        formatter.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">        formatter.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">        blocks[<span class="number">19</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">            <span class="keyword">return</span> [formatter dateFromString:string];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!string || string.length &gt; <span class="number">19</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    DateParseBlock parser = blocks[string.length];</span><br><span class="line">    <span class="keyword">if</span> (!parser) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> parser(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>具体源码放在了我的代码工具库里，YAKit：<a href="https://github.com/ChenYalun/YAKit/tree/master/Util/Model" target="_blank" rel="noopener">https://github.com/ChenYalun/YAKit/tree/master/Util/Model</a></p><blockquote><p>参考资料<br> <a href="https://juejin.im/post/5a097435f265da431769a49c" target="_blank" rel="noopener">https://juejin.im/post/5a097435f265da431769a49c</a><br> <a href="https://juejin.im/post/5a1296e36fb9a044fb075d5e" target="_blank" rel="noopener">https://juejin.im/post/5a1296e36fb9a044fb075d5e</a><br> <a href="https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/" target="_blank" rel="noopener">https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/</a><br> <a href="https://blog.csdn.net/game3108/article/details/52416868" target="_blank" rel="noopener">https://blog.csdn.net/game3108/article/details/52416868</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 关于YYModel的简单总结。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>PerformSelector原理</title>
    <link href="http://blog.chenyalun.com/2018/09/30/PerformSelector%E5%8E%9F%E7%90%86/"/>
    <id>http://blog.chenyalun.com/2018/09/30/PerformSelector原理/</id>
    <published>2018-09-30T09:22:13.000Z</published>
    <updated>2019-09-07T01:50:10.143Z</updated>
    
    <content type="html"><![CDATA[<p align="center"> PerformSelector相关知识。 </p><a id="more"></a><p>performSelector系列是个很神奇的存在，能传参，能延迟，还能子线程调，能让任意对象执行任意方法，读了gnustep中有关performSelector的源码后，这里做个总结。</p><blockquote><p>源码地址：<a href="https://github.com/gnustep/libs-base/releases/tag/base-1_25_1" target="_blank" rel="noopener">https://github.com/gnustep/libs-base/releases/tag/base-1_25_1</a></p></blockquote><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>最基本的performSelector有三个接口方法，可以不传参，传一个参数以及传两个参数。</p><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector;</span><br><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>object;</span><br><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>object1 withObject:<span class="params">(id)</span>object2;</span><br></pre></td></tr></table></figure><p>使用示例:</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参 </span></span><br><span class="line">id obj1 = [self <span class="string">performSelector:</span><span class="meta">@selector</span>(printString)];</span><br><span class="line"><span class="comment">// 一个参数</span></span><br><span class="line">id obj2 = [self <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">printString:</span>) <span class="string">withObject:</span>@<span class="string">"string"</span>];</span><br><span class="line"><span class="comment">// 两个参数</span></span><br><span class="line">id obj3 = [self <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">printString:</span><span class="string">str2:</span>) <span class="string">withObject:</span>@<span class="string">"string"</span> <span class="string">withObject:</span>@&#123;@<span class="string">"key"</span>: @(<span class="number">3</span>)&#125;];</span><br></pre></td></tr></table></figure><p>以传递两个参数为例，它的实现是这样的：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)performSelector:(SEL)aSelector</span><br><span class="line">           withObject:(<span class="keyword">id</span>)object1</span><br><span class="line">           withObject:(<span class="keyword">id</span>)object2 &#123;</span><br><span class="line">    IMP msg;</span><br><span class="line">    <span class="keyword">if</span> (aSelector == <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="built_in">NSException</span> raise: <span class="built_in">NSInvalidArgumentException</span></span><br><span class="line">                    format: <span class="string">@"%@ null selector given"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd)];</span><br><span class="line">    &#125;</span><br><span class="line">    msg = objc_msg_lookup(<span class="keyword">self</span>, aSelector);</span><br><span class="line">    <span class="keyword">if</span> (!msg) &#123;</span><br><span class="line">        [<span class="built_in">NSException</span> raise: <span class="built_in">NSGenericException</span></span><br><span class="line">                    format: <span class="string">@"invalid selector '%s' passed to %s"</span>,</span><br><span class="line">         sel_getName(aSelector), sel_getName(_cmd)];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (*msg)(<span class="keyword">self</span>, aSelector, object1, object2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见就是根据方法名，<strong>使用Runtime中的<code>objc_msg_lookup()</code>获取到函数指针IMP，进而进行函数调用。</strong>当然，还有对方法名和函数指针的容错处理。</p><h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>performSelector系列颇具有动态性，当使用这三个方法时，编译器很容易就给出警告：PerformSelector may cause a leak because its selector is unknown。为什么会提示有内存泄漏问题呢？</p><p>首先要明确：<strong>调用<code>performSelector:</code>编译器会假设调用方法的返回值是一个对象，且不会对返回值进行retain/release</strong>。</p><p>如果调用的方法是<code>alloc, new, copy, mutableCopy</code>方法家族中的方法(包含以它们开头)，方法调用的结果是开辟了一块内存空间，但是系统仍然按照非retain/release处理，没有对它们的引用计数纳入管理，这时内存空间无法释放，就会产生内存泄露。</p><p>当<strong>显式调用</strong>这些方法时，编译器都能明显分析出来，并给出提示：Error：PerformSelector names a selector which retains the object。告诉我们这不符合引用计数管理的规则，编译不通过。</p><p>There are really only 4 things that ARC would consider for the return value:4</p><ul><li>Ignore non-object types (void, int, etc)</li><li>Retain object value, then release when it is no longer used (standard assumption)</li><li>Release new object values when no longer used (methods in the init/ copy family or attributed with ns_returns_retained)</li><li>Do nothing &amp; assume returned object value will be valid in local scope (until inner most release pool is drained, attributed with ns_returns_autoreleased)</li></ul><p>The call to methodForSelector: assumes that the return value of the method it’s calling is an object, but does not retain/release it. So you could end up creating a leak if your object is supposed to be released as in #3 above (that is, the method you’re calling returns a new object).</p><p>比如这样：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">new</span><span class="type">Object</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [NSObject <span class="keyword">new</span><span class="type"></span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用method family中的方法：</span></span><br><span class="line">[str <span class="string">performSelector:</span><span class="meta">@selector</span>(copy)];</span><br><span class="line"><span class="comment">// 调用以method family中的方法名开头的方法：</span></span><br><span class="line">[self <span class="string">performSelector:</span><span class="meta">@selector</span>(newObject)];</span><br></pre></td></tr></table></figure><p>但是<strong>隐式调用</strong>的时候，编译器无能为力了，只能给出警告：PerformSelector may cause a leak because its selector is unknown。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式调用无法分析出错误: 出现内存泄露</span></span><br><span class="line"><span class="keyword">id</span> obj1 = [str performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"copy"</span>)];</span><br><span class="line">[str performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"mutableCopy"</span>)];</span><br><span class="line"><span class="keyword">id</span> obj2 = [[<span class="built_in">NSObject</span> <span class="keyword">class</span>] performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"new"</span>)];</span><br><span class="line"><span class="keyword">id</span> obj3 = [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)];</span><br></pre></td></tr></table></figure><h3 id="消除waring"><a href="#消除waring" class="headerlink" title="消除waring"></a>消除waring</h3><p>最简单的，可以利用<code>#pragma</code>消除警告。</p><figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic push"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic ignored \"</span>-<span class="variable">Warc</span>-<span class="variable">performSelector</span>-<span class="variable">leaks</span>\<span class="string">""</span>)</span></span></span><br><span class="line">[person performSelector:selector]; // 插入需要消除警告的代码</span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic pop"</span>)</span></span></span><br></pre></td></tr></table></figure><p>或者换种思路，根据<code>performSelector</code>的实现，效果上可以直接使用<code>IMP</code>，也可以使用<code>objc_msgSend()</code>，甚至使用<code>NSInvocation</code>、<code>sendAction</code>等，这样就达到同等实现而没有警告了。</p><p>方式1：methodForSelector<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!person) return;</span><br><span class="line"><span class="comment">// 获取函数指针</span></span><br><span class="line">IMP imp = [person methodForSelector:<span class="keyword">selector</span>];</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line">void <span class="comment">(*func)(id, SEL) = (void *)</span>imp;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">func(person, <span class="keyword">selector</span>);</span><br></pre></td></tr></table></figure></p><p>方式2：methodForSelector简化版<br><figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">void</span> (<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))[person methodForSelector:selector])(<span class="name">self</span>, selector)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>方式3：使用objc_msgSend<br><figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">void</span> *(<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))objc_msgSend)((<span class="name"><span class="builtin-name">id</span></span>)self, NSSelectorFromString(@<span class="string">"show"</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>方式4：NSInvocation<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"show"</span>);</span><br><span class="line"><span class="built_in">NSMethodSignature</span> *methodSig = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodSignatureForSelector:selector];</span><br><span class="line"><span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">[invocation setSelector:selector];</span><br><span class="line">[invocation setTarget:<span class="keyword">self</span>];</span><br><span class="line">[invocation invoke];</span><br></pre></td></tr></table></figure></p><p>方式5: sendAction<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span>.sharedApplication sendAction:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"show"</span>) to:<span class="keyword">self</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p><h3 id="解决内存泄漏"><a href="#解决内存泄漏" class="headerlink" title="解决内存泄漏"></a>解决内存泄漏</h3><p>当我们一定要调用<code>newObject</code>这类特殊的方法时（可能性极小），怎么解决内存泄漏问题呢？把return的对象的引用计数减少即可，比如：</p><p>当使用<code>objc_msgSend()</code>时<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> obj = <span class="built_in">CFBridgingRelease</span>(((<span class="keyword">void</span> *(*)(<span class="keyword">id</span>, SEL))objc_msgSend)(<span class="keyword">self</span>, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)));</span><br></pre></td></tr></table></figure></p><p>当使用<code>methodForSelector</code>时<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> obj = <span class="built_in">CFBridgingRelease</span>(((<span class="keyword">void</span> *(*)(<span class="keyword">id</span>, SEL))[<span class="keyword">self</span> methodForSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)])(<span class="keyword">self</span>, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)));</span><br></pre></td></tr></table></figure></p><h2 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument afterDelay:(<span class="built_in">NSTimeInterval</span>)delay inModes:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSRunLoopMode</span>&gt; *)modes;</span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument afterDelay:(<span class="built_in">NSTimeInterval</span>)delay;</span><br><span class="line">+ (<span class="keyword">void</span>)cancelPreviousPerformRequestsWithTarget:(<span class="keyword">id</span>)aTarget selector:(SEL)aSelector object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument;</span><br><span class="line">+ (<span class="keyword">void</span>)cancelPreviousPerformRequestsWithTarget:(<span class="keyword">id</span>)aTarget;</span><br></pre></td></tr></table></figure><h3 id="performSelector-withObject-afterDelay"><a href="#performSelector-withObject-afterDelay" class="headerlink" title="performSelector:withObject:afterDelay:"></a>performSelector:withObject:afterDelay:</h3><p>源码实现:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector</span><br><span class="line">             withObject:(<span class="keyword">id</span>)argument</span><br><span class="line">             afterDelay:(<span class="built_in">NSTimeInterval</span>)seconds &#123;</span><br><span class="line">    <span class="built_in">NSRunLoop</span> *loop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">    GSTimedPerformer *item;</span><br><span class="line">    <span class="comment">// item引用计数+1</span></span><br><span class="line">    item = [[GSTimedPerformer alloc] initWithSelector:aSelector</span><br><span class="line">                                               target:<span class="keyword">self</span></span><br><span class="line">                                             argument:argument</span><br><span class="line">                                                delay:seconds];</span><br><span class="line">    <span class="comment">// 持有item</span></span><br><span class="line">    [[loop _timedPerformers] addObject:item];</span><br><span class="line">    <span class="comment">// item引用计数-1</span></span><br><span class="line">    RELEASE(item);</span><br><span class="line">    <span class="comment">// 持有timer</span></span><br><span class="line">    [loop addTimer:item-&gt;timer forMode:<span class="built_in">NSDefaultRunLoopMode</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要做了这些事:</p><ol><li>获取当前线程的Runloop对象。</li><li>根据方法名、方法参数、方法调用者及延迟时间等信息创建一个<code>GSTimedPerformer</code>对象，把该对象添加到Runloop的<code>_timedPerformers</code>数组中保存。</li><li>把GSTimedPerformer中的定时器timer添加到Runloop中。</li></ol><p>如官方文档所说:This method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the default mode (NSDefaultRunLoopMode). When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.</p><p>看看GSTimedPerformer做了什么:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GSTimedPerformer</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">  SEL selector;</span><br><span class="line">  <span class="keyword">id</span> target;</span><br><span class="line">  <span class="keyword">id</span> argument;</span><br><span class="line">  <span class="built_in">NSTimer</span> *timer;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)fire;</span><br><span class="line">- (<span class="keyword">id</span>)initWithSelector:(SEL)aSelector</span><br><span class="line">                target:(<span class="keyword">id</span>)target</span><br><span class="line">              argument:(<span class="keyword">id</span>)argument</span><br><span class="line">                 delay:(<span class="built_in">NSTimeInterval</span>)delay;</span><br><span class="line">- (<span class="keyword">void</span>)invalidate;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GSTimedPerformer</span></span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [<span class="keyword">self</span> finalize];</span><br><span class="line">    TEST_RELEASE(timer);</span><br><span class="line">    <span class="comment">// 释放target对象</span></span><br><span class="line">    RELEASE(target);</span><br><span class="line">    RELEASE(argument);</span><br><span class="line">    [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)finalize &#123;</span><br><span class="line">    [<span class="keyword">self</span> invalidate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fire &#123;</span><br><span class="line">    DESTROY(timer);</span><br><span class="line">    [target performSelector:selector withObject:argument];</span><br><span class="line">    [[[<span class="built_in">NSRunLoop</span> currentRunLoop] _timedPerformers] removeObjectIdenticalTo:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithSelector:(SEL)aSelector</span><br><span class="line">                target:(<span class="keyword">id</span>)aTarget</span><br><span class="line">              argument:(<span class="keyword">id</span>)anArgument</span><br><span class="line">                 delay:(<span class="built_in">NSTimeInterval</span>)delay &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">        selector = aSelector;</span><br><span class="line">        <span class="comment">// 持有target</span></span><br><span class="line">        target = RETAIN(aTarget);</span><br><span class="line">        argument = RETAIN(anArgument);</span><br><span class="line">        timer = [[<span class="built_in">NSTimer</span> allocWithZone:<span class="built_in">NSDefaultMallocZone</span>()]</span><br><span class="line">                 initWithFireDate:<span class="literal">nil</span></span><br><span class="line">                 interval:delay</span><br><span class="line">                 target:<span class="keyword">self</span></span><br><span class="line">                 selector:<span class="keyword">@selector</span>(fire)</span><br><span class="line">                 userInfo:<span class="literal">nil</span></span><br><span class="line">                 repeats:<span class="literal">NO</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)invalidate &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [timer invalidate];</span><br><span class="line">        DESTROY(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>The GSTimedPerformer class is used to hold information about messages which are due to be sent to objects at a particular time.</p><p>可见，<code>GSTimedPerformer</code>作用就是保存关于消息的信息，具体方法的延迟和调用主要还是依靠其内部的定时器。分析源码可知，Runloop的<code>_timedPerformers</code>数组持有了<code>GSTimedPerformer</code>，Runloop还持有<code>GSTimedPerformer</code>内部的定时器<code>timer</code>，定时器<code>timer</code>持有着<code>target(self)</code>。而<code>GSTimedPerformer</code>持有着<code>target(self)</code>和定时器<code>timer</code>。</p><p>引用关系如图所示：<br><img src="https://image.chenyalun.com/2018/09/30/002.png" style="zoom:40%"></p><p>当设置的时间到的时候，<code>GSTimedPerformer</code>内部的<code>fire</code>方法得到调用，此时外界的<code>target</code>便调用了被设置的<code>selector</code>，起到了延迟执行的效果。紧接着，Runloop的<code>_timedPerformers</code>数组移除了对<code>GSTimedPerformer</code>的引用，<code>GSTimedPerformer</code>自然会销毁，它的<code>dealloc</code>方法得到调用。而<code>GSTimedPerformer</code>中的<code>dealloc</code>内部调用了<code>finalize</code>方法，<code>finalize</code>方法的目的是<code>invalidate</code>掉定时器<code>timer</code>并减少它的引用计数。此时，<code>timer</code>只有Runloop持有着它了，关键是timer一旦被<code>invalidate</code>，Runloop也不会再持有它了（Timers are removed automatically when they are invalid）。这样，<code>timer</code>彻底死掉，对<code>target</code>的强引用也没有了，一切恢复如初。</p><p>这一切的前提建立在Runloop运行在<code>NSDefaultRunLoopMode</code>模式下并顺利调用<code>fire</code>方法。<strong>当延迟方法因种种原因没有执行就可能出现内存泄露。</strong></p><p>很经典的例子：从A控制器push到B控制器，B控制器此时执行一个方法：<code>[self performSelector:@selector(printInfo) withObject:nil afterDelay:100];</code>。此时从B控制器pop到A控制器，很明显B控制器并没有销毁，因为Runloop还（间接）强引用着它，可以理解为出现了内存泄露(尽管100s后<code>printInfo</code>方法得到执行，B控制器会销毁)。</p><blockquote><p>performSelector关于内存管理的执行原理是这样的执行 [self performSelector:@selector(method1:) withObject:self afterDelay:3]; 的时候，系统会将self的引用计数加1，执行完这个方法时，还会将self的引用计数减1，当方法还没有执行的时候，要返回父视图释放当前视图的时候，self的计数没有减少到0，而导致无法调用dealloc方法，出现了内存泄露。 </p></blockquote><p><img src="https://image.chenyalun.com/2018/09/30/001.png" style="zoom:60%"></p><p>比较好的做法是及时取消掉之前的延迟调用:<code>cancelPreviousPerformRequestsWithTarget: selector:object:</code>，那么<code>cancelPreviousPerformRequestsWithTarget: selector:object:</code>做了什么呢?</p><p><span id="jump1"></span></p><h3 id="cancelPreviousPerformRequestsWithTarget-selector-object"><a href="#cancelPreviousPerformRequestsWithTarget-selector-object" class="headerlink" title="cancelPreviousPerformRequestsWithTarget: selector:object:"></a>cancelPreviousPerformRequestsWithTarget: selector:object:</h3><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">NSObject</span> cancelPreviousPerformRequestsWithTarget:self]<span class="comment">;</span></span><br><span class="line">[<span class="name">NSObject</span> cancelPreviousPerformRequestsWithTarget:self selector:NSSelectorFromString(<span class="name">@</span><span class="string">"printString:"</span>) object:@<span class="string">"str"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>这两个方法可以取消perform延迟调用，它们内部做了什么？</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">+ (void)cancelPreviousPerformRequestsWithTarget:(id)targe</span><br><span class="line">                                       selector:(SEL)aSelector</span><br><span class="line">                                         object:(id)arg &#123;</span><br><span class="line">    NSMutableArray *perf = [[NSRunLoop currentRunLoop] _timedPerformers];</span><br><span class="line">    unsigned <span class="built_in">count</span> = [perf <span class="built_in">count</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        GSTimedPerformer *array[<span class="built_in">count</span>];</span><br><span class="line">        IF_NO_GC(RETAIN(<span class="keyword">target</span>));</span><br><span class="line">        IF_NO_GC(RETAIN(arg));</span><br><span class="line">        [perf getObjects: array];</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">count</span>-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            // 遍历查找</span><br><span class="line">            GSTimedPerformer *p = array[<span class="built_in">count</span>];</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;<span class="keyword">target</span> == <span class="keyword">target</span> &amp;&amp; sel_isEqual(p-&gt;selector, aSelector)</span><br><span class="line">                &amp;&amp; (p-&gt;argument == arg || [p-&gt;argument isEqual:arg])) &#123;</span><br><span class="line">                // <span class="keyword">target</span>\sel\argument均一致</span><br><span class="line">                [p invalidate];</span><br><span class="line">                [perf removeObjectAtIndex: <span class="built_in">count</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(arg);</span><br><span class="line">        RELEASE(<span class="keyword">target</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>获取Runloop内部持有的<code>_timedPerformers</code>数组(数组中的是<code>GSTimedPerformer</code>对象)。</li><li>创建一个C语言数组，并把<code>_timedPerformers</code>数组中的内容copy到这个C语言数组array。</li><li>遍历该C语言数组array：如果给定参数中的<code>target</code>、<code>argument</code>、<code>selector</code>均<strong>一一对应</strong>，那么销毁<code>GSTimedPerformer</code>对象中的定时器，并根据当前的索引移除<code>_timedPerformers</code>数组的<code>GSTimedPerformer</code>对象。</li></ol><p>换句话说，如果<code>target</code>、<code>argument</code>、<code>selector</code>中有一个参数没有对应，那么便不会执行销毁定时器操作和移除操作。那么，判定<code>target</code>、<code>argument</code>、<code>selector</code>均一一对应的标准是：Matching of the argument may be either by pointer equality or by use of the [NSObject -isEqual:] method.就是指针比较以及<code>isEqual</code>方法。</p><figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(p-&gt;</span>target == target </span><br><span class="line">&amp;&amp; <span class="function"><span class="title">sel_isEqual</span>(p-&gt;</span>selector, aSelector)</span><br><span class="line">&amp;&amp; (<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">argument</span> == arg || [p-&gt;</span>argument isEqual:arg])) </span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>其实这里的<code>sel_isEqual</code>就等价于<code>==</code>，多说一句，<code>SEL</code>实际上就是根据方法名hash化了的一个字符串（<code>char *</code>），对于字符串的比较只要比较地址就可以了。</p><p>同理，<code>+ (void)cancelPreviousPerformRequestsWithTarget:(id)target</code>方法实现原理与上面的方法类似，只是不用比较<code>argument</code>和<code>selector</code>参数，把<code>target</code>有关的所有定时器都销毁，并把所有与之相关的<code>GSTimedPerformer</code>对象都从<code>_timedPerformers</code>数组中移除。<br><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="built_in">count</span>-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">   GSTimedPerformer *p = array[<span class="built_in">count</span>];</span><br><span class="line">   <span class="keyword">if</span> (p-&gt;<span class="keyword">target</span> == <span class="keyword">target</span>) &#123;</span><br><span class="line">       [p invalidate];</span><br><span class="line">       [perf removeObjectAtIndex:<span class="built_in">count</span>];</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当手动销毁定时器并把<code>GSTimedPerformer</code>从Runloop中移除时，定时器对<code>target</code>的强引用不存在；<code>GSTimedPerformer</code>销毁，<code>GSTimedPerformer</code>对<code>target</code>的强引用也不存在，这样，内存泄露问题解决了。这也是为什么使用<code>cancelPreviousPerformRequestsWithTarget</code>取消还没有执行的perform就可以解决<code>target</code>无法释放掉的原因。</p><h2 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h2><p><span id="jump2"></span></p><h3 id="performSelector-target-argument-order-modes"><a href="#performSelector-target-argument-order-modes" class="headerlink" title="performSelector:target:argument:order:modes:"></a>performSelector:target:argument:order:modes:</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector target:(<span class="keyword">id</span>)target argument:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg order:(<span class="built_in">NSUInteger</span>)order modes:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSRunLoopMode</span>&gt; *)modes;</span><br><span class="line">- (<span class="keyword">void</span>)cancelPerformSelector:(SEL)aSelector target:(<span class="keyword">id</span>)target argument:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg;</span><br><span class="line">- (<span class="keyword">void</span>)cancelPerformSelectorsWithTarget:(<span class="keyword">id</span>)target;</span><br></pre></td></tr></table></figure><p>这里主要看<code>performSelector:target:argument:order:modes:</code>是如何实现的。</p><p>Sets up sending of aSelector to target with argument. The selector is sent before the next runloop iteration (unless cancelled before then) in any of the specified modes.The target and argument objects are retained.<br>The order value is used to determine the order in which messages are sent if multiple messages have been set up. Messages with a lower order value are sent first.If the modes array is empty, this method has no effect.<br>说的很明白了，就是在指定模式的Runloop下一次迭代之前把selector、argument等信息丢给target，以便调用。这里的<code>order</code>指定了这个调用的优先级，值越小，越早被调用。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector</span><br><span class="line">                 target:(<span class="keyword">id</span>)target</span><br><span class="line">               argument:(<span class="keyword">id</span>)argument</span><br><span class="line">                  order:(<span class="built_in">NSUInteger</span>)order</span><br><span class="line">                  modes:(<span class="built_in">NSArray</span> *)modes &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> count = [modes count];</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *array[count];</span><br><span class="line">        GSRunLoopPerformer *item;</span><br><span class="line">        item = [[GSRunLoopPerformer alloc] initWithSelector:aSelector</span><br><span class="line">                                                     target:target</span><br><span class="line">                                                   argument:argument</span><br><span class="line">                                                      order:order];</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 把modes中的内容copy到array</span></span><br><span class="line">        <span class="keyword">if</span> ([modes isProxy]) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                array[i] = [modes objectAtIndex:i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [modes getObjects:array];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历所有mode</span></span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *mode = array[count];</span><br><span class="line">            <span class="keyword">unsigned</span> end;</span><br><span class="line">            <span class="keyword">unsigned</span> i;</span><br><span class="line">            GSRunLoopCtxt *context;</span><br><span class="line">            GSIArray performers;</span><br><span class="line">            </span><br><span class="line">            context = <span class="built_in">NSMapGet</span>(_contextMap, mode);</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">nil</span>) &#123;</span><br><span class="line">                context = [[GSRunLoopCtxt alloc] initWithMode:mode extra:_extra];</span><br><span class="line">                <span class="built_in">NSMapInsert</span>(_contextMap, context-&gt;mode, context);</span><br><span class="line">                RELEASE(context);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 获取Runloop某个mode下对应的context中的performers</span></span><br><span class="line">            performers = context-&gt;performers;</span><br><span class="line">            <span class="comment">// performers的数量</span></span><br><span class="line">            end = GSIArrayCount(performers);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">                <span class="comment">// 遍历整个performers数组</span></span><br><span class="line">                GSRunLoopPerformer *p;</span><br><span class="line">                p = GSIArrayItemAtIndex(performers, i).obj;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;order &gt; order) &#123;</span><br><span class="line">                    <span class="comment">// 新添加进来的item的优先级高于当前索引i对应item的优先级, 插入</span></span><br><span class="line">                    GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一种可能: i和end都为0, performers数组为空, 上面的for循环没有执行</span></span><br><span class="line">            <span class="comment">// 第二种可能: 新添加进来的item的优先级最低, 上面的for循环没有执行, 把它添加到数组的最后位置</span></span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            i = GSIArrayCount(performers);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span> &amp;&amp; i &gt; context-&gt;maxPerformers) &#123;</span><br><span class="line">                <span class="comment">// 更新context中的performer最大数量</span></span><br><span class="line">                context-&gt;maxPerformers = i;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"WARNING ... there are %u performers scheduled"</span></span><br><span class="line">                      <span class="string">@" in mode %@ of %@\n(Latest: [%@ %@])"</span>,</span><br><span class="line">                      i, mode, <span class="keyword">self</span>, <span class="built_in">NSStringFromClass</span>([target <span class="keyword">class</span>]),</span><br><span class="line">                      <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据方法实现来看，这个方法做了这些事:</p><ol><li>如果数组modes中没有内容就直接return。</li><li>把<code>target</code>、<code>argument</code>、<code>selector</code>、<code>order</code>等信息包装成一个<code>GSRunLoopPerformer</code>对象。</li><li>创建一个字符串数组array，把modes中的内容copy到array。</li><li>遍历array。找到每一种mode(<code>NSString</code>类型)在<code>_contextMap</code>(<code>NSMapTable</code>类型)表中对应的context(<code>GSRunLoopCtxt</code>类型)，获得context中需要执行的performers(<code>GSIArray</code>类型)数组。</li><li>遍历原来的performers数组，根据第2步中包装好的<code>GSRunLoopPerformer</code>对象的优先级order，插入到performers中的合适位置。</li></ol><p>总而言之，就是把<code>target</code>、<code>argument</code>、<code>selector</code>、<code>order</code>等信息包装成一个<code>GSRunLoopPerformer</code>对象，并把该对象添加到Runloop（中的<code>_contextMap</code>）里面的performers，供其在合适的时机调用。具体啥时候调用呢？官方文档说是Runloop的下一次迭代的时候。</p><p>自不必说，<code>cancelPerformSelector:target:argument:</code>就是根据<code>selector</code>、<code>target</code>和<code>argument</code>移除performers数组中的<code>GSRunLoopPerformer</code>。要求三者完全对应。<br><code>cancelPerformSelector:target:</code>是根据<code>selector</code>、<code>target</code>移除performers数组中相关的所有的<code>GSRunLoopPerformer</code>对象。原理与上文中所说的<a href="#jump1">cancelPreviousPerformRequestsWithTarget:</a>基本一致。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="performSelector-onThread-withObject-waitUntilDone-modes"><a href="#performSelector-onThread-withObject-waitUntilDone-modes" class="headerlink" title="performSelector:onThread:withObject:waitUntilDone:modes:"></a>performSelector:onThread:withObject:waitUntilDone:modes:</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)array;</span><br><span class="line"><span class="comment">// equivalent to the first method with kCFRunLoopCommonModes</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelectorOnMainThread:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)array;</span><br><span class="line"><span class="comment">// equivalent to the first method with kCFRunLoopCommonModes</span></span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)performSelectorInBackground:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg;</span><br></pre></td></tr></table></figure><p>第二个方法与第一个方法对应，其modes是<code>kCFRunLoopCommonModes</code>，selector在主线程执行。<br>第四个方法与第三个方法对应，其modes是<code>kCFRunLoopCommonModes</code>，selector在指定的子线程执行。<br>第五个方法省略很多参数，selector在内置的子线程执行。</p><p>先分析第四个方法即可。具体的实现如下所示:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector</span><br><span class="line">               onThread:(<span class="built_in">NSThread</span> *)aThread</span><br><span class="line">             withObject:(<span class="keyword">id</span>)anObject</span><br><span class="line">          waitUntilDone:(<span class="built_in">BOOL</span>)aFlag</span><br><span class="line">                  modes:(<span class="built_in">NSArray</span>*)anArray &#123;</span><br><span class="line">    GSRunLoopThreadInfo  *info;</span><br><span class="line">    <span class="built_in">NSThread</span> *t;</span><br><span class="line">    <span class="keyword">if</span> ([anArray count] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    t = GSCurrentThread();</span><br><span class="line">    <span class="keyword">if</span> (aThread == <span class="literal">nil</span>) aThread = t;</span><br><span class="line">    info = GSRunLoopInfoForThread(aThread);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (t == aThread) &#123;</span><br><span class="line">        <span class="comment">// Perform in current thread.</span></span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span> || info-&gt;loop == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="comment">// Wait until done or no run loop.</span></span><br><span class="line">            [<span class="keyword">self</span> performSelector:aSelector withObject:anObject];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Don't wait ... schedule operation in run loop.</span></span><br><span class="line">            [info-&gt;loop performSelector:aSelector</span><br><span class="line">                                 target:<span class="keyword">self</span></span><br><span class="line">                               argument:anObject</span><br><span class="line">                                  order:<span class="number">0</span></span><br><span class="line">                                  modes:anArray];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GSPerformHolder *h;</span><br><span class="line">        <span class="built_in">NSConditionLock</span> *l = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 线程Finished判断</span></span><br><span class="line">        <span class="keyword">if</span> ([aThread isFinished] == <span class="literal">YES</span>) &#123;</span><br><span class="line">            [<span class="built_in">NSException</span> raise: <span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                        format: <span class="string">@"perform on finished thread"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 阻塞等待加锁</span></span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span>) &#123;</span><br><span class="line">            l = [[<span class="built_in">NSConditionLock</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        h = [GSPerformHolder newForReceiver:<span class="keyword">self</span></span><br><span class="line">                                   argument:anObject</span><br><span class="line">                                   selector:aSelector</span><br><span class="line">                                      modes:anArray</span><br><span class="line">                                       lock:l];</span><br><span class="line">        [info addPerformer:h];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 条件锁创建成功(也即参数aFlag为YES)</span></span><br><span class="line">        <span class="keyword">if</span> (l != <span class="literal">nil</span>) &#123;</span><br><span class="line">            [l lockWhenCondition:<span class="number">1</span>]; <span class="comment">// 当条件为1时加锁</span></span><br><span class="line">            [l unlock];</span><br><span class="line">            RELEASE(l);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// holder已经失效则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> ([h isInvalidated] == <span class="literal">YES</span>) &#123;</span><br><span class="line">                RELEASE(h);</span><br><span class="line">                [<span class="built_in">NSException</span> raise: <span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                            format: <span class="string">@"perform on finished thread"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// holder自身就产生exception了, 那么再次抛出异常</span></span><br><span class="line">            <span class="comment">// If we have an exception passed back from the remote thread, re-raise it.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">nil</span> != h-&gt;exception) &#123;</span><br><span class="line">                <span class="built_in">NSException</span> *e = AUTORELEASE(RETAIN(h-&gt;exception));</span><br><span class="line">                RELEASE(h);</span><br><span class="line">                [e raise];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法主要做了这些什么?</p><ol><li>首先对传进来的<code>modes</code>(Runloop模式数组)个数进行判断，如果为0，则直接return。</li><li>获取该方法执行上下文中的线程： <code>t</code>，并把它与作为参数传进来的线程<code>aThread</code>进行比较，看是否一致。当然，如果传进来的<code>aThread</code>为空，那么执行<code>aThread = t;</code>，就让<code>selector</code>在当前上下文中的线程中执行。</li><li>当两个线程一致时，如果参数<code>aFlag</code>为YES或者线程对应的Runloop为空，说明需要等待，也即这个方法应该等到selector被执行完毕后再return。这就好办了，直接调用<code>[self performSelector: aSelector withObject: anObject];</code>方法，同步执行即可。如果不需要等待呢? 把<code>selector</code>、<code>argument</code>、<code>modes</code>等信息交给线程对应的Runloop再进一步处理（schedule operation in run loop）。</li><li>当两个线程不一致时，首先判断<code>aThread</code>有没有<code>finished</code>，线程死了自然<code>selector</code>无法执行，抛出异常。再者判断是否需要阻塞等待，如果需要的话就创建一个条件锁。接着把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个<code>GSPerformHolder</code>对象，并把它交给封装线程信息的<code>GSRunLoopThreadInfo</code>对象。之后是一些收尾工作：设置条件锁的condition及一些异常判断。</li></ol><p>需要着重说明的是参数<code>aFlag</code>： 是否立即返回。如果参数<code>aFlag</code>为YES，则这个方法应该等到<code>selector</code>被执行完毕后再return。如果<code>selector</code>是在当前方法上下文的线程中执行，且该线程对应的Runloop没有run，那么会忽略<code>modes</code>，直接执行：<code>performSelector:aSelector withObject:</code>。</p><p>当两个线程一致时，也即<code>selector</code>执行的线程就是当前方法上下文中的线程，这比较好处理，把<code>selector</code>、<code>argument</code>、<code>modes</code>等信息交给线程对应的Runloop即可，就是模式中的方法：<a href="#jump2">performSelector:target:argument:order:modes:</a>。</p><p><strong>GSPerformHolder</strong></p><p>两个线程不一致时，“把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个<code>GSPerformHolder</code>对象，并把它交给封装线程信息的<code>GSRunLoopThreadInfo</code>对象”又是怎么做的呢?</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">(GSPerformHolder</span> <span class="string">*)h</span> <span class="string">=</span> <span class="string">[GSPerformHolder</span> <span class="attr">newForReceiver:self</span></span><br><span class="line"><span class="attr">                                             argument:</span><span class="string">anObject</span></span><br><span class="line"><span class="attr">                                             selector:</span><span class="string">aSelector</span></span><br><span class="line"><span class="attr">                                                modes:</span><span class="string">anArray</span></span><br><span class="line"><span class="attr">                                                 lock:</span><span class="string">l];</span></span><br><span class="line"><span class="string">[(GSRunLoopThreadInfo</span> <span class="string">*)info</span> <span class="attr">addPerformer:h];</span></span><br></pre></td></tr></table></figure><p><code>newForReceiver:argument:selector:modes:lock:</code> 这个方法就是做一些信息封装，无需多言。主要是这个<code>addPerformer</code>，删除<code>#if defined(_WIN32)</code>的代码后具体实现如下:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addPerformer:(<span class="keyword">id</span>)performer &#123;</span><br><span class="line">    <span class="built_in">BOOL</span>  signalled = <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// NSLock加锁</span></span><br><span class="line">    [lock lock];</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> start = <span class="number">0.0</span>;</span><br><span class="line">    <span class="comment">// 使用write函数向 outputFd 中写入 1 字节数据，数据为: "0"。</span></span><br><span class="line">    <span class="keyword">while</span> (outputFd &gt;= <span class="number">0</span> &amp;&amp; <span class="literal">NO</span> == (signalled = (write(outputFd, <span class="string">"0"</span>, <span class="number">1</span>) == <span class="number">1</span>) ? <span class="literal">YES</span> : <span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSTimeInterval</span>    now = [<span class="built_in">NSDate</span> timeIntervalSinceReferenceDate];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0.0</span> == start) &#123;</span><br><span class="line">            start = now;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now - start &gt;= <span class="number">1.0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Unable to signal %@ within a second; blocked?"</span>, <span class="keyword">self</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        [lock unlock];</span><br><span class="line">        [lock lock];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据成功，把performer添加到GSRunLoopThreadInfo数组中</span></span><br><span class="line">    <span class="keyword">if</span> (signalled) [performers addObject: performer];</span><br><span class="line">    <span class="comment">// NSLock解锁</span></span><br><span class="line">    [lock unlock];</span><br><span class="line">    <span class="comment">// 写入数据失败，销毁performer</span></span><br><span class="line">    <span class="keyword">if</span> (!signalled) [performer invalidate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充write函数知识点:</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * <span class="built_in">write</span>函数</span><br><span class="line"> * ssize_t  <span class="built_in">write</span>(int __fd, const void * __buf, size_t __nbyte) __DARWIN_ALIAS_C(<span class="built_in">write</span>);</span><br><span class="line"> * <span class="built_in">write</span> 函数向 __fd 中写入 __nbyte 字节数据，数据来源为 __buf 。返回值一般总是等于 __nbyte</span><br><span class="line"> * 返回值如果不是等于__nbyte，就是出错了。常见的出错原因是磁盘空间满了或者超过了文件大小限制。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* The <span class="built_in">write</span> could concievably fail <span class="keyword">if</span> <span class="keyword">the</span> pipe <span class="keyword">is</span> full.</span><br><span class="line"> * In <span class="keyword">that</span> case we need <span class="keyword">to</span> release <span class="keyword">the</span> lock temporarily <span class="keyword">to</span> allow <span class="keyword">the</span> other</span><br><span class="line"> * thread <span class="keyword">to</span> consume data <span class="keyword">from</span> <span class="keyword">the</span> pipe.  It's possible <span class="keyword">that</span> <span class="keyword">the</span> thread</span><br><span class="line"> * <span class="keyword">and</span> <span class="keyword">its</span> runloop might stop during <span class="keyword">that</span> ... so we need <span class="keyword">to</span> check <span class="keyword">that</span></span><br><span class="line"> * outputFd <span class="keyword">is</span> still valid.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure><p>不是十分理解write函数在这里的作用，根据一些异常信息<code>&quot;Failed to set non block flag for perform in thread&quot; &quot;Failed to create event to handle perform in thread&quot;</code>，可能是向文件中写入一些flag表示线程指定事件对象的信号状态吧。</p><p>如果信号状态设置成功，就把这个perform对象(<code>GSPerformHolder</code>类型)添加到<code>GSRunLoopThreadInfo</code>的performers数组中。</p><p>这个<code>GSRunLoopThreadInfo</code>对象把<code>GSPerformHolder</code>对象添加到自己数组中后，具体最原先的perform什么时候执行呢? <strong>是在调用<code>GSRunLoopThreadInfo</code>对象的<code>fire</code>方法时逐个执行</strong>：</p><p>GSRunLoopThreadInfo对象的<code>fire</code>方法部分实现:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">for</span> <span class="string">(i</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span> <span class="string">i</span> <span class="string">&lt;</span> <span class="string">c;</span> <span class="string">i++)</span> <span class="string">&#123;</span></span><br><span class="line">   <span class="string">GSPerformHolder</span> <span class="meta">*h</span> <span class="string">=</span> <span class="string">[toDo</span> <span class="attr">objectAtIndex:i];</span></span><br><span class="line">   </span><br><span class="line">   <span class="string">[loop</span> <span class="attr">performSelector:@selector(fire)</span></span><br><span class="line"><span class="attr">                  target:</span><span class="string">h</span></span><br><span class="line"><span class="attr">                argument:</span><span class="string">nil</span></span><br><span class="line"><span class="attr">                   order:</span><span class="number">0</span></span><br><span class="line"><span class="attr">                   modes:</span><span class="string">[h</span> <span class="string">modes]];</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>可见是逐个取出数组中的<code>GSPerformHolder</code>对象，一个接一个地调用<code>GSPerformHolder</code>的<code>fire</code>方法，这也是个<code>fire</code>方法，它内部做了什么？就是<code>[receiver performSelector: selector withObject: argument];</code>。</p><p>捋一捋: 两个线程不一致时，把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个<code>GSPerformHolder</code>对象，并把它添加到<code>GSRunLoopThreadInfo</code>对象的performers数组中。当调用<code>GSRunLoopThreadInfo</code>对象的<code>fair</code>方法时会遍历performers数组，然后逐个调用数组中每一个元素的<code>fair</code>方法，而这个<code>fair</code>方法内部就是调用<code>performSelector:withObject</code>方法。</p><p>最最关键的一个问题: 什么时候调用<code>GSRunLoopThreadInfo</code>对象的<code>fair</code>方法? 官方文档说:<strong> May only be called from the runloop when the event/descriptor is triggered.</strong></p><p>我在Runloop的<code>+(BOOL)awakenedBefore:</code>和 <code>-(BOOL)pollUntil:within:</code>方法中找到了调用痕迹。</p><h3 id="任意线程调用"><a href="#任意线程调用" class="headerlink" title="任意线程调用"></a>任意线程调用</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">- (void)performSelector:(SEL)aSelector</span><br><span class="line"><span class="symbol">               onThread:</span>(NSThread*)aThread</span><br><span class="line"><span class="symbol">             withObject:</span>(id)anObject</span><br><span class="line"><span class="symbol">          waitUntilDone:</span>(BOOL)<span class="class">aFlag </span>&#123;</span><br><span class="line">    [self performSelector:aSelector</span><br><span class="line"><span class="symbol">                 onThread:</span>aThread</span><br><span class="line"><span class="symbol">               withObject:</span>anObject</span><br><span class="line"><span class="symbol">            waitUntilDone:</span>aFlag</span><br><span class="line"><span class="symbol">                    modes:</span>commonModes()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Runloop的五种mode分别是:<code>NSDefaultRunLoopMode，NSConnectionReplyMode，NSModalPanelRunLoopMode，NSEventTrackingRunLoopMode，NSRunLoopCommonModes</code>。<br><strong>这个方法省略了modes参数，内部使用common mode</strong>，也即<code>NSDefaultRunLoopMode</code>和<code>NSConnectionReplyMode</code>(不是<code>NSEventTrackingRunLoopMode</code>)。所以如果有鼠标或者手势事件需要处理，省略modes参数可能不是个好做法。</p><h3 id="主线程调用"><a href="#主线程调用" class="headerlink" title="主线程调用"></a>主线程调用</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">- (void)performSelectorOnMainThread:(SEL)aSelector</span><br><span class="line"><span class="symbol">                         withObject:</span>(id)anObject</span><br><span class="line"><span class="symbol">                      waitUntilDone:</span>(BOOL)aFlag</span><br><span class="line"><span class="symbol">                              modes:</span>(NSArray*)<span class="class">anArray </span>&#123;</span><br><span class="line">    if (defaultThread == nil) defaultThread = [NSThread mainThread];</span><br><span class="line">    [self performSelector:aSelector</span><br><span class="line"><span class="symbol">                 onThread:</span>defaultThread</span><br><span class="line"><span class="symbol">               withObject:</span>anObject</span><br><span class="line"><span class="symbol">            waitUntilDone:</span>aFlag</span><br><span class="line"><span class="symbol">                    modes:</span>anArray];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法指定了主线程。</strong></p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">- (void)performSelectorOnMainThread:(SEL)aSelector</span><br><span class="line"><span class="symbol">                         withObject:</span>(id)anObject</span><br><span class="line"><span class="symbol">                      waitUntilDone:</span>(BOOL)<span class="class">aFlag </span>&#123;</span><br><span class="line">    [self performSelectorOnMainThread:aSelector</span><br><span class="line"><span class="symbol">                           withObject:</span>anObject</span><br><span class="line"><span class="symbol">                        waitUntilDone:</span>aFlag</span><br><span class="line"><span class="symbol">                                modes:</span>commonModes()];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这两个方法指定了主线程，内部使用common mode。</strong></p><h3 id="Background调用"><a href="#Background调用" class="headerlink" title="Background调用"></a>Background调用</h3><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line">- (void)performSelectorInBackground:(SEL)aSelector</span><br><span class="line"><span class="symbol">                         withObject:</span>(id)<span class="class">anObject </span>&#123;</span><br><span class="line">    [NSThread detachNewThreadSelector:aSelector</span><br><span class="line"><span class="symbol">                             toTarget:</span>self</span><br><span class="line"><span class="symbol">                           withObject:</span>anObject];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法会创建一条任意的线程执行<code>selector</code>方法。</strong></p><h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="printInfo方法会执行吗"><a href="#printInfo方法会执行吗" class="headerlink" title="printInfo方法会执行吗"></a>printInfo方法会执行吗</h3><h4 id="GCD调用"><a href="#GCD调用" class="headerlink" title="GCD调用"></a>GCD调用</h4><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dispatch_async(<span class="name">dispatch_get_global_queue</span>(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    [self performSelector:@selector(<span class="name">printInfo</span>) withObject<span class="symbol">:nil</span> afterDelay:<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>很明显是不会的。因为<code>performSelector</code>具体实现中并没有主动触发线程对应Runloop运行。子线程对应的Runloop没有run。怎么让它执行？启动Runloop:</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dispatch_async(<span class="name">dispatch_get_global_queue</span>(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    [self performSelector:@selector(<span class="name">printInfo</span>) withObject<span class="symbol">:nil</span> afterDelay:<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    [[NSRunLoop currentRunLoop] run]<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><h4 id="NSThread调用"><a href="#NSThread调用" class="headerlink" title="NSThread调用"></a>NSThread调用</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSThread *thread = [[NSThread alloc] <span class="string">initWithBlock:</span>^&#123;</span><br><span class="line">   [self <span class="string">performSelector:</span><span class="meta">@selector</span>(printInfo) <span class="string">withObject:</span>nil <span class="string">afterDelay:</span><span class="number">1</span>];</span><br><span class="line">&#125;];</span><br><span class="line">[thread start];</span><br></pre></td></tr></table></figure><p>同理:</p><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">NSThread *thread = <span class="comment">[<span class="comment">[NSThread alloc]</span> initWithBlock:^&#123;</span></span><br><span class="line"><span class="comment">   <span class="comment">[self performSelector:@selector(printInfo) withObject:nil afterDelay:1]</span>;</span></span><br><span class="line"><span class="comment">   <span class="comment">[<span class="comment">[NSRunLoop currentRunLoop]</span> run]</span>;</span></span><br><span class="line"><span class="comment">&#125;]</span>;</span><br><span class="line"><span class="comment">[thread start]</span>;</span><br></pre></td></tr></table></figure><p>这就有一个问题了。在GCD中<code>[[NSRunLoop currentRunLoop] run];</code>放在<code>performSelector</code>前面或者后面貌似都是可以的，但是在NSThread中<code>[[NSRunLoop currentRunLoop] run];</code>只能放在<code>performSelector</code>的后面。</p><p>在NSThread方法中:</p><blockquote><p>因为run方法只是尝试想要开启当前线程中的runloop，但是如果该线程中并没有任何事件(source、timer、observer)的话，并不会成功的开启。</p></blockquote><p>为什么GCD中即使<code>[[NSRunLoop currentRunLoop] run];</code>放在前面<code>printInfo</code>方法还是调用了呢? 代码实际测试，延迟效果没有了，并且有时方法执行，有时方法没有执行。</p><p>综上，<strong>在子线程中使用performSelector的延迟方法，需要加上<code>[[NSRunLoop currentRunLoop] run];</code>使得Runloop能够运行，并且该方法要放在<code>performSelector</code>的后面来保证Runloop成功运行。</strong></p><h4 id="NSThread无效"><a href="#NSThread无效" class="headerlink" title="NSThread无效"></a>NSThread无效</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSThread *thread = [[NSThread alloc] <span class="string">initWithBlock:</span>^&#123;&#125;];</span><br><span class="line">[thread start];</span><br><span class="line">[self <span class="string">performSelector:</span><span class="meta">@selector</span>(printMainInfo) <span class="string">onThread:</span>thread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br></pre></td></tr></table></figure><p>上面这段代码为什么没有执行printMainInfo方法?</p><p>子线程执行完操作之后就会立即释放，即使我们使用强引用引用子线程使子线程不被释放，也不能给子线程再次添加操作，或者再次开启。这里可以使用Runloop。子线程获取其对应的Runloop对象并使之运行。一般使用常驻子线程。</p><p>正确实践：<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithBlock:^&#123;</span><br><span class="line">   <span class="comment">// 执行一次而已</span></span><br><span class="line">   <span class="built_in">NSRunLoop</span> *currentRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">   [currentRunLoop runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br><span class="line">&#125;];</span><br><span class="line">[thread start];</span><br><span class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(printMainInfo) onThread:thread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>梳理本文，比较重要的几个小点如下：</p><ol><li><code>performSelector</code>内部的实现就是使用<code>IMP</code>直接调用对象的方法。</li><li>严格遵守ARC规则，注意方法的命名，不然会为内存泄漏埋下伏笔。</li><li>反射<code>NSSelectorFromString()</code>很强大，但是使用<code>@selector()</code>显式告诉编译器将要调用的方法是更优的选择。</li><li><code>performSelector</code>能实现延迟是因为定时器，要及时取消无法执行的延迟方法。</li><li>子线程中使用延迟方法，需要主动使Runloop能够运行。</li><li>NSTimer在其<code>invalidate</code>方法调用后，Runloop会自动移除对它的引用。</li></ol><p>具体在业务上，可以举几个简单的场景。</p><p>对于文件或者模型的下载，有时候需要用到进度条提示。这时候可以在子线程下载，跑到主线程更新UI：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self <span class="string">performSelectorOnMainThread:</span><span class="meta">@selector</span>(updateProgress) <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br></pre></td></tr></table></figure></p><p>有些时候需要进行简单的Tip提示，3秒后自动让它自动隐藏：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.tipView <span class="string">performSelector:</span><span class="meta">@selector</span>(dismiss) <span class="string">withObject:</span>nil <span class="string">afterDelay:</span><span class="number">3.</span>f];</span><br></pre></td></tr></table></figure></p><p>当使用多态的时候，动态调用方法创建实例对象：<br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Class cls = Nil;</span><br><span class="line"><span class="keyword">if</span> (item.isForChinese) &#123;</span><br><span class="line">    cls = NSClassFromString(@<span class="string">"YAChinesePopView"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    cls = NSClassFromString(@<span class="string">"YAEnglishPopView"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> [cls <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">popViewWithItem:</span>) <span class="string">withObject:</span>item];</span><br></pre></td></tr></table></figure></p><p>偶然间发现一个好玩的例子：直接调用某个对象的某个方法，而不导入其头文件。比如手百自定义一个继承自WKWebView的子类，并把这个实例暴露出来，我们想让它执行某段JavaScript，但是又不想导入繁重的头文件：</p><pre><code>if ([obj respondsToSelector:@selector(evaluateJavaScript:completionHandler:)]) {    [obj performSelector:@selector(evaluateJavaScript:completionHandler:) withObject:js withObject:nil];} </code></pre><p>上面的只是冰山一角，其合理性需要结合具体的业务场景具体分析，只是想阐明，performSelector在一些情况下是有作用的，请不要嫌弃它。</p><hr><blockquote><p>参考资料<br><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html" target="_blank" rel="noopener">Advanced Memory Management Programming Guide</a><br><a href="https://zhongwuzw.github.io/2017/01/19/Objective-C之performSelector编译器内存泄露警告/" target="_blank" rel="noopener">Objective-C之performSelector编译器内存泄露警告</a><br><a href="https://blog.csdn.net/dean19900504/article/details/8067679" target="_blank" rel="noopener">用performSelector的时候要注意别内存泄露了</a><br><a href="https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown" target="_blank" rel="noopener">PerformSelector May Cause a Leak</a><br><a href="https://blog.csdn.net/wei371522/article/details/81216853" target="_blank" rel="noopener">performSelector 注意问题及原理</a><br><a href="https://blog.csdn.net/king16304/article/details/52192259" target="_blank" rel="noopener">c/c++ read 函数和 write 函数</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt; PerformSelector相关知识。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>Runtime基础</title>
    <link href="http://blog.chenyalun.com/2018/07/10/Runtime%E5%9F%BA%E7%A1%80/"/>
    <id>http://blog.chenyalun.com/2018/07/10/Runtime基础/</id>
    <published>2018-07-10T15:02:17.000Z</published>
    <updated>2019-08-28T11:30:10.722Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2018.8.26 更新Class定义<br>2019.3.25 更新设置weak关联属性</p></blockquote><p></p><p align="center"> 关于Runtime的简单总结。 </p><br><a id="more"></a><p></p><p>简单总结一些比较好玩的用法，但是后来我才发现，南峰子大神的<a href="http://southpeak.github.io/2014/10/25/objective-c-runtime-1/" target="_blank" rel="noopener">Runtime系列</a>总结的很详细很完整了。文章舍不得删，就当抛砖引玉吧。</p><h2 id="一、Runtime"><a href="#一、Runtime" class="headerlink" title="一、Runtime"></a>一、Runtime</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Objective-C2<span class="number">.0</span>之前Class的定义</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> &#123;</span></span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></span><br><span class="line">    <span class="comment">// 父类</span></span><br><span class="line">    Class super_class;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">long</span> version;</span><br><span class="line">    <span class="keyword">long</span> info;</span><br><span class="line">    <span class="keyword">long</span> instance_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_ivar_list</span> *<span class="title">ivars</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_method_list</span> **<span class="title">methodLists</span>;</span></span><br><span class="line">    <span class="comment">// 方法缓存</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> *<span class="title">cache</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_protocol_list</span> *<span class="title">protocols</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask <span class="comment">/* total = mask + 1 */</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> occupied;</span><br><span class="line">    Method buckets[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">根据源码，最新定义大致如下:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class isa;</span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="keyword">cache_t</span> cache;<span class="comment">// 方法缓存</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits; <span class="comment">// 用于获取具体的类信息</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>实例演练</p><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line">YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">Class cls = [person <span class="keyword">class</span>];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取实例对象对应的Class</span></span><br><span class="line">Class <span class="keyword">class</span><span class="number">1</span> = <span class="keyword">object</span><span class="number">_</span>getClass(person);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取指定名称的类对象</span></span><br><span class="line">Class <span class="keyword">class</span><span class="number">3</span> = objc<span class="number">_</span>getClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">Class <span class="keyword">class</span><span class="number">2</span> = objc<span class="number">_</span>getRequiredClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取指定名称的元类对象</span></span><br><span class="line">Class <span class="keyword">class</span><span class="number">4</span> = objc<span class="number">_</span>getMetaClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 找到指定名称的类对象</span></span><br><span class="line">Class <span class="keyword">class</span><span class="number">5</span> = objc<span class="number">_</span>lookUpClass(<span class="string">"NSObject"</span>);</span><br><span class="line">NSLog(@<span class="string">"%@%@%@%@%@"</span>,<span class="keyword">class</span><span class="number">1</span>,<span class="keyword">class</span><span class="number">2</span>,<span class="keyword">class</span><span class="number">3</span>,<span class="keyword">class</span><span class="number">4</span>,<span class="keyword">class</span><span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 设置对象对应的Class,返回原先的class</span></span><br><span class="line">Class oriClass = <span class="keyword">object</span><span class="number">_</span>setClass(person, [NSObject <span class="keyword">class</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否是类对象或元类对象</span></span><br><span class="line">BOOL isClass = <span class="keyword">object</span><span class="number">_</span>isClass(person);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 是否是元类对象</span></span><br><span class="line">BOOL isMetaClass = <span class="keyword">class</span><span class="number">_</span>isMetaClass(<span class="keyword">class</span><span class="number">4</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取父类</span></span><br><span class="line">Class superClass = <span class="keyword">class</span><span class="number">_</span>getSuperclass(cls);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取类的版本</span></span><br><span class="line">int version = <span class="keyword">class</span><span class="number">_</span>getVersion(cls);</span><br><span class="line"><span class="comment">// 设置类的版本</span></span><br><span class="line"><span class="keyword">class</span><span class="number">_</span>setVersion(cls, <span class="number">88</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例大小</span></span><br><span class="line">typedef <span class="number">__</span>SIZE<span class="number">_T</span>YPE<span class="number">__</span> size<span class="number">_</span>t;</span><br><span class="line">    </span><br><span class="line">size<span class="number">_</span>t size = <span class="keyword">class</span><span class="number">_</span>getInstanceSize(cls);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    int objc_getClassList(Class *buffer, int bufferCount)</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//    Class *objc_copyClassList(unsigned int *outCount)</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">// 获取类的名称</span></span><br><span class="line">const char *name = <span class="keyword">class</span><span class="number">_</span>getName(cls);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 动态创建类</span></span><br><span class="line"><span class="comment">//Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)</span></span><br><span class="line"><span class="comment">//void objc_registerClassPair(Class cls)</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 动态废弃类</span></span><br><span class="line"><span class="comment">//Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)</span></span><br><span class="line"><span class="comment">//void objc_disposeClassPair(Class cls)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">//id o = objc_storeWeak(&amp;weakObject, weakObject);</span></span><br><span class="line"><span class="comment">//id result = objc_loadWeak(&amp;weakObject);</span></span><br></pre></td></tr></table></figure><h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">给<span class="keyword">block创建一个关联的函数指针</span></span><br><span class="line"><span class="keyword">IMP </span>imp_implementationWithBlock(id <span class="keyword">block)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">获取函数指针关联的block</span></span><br><span class="line"><span class="keyword">id </span>imp_getBlock(IMP anImp)</span><br><span class="line"></span><br><span class="line">移除函数指针对应的<span class="keyword">block</span></span><br><span class="line"><span class="keyword">BOOL </span>imp_removeBlock(IMP anImp)</span><br></pre></td></tr></table></figure><p>实例演练</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明block</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^Block) ();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 定义block</span></span><br><span class="line">Block block = ^() &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"哈哈哈"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 给block创建一个关联的函数指针</span></span><br><span class="line">IMP imp = imp_implementationWithBlock(block);</span><br><span class="line"><span class="comment">// 调用block</span></span><br><span class="line">(*imp)();</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 获取函数指针关联的block</span></span><br><span class="line"><span class="keyword">id</span> blockObject = imp_getBlock(imp);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,blockObject);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 移除函数指针对应的block</span></span><br><span class="line"><span class="built_in">BOOL</span> isRemoveBlock = imp_removeBlock(imp);</span><br><span class="line"><span class="keyword">if</span> (isRemoveBlock) &#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"成功移除"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">获取<span class="keyword">SEL的名称(char </span>*类型)</span><br><span class="line"><span class="symbol">const</span> char *<span class="keyword">sel_getName(SEL </span><span class="keyword">sel)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">注册SEL</span></span><br><span class="line"><span class="keyword">SEL </span><span class="keyword">sel_registerName(const </span>char *<span class="keyword">str)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">比较SEL</span></span><br><span class="line"><span class="keyword">BOOL </span><span class="keyword">sel_isEqual(SEL </span>lhs, <span class="keyword">SEL </span>rhs)</span><br></pre></td></tr></table></figure><p>实例演练</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SEL的名称(char *类型)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *selName = sel_getName(<span class="keyword">@selector</span>(viewWillAppear:));</span><br><span class="line">printf(<span class="string">"%s"</span>,selName);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 注册SEL</span></span><br><span class="line">SEL newSel = sel_registerName(<span class="string">"haha"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 比较SEL</span></span><br><span class="line"><span class="built_in">BOOL</span> isEqual = sel_isEqual(<span class="keyword">@selector</span>(viewWillAppear:), newSel);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,isEqual);</span><br></pre></td></tr></table></figure><h3 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">定义一个objc_ivar结构体指针Ivar</span><br><span class="line"><span class="keyword">typedef</span> struct objc_ivar *Ivar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct objc_ivar &#123;</span><br><span class="line">    成员变量名称</span><br><span class="line">    <span class="keyword">char</span> *ivar_name;</span><br><span class="line">    成员变量类型                                         </span><br><span class="line">    <span class="keyword">char</span> *ivar_type;                                          </span><br><span class="line">    偏移量</span><br><span class="line">    <span class="keyword">int</span> ivar_offset;                                          </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">int</span> space;                                                </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关于偏移量的定义(就是整型)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__PTRDIFF_TYPE__)</span></span><br><span class="line">    <span class="keyword">typedef</span> __PTRDIFF_TYPE____darwin_ptrdiff_t;<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__LP64__)</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span>__darwin_ptrdiff_t;<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>__darwin_ptrdiff_t;<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __GNUC__ */</span></span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _PTRDIFF_T</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PTRDIFF_T</span></span><br><span class="line">    <span class="keyword">typedef</span> __darwin_ptrdiff_t ptrdiff_t;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _PTRDIFF_T */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">成员变量列表</span><br><span class="line">struct objc_ivar_list &#123;</span><br><span class="line">    成员变量数量</span><br><span class="line">    <span class="keyword">int</span> ivar_count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">int</span> space;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* variable length structure */</span></span><br><span class="line">    struct objc_ivar ivar_list[<span class="number">1</span>];</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取实例变量</span><br><span class="line">Ivar class_getInstanceVariable(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取类变量</span></span><br><span class="line"><span class="comment">//Ivar class_getClassVariable(Class cls, const char *name)</span></span><br><span class="line">    </span><br><span class="line">获取成员变量列表</span><br><span class="line">Ivar *class_copyIvarList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line">   </span><br><span class="line">获取Ivar变量的名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ivar_getName(Ivar v)</span><br><span class="line">    </span><br><span class="line">获取Ivar变量的偏移量</span><br><span class="line">ptrdiff_t ivar_getOffset(Ivar v)</span><br><span class="line">    </span><br><span class="line">获取Ivar变量的编码</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ivar_getTypeEncoding(Ivar v)</span><br><span class="line">    </span><br><span class="line">设置成员变量的值</span><br><span class="line"><span class="keyword">void</span> object_setIvarWithStrongDefault(id obj, Ivar ivar, id value)</span><br><span class="line"></span><br><span class="line">设置成员变量的值</span><br><span class="line"><span class="keyword">void</span> object_setIvar(id obj, Ivar ivar, id value)</span><br><span class="line"></span><br><span class="line">获取Ivar对应的成员变量对象</span><br><span class="line">id object_getIvar(id obj, Ivar ivar)</span><br><span class="line"></span><br><span class="line">IvarLayout相关</span><br><span class="line"><span class="keyword">const</span> uint8_t *class_getIvarLayout(Class cls)</span><br><span class="line"><span class="keyword">const</span> uint8_t *class_getWeakIvarLayout(Class cls)</span><br><span class="line"><span class="keyword">void</span> class_setIvarLayout(Class cls, <span class="keyword">const</span> uint8_t *layout)</span><br><span class="line"><span class="keyword">void</span> class_setWeakIvarLayout(Class cls, <span class="keyword">const</span> uint8_t *layout)</span><br><span class="line">    </span><br><span class="line">添加成员变量</span><br><span class="line">BOOL class_addIvar(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, size_t <span class="built_in">size</span>,</span><br><span class="line">                  uint8_t alignment, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span><br></pre></td></tr></table></figure><p>实例演示</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    Class cls = [person <span class="keyword">class</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例变量</span></span><br><span class="line">    Ivar ivar_num = class_getInstanceVariable(cls, <span class="string">"num"</span>);</span><br><span class="line">    </span><br><span class="line">    Ivar ivar_name = class_getInstanceVariable(cls, <span class="string">"name"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取类变量</span></span><br><span class="line">    <span class="comment">//Ivar class_getClassVariable(Class cls, const char *name)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的名称</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar_name);</span><br><span class="line">    printf(<span class="string">"%s\n"</span>,name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的偏移量</span></span><br><span class="line">    ptrdiff_t p = ivar_getOffset(ivar_num);</span><br><span class="line">    printf(<span class="string">"%td"</span>,p); <span class="comment">// 打印16</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的编码</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *typeEncoding = ivar_getTypeEncoding(ivar_name);</span><br><span class="line">    printf(<span class="string">"%s\n"</span>,typeEncoding); <span class="comment">// 打印 @"NSString"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置成员变量的值</span></span><br><span class="line">    object_setIvarWithStrongDefault(person, ivar_name, <span class="string">@"haha"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,person-&gt;name);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置成员变量对应的值</span></span><br><span class="line">    object_setIvar(person, ivar_name, <span class="string">@"hahaaaaaa"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,person-&gt;name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Ivar对应的成员变量对象</span></span><br><span class="line">    <span class="keyword">id</span> object = object_getIvar(person, ivar_name);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,object);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态添加成员变量</span></span><br><span class="line">    <span class="comment">// 必须在 objc_allocateClassPair 之后 和 在objc_registerClassPair之前调用</span></span><br><span class="line">    <span class="comment">// 不能给一个已经存在的类添加成员变量</span></span><br><span class="line">    Class peopleClass = objc_allocateClassPair(cls, <span class="string">"YAPeople"</span>, <span class="number">0</span>);</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_gayFriend"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_girlFriend"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_company"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    objc_registerClassPair(peopleClass);</span><br><span class="line">    <span class="comment">// 打印成员变量列表</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="keyword">self</span> ya_getIvarList:peopleClass]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// IvarLayout相关</span></span><br><span class="line">    <span class="comment">// ivarLayout 和 weakIvarLayout 分别记录了哪些 ivar 是 strong 或是 weak，都未记录的就是基本类型和 __unsafe_unretained 的对象类型</span></span><br><span class="line">    <span class="keyword">const</span> uint8_t *ivarLayoutArray= class_getIvarLayout(cls);</span><br><span class="line">    <span class="keyword">const</span> uint8_t *weakIvarLayoutArray = class_getWeakIvarLayout(cls);</span><br><span class="line">    <span class="keyword">if</span> (ivarLayoutArray) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        uint8_t value_s = ivarLayoutArray[i];</span><br><span class="line">        <span class="keyword">while</span> (value_s != <span class="number">0x0</span>) &#123;</span><br><span class="line">            printf(<span class="string">"\\x%02x\n"</span>, value_s);</span><br><span class="line">            value_s = ivarLayoutArray[++i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//void class_setIvarLayout(Class cls, const uint8_t *layout)</span></span><br><span class="line">    <span class="comment">//void class_setWeakIvarLayout(Class cls, const uint8_t *layout)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据class获取成员变量列表<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取成员变量列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 成员变量字典(名称:类型)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)ya_getIvarList:(Class)<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取成员变量列表</span></span><br><span class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">class</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储成员变量</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取成员变量类型与成员变量名称</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 成员变量类型</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_ivarType = ivar_getTypeEncoding(ivarList[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 成员变量名称</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_ivarName = ivar_getName(ivarList[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 利用字典存储,格式为 成员变量名称:对应的成员变量类型</span></span><br><span class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithUTF8String:c_ivarName];</span><br><span class="line">        dict[ivarName] = [<span class="built_in">NSString</span> stringWithUTF8String:c_ivarType];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要手动free</span></span><br><span class="line">    free(ivarList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:dict];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>值得一提的是方法编码和类型编码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ID       <span class="meta-string">'@'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CLASS    <span class="meta-string">'#'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_SEL      <span class="meta-string">':'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CHR      <span class="meta-string">'c'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UCHR     <span class="meta-string">'C'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_SHT      <span class="meta-string">'s'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_USHT     <span class="meta-string">'S'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_INT      <span class="meta-string">'i'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UINT     <span class="meta-string">'I'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_LNG      <span class="meta-string">'l'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ULNG     <span class="meta-string">'L'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_LNG_LNG  <span class="meta-string">'q'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ULNG_LNG <span class="meta-string">'Q'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_FLT      <span class="meta-string">'f'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_DBL      <span class="meta-string">'d'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_BFLD     <span class="meta-string">'b'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_BOOL     <span class="meta-string">'B'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_VOID     <span class="meta-string">'v'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNDEF    <span class="meta-string">'?'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_PTR      <span class="meta-string">'^'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CHARPTR  <span class="meta-string">'*'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ATOM     <span class="meta-string">'%'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ARY_B    <span class="meta-string">'['</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ARY_E    <span class="meta-string">']'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNION_B  <span class="meta-string">'('</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNION_E  <span class="meta-string">')'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_STRUCT_B <span class="meta-string">'&#123;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_STRUCT_E <span class="meta-string">'&#125;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_VECTOR   <span class="meta-string">'!'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CONST    <span class="meta-string">'r'</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>Code</th><th>Meaning</th></tr></thead><tbody><tr><td>r</td><td>const</td></tr><tr><td>n</td><td>in</td></tr><tr><td>N</td><td>inout</td></tr><tr><td>o</td><td>out</td></tr><tr><td>O</td><td>bycopy</td></tr><tr><td>R</td><td>byref</td></tr><tr><td>V</td><td>oneway</td></tr></tbody></table><p>以上信息在具体应用时，可以自定义一个枚举获取。</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">typedef struct objc_method *<span class="function"><span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line">struct objc_method <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    // 方法的名称</span></span><br><span class="line"><span class="comment">    SEL method_name;                                          </span></span><br><span class="line"><span class="comment">    // 方法的参数类型</span></span><br><span class="line"><span class="comment">    char *method_types;                                       </span></span><br><span class="line"><span class="comment">    // 方法的实现(函数指针)</span></span><br><span class="line"><span class="comment">    IMP method_imp;                                           </span></span><br><span class="line"><span class="comment">&#125;</span>                                                            </span><br><span class="line"></span><br><span class="line">根据方法名称获取<span class="function"><span class="keyword">Method</span></span></span><br><span class="line"><span class="function"><span class="title">Method</span> <span class="title">class_getInstanceMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span></span></span><br><span class="line"><span class="function"><span class="title">Method</span> <span class="title">class_getClassMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的方法名称</span></span><br><span class="line"><span class="function"><span class="title">SEL</span> <span class="title">method_getName</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的方法实现</span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">method_getImplementation</span><span class="params">(<span class="keyword">Method</span> m)</span> </span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">class_getMethodImplementation</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的返回值类型<span class="params">(需手动释放)</span></span></span><br><span class="line"><span class="function"><span class="title">char</span> *<span class="title">method_copyReturnType</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function">//<span class="title">void</span> <span class="title">method_getReturnType</span><span class="params">(<span class="keyword">Method</span> m, char *dst, size_t dst_len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取指定<span class="title">Method</span>的类型</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">char</span> *<span class="title">method_getTypeEncoding</span><span class="params">(<span class="keyword">Method</span> m)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的参数数量</span></span><br><span class="line"><span class="function"><span class="title">unsigned</span> <span class="title">int</span> <span class="title">method_getNumberOfArguments</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>中第<span class="title">i</span>个参数的类型<span class="params">(Char *类型)</span><span class="params">(需手动释放)</span></span></span><br><span class="line"><span class="function"><span class="title">char</span> *<span class="title">method_copyArgumentType</span><span class="params">(<span class="keyword">Method</span> m, unsigned int <span class="keyword">index</span>)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取方法列表</span></span><br><span class="line"><span class="function"><span class="title">Method</span> *<span class="title">class_copyMethodList</span><span class="params">(<span class="keyword">Class</span> cls, unsigned int *outCount)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">设置<span class="title">IMP</span></span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">method_setImplementation</span><span class="params">(<span class="keyword">Method</span> m, IMP imp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">交换方法实现</span></span><br><span class="line"><span class="function"><span class="title">void</span> <span class="title">method_exchangeImplementations</span><span class="params">(<span class="keyword">Method</span> m1, <span class="keyword">Method</span> m2)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">添加方法</span></span><br><span class="line"><span class="function"><span class="title">BOOL</span> <span class="title">class_addMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name, IMP imp, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">const</span> char *types)</span> </span></span><br><span class="line"><span class="function">替换方法                                 </span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">class_replaceMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name, IMP imp, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">const</span> char *types)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">标明需要手动释放的动态内存<span class="params">(如返回值类型/参数类型)</span></span></span><br><span class="line"><span class="function">// 及时释放</span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(argumentType)</span> <span class="title">free</span><span class="params">(argumentType)</span>;</span></span><br></pre></td></tr></table></figure><p>实例演示</p><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">- (void)viewDidLoad &#123;</span><br><span class="line">    [<span class="built_in">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    </span><br><span class="line">    // 获取<span class="function"><span class="keyword">Method</span></span></span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">method</span> =</span> class_getInstanceMethod([person <span class="class"><span class="keyword">class</span>] , <span class="title">NSSelectorFromString</span>(@"<span class="title">nameWithArg</span>:<span class="title">arg</span>:<span class="title">arg</span>:<span class="title">arg</span>:<span class="title">arg</span>:"));</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 获取<span class="function"><span class="keyword">Method</span>的方法名称</span></span><br><span class="line">    SEL sel = method_getName(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    NSLog(@<span class="string">"%@"</span>,NSStringFromSelector(sel));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 获取<span class="function"><span class="keyword">Method</span>的方法实现</span></span><br><span class="line">    IMP imp1 = method_getImplementation(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    IMP imp2 = class_getMethodImplementation([person <span class="class"><span class="keyword">class</span>],<span class="title">sel</span>);</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // 获取<span class="function"><span class="keyword">Method</span>的返回值类型(</span>需手动释放)</span><br><span class="line">    char *returnType = method_copyReturnType(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (returnType) &#123;</span><br><span class="line">        NSLog(@<span class="string">"%@"</span>,[NSString stringWithUTF8String:returnType]);</span><br><span class="line">        free(returnType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    // 获取指定<span class="function"><span class="keyword">Method</span>的类型</span></span><br><span class="line">    <span class="keyword">const</span> char *typeEncoding = method_getTypeEncoding(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (typeEncoding) &#123;</span><br><span class="line">        NSLog(@<span class="string">"%@"</span>,[NSString stringWithUTF8String:typeEncoding]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 获取<span class="function"><span class="keyword">Method</span>的参数数量</span></span><br><span class="line">    unsigned int arguementCount = method_getNumberOfArguments(<span class="function"><span class="keyword">method</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (arguementCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (unsigned int i = <span class="number">0</span>; i &lt; arguementCount; i++) &#123;</span><br><span class="line">            //获取<span class="function"><span class="keyword">Method</span>中第<span class="title">i</span>个参数的类型(</span>Char *类型)(需手动释放)</span><br><span class="line">            char *arguementType = method_copyArgumentType(<span class="function"><span class="keyword">method</span>, <span class="title">i</span>);</span></span><br><span class="line">            NSLog(@<span class="string">"%@"</span>,[NSString stringWithUTF8String:arguementType]);</span><br><span class="line">            </span><br><span class="line">            // 手动释放</span><br><span class="line">            <span class="keyword">if</span> (arguementType) &#123;</span><br><span class="line">                free(arguementType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    // 设置新的方法实现IMP,并返回原先的IMP</span><br><span class="line">    IMP imp3 = method_setImplementation(<span class="function"><span class="keyword">method</span>, <span class="title">imp2</span>);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Method Swizzling</strong><br>使用 Method Swizzling 的目的通常都是为了给程序增加功能，而不是完全地替换某个功能，所以我们一般都需要在自定义的实现中调用原始的实现。</p><p>Swizzling应该总是在+load中执行</p><blockquote><p>在Objective-C中，运行时会自动调用每个类的两个方法。+load会在类初始加载时调用，+initialize会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。由于method swizzling会影响到类的全局状态，因此要尽量避免在并发处理中出现竞争的情况。+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证–事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。</p></blockquote><p>Swizzling应该总是在dispatch_once中执行</p><blockquote><p>与上面相同，因为swizzling会改变全局状态，所以我们需要在运行时采取一些预防措施。原子性就是这样一种措施，它确保代码只被执行一次，不管有多少个线程。GCD的dispatch_once可以确保这种行为，我们应该将其作为method swizzling的最佳实践。</p></blockquote><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Method Swizzling</span></span><br><span class="line"><span class="comment"> 一般放在load方法中,并且使用dispatch_once,需要调用 class_addMethod 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (void)load &#123;</span><br><span class="line"> </span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        Class cls = [self <span class="class"><span class="keyword">class</span>];</span></span><br><span class="line">        </span><br><span class="line">        SEL oldSelector = NSSelectorFromString(@<span class="string">"XXXX"</span>);</span><br><span class="line">        SEL newSelector = NSSelectorFromString(@<span class="string">"XXXXXXXX"</span>);</span><br><span class="line">        </span><br><span class="line">        Method oldMethod = class_getInstanceMethod(cls, oldSelector);</span><br><span class="line">        Method newMethod = class_getInstanceMethod(cls, newSelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试给旧的方法oldSelector添加新的方法newSelectot的实现,如果已经存在方法实现,则添加失败</span></span><br><span class="line">        BOOL isSuccess = class_addMethod(cls, oldSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123; <span class="comment">// 添加成功,那么用旧的方法实现替换新的方法实现</span></span><br><span class="line">            class_replaceMethod(cls, newSelector, method_getImplementation(oldMethod), method_getTypeEncoding(oldMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 旧的方法已经有了实现,直接交换即可</span></span><br><span class="line">            method_exchangeImplementations(newMethod, oldMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取方法列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> class 类</span></span><br><span class="line"><span class="comment"> <span class="doctag">@return</span> 方法名称数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">+ (NSArray *)ya_getMethodList:(Class)<span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方法列表数量</span></span><br><span class="line">    unsigned int methodCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取方法列表</span></span><br><span class="line">    Method *methodList = class_copyMethodList(<span class="class"><span class="keyword">class</span>, <span class="type">&amp;methodCount);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储方法名称</span></span><br><span class="line">    NSMutableArray *array = [NSMutableArray array];</span><br><span class="line">    <span class="keyword">if</span> (methodList) &#123;</span><br><span class="line">        <span class="keyword">for</span> (unsigned int i = <span class="number">0</span>; i &lt; methodCount; i ++) &#123;</span><br><span class="line">            <span class="comment">// 获取方法</span></span><br><span class="line">            Method method = methodList[i];</span><br><span class="line">            <span class="comment">// 获取方法名称</span></span><br><span class="line">            SEL sel = method_getName(method);</span><br><span class="line">            </span><br><span class="line">            [array addObject:NSStringFromSelector(sel)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 手动释放</span></span><br><span class="line">        free(methodList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [NSArray arrayWithArray:array];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 交换实例方法实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> class 类</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> aSEL 方法一的名称</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> bSEL 方法二的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (void)ya_exchangeInstanceMethod:(Class)<span class="class"><span class="keyword">class</span> <span class="title">firstMethod</span>:<span class="type"></span></span>(SEL)aSEL secondMethod:(SEL)bSEL &#123;</span><br><span class="line">    Method aMethad = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">aSEL);</span></span></span><br><span class="line">    Method bMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">bSEL);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换方法实现</span></span><br><span class="line">    method_exchangeImplementations(aMethad, bMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 交换类方法实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> class 类</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> aSEL 方法一的名称</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> bSEL 方法二的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (void)ya_exchangeClassMethod:(Class)<span class="class"><span class="keyword">class</span> <span class="title">firstMethod</span>:<span class="type"></span></span>(SEL)aSEL secondMethod:(SEL)bSEL &#123;</span><br><span class="line">    Method aMethad = class_getClassMethod(<span class="class"><span class="keyword">class</span>, <span class="type">aSEL);</span></span></span><br><span class="line">    Method bMethod = class_getClassMethod(<span class="class"><span class="keyword">class</span>, <span class="type">bSEL);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换方法实现</span></span><br><span class="line">    method_exchangeImplementations(aMethad, bMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 为类添加名为newSEL的(实例)方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> class 类</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> aSEL 新的方法名称</span></span><br><span class="line"><span class="comment"> <span class="doctag">@param</span> bSEL 已经存在的方法名称</span></span><br><span class="line"><span class="comment"> <span class="doctag">@return</span> 是否添加成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (BOOL)ya_addMethod:(Class)<span class="class"><span class="keyword">class</span> <span class="title">newSEL</span>:<span class="type"></span></span>(SEL)aSEL existSEL:(SEL)bSEL &#123;</span><br><span class="line">    <span class="comment">// 获取已经存在的方法</span></span><br><span class="line">    Method method = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">bSEL);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取已经存在的方法的实现</span></span><br><span class="line">    IMP imp = class_getMethodImplementation(<span class="class"><span class="keyword">class</span>, <span class="type">bSEL);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取type</span></span><br><span class="line">    const char *type = method_getTypeEncoding(method);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给class添加名称为aSEL的方法实现</span></span><br><span class="line">    <span class="keyword">return</span> class_addMethod(<span class="class"><span class="keyword">class</span>, <span class="type">aSEL</span>, <span class="type">imp</span>, <span class="type">type);</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果父类中已经有该名称的方法,那么调用后将重写该方法</span></span><br><span class="line"><span class="comment">    如果本类中已经有了该名称的方法实现,那么将添加失败</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</span><br><span class="line"></span><br><span class="line">属性相关信息</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;         </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *value;          </span><br><span class="line">&#125; objc_property_attribute_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取属性</span><br><span class="line">objc_property_t class_getProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"></span><br><span class="line">获取属性列表</span><br><span class="line">objc_property_t *class_copyPropertyList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">获取属性信息列表</span><br><span class="line">objc_property_attribute_t *property_copyAttributeList(objc_property_t property, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">获取属性信息中某个Value</span><br><span class="line"><span class="keyword">char</span> *property_copyAttributeValue(objc_property_t property, <span class="keyword">const</span> <span class="keyword">char</span> *attributeName)</span><br><span class="line"></span><br><span class="line">添加属性</span><br><span class="line"><span class="built_in">BOOL</span> class_addProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount)</span><br><span class="line"></span><br><span class="line">替换属性</span><br><span class="line"><span class="keyword">void</span> class_replaceProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount)</span><br><span class="line"></span><br><span class="line">获取属性名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *property_getName(objc_property_t property) </span><br><span class="line"></span><br><span class="line">获取属性相关信息</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *property_getAttributes(objc_property_t property)</span><br></pre></td></tr></table></figure><p>实例演示</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    Class cls = [person class];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性</span></span><br><span class="line">    <span class="keyword">objc_property_t</span> property = class_getProperty(cls, <span class="string">"school"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性名称</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *propertyName = property_getName(property);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性信息列表</span></span><br><span class="line">    <span class="comment">// objc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int *outCount)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性相关信息</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *propertyAttributes = property_getAttributes(property);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyAttributes); <span class="comment">// 打印 T@"NSObject",W,N,V_school</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据获取属性信息中的name获取对应的Value</span></span><br><span class="line">    <span class="keyword">char</span> *propertyValue = property_copyAttributeValue(property, <span class="string">"T"</span>); <span class="comment">// 类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyValue);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     T 类型 例如:NSObject</span></span><br><span class="line"><span class="comment">     V 值(成员变量) 例如 _school</span></span><br><span class="line"><span class="comment">     C copy</span></span><br><span class="line"><span class="comment">     N nonatommic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> type = &#123; <span class="string">"T"</span>, [[NSString stringWithFormat:@<span class="string">"@\"%@\""</span>,NSStringFromClass([NSString class])] UTF8String] &#125;; <span class="comment">//type</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> ownership0 = &#123; <span class="string">"C"</span>, <span class="string">""</span> &#125;; <span class="comment">// C = copy</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> ownership = &#123; <span class="string">"N"</span>, <span class="string">""</span> &#125;; <span class="comment">//N = nonatomic</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> backingivar  = &#123; <span class="string">"V"</span>, [[NSString stringWithFormat:@<span class="string">"_%s"</span>, <span class="string">"propertyName"</span>] UTF8String] &#125;;  <span class="comment">//variable name</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> attrs[] = &#123; type, ownership0, ownership, backingivar &#125;;</span><br><span class="line">    <span class="keyword">if</span> (class_addProperty(cls, <span class="string">"propertyName"</span>, attrs, <span class="number">4</span>)) &#123;</span><br><span class="line">        NSLog(@<span class="string">"添加成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 替换属性</span></span><br><span class="line">    <span class="comment">//void class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取类的属性列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 属性列表数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (NSArray *)ya_getPropertyList:(Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="comment">// 私有/公有/类扩展中的所有属性数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性列表</span></span><br><span class="line">    <span class="keyword">objc_property_t</span> *propertyList = class_copyPropertyList(class, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储属性名称</span></span><br><span class="line">    NSMutableArray *<span class="built_in">array</span> = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* c_propertyName = property_getName(propertyList[i]);</span><br><span class="line">        [<span class="built_in">array</span> addObject:[NSString stringWithUTF8String:c_propertyName]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动释放</span></span><br><span class="line">    <span class="built_in">free</span>(propertyList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [NSArray arrayWithArray:<span class="built_in">array</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>本部分应用较少，未做详细实践。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_protocol_list &#123;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *next;</span><br><span class="line">    <span class="keyword">long</span> count;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Protocol *list[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">是否遵循协议</span><br><span class="line"><span class="built_in">BOOL</span> class_conformsToProtocol(Class cls, Protocol *protocol)</span><br><span class="line"></span><br><span class="line">协议列表</span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *class_copyProtocolList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *objc_copyProtocolList(<span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *protocol_copyProtocolList(Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">动态添加协议</span><br><span class="line"><span class="built_in">BOOL</span> class_addProtocol(Class cls, Protocol *protocol) </span><br><span class="line"></span><br><span class="line">获取指定名称的协议</span><br><span class="line">Protocol *objc_getProtocol(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"></span><br><span class="line">协议A是否遵循协议B</span><br><span class="line"><span class="built_in">BOOL</span> protocol_conformsToProtocol(Protocol *proto, Protocol *other)</span><br><span class="line"></span><br><span class="line">两个协议是否相等</span><br><span class="line"><span class="built_in">BOOL</span> protocol_isEqual(Protocol *proto, Protocol *other)</span><br><span class="line"></span><br><span class="line">获取某个协议的名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *protocol_getName(Protocol *p)</span><br><span class="line"></span><br><span class="line">动态生成协议</span><br><span class="line">Protocol *objc_allocateProtocol(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"><span class="keyword">void</span> objc_registerProtocol(Protocol *proto) </span><br><span class="line"></span><br><span class="line">给协议添加方法</span><br><span class="line"><span class="keyword">void</span> protocol_addMethodDescription(Protocol *proto, SEL name, <span class="keyword">const</span> <span class="keyword">char</span> *types, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod) </span><br><span class="line"></span><br><span class="line">给协议添加协议</span><br><span class="line"><span class="keyword">void</span> protocol_addProtocol(Protocol *proto, Protocol *addition) </span><br><span class="line"></span><br><span class="line">给协议添加属性</span><br><span class="line"><span class="keyword">void</span> protocol_addProperty(Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty)</span><br></pre></td></tr></table></figure><p>根据class获取遵循的协议列表<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取遵循的协议列表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 协议名称列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_getProtocolList:(Class)<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 协议列表数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取协议列表</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Protocol **protocolList = class_copyProtocolList(<span class="keyword">class</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储协议</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">        <span class="comment">// 获取协议</span></span><br><span class="line">        Protocol *protocol = protocolList[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取协议名称</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_protocolName = protocol_getName(protocol);</span><br><span class="line">        </span><br><span class="line">        [array addObject:[<span class="built_in">NSString</span> stringWithUTF8String:c_protocolName]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动释放</span></span><br><span class="line">    free(protocolList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:array];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="二、技能"><a href="#二、技能" class="headerlink" title="二、技能"></a>二、技能</h2><h3 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h3><p><strong>第一步：</strong><br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel_isEqual(sel, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"ss"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 要求参数要匹配</span></span><br><span class="line">        [YARuntime ya_addMethod:[<span class="keyword">self</span> <span class="keyword">class</span>] newSEL:sel existSEL:<span class="keyword">@selector</span>(printPersonalInfo)];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二步：</strong><br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel_isEqual(aSelector, NSSelectorFromString(@<span class="string">"ss"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 转发给已经存在的对象</span></span><br><span class="line">        <span class="keyword">return</span> [[YAPerson alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">forwardingTargetForSelector:</span>aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第三步：</strong><br><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (NSMethodSignature *)<span class="string">methodSignatureForSelector:</span>(SEL)aSelector &#123;</span><br><span class="line">    NSMethodSignature *signature = [<span class="keyword">super</span> <span class="string">methodSignatureForSelector:</span>aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 没有找到signature(方法签名),只能手动提供</span></span><br><span class="line">    <span class="keyword">if</span> (signature == nil) &#123;</span><br><span class="line">        signature = [NSMethodSignature <span class="string">signatureWithObjCTypes:</span><span class="string">"@@:"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)anInvocation &#123;</span><br><span class="line">    YAPerson *personClass = [[YAPerson alloc] init];</span><br><span class="line">    SEL sel = anInvocation.selector;</span><br><span class="line">    <span class="keyword">if</span> ([personClass <span class="string">respondsToSelector:</span>sel]) &#123;</span><br><span class="line">        <span class="comment">// 最后一次机会</span></span><br><span class="line">        [anInvocation <span class="string">invokeWithTarget:</span>personClass];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 回天乏力</span></span><br><span class="line">        [self <span class="string">doesNotRecognizeSelector:</span>sel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><blockquote><p>不会做菜的程序员不是好男人。</p></blockquote><p>YADeveloper 继承自 YAMan，想让YADeveloper实例对象同时具备响应 YAMan方法和 YACook方法的能力。</p><p>YAMan:</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAMan </span>: NSObject</span><br><span class="line">- (void)printMan;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YAMan</span><br><span class="line">- (void)printMan &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是一个男人"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p>YACook:</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YACook </span>: NSObject </span><br><span class="line">- (void)printCook;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YACook</span><br><span class="line">- (void)printCook &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是个会做菜的人"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p>YADeveloper:</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@class</span> YACook;</span><br><span class="line"></span><br><span class="line"><span class="variable">@interface</span> <span class="attribute">YADeveloper </span>: YAMan</span><br><span class="line"><span class="variable">@property</span> (nonatomic,strong) YACook *cook;</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printDev</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明YACook的方法,使编译通过</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printCook</span>;</span><br><span class="line">@<span class="selector-tag">end</span></span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">implementation</span> <span class="selector-tag">YADeveloper</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printDev</span> &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是个会写程序的人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">forwardingTargetForSelector</span><span class="selector-pseudo">:(SEL)aSelector</span> &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (sel_isEqual(aSelector, NSSelectorFromString(@<span class="string">"printCook"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 需要预先对self.cook初始化</span></span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">self</span><span class="selector-class">.cook</span>;</span><br><span class="line">        <span class="comment">// 或者直接创建</span></span><br><span class="line">        <span class="comment">// return [[YACook alloc] init];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[super forwardingTargetForSelector:aSelector]</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><h3 id="关联引用"><a href="#关联引用" class="headerlink" title="关联引用"></a>关联引用</h3><p>注意点:</p><ol><li>objc_removeAssociatedObjects 函数一般不可手动调用，因为这个函数会移除一个对象的所有关联对象，将该对象恢复成“原始”状态。这样做就很有可能把别人添加的关联对象也一并移除，这并不是我们所希望的。所以一般的做法是通过给 objc_setAssociatedObject 函数传入 nil 来移除某个已有的关联对象。</li><li>关联对象与被关联对象本身的存储并没有直接的关系，它是存储在单独的哈希表中的。<h4 id="给分类添加weak属性"><a href="#给分类添加weak属性" class="headerlink" title="给分类添加weak属性"></a>给分类添加weak属性</h4><blockquote><p>给任意对象A 添加 weak属性 B</p></blockquote></li></ol><p>问题关键点:在属性销毁的时候，将其置为空(或者说在关联对象销毁的时候，使objc_getAssociatedObject得到的是nil)。</p><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>通过继承关联对象B ，重写其dealloc方法即可适时把A中的关联对象返回值设置为nil，达到自动置空的目的，这也是最本能的方法。</p><p>给NSObject添加分类，也即任何继承自NSObject的对象都可以有weak属性。</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> NSObject (YAWeakProperty)</span><br><span class="line"><span class="variable">@property</span> (nonatomic, weak) YAProperty *property;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> NSObject (YAWeakProperty)</span><br><span class="line"><span class="comment">// const static char *key = "key";</span></span><br><span class="line">- (id)property &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">objc_getAssociatedObject</span>(self, <span class="variable">@selector</span>(property));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">setProperty</span><span class="selector-pseudo">:(YAProperty</span> *)<span class="selector-tag">property</span> &#123;</span><br><span class="line">    <span class="selector-tag">objc_setAssociatedObject</span>(self, <span class="variable">@selector</span>(property), property, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    <span class="selector-attr">[property setAssociate:self selector:@selector(setProperty:)]</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p>关联引用的key一般使用getter方法的selector，此时get方法中的key也可使用_cmd，二者等效。</p><p>属性的实现:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAProperty</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setAssociate:(<span class="built_in">NSObject</span> *)associatedObject selector:(SEL)sel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类扩展</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAProperty</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   __<span class="keyword">weak</span> <span class="keyword">id</span> _associatedObject;</span><br><span class="line">   SEL _sel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAProperty</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setAssociate:(<span class="built_in">NSObject</span> *)associatedObject selector:(SEL)sel &#123;</span><br><span class="line">    _associatedObject = associatedObject;</span><br><span class="line">    _sel = sel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL,<span class="keyword">id</span>)) objc_msgSend)(_associatedObject, _sel, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>然而有个问题：添加的属性继承自NSObject时非常完美，但是实际项目中不可能给任意对象添加的属性都是NSObject，有可能是NSString/NSArray/NSDictionary/NSSet等等。那么就只能继承自NSString/NSArray/NSDictionary/NSSet等系统类，这样会出现一系列一系列一系列问题，苹果并不建议我们使用NSString/NSArray/NSDictionary/NSSet等的派生类(这些类已经足够好了，不需要画蛇添足)。</p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote><p>用一个NSPointerArray（弱引用类型的数组）包一层就可以了。虽然关联属性的policy不支持weak，但是你可以把要关联的对象放入一个弱引用数组里面，然后把这个弱引用数组设置为关联对象，每次取值的时候，只需要从这个弱引用数组里面取就可以了。一样可以达到关联弱引用对象的效果。</p></blockquote><h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>A 关联 C<br>B 关联 C<br>C 销毁 通知B<br>B 再告诉 A</p><h5 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h5><p>阅读大神博客发现的新方法，见2019年新写的文章： <a href="https://blog.chenyalun.com/2019/01/20/Weak%20Associated%20Object/">Weak Associated Object</a></p><h2 id="三、要点"><a href="#三、要点" class="headerlink" title="三、要点"></a>三、要点</h2><h3 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>() 函数用来释放动态分配的内存空间，其原型为：</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">free</span> <span class="params">(<span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>() 可以释放由 <span class="built_in">malloc</span>()、<span class="built_in">calloc</span>()、<span class="built_in">realloc</span>() 分配的内存空间，以便其他程序再次使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 及时释放字符串常量</span></span><br><span class="line"><span class="keyword">if</span> (argumentType) <span class="built_in">free</span>(argumentType);</span><br></pre></td></tr></table></figure><h3 id="NONNULL"><a href="#NONNULL" class="headerlink" title="NONNULL"></a>NONNULL</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span>和<span class="built_in">NS_ASSUME_NONNULL_END</span>。</span><br><span class="line">在这两个宏之间的代码，所有简单指针对象都被假定为 <span class="keyword">nonnull</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define NS_ASSUME_NONNULL_BEGIN _Pragma(<span class="meta-string">"clang assume_nonnull begin"</span>)</span></span><br><span class="line"><span class="meta">#define NS_ASSUME_NONNULL_END   _Pragma(<span class="meta-string">"clang assume_nonnull end"</span>)</span></span><br></pre></td></tr></table></figure><h3 id="covariant"><a href="#covariant" class="headerlink" title="__covariant"></a>__covariant</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__covariant</span> - 协变性，子类型可以强转到父类型（里氏替换原则）</span><br><span class="line"><span class="variable">__contravariant</span> - 逆变性，父类型可以强转到子类型（WTF）</span><br></pre></td></tr></table></figure><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__kindof</span></span><br></pre></td></tr></table></figure><h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">__attribute__</span>((always_inline)) 的意思是强制内联</span><br></pre></td></tr></table></figure><blockquote><p>参考并感谢<br><a href="http://www.cnblogs.com/ludashi/p/6294112.html" target="_blank" rel="noopener">青玉伏案</a><br><a href="http://southpeak.github.io/2014/11/06/objective-c-runtime-4/" target="_blank" rel="noopener">南峰子</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2018.8.26 更新Class定义&lt;br&gt;2019.3.25 更新设置weak关联属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 关于Runtime的简单总结。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>开源项目：YAScrollPlaceView</title>
    <link href="http://blog.chenyalun.com/2017/10/01/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9AYAScrollPlaceView/"/>
    <id>http://blog.chenyalun.com/2017/10/01/开源项目：YAScrollPlaceView/</id>
    <published>2017-10-01T12:22:33.000Z</published>
    <updated>2019-08-21T07:57:47.135Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2019.8.4 补充内容</p></blockquote><p></p><p align="center"> 可以给UIScrollView、UITableView添加头尾视图。 </p><br><a id="more"></a><p></p><h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>百度畅听是我工作后的第一个项目，大概就是手百里面的“喜马拉雅”。</p><p>某一天UE提了个需求，大意就是在<code>UITableView</code>底部加个logo图片，要求这张图片能随着<code>UITableViewCell</code>的滑动而跟着滑动。乍一想，可以使用直接使用<code>UITableView</code>的<code>tableFooterView</code>，赋值个<code>UIImageView</code>即可，可是还有一个要求：当数据很少的时候，这个logo图片必须紧挨着屏幕最下方。很显然，<code>tableFooterView</code>自己会跑到顶部，满足不了需求。</p><p>关键是，那一阵子刚读了<code>MJRefresh</code>的源码，又痴迷于<code>Runtime</code>的各种魔法，走火入魔的厉害，还特别想写一个开源项目逞能，于是这个能给<code>UIScrollView</code>添加头部、尾部视图的框架产生了。</p><p>项目地址:<a href="https://github.com/ChenYalun/YAScrollPlaceView" target="_blank" rel="noopener">https://github.com/ChenYalun/YAScrollPlaceView</a></p><h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>思路很简单。</p><ol><li>使用KVO监听<code>UIScrollView</code>的<code>contentSize</code>和<code>contentOffset</code>。</li><li><p>根据<code>contentSize</code>确定FooterView的位置。</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">HeaderView<span class="selector-class">.y</span> = -size.<span class="attribute">height</span>;</span><br><span class="line">FooterView<span class="selector-class">.y</span> = contentSize.<span class="attribute">height</span>;</span><br></pre></td></tr></table></figure></li><li><p>设置<code>UIScrollView</code>的<code>contentInset</code>，给占位视图腾出空间。</p></li><li>根据<code>contentOffset.y</code>确定当前占位视图是否可以跟着滑动。<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="built_in">if</span> (contentOffset.y + scrollView.<span class="built_in">height</span> - scrollView.contentInset.bottom - scrollView.contentSize.<span class="built_in">height</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    FooterView.y = contentOffset.y + scrollView.<span class="built_in">height</span> - scrollView.contentInset.bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>大致就是这样，剩下的就是时机和接口了。</p><ol><li><p>在<code>didMoveToSuperview</code>中添加KVO，在<code>willMoveToSuperview</code>中移除KVO。</p><p> 这两个成双成对，之所以不放在<code>dealloc</code>里面移除，是考虑到有同一个视图被<code>didMoveToSuperview</code>多次的情况。当然，视图<code>dealloc</code>的时候是会调用<code>willMoveToSuperview</code>方法的，只不过这个<code>newSuperview</code>为空。</p></li><li><p>给<code>UIScrollView</code>添加关联属性。<br>无需多言，没有侵入性。</p> <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (YAScrollHeaderView *)<span class="selector-tag">scrollHeaderView</span> &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">objc_getAssociatedObject</span>(self, <span class="variable">@selector</span>(scrollHeaderView));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">setScrollHeaderView</span><span class="selector-pseudo">:(YAScrollHeaderView</span> *)<span class="selector-tag">scrollHeaderView</span> &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (scrollHeaderView == self.scrollHeaderView) <span class="selector-tag">return</span> ;</span><br><span class="line">    <span class="selector-attr">[self.scrollHeaderView removeFromSuperview]</span>;</span><br><span class="line">    <span class="selector-attr">[self addSubview:scrollHeaderView]</span>;</span><br><span class="line">    <span class="selector-tag">objc_setAssociatedObject</span>(self, <span class="variable">@selector</span>(scrollHeaderView), scrollHeaderView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结构设计</p></li></ol><ul><li><code>YAScrollHeaderView</code>和<code>YAScrollFooterView</code>均继承自<code>YAScrollPlaceView</code>。（这是模仿了<code>MJRefresh</code>）。核心逻辑统一在上层实现。</li><li><code>YAScrollHeaderView</code>在初始化的时候设置自己<code>scrollPlaceViewType</code>为<code>YAScrollPlaceViewTypeHeader</code>。</li><li><code>YAScrollFooterView</code>在初始化的时候设置自己<code>scrollPlaceViewType</code>为<code>YAScrollPlaceViewTypeFooter</code>。<br>这样，<code>YAScrollPlaceView</code>就可以根据子类来确定占位视图的逻辑。</li></ul><h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>暴露出来的接口很清晰。<code>isFixed</code>用于设置占位视图是否在offset超出可见区域（过大或者过小）时跟随着滑动。这个占位视图可以动态显示或者隐藏，<code>canAnimate</code>设置其动画效果，<code>showAnimationDuration</code>和<code>dismissAnimationDuration</code>不必多说，是动画时间。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isFixed; <span class="comment">///&lt; default NO.Fix the place view to the top or bottom.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> canAnimate; <span class="comment">///&lt; default YES.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> height; <span class="comment">///&lt; default 0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isVisible;; <span class="comment">///&lt; default NO.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSTimeInterval</span> showAnimationDuration;    <span class="comment">///&lt; default 0.15</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSTimeInterval</span> dismissAnimationDuration;   <span class="comment">///&lt; default 0.15</span></span><br><span class="line">- (<span class="keyword">void</span>)showWithCompletion:(YAScrollPlaceViewShowCompletion)completion;</span><br><span class="line">- (<span class="keyword">void</span>)dismissWithCompletion:(YAScrollPlaceViewDismissCompletion)completion;</span><br></pre></td></tr></table></figure><h3 id="给ScrollView设置占位图片"><a href="#给ScrollView设置占位图片" class="headerlink" title="给ScrollView设置占位图片"></a>给ScrollView设置占位图片</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">UIImage *headerImage = [UIImage imageNamed:@<span class="string">"header"</span>]<span class="comment">;</span></span><br><span class="line">YAScrollHeaderView *headerView = [YAScrollHeaderView <span class="keyword">scrollHeaderViewWithSize:CGSizeMake(self.view.bounds.size.width, </span><span class="number">100</span>) <span class="keyword">backgroundImage:headerImage];</span></span><br><span class="line"><span class="keyword">self.scrollView.scrollHeaderView </span>= headerView<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>左图：数据较多时，视图固定（也可以配置不固定）；<br>右图：数据极少时，视图不固定、跟着滑动（也可以配置为固定）。</p><p><img src="https://image.chenyalun.com/2017/10/01/003.gif" style="zoom:40%"><img src="https://image.chenyalun.com/2017/10/01/005.gif" style="zoom:40%"></p><h3 id="给tableView设置空白占位"><a href="#给tableView设置空白占位" class="headerlink" title="给tableView设置空白占位"></a>给tableView设置空白占位</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">YAScrollFooterView *footerView = [YAScrollFooterView new]<span class="comment">;</span></span><br><span class="line">footerView.height = <span class="number">100</span><span class="comment">;</span></span><br><span class="line">footerView.isFixed = YES<span class="comment">;</span></span><br><span class="line">self.tableView.<span class="keyword">scrollFooterView </span>= footerView<span class="comment">;</span></span><br></pre></td></tr></table></figure><h3 id="动态地显示或者隐藏"><a href="#动态地显示或者隐藏" class="headerlink" title="动态地显示或者隐藏"></a>动态地显示或者隐藏</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.tableView.scrollHeaderView = <span class="built_in">self</span>.<span class="keyword">header</span>;</span><br><span class="line"><span class="built_in">self</span>.<span class="keyword">header</span>.showAnimationDuration = <span class="number">0.8</span>f;</span><br><span class="line"><span class="built_in">self</span>.<span class="keyword">header</span>.dismissAnimationDuration = <span class="number">0.8</span>f;</span><br><span class="line"><span class="meta">[</span><span class="built_in">self</span>.<span class="keyword">header</span> show<span class="meta">]</span>;</span><br><span class="line">// <span class="meta">[</span><span class="built_in">self</span>.<span class="keyword">header</span> dismissWithCompletion:nil<span class="meta">]</span>;</span><br></pre></td></tr></table></figure><p><img src="https://image.chenyalun.com/2017/10/01/001.gif" style="zoom:40%"><img src="https://image.chenyalun.com/2017/10/01/002.gif" style="zoom:40%"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整体而言，实现起来还是比较轻松的，没有啥极其复杂的逻辑。不过作为我的第一个开源Framework，还挺有纪念意义的。有一方有二，二生三，三生万物。</p><blockquote><p>后记<br>2018年秋，存在两年的百度畅听正式下线。喜马拉雅、懒人听书，还活着。<br>2019年8月，整理博客时，完善文章内容并修复框架的bug。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2019.8.4 补充内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt; 可以给UIScrollView、UITableView添加头尾视图。 &lt;/p&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="开源项目" scheme="http://blog.chenyalun.com/tags/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>查找算法总结</title>
    <link href="http://blog.chenyalun.com/2017/04/21/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.chenyalun.com/2017/04/21/查找算法总结/</id>
    <published>2017-04-21T11:10:17.000Z</published>
    <updated>2019-03-29T03:02:01.090Z</updated>
    
    <content type="html"><![CDATA[<p align="center"> 关于查找算法。 </p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>本文”完全二叉树”的定义采用国内定义<br>B-树 即 B树,两者是相同概念,而非指二叉搜索树(百度百科)</p></blockquote><h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>1.国内早期教材中，满二叉树一般指 perfect binary tree，所以会有满二叉树是完全二叉树的一个特例的说法.</p><p>2.树的深度的定义，有的根结点从0开始计数，有的从1开始计数.</p><p>3.结点 与 节点 是对Node的翻译,可以看做等同.</p><h2 id="维基百科定义"><a href="#维基百科定义" class="headerlink" title="维基百科定义"></a>维基百科定义</h2><p>1.根二叉树(Rooted Binary Tree)：<br>有一个根结点，每个结点至多有两个孩子。</p><p>2.满二叉树(Full Binary Tree)：<br>要么是叶子结点(结点的度为0)，要么结点同时具有左右子树(结点的度为2)。</p><p>3.完全二叉树(Complete Binary Tree)：<br>每层结点都完全填满，在最后一层上如果不是满的，则只缺少右边的若干结点。</p><p>4.完美二叉树(Perfect Binary Tree)<br>所有的非叶子结点都有两个孩子，所有的叶子结点都在同一层。即每层结点都完全填满。</p><p>5.无限完全二叉树(Infinite Complete Binary Tree)：    每个结点都有两个孩子，结点的层数是无限的。</p><p>6.平衡二叉树(Balanced Binary Tree)：<br>也称为AVL树，它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p><strong>满二叉树(Full Binary Tree)</strong><br>如果一棵二叉树的结点要么是叶子要么有两个孩子结点,则为满二叉树</p><p>性质:<br>1.总结点个数呈现个数为:0 1 3 7 15…满足2^(n) -1,其中n为树的深度(最大层)</p><p>2.第k层(k不为0)结点个数:1 2 4 8…满足2^(k - 1)</p><p>3.满二叉树是完全二叉树</p><p><strong>完全二叉树(Complete Binary Tree)</strong><br>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p><p>性质:完全二叉树中度为1的结点数只有两种可能0或1,那么:<br>总结点数为n,有  <strong>n0=n/2</strong> 或 <strong>n0=(n+1)/2</strong></p><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>顺序存储的排序数组<br><img src="http://static.chenyalun.com/2017/04/21/170421004.jpg" alt><br>插入和删除的时候时间复杂度达到O(n),顺序存储结构不适于动态的情况</p><p>链式存储<br><img src="http://static.chenyalun.com/2017/04/21/170421005.jpg" alt><br>链表的查找需要O(n)</p><h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>查找表:由同一类型的数据元素构成的集合.<br>关键字:数据元素中某个数据项的值.<br>主关键字:可以唯一地标识一个记录.<br>次关键字:可以识别多个数据元素.<br>查找:根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素(或记录).<br>静态查找表:只作查找操作的查找表.<br>动态查找表:在查找过程中同时插入查找表中不存在的数据元素,或者从查找表中删除已经存在的某个数据元素.</p><h2 id="顺序表查找"><a href="#顺序表查找" class="headerlink" title="顺序表查找"></a>顺序表查找</h2><p>顺序查找(线性查找):从表中第一个记录开始,逐个进行记录的关键字和给定值的比较.</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 顺序查找的实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequentialSearch</span><span class="params">(key, numbers)</span></span><span class="symbol">:</span></span><br><span class="line">    length = len(numbers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(length)<span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 查找成功返回索引</span></span><br><span class="line">        <span class="keyword">if</span> key == numbers[i]<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="comment"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure><p>最好情况:在第一个位置找到,时间复杂度为O(1)<br>最坏情况:在最后一个位置找到,时间复杂度O(n)<br>查找不成功:时间复杂度O(n)<br>平均查找次数:(n+1)/2<br>平均时间复杂度:O(n)</p><h2 id="有序表查找"><a href="#有序表查找" class="headerlink" title="有序表查找"></a>有序表查找</h2><h3 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1.二分查找"></a>1.二分查找</h3><p> 折半查找(二分查找):在线性表中的记录有序的前提下进行查找.取中间元素作为比较对象,若给定值与中间元素相等,则查找成功,若给定值小于中间元素,则在中间元素的左半区继续查找,若给定值大于中间元素,则在中间元素的右半区继续查找,不断重复查找过程,直到查找成功,或查找失败.</p><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 二分查找的实现</span></span><br><span class="line">def binarySearch(<span class="keyword">key</span>, numbers):</span><br><span class="line">    <span class="meta"># 左边界</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    <span class="meta"># 右边界</span></span><br><span class="line">    high = len(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="meta"># 中间元素索引</span></span><br><span class="line">        <span class="keyword">mid</span> = (low + high) / <span class="number">2</span></span><br><span class="line">        <span class="meta"># 查找成功</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] == <span class="keyword">key</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">mid</span></span><br><span class="line">        <span class="meta"># 在左区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &gt; <span class="keyword">key</span>:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">        <span class="meta"># 在右区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &lt; <span class="keyword">key</span>:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">    <span class="meta"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>最好情况:是中间元素,一次即可找到,时间复杂度O(1)<br>最坏情况:完全二叉树的深度加1,即floor(logn) + 1次,时间复杂度O(logn).(注意:logn这里指以2为底,floor表示向下取整)</p><h3 id="2-插值查找"><a href="#2-插值查找" class="headerlink" title="2.插值查找"></a>2.插值查找</h3><p>二分查找的优化版,核心是插值公式:<br>(key - numbers[low]) / (numbers[high] - numbers[low])</p><p>核心代码:</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插值</span></span><br><span class="line">mid = low + <span class="comment">(high - low)</span> * <span class="comment">(key - numbers[low])</span> / <span class="comment">(numbers[high] - numbers[low])</span></span><br></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 插值查找的实现</span></span><br><span class="line">def interpolationSearch(<span class="keyword">key</span>, numbers):</span><br><span class="line">    <span class="meta"># 左边界</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    <span class="meta"># 右边界</span></span><br><span class="line">    high = len(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="meta"># 核心代码</span></span><br><span class="line">        <span class="keyword">mid</span> = low + (high - low) * (<span class="keyword">key</span> - numbers[low]) / (numbers[high] - numbers[low])</span><br><span class="line">        <span class="meta"># 查找成功</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] == <span class="keyword">key</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">mid</span></span><br><span class="line">        <span class="meta"># 在左区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &gt; <span class="keyword">key</span>:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">        <span class="meta"># 在右区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &lt; <span class="keyword">key</span>:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">    <span class="meta"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><p>从时间复杂度上,依然是O(logn),但是对于表长较大,关键字分布比较均匀的查找表,性能相对二分查找更好.<br>但是,分布极不均匀的数据,不是很合适,比如[1,2,4,3000,3003…9988899,8988998]</p><p>插值查找在实际使用时，一般要满足两个假设条件：</p><p>(1)每一次对数据的访问与通常的指令相比，费用都是相当昂贵的。例如，待查找的表一定是在磁盘而非内存中，因而每一次比较都要进行磁盘访问。</p><p>(2)数据不仅是已被排好序的，而且呈现均匀分布特征。</p><h3 id="3-斐波那契查找"><a href="#3-斐波那契查找" class="headerlink" title="3.斐波那契查找"></a>3.斐波那契查找</h3><p>利用黄金分割原理实现,折半查找算法来进行修改和改进.<br>对于斐波那契数列,前后两个数字的比值随着数列的增加,越来越接近黄金比值:0.618</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">0<span class="selector-class">.0</span></span><br><span class="line">1<span class="selector-class">.0</span></span><br><span class="line">0<span class="selector-class">.5</span></span><br><span class="line">0<span class="selector-class">.666666666667</span></span><br><span class="line">0<span class="selector-class">.6</span></span><br><span class="line">0<span class="selector-class">.625</span></span><br><span class="line">0<span class="selector-class">.615384615385</span></span><br><span class="line">0<span class="selector-class">.619047619048</span></span><br><span class="line">0<span class="selector-class">.617647058824</span></span><br><span class="line">0<span class="selector-class">.618181818182</span></span><br><span class="line">0<span class="selector-class">.61797752809</span></span><br><span class="line">0<span class="selector-class">.618055555556</span></span><br><span class="line">0<span class="selector-class">.618025751073</span></span><br><span class="line">0<span class="selector-class">.618037135279</span></span><br><span class="line">0<span class="selector-class">.618032786885</span></span><br><span class="line">0<span class="selector-class">.618034447822</span></span><br><span class="line">0<span class="selector-class">.6180338134</span></span><br><span class="line">0<span class="selector-class">.618034055728</span></span><br><span class="line">0<span class="selector-class">.618033963167</span></span><br><span class="line">0<span class="selector-class">.618033998522</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>对于斐波那契数列:<br>0 1 1 2 3 5 8 13 21 34 55 89 …</p><p><strong>原理:</strong><br>比如这里的89，假定它是整个有序表的元素个数，而89是由前面的两个数34和55相加之后的和，也即把元素个数为89的有序表分成由前55个数据元素组成的前半段和由后34个数据元素组成的后半段，那么前半段元素个数和整个有序表长度的比值就接近黄金比值0.618，假如要查找的元素在前半段，那么继续按照斐波那契数列来看，55 = 34 + 21，所以继续把前半段分成前34个数据元素的前半段和后21个元素的后半段，继续查找，如此反复，直到查找成功或失败.</p><p>当有序表的元素个数不是斐波那契数列中的某个数字时，需要把有序表的元素个数长度补齐，让它成为斐波那契数列中的一个数值,也即<strong>把需要补齐的的元素都赋值为有序表的最大值</strong>。</p><p><strong>核心:</strong><br>(1)当key == numbers[mid],查找成功<br>(2)当key &lt; numbers[mid],新范围是第low个到第mid-1个,范围个数是F(k-1) - 1个,即有序列表左边的长度<br>(3)当key &gt; numbers[mid]时,新范围是第mid+1到第high个,范围个数是F(k-2) - 1个,即有序列表右边的长度</p><p>k 表示列表的长度<br>k-1表示索引<br>F(k-1)表示列表最后一个元素</p><p>元素总个数 = 左区间个数 + 右区间个数 + 中间的一个元素,即:</p><pre><code>F(k)-1 = F(k-1)-1  +   F(k-2)-1    +     1</code></pre><p>斐波那契查找算法如下：</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 斐波那契查找</span></span><br><span class="line">def Fbonacci(index):</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="literal">return</span> </span><br><span class="line">    <span class="keyword">a</span>, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(index):</span><br><span class="line">        <span class="keyword">a</span>, b = b, <span class="keyword">a</span> + b</span><br><span class="line">    <span class="literal">return</span> <span class="keyword">a</span></span><br><span class="line">    </span><br><span class="line">def FbonacciSearch(key, numbers):</span><br><span class="line">    <span class="comment"># 确定该序列在斐波那契数列中的位置</span></span><br><span class="line">    n, <span class="built_in">length</span> = <span class="number">0</span>, <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span> &gt; Fbonacci(n) - <span class="number">1</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 填满元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n,Fbonacci(n)):</span><br><span class="line">        numbers.append(numbers[<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    low, high = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="comment"># 获取黄金分割下标</span></span><br><span class="line">        <span class="keyword">mid</span> = low + Fbonacci(n - <span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左区间</span></span><br><span class="line">        <span class="comment">#若key比这个元素小,则key值应该在low至mid-1之间，剩下的范围个数为F(k-1)-1</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; numbers[<span class="keyword">mid</span>]:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 右区间</span></span><br><span class="line">        <span class="comment">#若key比这个元素小,则key值应该在low至mid-1之间，剩下的范围个数为F(k-1)-1</span></span><br><span class="line">        <span class="keyword">if</span> key &gt; numbers[<span class="keyword">mid</span>]:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">            n -= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 相等</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 成功找到</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">mid</span> &lt;= n:</span><br><span class="line">                <span class="literal">return</span> <span class="keyword">mid</span></span><br><span class="line">            <span class="comment"># 补全的数,返回n</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="literal">return</span> n</span><br><span class="line">    <span class="literal">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="4-比较"><a href="#4-比较" class="headerlink" title="4.比较"></a>4.比较</h3><p>二分查找是加法与除法运算<br>插值查找是复杂的四则运算<br>斐波那契查找是加减法运算</p><h2 id="线性索引查找"><a href="#线性索引查找" class="headerlink" title="线性索引查找"></a>线性索引查找</h2><p>索引:把一个关键字与它对应的记录相关联的过程.<br>线性索引:把索引项集合组织为线性结构,也即索引表</p><h3 id="1-稠密索引"><a href="#1-稠密索引" class="headerlink" title="1.稠密索引"></a>1.稠密索引</h3><p>稠密索引:将数据集的每个记录对应一个索引项,且索引项一定按照关键码有序排列.</p><h3 id="2-分块索引"><a href="#2-分块索引" class="headerlink" title="2.分块索引"></a>2.分块索引</h3><p>对数据集进行分块,使分块有序,然后对每一块建立一个索引项,从而减少索引项的个数.</p><p>块需要满足的条件:<br>(1)块内无序:每一块的记录不要求有序.<br>(2)块间有序:比如,要求第二块所有记录的关键字均要大于第一块所有记录的关键字.第三块大于第二块…</p><p>分块索引的索引项结构:</p><ul><li>最大关键码:存储每一块中点最大关键字</li><li>存储块中记录的个数,便于循环</li><li>用于指向块首数据元素的指针,便于遍历</li></ul><p>查找分两步:<br>(1)在分块索引表中查找关键字所在的块.<br>(2)根据块首指针找到相应的块,并在块中顺序查找关键码.</p><p>设n个记录被平均分成m块,每个块t条记录,则n=mt<br>查找索引表的平均查找长度:(1+m)/2<br>查找记录的平均查找长度:(t+1)/2</p><p>则块中查找记录的平均查找长度:</p><pre><code>  (1+m)/2 + (t+1)/2 = (m+t)/2+1 = (n/t+t)/2+1</code></pre><p>最佳情况:m与t相等,也即n = t^2 = m^2 ,则原式为:</p><pre><code>= (t*t/t+t)/2+1= t+1= n^0.5 + 1 (^ 表示次方)</code></pre><p>由此分块索引比顺序查找O(n)提高不少.</p><h3 id="3-倒排索引"><a href="#3-倒排索引" class="headerlink" title="3.倒排索引"></a>3.倒排索引</h3><p>索引项的结构:次关键码与记录号表<br>根据属性(次关键码,字段)的值查找记录.<br>该索引表中的每一项包括一个属性值和具有该属性值的各记录的地址.<br>由于不是由记录确定属性值而是由属性值确定记录,因而称为倒排索引.</p><p>优点:生成索引表后不用读取记录就可知道结果,查找非常快<br>缺点:记录号不定长</p><h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>如果查找的数据集是有序线性表,并且是顺序存储的,可以使用二分查找/插值查找/斐波那契查找,但是在插入删除操作上耗费大量时间,由此引出既可以使得插入删除效率不错又可以高效率查找的算法====&gt;使用二叉树数据结构:在创建集合时就考虑使用二叉树结果,而且是排好序的二叉树.构造二叉搜索树的目的不是为了排序,而是为了提高插入/删除的效率.</p><p>二叉查找树,也称(二叉搜索树,有序二叉树,排序二叉树,二叉排序树）,是指<strong>一棵空树</strong>或者具有下列性质的<strong>二叉树</strong>：</p><ul><li>若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li><li>若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li><li>任意节点的左、右子树也分别为二叉查找树；</li><li>没有键值相等的节点。</li></ul><p>性质:<br>1.左小于根小于右<br>2.值不重复<br>3.”中序遍历“可以让结点有序<br>4.二叉搜索树有两种结点删除方式:取被删除结点的右子树中的最小元素替代或者取被删除结点的左子树中的最大元素替代</p><p>优势:<br>查找、插入的时间复杂度较低。为O(log n)<br>二叉查找树的最坏效率是O(n),此时退化为线性结构</p><p><img src="http://static.chenyalun.com/2017/04/21/170421006.jpg" alt></p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTreeNode</span>():</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,val = <span class="number">0</span>)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">self</span>.val = val</span><br><span class="line"><span class="keyword">self</span>.left = None</span><br><span class="line"><span class="keyword">self</span>.right = None</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.val == <span class="symbol">data:</span></span><br><span class="line"><span class="keyword">return</span> True</span><br><span class="line">elif data &lt; <span class="keyword">self</span>.val <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.left.find(data)</span><br><span class="line">elif data &gt; <span class="keyword">self</span>.val <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.right.find(data)</span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找最小结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMinData</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.left.findMinData()</span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 寻找最大结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findMaxData</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.right.findMaxData()</span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.val</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入结点</span></span><br><span class="line"><span class="comment"># 当data与二叉搜索树中某结点val相等时不作处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment"># 在右子树上</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.val &lt; <span class="symbol">data:</span></span><br><span class="line"><span class="keyword">if</span>  <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line"><span class="keyword">self</span>.right.insertNode(data)</span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">self</span>.right = BinarySearchTreeNode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在左子树上</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.val &gt; <span class="symbol">data:</span></span><br><span class="line"><span class="keyword">if</span>  <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line"><span class="keyword">self</span>.left.insertNode(data)</span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="keyword">self</span>.left = BinarySearchTreeNode(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印二叉搜索树</span></span><br><span class="line"><span class="comment"># 左根右遍历</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printTree</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line"><span class="keyword">self</span>.left.printTree()</span><br><span class="line">print <span class="keyword">self</span>.val,</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line"><span class="keyword">self</span>.right.printTree()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结点的删除</span></span><br><span class="line"><span class="comment"># 当删除一个叶子结点时,直接删除即可</span></span><br><span class="line"><span class="comment"># 当删除的结点只有一个孩子时,用该孩子替换</span></span><br><span class="line"><span class="comment"># 当删除的结点有两个孩子时,寻找该结点右子树中的最小数据代替子节点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daleteNode</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment"># 前提是该结点在二叉搜索树中能找到</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">self</span>.find(data)<span class="symbol">:</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line"><span class="keyword">if</span> data &lt; <span class="keyword">self</span>.<span class="symbol">val:</span></span><br><span class="line"><span class="keyword">self</span>.left = <span class="keyword">self</span>.left.daleteNode(data)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">elif data &gt; <span class="keyword">self</span>.<span class="symbol">val:</span></span><br><span class="line"><span class="keyword">self</span>.right = <span class="keyword">self</span>.right.daleteNode(data)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">elif <span class="keyword">self</span>.left <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line"><span class="comment"># 找到右子树最小的结点,获取值</span></span><br><span class="line">val = <span class="keyword">self</span>.right.findMinData()</span><br><span class="line"><span class="comment"># 把最小结点的值给自己</span></span><br><span class="line"><span class="keyword">self</span>.val = val</span><br><span class="line"><span class="comment"># 删除右子树中的最小结点,使self.right指向右子树的根节点</span></span><br><span class="line"><span class="comment"># self.right.daleteNode(val)最终返回右子树的根节点</span></span><br><span class="line"><span class="keyword">self</span>.right = <span class="keyword">self</span>.right.daleteNode(val)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="comment"># 左结点存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line"><span class="comment"># 直接指向左结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.left</span><br><span class="line"><span class="comment"># 右结点存在,或不存在结点</span></span><br><span class="line"><span class="symbol">else:</span></span><br><span class="line"><span class="comment"># 直接指向右结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">self</span>.right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = BinarySearchTreeNode(<span class="number">10</span>)</span><br><span class="line">a.insertNode(<span class="number">8</span>)</span><br><span class="line">a.insertNode(<span class="number">12</span>)</span><br><span class="line">a.insertNode(<span class="number">6</span>)</span><br><span class="line">a.insertNode(<span class="number">9</span>)</span><br><span class="line">a.insertNode(<span class="number">11</span>)</span><br><span class="line">a.insertNode(<span class="number">14</span>)</span><br><span class="line">a.insertNode(<span class="number">7</span>)</span><br><span class="line">a.insertNode(<span class="number">13</span>)</span><br><span class="line">a.insertNode(<span class="number">5</span>)</span><br><span class="line">a.insertNode(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">a.printTree()</span><br><span class="line">print <span class="string">"\n"</span></span><br><span class="line">print a.find(<span class="number">11</span>)</span><br><span class="line">print a.find(<span class="number">100000</span>)</span><br><span class="line">print a.findMaxData()</span><br><span class="line">print a.findMinData()</span><br><span class="line"></span><br><span class="line">a.daleteNode(<span class="number">1000000</span>)</span><br><span class="line">a.daleteNode(<span class="number">10</span>)</span><br><span class="line">a.daleteNode(<span class="number">14</span>)</span><br><span class="line">a.daleteNode(<span class="number">2</span>)</span><br><span class="line">a.printTree()</span><br></pre></td></tr></table></figure><p>二叉搜索树以链接的方式存储,保持了链接存储结构在执行插入或删除时的优越性.</p><p><img src="http://static.chenyalun.com/2017/04/21/170421002.png" alt></p><p>对于二叉搜索树的查找,比较次数等于给定值的结点在二叉搜索树的层数.最少为1次(为根节点),最多不超过树的深度(最差是极端的右斜树或左斜树).</p><p><img src="http://static.chenyalun.com/2017/04/21/170421001.png" alt></p><p>二叉排序树倘若是平衡的,其深度与完全二叉树相同,均为<code>floor(logn) + 1</code>,查找的时间复杂度为O(logn),近似与折半查找,若不是平衡的,甚至演化为极端的右斜树或左斜树,查找的时间复杂度为O(n),等同于顺序查找.</p><p>因此,平衡至关重要.</p><h2 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h2><p>平衡二叉搜索树是改进的二叉搜索树,也是二叉搜索树。</p><p>一般的二叉搜索树的查询复杂度是跟深度有关，因此当结点的深度普遍较大时，查询的均摊复杂度会上升，为了更高效的查询，平衡树应运而生了。</p><p>可以使查找树的高度为 O (log(n)) </p><p>定义:它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>AVL树中的每个结点都有一个平衡因子（balance factor，BF），它表示这个结点的左、右子树的深度差，也就是左子树的深度减去右子树的深度的结果值。AVL树上所有结点的BF值只能是-1、0、1。反之，只要二叉树上一个结点的BF的绝对值大于1，则该二叉树就不是平衡二叉树。在进行插入和删除的时候找出失去平衡的节点，进行必要的旋转操作保证树的平衡。</p><p>查找、插入和删除在平均和最坏情况下都是O（log n）</p><h3 id="最少结点"><a href="#最少结点" class="headerlink" title="最少结点"></a>最少结点</h3><p>设n(h)是高度为h的AVL树，则结点数最少时有:<br>n(h) = n(h-1) + n(h-2) + 1</p><table><thead><tr><th>h(VAL树的高度)</th><th>最少结点数</th></tr></thead><tbody><tr><td>0</td><td>1</td></tr><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>4</td></tr><tr><td>3</td><td>7</td></tr><tr><td>4</td><td>12</td></tr><tr><td>5</td><td>20</td></tr><tr><td>…</td><td>…</td></tr></tbody></table><p>显而易见，满足的关系为:<br>高度为h的AVL树，其最少结点数量为<code>F(h+2) - 1</code>，其中F(x)为斐波那契数列逗号且规定从1开始，即F(0) = 1，F(1) = 2</p><h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>RR(右单旋):麻烦结点在发现结点的右子树的右子树上</p><p>RL():麻烦结点在发现结点的右子树的左子树上</p><p>LL(左单旋):麻烦结点在发现结点的左子树的左子树上</p><p>LR():麻烦结点在发现结点的左子树的右子树上</p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆:用数组表示的完全二叉树<br>有序性:任一结点的关键字是其子树所有结点的最大值(或者最小值)，从根结点到任意结点路径上结点序列的有序性。<br>最大堆,也称为大顶堆:最大值<br>最小堆,也称为小顶堆:最小值</p><p>最大堆的建立:<br>方法一:自底向上调整堆，首先将n个节点按输入顺序存入，使其满足完全二叉树的结构特性，然后调整各节点的位置。</p><p>方法二:通过插入操作，将n个元素一个个地相继插入到一个初始为空的堆中，其时间代价最大为O(nlogn)。</p><p>堆顶元素的删除<br>元素的插入</p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p>带权路径长度:设二叉树有n个叶子节点，每个叶子节点带有权值W，从根节点到每个叶子节点的长度为L，则每个叶子节点的带权路径长度之和为WPL=∑WL。<br>哈夫曼树即是最优二叉树:WPL最小的二叉树。</p><p>性质:</p><ol><li>没有度为1的结点(按照构造哈夫曼树的规则，显而易见)。</li><li>n个叶子节点的哈夫曼树共有 <code>2 * n - 1</code>个结点。</li><li>哈夫曼树的任意非叶子结点的左右子树交换后仍是哈夫曼树。</li><li>对同一组权值的，可能存在不同结构的几棵哈夫曼树，但是它们的WPL是相同的。</li></ol><p>性质2推导:根据哈夫曼树没有度为1的结点，则 n1 = 0，又根据 n0 = n2 + 1，sum = n0 + n1 + n2，则有:</p><pre><code>sum = n0 + n1 + n2    = n0 + n2    = n0 + n0 - 1    = 2 * n0 - 1    = 2 * n - 1 // n即n0</code></pre><p>图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片<br><img src alt></p><p>图a的WPL为 5 <em> 2 + 7 </em> 2 + 2 <em> 2 + 13 </em> 2 = 54<br>图b的WPL为 13 <em> 1 + 7 </em> 2 + 2 <em> 3 + 5 </em> 3 = 48<br>PL的计算方式为:该节点的权值 * 从根节点到该节点的树枝数量</p><p>哈夫曼树的构造:每次把权值最小的两个二叉树合并，参照最大堆的调整。</p><h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p><p>（1）每个节点或者是黑色，或者是红色。<br>（2）根节点是黑色。<br>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]<br>（4）每个红色节点必须有两个黑色的子节点。<br>（5）对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  </p><p>一棵n个结点是红黑树始终保持了logn的高度,所以红黑树的查找、插入、删除的时间复杂度最坏为O(log n)</p><p>红黑树之所以是平衡的二叉查找树，是因为每个节点都有表示其颜色的域值：红或黑，在插入和删除操作的时候依据节点的颜色向平衡的方向调整。</p><p><img src="http://static.chenyalun.com/2017/04/21/170421007.png" alt></p><p>“叶结点” 或”NULL结点”，它不包含数据而只充当树在此结束的指示，这些结点以及它们的父结点，在绘图中都会经常被省略。</p><p>当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。 为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作</p><p>左旋:左右左<br>右旋:右左右</p><h2 id="多路查找树-B树"><a href="#多路查找树-B树" class="headerlink" title="多路查找树(B树)"></a>多路查找树(B树)</h2><p>B树即为B-树、B_树,又叫平衡多路查找树.<br>多路查找树:其每一个结点的孩子数可以多于两个,每一个结点处可以存储多个元素.</p><p>一个节点只能存储一个元素,在元素非常多的时候,就使得要么树的度非常大,要么树的高度非常大,甚至两者都必须足够大才可以,这使得内存存取外村次数非常多,造成了时间效率上的瓶颈,于是引入多路查找树.</p><p>树的高度越高，查找文件所需要的磁盘IO读写次数越多，所以为了减少磁盘的IO读写，要想办法进一步降低树的高度。 因此，具有多个孩子的B树便应运而生，因为B树每一个结点可以有几个到几千个孩子，使得在结点数目一定的情况下，树的高度会大大降低，从而有效减少磁盘IO读写消耗。</p><p>B+树、B树等的根结点和部分顶层数据存在内存中，大部分下层数据存在磁盘上。</p><h3 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h3><p>2-3树是这样一棵多路查找树:其中的每一个结点都具有两个孩子或三个孩子.</p><ol><li><p>一个2结点包含一个元素和两个孩子(或没有孩子),与二叉排序树类似,左子树包含的元素小于该元素,右子树包含的元素大于该元素,与二叉排序树不同的是,这个2结点要么没有孩子,要么就有两个,不能只有一个孩子.</p></li><li><p>一个3结点包含一小一大两个元素和三个孩子(或没有孩子),一个3结点要么没有孩子,要么具有3个孩子.如果具有3个孩子的话,左子树包含的元素小于较小元素的元素,右子树包含的元素大于较大元素的元素,中间子树包含介于两元素之间的元素.</p></li><li><p>并且2-3树中所有叶子都在同一层次上.</p></li></ol><p>2-3树的插入</p><p>2-3树的删除</p><h3 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h3><p>2-3树的概念扩展,包括了4结点的使用.一个4结点包含小中大三个元素和四个孩子(或者没有孩子).</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B树是一种平衡的多路查找树,2-3树和2-3-4树都是B树的特例.<br>结点最大的孩子数目称为B树的阶.<br>2-3树是3阶B树,2-3-4树是4阶B树.</p><p>A B-tree of order m is a tree which satisfies the following properties:</p><pre><code>Every node has at most m children.Every non-leaf node (except root) has at least ⌈m/2⌉ children.The root has at least two children if it is not a leaf node.A non-leaf node with k children contains k−1 keys.All leaves appear in the same level</code></pre><p>一棵m阶的B树满足以下条件<br>1.每个结点至多有m棵子树<br>2.除根结点外,其他分支结点至少有ceil(m/2)棵子树(ceil()函数向上取整<br>3.根结点至少有两棵子树,除非树只包含一个结点<br>4.有k个孩子的非叶结点有k-1个关键码,关键码按递增次序排列<br>5.所有叶子结点在同一层</p><h4 id="B树如何做到减少访问外存次数"><a href="#B树如何做到减少访问外存次数" class="headerlink" title="B树如何做到减少访问外存次数"></a>B树如何做到减少访问外存次数</h4><p>硬盘将信息分割成相等大小的页面,每次硬盘读写都是一个或者多个完整的页面,对一个硬盘来说,一页的长度可能是211到214字节.</p><p>在一个典型的B树应用中,要处理的硬盘数据量很大,因此无法一次全部装入内存,因此需要对B树进行调整,使得B树的阶树与硬盘存储的页面大小相匹配.在有限内存的情况下,每一次磁盘的访问我们都可以获得最大量的数据,由于B树每节点可以具有比二叉树多得多的元素,所以减少了必须访问结点和数据块的数量,提高了性能.<br>B树的数据结构就是为内外存的数据交互准备的.</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和BFS等文件系统都在使用B+树作为元数据索引。</p><p>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。</p><p>一棵m阶的B+树与B树的区别在于:</p><ol><li>有n棵子树的结点包含有n个关键字</li><li>所有的叶子节点包含全部的关键字信息,以及指向含这些关键字记录的指针,叶子节点本身依关键字的大小自小而大顺序链接</li><li>所有分支结点可以看成是索引,结点中仅含有其子树的最大(最小)关键字.</li></ol><p>好处:<br>如果要随机查找,就从根节点出发,与B树的查找方式相同,只不过即使在分支结点找到了待查找的关键字,它也只是用来索引的,不能提供实际记录的访问,还是需要到达包含此关键字的终端结点.</p><p>如果需要从最小关键字进行自小而大的顺序查找,可以从最左端的叶子结点出发,不经过分支结点,而是沿着指向下一叶子的指针就可遍历所有的关键字.</p><p>B+树适合有范围的查找(比如年龄18–22),从根节点出发找到18,再在叶子结点中按顺序找到符合要求的记录.</p><p>B+树的插入/删除与B树类似,只不过插入删除的元素都是在叶子结点上进行.</p><h2 id="散列表查找"><a href="#散列表查找" class="headerlink" title="散列表查找"></a>散列表查找</h2><p>存储位置 = f(关键字)</p><p>记录的存储位置和它的关键字之间建立的一个确定的对应关系.每个关键字key对应一个存储位置f(key),查找时根据这个确定的对应关系找到给定key的映射f(key).</p><p>f称为散列函数,又称哈希函数,采用散列技术将记录存储在一块连续的存储空间中,这块连续的存储空间称为散列表或哈希表,关键字对应的记录存储位置称为散列地址.</p><p>冲突:key1不等于key2,但是f(key1)=f(key2),key1和key2称为散列函数的同义词.</p><h3 id="常用的散列函数"><a href="#常用的散列函数" class="headerlink" title="常用的散列函数"></a>常用的散列函数</h3><h4 id="1-直接定址法"><a href="#1-直接定址法" class="headerlink" title="1.直接定址法"></a>1.直接定址法</h4><pre><code>f(key) = a * key + b  (a,b为常数)</code></pre><ul><li>优点:简单均匀,不会产生冲突,但需要事先知道关键字的分布情况,适合查找表较小且连续的情况.</li></ul><h4 id="2-数字分析法"><a href="#2-数字分析法" class="headerlink" title="2.数字分析法"></a>2.数字分析法</h4><p>手机号码等,对数字进行抽取,反转,左环位移,右环位移等方式合理地将关键字分配到散列表的各位置.</p><ul><li>适合处理关键字位数比较大的情况,如果事先知道关键字的分布且关键字的若干位分布均匀,可以使用.</li></ul><h4 id="3-平方取中法"><a href="#3-平方取中法" class="headerlink" title="3.平方取中法"></a>3.平方取中法</h4><p>关键字1234—-&gt;平方后:1522756—–&gt;抽取中间的3位——&gt;227,用作散列地址.</p><ul><li>适合不知道关键字的分布,而位数又不是很大的情况</li></ul><h4 id="4-折叠法"><a href="#4-折叠法" class="headerlink" title="4.折叠法"></a>4.折叠法</h4><p>从左到右分割成位数相等的几部分,叠加求和,按照散列表长,取后几位作为散列地址.</p><p>9876543210—–&gt;987  654  321 0—–&gt;求和987+654+321+0=1962,求后三位:962</p><ul><li>适合不需要事先知道关键字的分布.适合关键字位数较多的情况.</li></ul><h4 id="5-除留余数法"><a href="#5-除留余数法" class="headerlink" title="5.除留余数法"></a>5.除留余数法</h4><p>最常用,散列表长为m的公式:</p><pre><code>f(key) = key mod p (p&lt;=m)</code></pre><ul><li>若散列表表长m,通常p为小于或者等于表长的最小质数或不包含小于20质因子的合数.</li></ul><h4 id="6-随机数法"><a href="#6-随机数法" class="headerlink" title="6.随机数法"></a>6.随机数法</h4><pre><code>f(key) = random(key)</code></pre><ul><li>当关键字的长度不等时,采用这个方法.</li></ul><h3 id="常用的处理冲突方法"><a href="#常用的处理冲突方法" class="headerlink" title="常用的处理冲突方法"></a>常用的处理冲突方法</h3><h4 id="1-开放定址法"><a href="#1-开放定址法" class="headerlink" title="1.开放定址法"></a>1.开放定址法</h4><p>线性探测法</p><pre><code>f(key) = (f(key) + d) mod m  (d = 1,2,3...)</code></pre><p>二次探测法</p><pre><code>f(key) = (f(key) + d) mod m  (d = 1^2,-1^2,2^2,-2^2,3^2,-3^2...q^2,-q^2,其中q&lt;=m/2)</code></pre><p>随机探测法</p><pre><code>f(key) = (f(key) + d) mod m  (d 是一个随机数列)</code></pre><h4 id="2-再散列函数法"><a href="#2-再散列函数法" class="headerlink" title="2.再散列函数法"></a>2.再散列函数法</h4><pre><code>f(key) = RH(key)</code></pre><p>每次发生散列冲突时,就换一个散列函数计算.</p><h4 id="3-链地址法"><a href="#3-链地址法" class="headerlink" title="3.链地址法"></a>3.链地址法</h4><p>提供绝不会找不到地址的保障,但是带来查找时需要遍历单链表的性能损耗.</p><h4 id="4-公共溢出区法"><a href="#4-公共溢出区法" class="headerlink" title="4.公共溢出区法"></a>4.公共溢出区法</h4><p>增添溢出表.<br>对给定值通过散列函数计算出散列地址后,先与基本表的相应位置进行比对,如果相等,成功,否则,到溢出表中进行<strong>顺序查找</strong>.    </p><blockquote><p>参考并致谢<br><a href="https://www.zhihu.com/question/19809666/answer/88158084" target="_blank" rel="noopener">知乎 灰杉树</a><br><a href="http://haiyangxu.github.io/posts/2014/2014-05-05-binary_search_tree.html" target="_blank" rel="noopener">HAIYANG XU</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6530142/" target="_blank" rel="noopener">v_JULY_v</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt; 关于查找算法。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="http://blog.chenyalun.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>读《Objective-C高级编程》</title>
    <link href="http://blog.chenyalun.com/2017/04/13/%E8%AF%BB%E3%80%8AObjective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B/"/>
    <id>http://blog.chenyalun.com/2017/04/13/读《Objective-C高级编程》/</id>
    <published>2017-04-13T13:05:17.000Z</published>
    <updated>2019-08-21T07:52:08.584Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2019.08.21 删除IMP调用示例、删除block中的一些误解</p></blockquote><p align="center"> 关于ARC/Block/GCD。 </p><a id="more"></a><h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>寒假里就大致看了一遍，但是吸收的不完全。这两三天又赶紧从图书馆借来翻一翻，还是收获满满。这里记下一些比较好玩的问题。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="一-为什么苹果主要采用散列表管理引用计数"><a href="#一-为什么苹果主要采用散列表管理引用计数" class="headerlink" title="一.为什么苹果主要采用散列表管理引用计数"></a>一.为什么苹果主要采用散列表管理引用计数</h2><p><strong>GNUstep将引用计数保存在对象占用内存块头部的变量中。</strong><br>优点：</p><ol><li>只需少量代码。</li><li>能统一管理引用计数用内存块与对象用内存块。</li></ol><p><strong>苹果采用散列表（引用计数表，DenseMap 类实现）管理引用计数。</strong><br>优点：</p><ol><li>对象用内存块的分配无需考虑内存块头部。</li><li>引用计数表记录中存有内存块地址，可追溯各对象的内存块。有助于检测对象的持有者是否存在，可检测内存泄漏。</li></ol><p>注：如果设备是 64 位环境并且使用 Objective-C 2.0，那么“一些”对象会使用其 <code>isa</code> 指针的一部分空间来存储它的引用计数。</p><p><strong>苹果为什么不采用垃圾回收（GC）？</strong></p><p>苹果曾在OS X 10.5 尝试使用，不过在 10.7 的时候把 GC 换成了 ARC。GC 有个问题让苹果不能忍：垃圾回收的时候，整个程序需要暂停，英文把这个过程叫做：Stop the World。所有的对象都需要一起回收时，造成用户体验不好。</p><p><strong>ARC相对于GC所具有的优点：</strong></p><ol><li><p>ARC工作在编译期，在运行时没有额外开销（ARC是编译器把retain、release等方法插入到代码中的，所以说是工作在编译期）。</p></li><li><p>ARC的内存回收是平稳进行的，对象不被使用时会立即被回收。而GC的内存回收是一阵一阵的，回收时需要暂停程序，会有一定的卡顿。</p></li></ol><p><strong>ARC相对于GC所具有的缺点：</strong></p><ol><li>需要额外的空间来记录引用数，对象关系发生变化时需要经常修改引用数。</li><li>不能处理循环引用问题。</li></ol><p><strong>简单介绍GC的原理</strong></p><blockquote><p>基于事实：大部分的对象的生命期都很短。</p><p>GC 将内存中的对象主要分成两个区域：Young 区和 Old 区。<br>对象先在 Young 区被创建，然后如果经过一段时间还存活着，则被移动到Old 区。（其实还有一Perm区，但是内存回收算法通常不涉及这个区域）。</p></blockquote><blockquote><p>Young区的对象因为大部分生命期都很短，每次回收之后只有少部分能够存活，所以采用的算法叫Copying算法，简单说来就是直接把活着的对象复制到另一个地方。Young 区内部又分成了三块区域：Eden区，From区，To区。每次执行 Copying 算法时，即将存活的对象从 Eden 区和 From 区复制到To区，然后交换 From 区和To区的名字（即From 区变成 To 区，To区变成From区）。</p></blockquote><blockquote><p>Old区的回收算法叫 Mark-Sweep 算法。简单来说，就是只是把不用的对象先标记（Mark）出来，然后回收（Sweep），活着的对象就不动它了。因为大部分对象都活着，所以回收下来的对象并不多。但是这个算法会有一个问题：它会产生内存碎片，所以它一般还会带有整理内存碎片的逻辑，在算法中叫做 Compact。</p></blockquote><blockquote><p>–参考自<a href="http://hongchaozhang.github.io/blog/2015/08/14/ARC-and-Memory-Leak/" target="_blank" rel="noopener">自动引用计数(ARC)和垃圾回收(GC)</a></p></blockquote><h2 id="二-如何提高Objective-C方法的速度"><a href="#二-如何提高Objective-C方法的速度" class="headerlink" title="二.如何提高Objective-C方法的速度"></a>二.如何提高Objective-C方法的速度</h2><p>采用IMP Caching。一般而言速度是其他方法的两倍。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> autorelease_class = [<span class="built_in">NSAutoreleasePool</span> <span class="keyword">class</span>];</span><br><span class="line">SEL autorelease_sel = <span class="keyword">@selector</span>(addObject:);</span><br><span class="line">IMP autorelease_imp = [autorelease_class methodForSelector:autorelease_sel];</span><br><span class="line">    </span><br><span class="line">- (<span class="keyword">id</span>) autorelease &#123;</span><br><span class="line">   (*autorelease_imp)(autorelease_class,autorelease_sel,<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">- (<span class="keyword">id</span>)autorelease &#123;</span><br><span class="line">   [<span class="built_in">NSAutoreleasePool</span> addObject:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：以上是书中的示例代码，实际上在ARC时代已经不需要调用<code>autorelease</code>方法了。作者是想告诉我们，可以直接通过函数指针IMP调用相关方法，绕过消息发送。比如：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定需要多次调用某个实例方法</span></span><br><span class="line">- (<span class="keyword">void</span>)showWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"my name is %@"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正常情况下这样调用</span></span><br><span class="line">[<span class="keyword">self</span> showWithName:<span class="string">@"Ya"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以通过IMP直接调用</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">id</span>(*_IMP) (<span class="keyword">id</span>, SEL, ...);</span><br><span class="line">SEL sel = <span class="keyword">@selector</span>(showWithName:);</span><br><span class="line">_IMP imp = (_IMP)[<span class="keyword">self</span> methodForSelector:sel];</span><br><span class="line">imp(<span class="keyword">self</span>, sel, <span class="string">@"Ya"</span>);</span><br></pre></td></tr></table></figure><p>如果要调用类方法，传入类对象即可：<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"> _IMP imp = (_IMP)[<span class="keyword">self</span>.<span class="keyword">class</span> <span class="symbol">methodForSelector:</span>sel];</span><br><span class="line">imp(<span class="keyword">self</span>.<span class="keyword">class</span>, sel, @<span class="string">"Ya"</span>);</span><br></pre></td></tr></table></figure></p><p>IMP默认是无参数，无返回值类型，且自带<code>_cmd</code>和<code>selector</code>。如果要使用带参数或者带返回值的IMP可以重新定义一个“IMP”：<code>_IMP</code>：<code>typedef id (*_IMP)(id, SEL,...);</code>或者关闭Xcode中的编译选项。<br><img src="http://static.chenyalun.com/2017/04/13/20170413001.png" alt></p><h2 id="三-非显式使用-autoreleasing的场景有哪些"><a href="#三-非显式使用-autoreleasing的场景有哪些" class="headerlink" title="三.非显式使用__autoreleasing的场景有哪些"></a>三.非显式使用__autoreleasing的场景有哪些</h2><p><strong>场景一:@autoreleasepool。</strong></p><p>编译器会检查<code>@autoreleasepool</code>块中的方法，如果<strong>不是</strong>以<code>alloc/new/copy/mutableCopy</code>开头，则自动把方法返回值的对象注册到autoreleasepool中。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">   <span class="built_in">NSObject</span>  *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">   <span class="comment">// ==&gt;NSObject __strong *object = [[NSObject alloc] init];</span></span><br><span class="line">   </span><br><span class="line">   <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> array];</span><br><span class="line">   <span class="comment">// ==&gt;NSArray __autoreleasing  *array = [NSArray array]; </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景二:方法的返回值。</strong></p><p>没有显式指定所有权修饰符，所以默认为<code>__strong</code>。由于return使得变量array超出作用域，强引用对应持有的对象会释放。但是该对象作为方法的返回值，编译器自动将其注册到自动释放池中，延缓释放(否则如果立即释放，那返回值就没有意义了)。</p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">array</span> &#123;</span><br><span class="line">    NSArray *<span class="keyword">array</span> = [NSArray <span class="keyword">array</span>];</span><br><span class="line">    // ==&gt;NSArray __strong *<span class="keyword">array</span> = [NSArray <span class="keyword">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>场景三:<code>__weak</code>修饰的变量。</strong><br><code>__weak</code>修饰的变量会被自动注册到自动释放池中。由于<code>__weak</code>不持有对象的强引用，在访问该对象的时候，该对象有可能已经释放，但是要保证能访问到该对象，所以把它注册到自动释放池中，确保<code>@autoreleasepool</code>块结束之前该对象存在。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> object;</span><br></pre></td></tr></table></figure><p><strong>场景四:指向对象的指针的指针。</strong><br>指向对象的指针默认<code>__strong</code>修饰。指向对象的指针的指针默认<code>__autoreleasing</code>修饰。</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">NSObject *o<span class="comment">;</span></span><br><span class="line">// ==&gt;NSObject __strong *o<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">NSObject **o<span class="comment">;</span></span><br><span class="line">// ==&gt;NSObject* __autoreleasing *o<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>为什么要使用指向对象的指针的指针?</strong><br>通常是回传值。<br>在C函数中，无法返回多个值，借助指针可以回传值。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求两个数的和 积</span></span><br><span class="line"><span class="built_in">NSInteger</span> sum(<span class="built_in">NSInteger</span> a, <span class="built_in">NSInteger</span> b, <span class="built_in">NSInteger</span> *product) &#123;</span><br><span class="line">    <span class="comment">// 计算乘积</span></span><br><span class="line">    *product = a * b;</span><br><span class="line">    <span class="comment">// 返回求和</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">NSInteger</span> a = <span class="number">3</span>, b = <span class="number">32</span>, summation, product;</span><br><span class="line">summation = sum(a,b,&amp;product);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%ld--%ld"</span>,summation,product);</span><br></pre></td></tr></table></figure><p>在Objective-C中常用于NSError对象。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"这里是URL"</span>];</span><br><span class="line">[<span class="built_in">NSString</span> stringWithContentsOfURL:url encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</span><br></pre></td></tr></table></figure><p><code>stringWithContentsOfURL:encoding:error:</code>方法返回字符串，但是在获取字符串的时候可能发生错误，于是传入指向NSError对象的指针的指针，用于回传值(error是指向对象的指针，*error是该对象，&amp;error是指向对象的指针的指针)。</p><p>赋给对象指针时，变量所有权修饰符必须保持一致，否则会出错。修饰error的是<code>__strong</code>，而这里要求传入的指针的类型是<code>__autoreleasing</code>：<code>(NSError * _Nullable __autoreleasing * _Nullable)</code>，修饰符不一致，不符合规则，但是编译器做了转换。</p><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">// 转换所有权修饰符</span><br><span class="line">NSError *error = nil;</span><br><span class="line">NSError __autoreleasing *tmp = error;</span><br><span class="line">BOOL result = [obj performOperationWithError:&amp;tmp];</span><br><span class="line"><span class="keyword">error </span>= tmp;</span><br></pre></td></tr></table></figure><p><strong>可是为什么要使用__autoreleasing呢?</strong></p><p>实际上不注册到自动释放池也能传(返回)值，就像C函数中的回传乘积值一样。但是这样做不符合内存管理规则，只有作为<code>alloc/new/copy/mutableCopy</code> 开头的方法，能够自己生成并持有。也即其他方法的返回值取得对象(就像场景二中的返回值取得对象一样)需要注册到自动释放池。</p><p>如这种不符合内存管理规则的代码:</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="type">CFGetRetainCount</span>(<span class="class"><span class="keyword">object</span>) <span class="title">!=</span> 1) </span>&#123;</span><br><span class="line">   <span class="type">CFRelease</span>(<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (_objc_rootRetainCount(<span class="class"><span class="keyword">object</span>) <span class="title">!=</span> 1) </span>&#123;</span><br><span class="line">   _objc_rootRelease(<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-内存泄漏的场景有哪些"><a href="#四-内存泄漏的场景有哪些" class="headerlink" title="四.内存泄漏的场景有哪些"></a>四.内存泄漏的场景有哪些</h2><h4 id="1-Core-Fundation的类型转换"><a href="#1-Core-Fundation的类型转换" class="headerlink" title="1. Core Fundation的类型转换"></a>1. Core Fundation的类型转换</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CFMutableArrayRef <span class="built_in">array</span> = CFArrayCreateMutable(kCFAllocatorDefault, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 引用计数为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line">    </span><br><span class="line">id obj = (__bridge id)<span class="built_in">array</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 引用计数为2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 不要使用_objc_rootRetainCount(),很不准很不准很不准</span></span><br><span class="line"><span class="comment">//NSLog(@"%d",_objc_rootRetainCount(fontRef));</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果不使用CFRelease()就会造成内存泄漏</span></span><br><span class="line">CFRelease(<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure><p>主要原因是获取到CF对象后没有对其引用计数做出合适的处理。</p><h4 id="2-使用calloc函数创建动态数组"><a href="#2-使用calloc函数创建动态数组" class="headerlink" title="2. 使用calloc函数创建动态数组"></a>2. 使用calloc函数创建动态数组</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明动态数组</span></span><br><span class="line"><span class="comment">// 默认为__autoreleasing修饰,需显式指明为__strong</span></span><br><span class="line">id __strong *<span class="built_in">array</span> = nil;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用calloc分配内存</span></span><br><span class="line"><span class="built_in">array</span> = (id __strong *)<span class="built_in">calloc</span>(<span class="number">10</span>, <span class="keyword">sizeof</span>(id));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = @<span class="string">"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单释放内存,造成内存泄漏</span></span><br><span class="line"><span class="comment">// 实际上对象array[0]还存在</span></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">array</span>);</span><br></pre></td></tr></table></figure><p>正确做法:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明动态数组</span></span><br><span class="line"><span class="comment">// 默认为__autoreleasing修饰,需显式指明为__strong</span></span><br><span class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> *array = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明容量</span></span><br><span class="line"><span class="built_in">NSInteger</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用calloc分配内存</span></span><br><span class="line">array = (<span class="keyword">id</span> __<span class="keyword">strong</span> *)calloc(num, <span class="keyword">sizeof</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="string">@"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>;i &lt; num; i ++)&#123;</span><br><span class="line">    array[i] = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line">free(array);</span><br></pre></td></tr></table></figure><p>注意:<br>1.不要使用<code>malloc</code>函数分配内存，<code>malloc</code>函数分配内存区域没有被初始化为0，可能产生随机访问导致错误，所以还需要使用<code>memset()</code>函数将内存填充为0。</p><p>2.对于NSMutableSet/NSMutableArray/NSMutableDictionary等容器，不需要人为手动管理。</p><h4 id="3-MRC下的匿名对象"><a href="#3-MRC下的匿名对象" class="headerlink" title="3. MRC下的匿名对象"></a>3. MRC下的匿名对象</h4><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[[<span class="name">NSObject</span> alloc] init]<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>匿名对象在MRC下会造成内存泄漏(C++中的匿名对象创建完毕后立即调用析构函数做销毁处理)。</p><p>但是在ARC环境下，不会造成内存泄漏。</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">id temp = objc_msgSend(<span class="name">NSObject</span>, @selector(<span class="name">alloc</span>))<span class="comment">;</span></span><br><span class="line">objc_msgSend(<span class="name">temp</span>,@selector(<span class="name">init</span>))<span class="comment">;</span></span><br><span class="line">objc_release(<span class="name">temp</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>创建完毕立即销毁，这也解释了为什么使用<code>__weak</code>修饰将要创建的对象会有警告。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> * __<span class="keyword">weak</span> object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> object = [[<span class="built_in">NSObject</span> alloc] init];</span><br></pre></td></tr></table></figure><p>警告：Assigning retained object to weak variable; object will be released after assignment。</p><h4 id="4-block的循环引用"><a href="#4-block的循环引用" class="headerlink" title="4. block的循环引用"></a>4. block的循环引用</h4><p>block作为类实例的成员变量，block内部又强引用着类实例。</p><figure class="highlight capnproto"><table><tr><td class="code"><pre><span class="line">@<span class="class"><span class="keyword">interface</span> <span class="title">YAUser</span> () </span>&#123;</span><br><span class="line">    block _block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, <span class="keyword">self</span>);</span><br><span class="line">    &#125;; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五-weak如何实现"><a href="#五-weak如何实现" class="headerlink" title="五.__weak如何实现"></a>五.__weak如何实现</h2><p><code>weak</code> 表的作用是在对象执行 <code>dealloc</code> 的时候将所有指向该对象的 <code>weak</code> 指针的值设为 <code>nil</code>，避免悬空指针。苹果使用一个全局的 <code>weak</code> 表来保存所有的 <code>weak</code> 引用。并<strong>将对象作为键，<code>weak_entry_t</code> 作为值。<code>weak_entry_t</code> 中保存了所有指向该对象的 <code>weak</code> 指针</strong>。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weak_table_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">weak_entry_t</span> *weak_entries;</span><br><span class="line">    <span class="keyword">size_t</span>    num_entries;</span><br><span class="line">    <span class="keyword">uintptr_t</span> mask;</span><br><span class="line">    <span class="keyword">uintptr_t</span> max_hash_displacement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="六-Core-Fundation-与-Foundation如何转换"><a href="#六-Core-Fundation-与-Foundation如何转换" class="headerlink" title="六.Core Fundation 与 Foundation如何转换"></a>六.Core Fundation 与 Foundation如何转换</h2><p>1.<strong>__bridge</strong><br>只做类型转换，不修改相关对象的引用计数，原来的 Core Foundation 对象在不用时，需要调用 CFRelease 方法。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CFMutableArrayRef <span class="built_in">array</span> = CFArrayCreateMutable(kCFAllocatorDefault, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj强引用该对象(默认为__strong)</span></span><br><span class="line">id obj = (__bridge id)<span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用CFRelease()就会造成内存泄漏</span></span><br><span class="line">CFRelease(<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure><p><img src="http://static.chenyalun.com/2017/04/13/20170413002.png" alt></p><p>2.<strong>__bridge_transfer</strong><br>常用在CF对象转化成OC对象时，将CF对象的所有权交给OC对象，此时ARC就能自动管理该内存，作用同<code>CFBridgingRelease()</code>。</p><figure class="highlight smali"><table><tr><td class="code"><pre><span class="line">CFMutableArrayRef<span class="built_in"> array </span>= CFArrayCreateMutable(kCFAllocatorDefault, 0, NU<span class="class">LL);</span></span><br><span class="line">    </span><br><span class="line">// 引用计数为1</span><br><span class="line">printf(<span class="string">"%ld\n"</span>,CFGetRetainCount(array));</span><br><span class="line">    </span><br><span class="line">// obj持有对象 array放弃持有对象,相当于做了CFRelease()    </span><br><span class="line">id obj = (__bridge_transfer  id)array;</span><br></pre></td></tr></table></figure><p>3.<strong>__bridge_retained</strong><br>与<code>__bridge_transfer</code> 相反，常用在将OC对象转化成CF对象，且OC对象的所有权也交给CF对象来管理，即OC对象转化成CF对象时，涉及到对象类型和对象所有权的转化，作用同<code>CFBridgingRetain()</code>。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *obj = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMutableArrayRef</span> array2 = (__bridge_retained <span class="built_in">CFMutableArrayRef</span>)obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为2,obj持有对象,array2也持有对象</span></span><br><span class="line">printf(<span class="string">"%ld\n"</span>,<span class="built_in">CFGetRetainCount</span>(array2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用完毕,手动release,否则内存泄漏</span></span><br><span class="line"><span class="built_in">CFRelease</span>((array2));</span><br></pre></td></tr></table></figure><h2 id="七-简单介绍block"><a href="#七-简单介绍block" class="headerlink" title="七.简单介绍block"></a>七.简单介绍block</h2><p>block是能持有作用域变量的匿名函数，本质上是Objective-C对象。<br>语法格式:<code>^ 返回值类型 参数列表 表达式</code>，其中返回值类型可省略，无参数时参数列表可省略。<br>声明block与声明函数指针类似，执行block与调用函数类似。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回值类型 (*f) 参数类型</span></span><br><span class="line"><span class="keyword">int</span> (*f)(<span class="keyword">int</span>) = &amp;<span class="function"><span class="keyword">func</span>;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">// 声明<span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">int</span> <span class="params">(^blk)</span><span class="params">(<span class="keyword">int</span>)</span>;</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">// 赋值</span></span><br><span class="line"><span class="function"><span class="title">int</span> <span class="params">(^blk2)</span><span class="params">(<span class="keyword">int</span>)</span> = ^<span class="params">(<span class="keyword">int</span> a)</span></span>&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 起别名</span></span><br><span class="line">typedef <span class="keyword">int</span> (^block) (<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure><h3 id="block的三种类型"><a href="#block的三种类型" class="headerlink" title="block的三种类型"></a>block的三种类型</h3><ol><li>如果block没有访问外部的局部变量，或者访问的局部变量被static修饰，block存储在静态区，是<code>NSConcreteGlobalBlock</code>。</li><li>其他情况下，语法生成的block存放在栈中，是<code>NSConcreteStackBlock</code>。</li><li>当把栈中的block复制到堆上时，是<code>NSConcreteMallocBlock</code>。</li></ol><h3 id="block复制到堆上的情况"><a href="#block复制到堆上的情况" class="headerlink" title="block复制到堆上的情况"></a>block复制到堆上的情况</h3><p>大部分情况下编译器会将创建在栈上的 block 自动拷贝到堆上，只有当 block 作为方法或函数的<strong>参数</strong>传递时，编译器不会自动调用 <code>copy</code> 方法。也就是说，<strong>当方法或者函数中block作为参数传递，而这个block不被作为成员变量赋值，我们需要手动调用copy方法</strong>。</p><p>编译器或者方法内部已经实现copy代码的情况:</p><ol><li>block作为函数返回值。</li><li>赋值给 <code>__strong id</code> 类型的对象或 block 的成员变量。</li><li>Cocoa框架方法名含有usingBlock。</li><li>GCD中的API。</li></ol><p>其他情况需要手动复制。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 程序异常:栈上的block被废弃 </span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^block) (<span class="keyword">void</span>);</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">id</span>)getBlockArray &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects:</span><br><span class="line">            ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125;,</span><br><span class="line">            ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125;, <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    block b = [<span class="keyword">self</span> getBlockArray][<span class="number">0</span>];</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动将block 复制到堆上:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^block) (<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)getBlockArray &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects:</span><br><span class="line">            [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">            [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125; <span class="keyword">copy</span>], <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    block b = [<span class="keyword">self</span> getBlockArray][<span class="number">0</span>];</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="block捕获变量"><a href="#block捕获变量" class="headerlink" title="block捕获变量"></a>block捕获变量</h3><p><strong>1.对于实例变量、静态全局变量、静态局部变量，全局变量，无论其为基本类型还是对象类型，在block中可读可写。</strong></p><p>定义在函数内部的变量称为局部变量（Local Variable）。在所有函数外部定义的变量称为全局变量（Global Variable），它的作用域默认是整个程序，也就是所有的源文件。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> globalAge = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *globalName = <span class="string">@"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="built_in">NSInteger</span> age = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态局部变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSInteger</span> staticAge = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *staticName = <span class="string">@"Bob"</span>;</span><br><span class="line"></span><br><span class="line">    YAUser *user = [[YAUser alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> (^func)() = ^() &#123;</span><br><span class="line">        <span class="comment">// 修改实例变量</span></span><br><span class="line">        user.age = <span class="number">18</span>;</span><br><span class="line">        user.name = <span class="string">@"Jack"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,user.age);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,user.name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改静态局部变量</span></span><br><span class="line">        staticAge = <span class="number">22</span>;</span><br><span class="line">        staticName = <span class="string">@"Lucy"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,staticAge);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,staticName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改静态全局变量</span></span><br><span class="line">        globalAge = <span class="number">14</span>;</span><br><span class="line">        globalName = <span class="string">@"Allen"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,globalAge);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,globalName);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,user.age);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,user.name);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,staticAge);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,staticName);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,globalAge);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,globalName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p><strong>2.对于局部变量，无论其是基本类型还是对象类型，在block中为只读，当使用<code>__block</code>修饰时，变量可读可写。<code>__block</code>修饰的对象类型变量，在ARC环境下，block对其强引用。在非ARC环境下，block不会对其retain。</strong></p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">     __block <span class="built_in">NSInteger</span> age = <span class="number">17</span>;</span><br><span class="line">     __block <span class="built_in">NSString</span> *name = <span class="string">@"Bob"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (^func)() = ^() &#123;</span><br><span class="line">        <span class="comment">// 修改局部变量</span></span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        name = <span class="string">@"Jack"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,age);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,name);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改局部变量</span></span><br><span class="line">    age = <span class="number">22</span>;</span><br><span class="line">    name = <span class="string">@"Aaren"</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,age);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="block的循环引用"><a href="#block的循环引用" class="headerlink" title="block的循环引用"></a>block的循环引用</h3><p>Capturing ‘self’ strongly in this block is likely to lead to a retain cycle.</p><p>.h文件</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAUser </span>: NSObject</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) NSObject *object;</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">func</span>;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure><p>.m文件</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^block) ();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAUser</span> () </span>&#123;</span><br><span class="line">    block _block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAUser</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, <span class="keyword">self</span>.object);</span><br><span class="line">    &#125;;</span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>由于block赋值给了成员变量，所以在栈上生成的block被复制到堆上。而block强引用了self的成员变量object，实际上是持有了self，self持有block的同时block持有self，于是self和block循环引用。</p><p><img src="http://static.chenyalun.com/2017/04/13/20170413003.png" alt></p><h4 id="解决方案一：采用-weak修饰。"><a href="#解决方案一：采用-weak修饰。" class="headerlink" title="解决方案一：采用__weak修饰。"></a>解决方案一：采用<code>__weak</code>修饰。</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明了一个self类型的weak指针，名字叫做weakSelf.</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, weakSelf.object);</span><br><span class="line">    &#125;;</span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改一方的强引用为弱引用打破了循环引用。但是有瑕疵：block内部可能捕获到空值。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="comment">// 现在立即使用weakSelf.object</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, weakSelf.object);</span><br><span class="line">        <span class="comment">// 需要异步执行,但是却无法保证weakSelf.object一定存在   </span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakSelf.object);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用block</span></span><br><span class="line">    _block();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自以为block调用完毕,不再需要self.object的值了,大胆地将self.object改为其他值</span></span><br><span class="line">    <span class="keyword">self</span>.object = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种情况就造成block内部正在使用持有变量的时候，变量的值却意外地改变了，甚至为nil，极易引发问题。<br>最佳方案：弱引用加强引用</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="comment">// __strong可以不加,默认为__strong,但最好加上,更醒目</span></span><br><span class="line">        __<span class="keyword">strong</span> <span class="built_in">NSObject</span> *strongObject = weakSelf.object;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最好加上判断,保证strongObject不为空</span></span><br><span class="line">        <span class="keyword">if</span> (strongObject) &#123;</span><br><span class="line">            <span class="comment">// 现在立即使用weakSelf.object</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strongObject);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 需要异步执行,可以保证weakSelf.object的值不改变</span></span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strongObject);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用block</span></span><br><span class="line">    _block();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放心地将self.object改为其他值</span></span><br><span class="line">    <span class="keyword">self</span>.object = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这么做可以保证在block执行期间持有的变量不改变。但如果在block执行之前该变量已经为nil，那回天乏力。</p><p><strong>评价:</strong><br>这种方式不会造成循环引用：block弱引用的方式持有<code>self.object</code>，即不会影响<code>self.object</code>的释放。在block中是通过<strong>局部变量</strong>强引用<code>self.object</code>，作用域结束，局部变量销毁，不再强引用，从此你我是路人。</p><p><strong>注意事项:</strong><br>1.除了使用typeof()之外，还可以直接声明与self相同类型的变量，但依然需要使用<code>__weak</code>修饰。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> YAUser *weakSelf = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure><p>2.循环引用的本质是block强引用了self。但是如果以 以上代码为例：block持有了self的某个成员变量，且block在同一个作用域内得到调用，完全可以通过以下方式解决（非主流方式，大多数情况下不可能在block中只使用一个成员变量，一个脑洞而已，实际开发不要这么做）。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="built_in">NSObject</span> *weakObject = <span class="keyword">self</span>.object;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, weakObject);</span><br><span class="line">    &#125;;</span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用场景:</strong><br>不需要对block中持有的变量进行写入操作，也即仅仅读取变量。当block异步使用持有的变量时，注意弱引用+强引用配合使用。建议统一采用 <code>typeof(self) + 弱引用 + 强引用的形式</code>。</p><h4 id="解决方案二：采用-block修饰。"><a href="#解决方案二：采用-block修饰。" class="headerlink" title="解决方案二：采用__block修饰。"></a>解决方案二：采用<code>__block</code>修饰。</h4><p>产生循环引用的代码:</p><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>func &#123;</span><br><span class="line">    // 循环引用</span><br><span class="line">    _block = ^<span class="params">()</span> &#123;</span><br><span class="line">        NSLog<span class="params">(@<span class="string">"%p"</span>, self)</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- <span class="params">(void)</span>execBlock &#123;</span><br><span class="line">    _block<span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决循环引用:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决循环引用</span></span><br><span class="line">    __block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>, tmp);</span><br><span class="line">        <span class="comment">// 关键所在</span></span><br><span class="line">        tmp = <span class="literal">nil</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>评价:</strong><br><code>__block</code>本身不能解决循环引用，关键在于 在block中将<code>__block</code>修饰的变量置为空。当需要对持有的变量进行写入操作时可以使用。</p><p><strong>注意事项:</strong><br><strong>block必须执行</strong>，否则仍然不会解决循环引用。如下面代码:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    <span class="comment">// 解决循环引用</span></span><br><span class="line">    __block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,tmp);</span><br><span class="line">        tmp = <span class="literal">nil</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">    <span class="comment">// block没有执行,仍然不能解决循环引用</span></span><br><span class="line">    <span class="comment">// _block();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么block没有执行就无法解决循环引用呢?</strong><br>在block中出现tmp变量的那刻起(tmp变量即self)，block就已经持有了self，即产生了循环引用，如：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">_block</span> = ^() &#123;tmp;&#125;;</span><br></pre></td></tr></table></figure><p>而只有通过执行block才能把nil赋给tmp，才能打破循环引用。因此，执行block的目的是把nil赋予tmp，而把nil赋予tmp便能解决循环引用的原因是打破了block对self的强引用。</p><h2 id="八-简要介绍GCD常用API"><a href="#八-简要介绍GCD常用API" class="headerlink" title="八.简要介绍GCD常用API"></a>八.简要介绍GCD常用API</h2><h3 id="1-dispatch-async与dispatch-sync"><a href="#1-dispatch-async与dispatch-sync" class="headerlink" title="1.dispatch_async与dispatch_sync"></a>1.dispatch_async与dispatch_sync</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123; &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 同步执行</span></span><br><span class="line"><span class="selector-tag">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123; &#125;);</span><br></pre></td></tr></table></figure><h3 id="2-dispatch-queue-t"><a href="#2-dispatch-queue-t" class="headerlink" title="2.dispatch_queue_t"></a>2.dispatch_queue_t</h3><p>使用系统提供的queue</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主队列:串行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> mainQueue = dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue1 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue2 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue3 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue4 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>自己创建queue</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般指定这两种类型</span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_SERIAL</span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_CONCURRENT</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> createQueue = dispatch_queue_create(<span class="string">"com.chenyalun.gcd.createQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(createQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"  "</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If your deployment target is iOS 6.0 or Mac OS X 10.8 or later</span></span><br><span class="line"><span class="comment">//dispatch_release(createQueue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定创建的队列与globalQueue享有同一优先级</span></span><br><span class="line"><span class="comment">// 不可指定系统的队列</span></span><br><span class="line">dispatch_set_target_queue(createQueue, globalQueue);</span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>现在适配的版本一般大于iOS6，因此不必也不能对自己创建的queue进行dispatch_release，不需要担心内存泄漏。</li><li>自己创建的队列严格按照格式来，尤其是作为第一个参数的queue的名称：”com.chenyalun.gcd.createQueue”</li><li>第二个参数设置为<code>NULL</code>，则为串行队列。specify DISPATCH_QUEUE_SERIAL (or NULL) to create a serial queue or specify DISPATCH_QUEUE_CONCURRENT to create a concurrent queue. In earlier versions, you must specify NULL for this parameter.</li></ol><h3 id="3-dispatch-resume-dispatch-suspend"><a href="#3-dispatch-resume-dispatch-suspend" class="headerlink" title="3.dispatch_resume/dispatch_suspend"></a>3.dispatch_resume/dispatch_suspend</h3><p>队列的挂起与恢复</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"队列中的打印"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 挂起</span></span><br><span class="line">dispatch_suspend(globalQueue);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"主线程的打印"</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 恢复执行</span></span><br><span class="line">dispatch_resume(globalQueue);</span><br></pre></td></tr></table></figure><h3 id="4-dispatch-apply"><a href="#4-dispatch-apply" class="headerlink" title="4.dispatch_apply"></a>4.dispatch_apply</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">// 指定迭代的次数</span><br><span class="line">NSArray <span class="symbol">*</span>array = <span class="meta">@[</span><span class="meta">@1,</span> <span class="meta">@2,</span> <span class="meta">@3,</span> <span class="meta">@4,</span> <span class="meta">@5,</span> <span class="meta">@6,</span> <span class="meta">@7];</span></span><br><span class="line">dispatch_apply(array.count, globalQueue, ^(size_t index) &#123;</span><br><span class="line">   NSLog(<span class="meta">@"%</span><span class="meta">@",</span> [array objectAtIndex:index]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-dispatch-group"><a href="#5-dispatch-group" class="headerlink" title="5.dispatch_group"></a>5.dispatch_group</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">dispatch_group_t <span class="keyword">group</span> = dispatch_group_create();</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务一"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务二"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务三"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">// 保证以上三个任务执行完毕再执行下面的任务</span><br><span class="line">dispatch_group_notify(<span class="keyword">group</span>, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务一、二、三都已完成"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">dispatch_group_t <span class="keyword">group</span> = dispatch_group_create();</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务一"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务二"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">   NSLog(@<span class="string">"任务三"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 保证以上三个任务执行完毕再执行下面的任务</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_NOW 不等待</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_FOREVER 永久等待</span></span><br><span class="line">NSInteger result = dispatch_group_wait(<span class="keyword">group</span>, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">   <span class="comment">// group中的任务全部执行完毕</span></span><br><span class="line">   NSLog(@<span class="string">"group中的任务全部执行完毕"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 任务没有执行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-dispatch-barrier"><a href="#6-dispatch-barrier" class="headerlink" title="6.dispatch_barrier"></a>6.dispatch_barrier</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第一个任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第二个任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 栅栏函数</span></span><br><span class="line">dispatch_barrier_async(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"----------------------"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第三个任务。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第四个任务"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="7-dispatch-once"><a href="#7-dispatch-once" class="headerlink" title="7.dispatch_once"></a>7.dispatch_once</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typedef long dispatch_once_t;</span></span><br><span class="line"><span class="comment">// static long onceToken;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"仅仅执行一次"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="8-dispatch-after"><a href="#8-dispatch-after" class="headerlink" title="8.dispatch_after"></a>8.dispatch_after</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t)(<span class="number">3</span>.<span class="number">0</span> * NSEC_PER_SEC)), <span class="keyword">dispatch_get_main_queue(), </span>^&#123;</span><br><span class="line">    NSLog(@<span class="string">"把要执行的任务追加到主队列中"</span>)<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>指定3秒之后把要执行的任务追加到主队列中。最早3.0秒后执行，最迟3+1/60秒后执行，若主线程有延迟，时间会更长。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// DISPATCH_TIME_NOW</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_FOREVER</span></span><br><span class="line"><span class="comment">// 时间的单位为毫微秒</span></span><br><span class="line"><span class="keyword">dispatch_time_t</span> time = dispatch_time(DISPATCH_TIME_FOREVER, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure><h3 id="7-dispatch-semaphore"><a href="#7-dispatch-semaphore" class="headerlink" title="7.dispatch_semaphore"></a>7.dispatch_semaphore</h3><p>更细粒度的排他控制<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置信号量为1,也即保证同时访问的数量为1</span></span><br><span class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">NSMutableArray *<span class="built_in">array</span> = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代添加对象</span></span><br><span class="line">dispatch_apply(<span class="number">100</span>, globalQueue, ^(<span class="keyword">size_t</span> index) &#123;</span><br><span class="line">    <span class="comment">// 将要添加元素前一直等待信号量为1</span></span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放心地给数组添加元素</span></span><br><span class="line">    [<span class="built_in">array</span> addObject:[NSNumber numberWithInt:(<span class="keyword">int</span>)index]];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加完成后释放信号量</span></span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2019.08.21 删除IMP调用示例、删除block中的一些误解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt; 关于ARC/Block/GCD。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>读《SQL必知必会》</title>
    <link href="http://blog.chenyalun.com/2017/04/09/%E8%AF%BB%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/"/>
    <id>http://blog.chenyalun.com/2017/04/09/读《SQL必知必会》/</id>
    <published>2017-04-09T09:28:14.000Z</published>
    <updated>2019-08-21T03:38:40.442Z</updated>
    
    <content type="html"><![CDATA[<p align="center"> 关于SQLite数据库。 </p><a id="more"></a><p>采用 SQLite 数据库。<br>所有命令都敲了一遍，没毛病。</p><h1 id="一、提要"><a href="#一、提要" class="headerlink" title="一、提要"></a>一、提要</h1><h2 id="1-语言"><a href="#1-语言" class="headerlink" title="1.语言"></a>1.语言</h2><ol><li><p>数据定义语言<br>CREATE 创建表/视图/其他对象<br>ALTER 修改对象<br>DROP 删除表/视图/其他对象</p></li><li><p>数据操纵语言<br>SELECT 检索数据<br>INSERT 创建记录<br>UPDATE 修改记录<br>DELETE 删除记录</p></li><li><p>数据控制语言<br>GRANT 赋予用户特权<br>REVOKE 收回用户特权</p></li></ol><h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h2><p>表：某种特定类型数据的结构化清单<br>字段：限定数据中的列(名)<br>记录：水平排列的数据的实体<br>列：表中的一个字段<br>模式：数据库和表的布局及特性<br>NULL值：表中以空白形式出现的值，表示没有设值<br>主键值：不重复，不为空，不能修改，不能重用</p><h2 id="3-类型"><a href="#3-类型" class="headerlink" title="3.类型"></a>3.类型</h2><p>SQLite无类型，在表声明中明确了字段类型，仍然可以在该字段中存储其它类型的数据。</p><p>NULL：表示该值为NULL值。<br>INTEGER： 无符号整型值。<br>REAL：浮点值。<br>TEXT：文本字符串，存储使用的编码方式为UTF-8、UTF-16BE、UTF-16LE。<br>BLOB：存储Blob数据，该类型数据和输入数据完全相同。<br>布尔数据类型：SQLite并没有提供专门的布尔存储类型，取而代之的是存储整型1表示true，0表示false。<br>日期和时间数据类型：以TEXT、REAL和INTEGER类型分别不同的格式表示该类型，如：<br><figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">TEXT:</span> <span class="string">"YYYY-MM-DD HH:MM:SS.SSS"</span></span><br><span class="line"><span class="symbol">REAL:</span> 以Julian日期格式存储</span><br><span class="line"><span class="symbol">INTEGER:</span> 以Unix时间形式保存数据值，</span><br><span class="line">即从<span class="number">1970</span><span class="number">-01</span><span class="number">-01</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>到当前时间所流经的秒数。</span><br></pre></td></tr></table></figure></p><h2 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h2><ol><li>正行注释 <code># 注释内容</code></li><li>多行注释 <code>/* 注释内容  */</code></li><li>行尾注释 <code>--注释内容</code></li></ol><h2 id="5-提示"><a href="#5-提示" class="headerlink" title="5.提示"></a>5.提示</h2><ol><li>多条语句必须以分号分隔。</li><li>SQL语句不区分大小写。</li><li>空格会被忽略，可以写成多行。</li></ol><h2 id="6-约束"><a href="#6-约束" class="headerlink" title="6.约束"></a>6.约束</h2><ol><li><p>NOT NULL：非空约束，不能有NULL值。</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line">ID <span class="built_in">INTEGER</span> <span class="literal">NOT</span> <span class="built_in">NULL</span></span><br></pre></td></tr></table></figure></li><li><p>DEFAULT：默认值，数据未指定的默认值，如默认时间:<code>date(&#39;now&#39;)</code>。</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SALARY REAL<span class="built_in"> DEFAULT </span>5000.0</span><br><span class="line"> </span><br><span class="line">-- 删除默认约束</span><br><span class="line">-- 在SQLite中不可用</span><br><span class="line">ALTER TABLE t</span><br><span class="line">ALTER COLUMN SALARY DROP DEFAULT</span><br></pre></td></tr></table></figure></li><li><p>UNIQUE：唯一，列中所有数据各不相同。</p> <figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">AGE INTEGER UNIQUE</span></span><br></pre></td></tr></table></figure></li><li><p>主键：唯一标识数据表中的记录，不为空。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">PRIMARY KEY(ID,name)</span><br><span class="line">   </span><br><span class="line"><span class="comment">-- 增加主键(前提列已经声明为非空)</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure></li><li><p>外键：唯一标识其他表中的一条记录。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">FOREIGN KEY(name) REFERENCES q(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加外键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span> (C_ID) <span class="keyword">REFERENCES</span> <span class="keyword">USER</span> (<span class="keyword">ID</span>)</span><br><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure></li><li><p>CHECK：保证列中所有值满足某一条件。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">AGE INT NOT NULL <span class="keyword">CHECK</span>(AGE&lt;=<span class="number">18</span>)</span><br><span class="line">         </span><br><span class="line">增加<span class="keyword">CHECK</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">MODIFY</span> AGE <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">CHECK</span>(AGE&gt;=<span class="number">18</span>)</span><br><span class="line">或者</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> checkConstraint <span class="keyword">CHECK</span>(AGE&gt;=<span class="number">18</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 删除CHECK</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> checkConstraint</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-范式"><a href="#7-范式" class="headerlink" title="7.范式"></a>7.范式</h2><p>第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列，如”地址”可以细分为：”省，市”。</p><p>第二范式（2NF）：首先是 1NF，其次一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</p><p>第三范式（3NF）：首先是 2NF，其次非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p><h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h2><blockquote><p>传送门：<br><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/15/2322027.html" target="_blank" rel="noopener">http://www.cnblogs.com/stephen-liu74/archive/2012/02/15/2322027.html</a></p></blockquote><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理:"></a>字符串处理:</h3><p><code>UPPER()</code> ：大写转换<br><code>LENGTH()</code> ：字符串长度<br><code>LOWER()</code>：小写转换<br><code>LTRIM()</code> ：去掉字符串左边的空格<br><code>RTRIM()</code> ：去掉字符串右边的空格</p><h3 id="日期时间处理"><a href="#日期时间处理" class="headerlink" title="日期时间处理"></a>日期时间处理</h3><p><code>date(&#39;now&#39;)</code> 返回当前日期。</p><p><code>date(&#39;now&#39;,&#39;start of month&#39;,&#39;1 month&#39;,&#39;-1 day&#39;)</code>返回当前月的最后一天。</p><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p><code>ABS()</code> 绝对值<br><code>COS()</code> 角度的余弦<br><code>EXP()</code> 数的指数值<br><code>PI()</code> 返回圆周率<br><code>SIN()</code> 角度的正弦值<br><code>SQRT()</code> 平方根<br><code>TAN()</code> 角度的正切</p><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p><code>AVG()</code> 平均值，忽略<code>NULL</code>值。<br><code>COUNT()</code> 某列的行数，若指定列名则会忽略<code>NULL</code>值，而<code>COUNT(*)</code>对表中行的数目进行计数，无论是否为<code>NULL</code>都计数，<code>DISTINCT</code>不能用于<code>COUNT(*)</code>，如<code>COUNT(DISTINCT *)</code>为错误写法。</p><p><code>MAX()</code> 某列的最大值，忽略NULL值<br><code>MIN()</code> 某列的最小值，忽略NULL值<br><code>SUM()</code> 某列值的和，忽略NULL值</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>查看版本<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">select</span> <span class="title">sqlite_version</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></p><h2 id="9-视图"><a href="#9-视图" class="headerlink" title="9.视图"></a>9.视图</h2><p>视图只不过是通过相关的名称存储在数据库中的一个 SQLite 语句。视图实际上是一个以预定义的 SQLite 查询形式存在的表的组合。SQLite仅支持只读视图，所以视图可以创建，可以读，但其内容不能更改。</p><p>视图的作用:<br>视图是一种虚表，允许用户实现以下几点：</p><ul><li><p>用户或用户组查找结构数据的方式更自然或直观。</p></li><li><p>限制数据访问，用户只能看到有限的数据，而不是完整的表。</p></li><li><p>汇总各种表中的数据，用于生成报告。</p></li></ul><h2 id="10-事务"><a href="#10-事务" class="headerlink" title="10.事务"></a>10.事务</h2><p>事务是一个对数据库执行工作单元，是以逻辑顺序完成的工作单位或序列。事务是指一个或多个更改数据库的扩展。例如，如果正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。可以把许多的 SQLite 查询联合成一组，把所有这些放在一起作为事务的一部分进行执行。</p><p>事务具有以下四个标准属性，通常根据首字母缩写为 ACID：</p><ul><li><p>Atomicity（原子性）原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p>Consistency（一致性）一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。 </p></li><li><p>Isolation（隔离性）多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。</p></li><li><p>Durability（持久性）持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p></li></ul><p><strong>撤销</strong><br><code>ROLLBACK</code> 命令是用于撤消尚未保存到数据库的事务的事务命令。<br><code>ROLLBACK</code> 命令只能用于撤销自上次发出 <code>COMMIT</code> 或 <code>ROLLBACK</code> 命令以来的事务。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p><strong>提交</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">5</span>;</span><br><span class="line"><span class="comment">-- 要做的事</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">TRANSACTION</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 或者使用以下语法</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">ID</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><strong>注意：保存点在 SQLite (≥ 3.6.8)支持</strong><br>保留点越多越好。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SAVEPOINT</span> delRow;  </span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delRow;</span><br></pre></td></tr></table></figure></p><h2 id="11-索引"><a href="#11-索引" class="headerlink" title="11.索引"></a>11.索引</h2><p>索引是一种特殊的查找表，数据库搜索引擎用来加快数据检索，简单地说，<strong>索引是一个指向表中数据的指针</strong>。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">创建索引</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> in_name_age <span class="keyword">ON</span> t(<span class="keyword">name</span>, age);</span><br><span class="line">    </span><br><span class="line">删除索引</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> in_name;</span><br></pre></td></tr></table></figure></p><h2 id="12-顺序"><a href="#12-顺序" class="headerlink" title="12.顺序"></a>12.顺序</h2><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>返回列</td><td>是</td></tr><tr><td>FROM</td><td>检索的表</td><td>从表中选择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组</td><td>按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>输出排序</td><td>否</td></tr></tbody></table><p>妙记：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> kindID, COUNT<span class="comment">(*)</span></span><br><span class="line"><span class="comment">    FROM table</span></span><br><span class="line"><span class="comment">    WHERE PRICE &gt; 10</span></span><br><span class="line"><span class="comment">    GROUP BY kindID</span></span><br><span class="line"><span class="comment">    HAVING COUNT(*)</span> &gt;=<span class="number">2</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> kindID;</span><br></pre></td></tr></table></figure><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="1-SELECT"><a href="#1-SELECT" class="headerlink" title="1.SELECT"></a>1.SELECT</h2><p>检索单个列<br><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line">-- <span class="keyword">SELECT</span> 列名 <span class="keyword">FROM</span> 表名</span><br><span class="line">    <span class="keyword">SELECT</span> age <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><p>检索多个列<br><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="built_in">SELECT</span> <span class="built_in">name</span>, age, <span class="built_in">groupID</span> <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><p>检索所有列<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br><span class="line"><span class="comment">-- 检索不必要的列会降低检索和应用程序的性能</span></span><br></pre></td></tr></table></figure></p><p>检索并返回不同的值<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> t;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- DISTINCT作用于所有的列,如</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> groupID, age <span class="keyword">FROM</span> t;</span><br><span class="line"><span class="comment">-- 作用于groupID, age两列</span></span><br><span class="line"><span class="comment">-- 当groupID, age双双重复,只会返回一个结果</span></span><br></pre></td></tr></table></figure></p><p>限制结果<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 不超过5行</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">LIMIT</span> <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 从第10行开始检索,不超过7行</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">LIMIT</span> <span class="number">5</span> <span class="keyword">OFFSET</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure></p><ol><li>LIMIT限制返回的行数，OFFSET指定从哪开始。</li><li>行数指的是索引行，即从第0行开始。</li></ol><h2 id="2-ORDEY-BY"><a href="#2-ORDEY-BY" class="headerlink" title="2.ORDEY BY"></a>2.ORDEY BY</h2><p>ORDEY BY子句要保证放到最后。</p><p>单个列排序<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 以age值的字母顺序/大小排列</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">name</span> <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> age;</span><br></pre></td></tr></table></figure></p><p>多个列排序<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 首先按照age,在age中按照name</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> age, <span class="keyword">name</span>;</span><br></pre></td></tr></table></figure></p><p>按列位置排序<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 首先按照age,在age中按照name</span></span><br><span class="line"><span class="comment">-- 3对应age, 1对应ID</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span>, <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>按降序排序<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- DESC 只作用在它前面的列</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">3</span> <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">1</span> <span class="keyword">DESC</span>,<span class="number">3</span> <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p><h2 id="3-WHERE"><a href="#3-WHERE" class="headerlink" title="3.WHERE"></a>3.WHERE</h2><p>常用操作符:<br>一般：<code>=  !  =  &lt;  &gt;   &gt;=  &lt;=</code><br>介于之间：<code>BETWEEN AND</code><br>为空值：<code>IS NULL</code></p><p>一般使用<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age, <span class="keyword">name</span> <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">WHERE</span> age &lt; <span class="number">10</span>;</span><br><span class="line"><span class="comment">-- 单引号用来限定字符串</span></span><br><span class="line"><span class="comment">-- 将值与字符串类型的列比较需要限定引号</span></span><br><span class="line"><span class="comment">-- 将值与数值列进行比较不用引号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'张无忌'</span>;</span><br></pre></td></tr></table></figure></p><p>范围筛选<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">18</span> <span class="keyword">AND</span> <span class="number">22</span>;</span><br></pre></td></tr></table></figure></p><p>空值检查<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> sex <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure></p><h2 id="4-AND-OR"><a href="#4-AND-OR" class="headerlink" title="4.AND OR"></a>4.AND OR</h2><p>AND 优先级大于OR<br>组合使用注意加括号<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age = <span class="number">18</span> <span class="keyword">AND</span> <span class="keyword">name</span> = <span class="string">'唐僧'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age = <span class="number">18</span> <span class="keyword">OR</span> groupID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>组合使用<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> (age = <span class="number">18</span> <span class="keyword">OR</span> <span class="keyword">ID</span> &lt; <span class="number">12</span>) <span class="keyword">AND</span> groupID = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h2 id="5-IN"><a href="#5-IN" class="headerlink" title="5.IN"></a>5.IN</h2><p>关键字匹配</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 18,19岁</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age <span class="keyword">IN</span> (<span class="number">18</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure><h2 id="6-NOT"><a href="#6-NOT" class="headerlink" title="6.NOT"></a>6.NOT</h2><p>否定其后的限定条件</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">18</span>, <span class="number">19</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">NOT</span> age &lt; <span class="number">22</span>;</span><br></pre></td></tr></table></figure><h2 id="7-LIKE"><a href="#7-LIKE" class="headerlink" title="7.LIKE"></a>7.LIKE</h2><p><code>%</code> 通配符<br>表示任何字符出现任意次数，不会匹配NULL。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'张%'</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'%六'</span>;</span><br></pre></td></tr></table></figure><p><code>_</code>通配符<br>匹配单个字符，注意LIKE后的值使用字符串<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age <span class="keyword">LIKE</span> <span class="string">'2_'</span>;</span><br></pre></td></tr></table></figure></p><p><strong>注意:SQLite 不支持[] 通配符</strong><br><del>[] 通配符<br>指定一系列的字符,只要满足这些字符其中之一,且位置出现在“[]”通配符的位置的字符串就满足查询条件</del><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'[牛]%'</span>;</span><br><span class="line"><span class="comment">-- 否定</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>, <span class="keyword">name</span>, age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'[^牛]%'</span>;</span><br></pre></td></tr></table></figure></p><p>注意：少使用通配符，尽量不要把通配符置于开始处</p><h2 id="8-拼接"><a href="#8-拼接" class="headerlink" title="8.拼接"></a>8.拼接</h2><p>使用 || 拼接多个列<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age || <span class="string">'('</span> || <span class="keyword">name</span> || <span class="string">')'</span> <span class="keyword">FROM</span> t;</span><br><span class="line"><span class="comment">-- 结果: 23(牛魔王)</span></span><br></pre></td></tr></table></figure></p><p>使用RTRIM去除填充列宽的文本值<br><figure class="highlight ruleslanguage"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age || <span class="string">'('</span> || <span class="keyword">RTRIM</span>(name) || <span class="string">')'</span> <span class="keyword">FROM</span> t;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">RTRIM</span>() 去掉字符串右边的空格</span><br><span class="line"><span class="keyword">LTRIM</span>() 去掉字符串左边的空格</span><br><span class="line"><span class="keyword">TRIM</span>() 去掉字符串左右两边的空格</span><br></pre></td></tr></table></figure></p><p>使用别名AS<br>  要求得到的是一列<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age || <span class="string">'('</span> || <span class="keyword">RTRIM</span>(<span class="keyword">name</span>) || <span class="string">')'</span>  <span class="keyword">AS</span> Results <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><p>执行计算<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> age + <span class="number">3</span>, <span class="keyword">name</span>  <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><h2 id="9-GROUP-BY"><a href="#9-GROUP-BY" class="headerlink" title="9.GROUP BY"></a>9.GROUP BY</h2><p>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupID, COUNT<span class="comment">(*)  FROM t GROUP BY groupID;</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">含有COUNT(*)</span>的分组的结果不该包含每列独有的字段,如name,ID等,</span><br><span class="line">而应该是共性的字段,如分组ID等,因为目的是得知某组的COUNT</span><br><span class="line">*/</span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> t <span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br></pre></td></tr></table></figure></p><h2 id="10-HAVING"><a href="#10-HAVING" class="headerlink" title="10.HAVING"></a>10.HAVING</h2><p>1.WHERE过滤行，而HAVING过滤分组，HAVING支持所有WHERE操作符。<br>2.WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupID, COUNT<span class="comment">(*)  FROM t GROUP BY groupID HAVING COUNT(*)</span> &gt; <span class="number">5</span>;</span><br><span class="line">-- 筛选每组数量大于<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="11-ORDER-BY"><a href="#11-ORDER-BY" class="headerlink" title="11.ORDER BY"></a>11.ORDER BY</h2><p>排序<br>HAVING常与GROUP BY连用<br><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> groupID, COUNT<span class="comment">(*)  </span></span><br><span class="line"><span class="comment">FROM t </span></span><br><span class="line"><span class="comment">WHERE age &gt; 18  </span></span><br><span class="line"><span class="comment">GROUP BY groupID </span></span><br><span class="line"><span class="comment">HAVING COUNT(*)</span> &gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> groupID <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p><h2 id="12-子查询"><a href="#12-子查询" class="headerlink" title="12.子查询"></a>12.子查询</h2><p>在SELECT语句中，子查询总是从内向外处理。<br>作为子查询的SELECT语句只能查询单个列。企图检索多个列将返回错误。<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age </span><br><span class="line"><span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">WHERE</span> age <span class="keyword">IN</span> </span><br><span class="line">(<span class="keyword">SELECT</span> age <span class="keyword">FROM</span> t <span class="keyword">WHERE</span> age &gt; <span class="number">10</span> <span class="keyword">AND</span> sex <span class="keyword">IS</span> <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p><h2 id="13-连接"><a href="#13-连接" class="headerlink" title="13.连接"></a>13.连接</h2><p>内连接是据根据每个表共有的列的值匹配两个表中的行<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.name, age </span><br><span class="line"><span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> q </span><br><span class="line"><span class="keyword">ON</span> t.ID = q.ID;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">SELECT</span> t.name, t.age </span><br><span class="line"><span class="keyword">FROM</span> t, q </span><br><span class="line"><span class="keyword">WHERE</span> t.name = q.name; </span><br><span class="line"><span class="comment">-- 注意表的名称要匹配</span></span><br></pre></td></tr></table></figure></p><p>自连接，查询中需要的两个表实际上是相同的表<br><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.name, a.age </span><br><span class="line"><span class="keyword">FROM</span> t <span class="keyword">AS</span> a, t <span class="keyword">AS</span> b </span><br><span class="line"><span class="keyword">WHERE</span> a.name = b.name </span><br><span class="line"><span class="keyword">AND</span> b.ID = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></p><p>外连接<br>1.外连接可以是左向外连接、右向外连接或完整外部连接<br>2.在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表(RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表)。<br>3.左向外连接的结果集包括LEFT  OUTER子句中指定的左表的所有行，而不仅仅是连接列所匹配的行。<br>4.右向外连接是左向外连接的反向连接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。   </p><p>SQLite支持左外连接LEFT OUTER JOIN，但不支持RIGHT OUTER JOIN 和 FULL OUTER JOIN语法。</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> t.*, q.*  </span><br><span class="line"><span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">LEFt</span> <span class="keyword">JOIN</span> q </span><br><span class="line"><span class="keyword">ON</span> t.ID = q.ID;</span><br></pre></td></tr></table></figure><p>交叉连接。交叉连接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉连接也称作笛卡尔积。 </p><p>总结:<br>左外连接显示左表所有行+匹配行<br>右外连接显示右表所有行+匹配行<br>完整外部连接显示左表和右表中的所有行<br>内连接显示根据比较运算符匹配两个表中的行<br>自连接需要的两个表实际上是相同的表<br>交叉连接显示左表所有行+左表每一行与右表所有行的组合<br>连接不匹配时显示空值</p><h2 id="14-UNION"><a href="#14-UNION" class="headerlink" title="14.UNION"></a>14.UNION</h2><p>将结果组合成一个结果集<br>1.UNION中的每个查询必须包含相同的列、表达式或聚集函数<br>2.UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔<br>3.列数据类型必须兼容</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age </span><br><span class="line"><span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> <span class="keyword">LIKE</span> <span class="string">'张%'</span> </span><br><span class="line"><span class="keyword">UNION</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age </span><br><span class="line"><span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">WHERE</span> age &gt; <span class="number">22</span>;</span><br><span class="line"><span class="comment">-- 相当于 "并"在一起</span></span><br></pre></td></tr></table></figure><h2 id="15-INSERT"><a href="#15-INSERT" class="headerlink" title="15.INSERT"></a>15.INSERT</h2><p>插入记录<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">13</span>, </span><br><span class="line">    <span class="string">'白骨精'</span>, </span><br><span class="line">    <span class="string">'1543'</span>, </span><br><span class="line">    <span class="number">1</span>, </span><br><span class="line">    <span class="literal">NULL</span>, </span><br><span class="line">    <span class="number">19</span>, </span><br><span class="line">    <span class="number">1.68</span>);</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">t(<span class="keyword">ID</span>, <span class="keyword">name</span>, phone, groupID, sex, age, height) </span><br><span class="line"><span class="keyword">VALUES</span>(<span class="number">14</span>, <span class="string">'白龙马'</span>, <span class="string">'1323'</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">20</span>, <span class="number">1.69</span>);</span><br></pre></td></tr></table></figure></p><p>VALUES必须以其指定的次序匹配指定的列名，更推荐这种方式。<br>省略列：允许NULL或者有默认值</p><h2 id="16-CREATE-AS"><a href="#16-CREATE-AS" class="headerlink" title="16.CREATE AS"></a>16.CREATE AS</h2><p>复制表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> c <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><h2 id="17-UPDATE"><a href="#17-UPDATE" class="headerlink" title="17.UPDATE"></a>17.UPDATE</h2><p>更新行<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> t </span><br><span class="line"><span class="keyword">SET</span> height = <span class="number">1.66</span> </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'白龙马'</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">-- 删除某列的值</span></span><br><span class="line"><span class="keyword">UPDATE</span> t </span><br><span class="line"><span class="keyword">SET</span> height = <span class="literal">NULL</span>  </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'韦小宝'</span>;</span><br></pre></td></tr></table></figure></p><p>更新多列，注意逗号<br><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">UPDATE t </span><br><span class="line"><span class="keyword">SET</span> height <span class="comment">= 1.55,</span> </span><br><span class="line">phone <span class="comment">=</span> <span class="comment">'1888'</span><span class="comment">,</span> </span><br><span class="line">groupID <span class="comment">= 0</span>  </span><br><span class="line">WHERE <span class="comment">name =</span> <span class="comment">'唐僧'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="18-DELETE"><a href="#18-DELETE" class="headerlink" title="18.DELETE"></a>18.DELETE</h2><p>删除行<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> t </span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'白龙马'</span>;</span><br></pre></td></tr></table></figure></p><h2 id="19-CREATE"><a href="#19-CREATE" class="headerlink" title="19.CREATE"></a>19.CREATE</h2><p>创建表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> d</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INTEGER</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">UNIQUE</span>,</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">TEXT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">sex <span class="built_in">INTEGER</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">height <span class="built_in">REAL</span> <span class="keyword">CHECK</span>(height &gt; <span class="number">0</span>),</span><br><span class="line">   </span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="string">'ID'</span>)</span><br><span class="line">FOREIGN <span class="keyword">KEY</span>(<span class="keyword">name</span>) <span class="keyword">REFERENCES</span> q(<span class="keyword">name</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>主键单独标明。</p><h2 id="20-ALTER"><a href="#20-ALTER" class="headerlink" title="20.ALTER"></a>20.ALTER</h2><p>给表增加一列</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> b</span><br><span class="line"><span class="keyword">ADD</span> place <span class="built_in">TEXT</span>;</span><br></pre></td></tr></table></figure><p>重命名表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> b</span><br><span class="line"><span class="keyword">RENAME</span> <span class="keyword">TO</span> bbb;</span><br></pre></td></tr></table></figure><p>在 SQLite 中，除了重命名表和在已有的表中添加列，ALTER TABLE 命令不支持其他操作,包括删除列,定义主键和外键等.</p><p>SQLite不支持删除列</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t </span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> vend_phone;</span><br></pre></td></tr></table></figure><h2 id="21-DROP"><a href="#21-DROP" class="headerlink" title="21.DROP"></a>21.DROP</h2><p>删除表<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> t;</span><br></pre></td></tr></table></figure></p><h2 id="22-视图"><a href="#22-视图" class="headerlink" title="22.视图"></a>22.视图</h2><p>创建视图<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_b </span><br><span class="line"><span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">name</span>, age <span class="keyword">FROM</span> t;</span><br></pre></td></tr></table></figure></p><p>查看视图</p><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_b;</span><br></pre></td></tr></table></figure><p>删除视图<br><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> view_b;</span><br></pre></td></tr></table></figure></p><blockquote><p>参考感谢：<br><a href="http://zhiwei.li/text/2010/08/23/sqlite%E5%A4%96%E9%94%AE/" target="_blank" rel="noopener">SQLite外键</a><br><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/22/2325258.html" target="_blank" rel="noopener">SQLite学习手册</a><br><a href="http://www.runoob.com/sqlite/sqlite-syntax.html" target="_blank" rel="noopener">SQLite 语法</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt; 关于SQLite数据库。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
      <category term="数据库" scheme="http://blog.chenyalun.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>读《Effective Objective-C 2.0》</title>
    <link href="http://blog.chenyalun.com/2017/04/05/%E8%AF%BB%E3%80%8AEffective%20Objective-C%202.0%E3%80%8B/"/>
    <id>http://blog.chenyalun.com/2017/04/05/读《Effective Objective-C 2.0》/</id>
    <published>2017-04-05T04:02:17.000Z</published>
    <updated>2019-08-21T02:45:35.399Z</updated>
    
    <content type="html"><![CDATA[<p align="center"> 许多小技巧。 </p><a id="more"></a><h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>一晚上加一早上时间读了一遍，很多技巧都屡有耳闻，不过还是收获许多。这里记录一些比较好玩的问题。</p><h1 id="钩玄"><a href="#钩玄" class="headerlink" title="钩玄"></a>钩玄</h1><ol><li>尽可能在<code>.h</code>文件中使用<code>@class</code>声明类，<code>.m</code>文件中使用<code>import</code>导入其他头文件，而不是只在<code>.h</code>文件中<code>import</code>头文件。</li><li>常量使用<code>static const</code>，其他情况(如<code>[NSNotificationCenter defaultCenter]</code>)使用宏。</li><li>不需要位或运算的枚举使用<code>NS_ENUM</code>，需要使用位或运算的枚举使用<code>NS_OPTIONS</code>，避免C语言中的<code>enum</code>。</li><li><code>switch</code>状态机下避免<code>default</code>分支(确保switch正确处理已知情况，往后增加新的的枚举值会有警告)。</li></ol><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-属性声明为-dynamic后该怎么做"><a href="#1-属性声明为-dynamic后该怎么做" class="headerlink" title="1.属性声明为@dynamic后该怎么做"></a>1.属性声明为@dynamic后该怎么做</h2><p>手动添加<code>getter</code>和<code>setter</code>实现不表。在运行时添加属性的存取方法的方式如下：</p><p><code>.h</code>文件暴露属性：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br></pre></td></tr></table></figure><p><code>.m</code>文件动态添加方法：</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAHeader</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAHeader</span></span></span><br><span class="line"><span class="keyword">@dynamic</span> name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加set方法,要传入参数</span></span><br><span class="line"><span class="keyword">void</span> dynamicSetMethodIMP(YAHeader *<span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *prame) &#123;</span><br><span class="line">    <span class="keyword">self</span>-&gt;_name = prame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加get方法,要返回NSString *类型</span></span><br><span class="line"><span class="built_in">NSString</span> *dynamicGetMethodIMP(YAHeader *<span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>-&gt;_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(setName:)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)dynamicSetMethodIMP, <span class="string">"v@:@"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(name)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)dynamicGetMethodIMP, <span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>注意:</p><ol><li>按照本书所说，使用<code>@dynamic</code>将仅仅生成<code>getter/setter</code>方法的声明，不会生成<code>getter/setter</code>方法的实现，也不会合成成员变量。</li><li>由于没有合成成员变量，所以需要手动添加。</li><li>使用<code>@property</code>但是却没有合成成员变量的情景有：<ul><li>同时使用<code>@property</code>和<code>@dynamic</code>；</li><li><code>setter</code>和<code>getter</code>方法均手动实现；</li><li>分类中的<code>@property</code>；</li></ul></li></ol><p>值得一提的是，当使用<code>@synthesize num;</code>时，将不会生成成员变量<code>_num</code>，而是生成成员变量<code>num</code>。<br>简单总结就是，很久以前：</p><ol><li><code>@property</code>会在<code>@interface</code>中生成<code>getter</code>和<code>setter</code>的方法声明；</li><li><code>@synthesize</code><strong>一般</strong>会在<code>@implementation</code>中生成<code>getter</code>和<code>setter</code>的方法实现及私有的成员变量。<ul><li><code>@synthesize num = _num;</code>，意味着当成员变量 <code>_num</code> 不存在时，自动生成一个 <code>@private</code>的成员变量 <code>_num</code>；</li><li><code>@synthesize num;</code>，意味着当成员变量 <code>num</code> 不存在时，自动生成一个 <code>@private</code>的成员变量 <code>num</code>；</li><li>若手动实现 <code>setter</code> 方法，则只会自动生成 <code>getter</code> 方法；</li><li>若手动实现 <code>getter</code> 方法，则只会自动生成 <code>setter</code> 方法；</li><li>若同时手动实现 <code>setter</code> 和 <code>getter</code> 方法，则<strong>不会自动生成不存在的成员变量</strong>。</li></ul></li></ol><p>而现在，<code>@property</code>包揽了<code>@synthesize</code>的功能，默认生成<code>_</code>开头的成员变量。</p><h2 id="2-关联对象中为什么使用static修饰的指针"><a href="#2-关联对象中为什么使用static修饰的指针" class="headerlink" title="2.关联对象中为什么使用static修饰的指针"></a>2.关联对象中为什么使用static修饰的指针</h2><p><code>static</code>的作用之一便是使变量在内存中只有一份拷贝，由于需要<code>objc_setAssociatedObject</code>和<code>objc_getAssociatedObject</code>中的两个键(<code>void *key</code>)需要匹配同一个值(关联的对象)，所以需要两者是完全相同的指针，故而使用静态全局变量做键。</p><h2 id="3-简述Objective-C在发送消息时的动态性"><a href="#3-简述Objective-C在发送消息时的动态性" class="headerlink" title="3.简述Objective-C在发送消息时的动态性"></a>3.简述Objective-C在发送消息时的动态性</h2><p>静态绑定：将在运行期间调用的函数在编译期间已经确定；<br>动态绑定：发送的消息部分转化为<code>objc_msgSend</code>函数，传入将要调用函数的对象、将要调用的函数以及将要调用的函数的参数，具体调用哪个函数，通过快速映射表、方法列表亦或是消息转发确定；<br><code>objc_msgSend_stret</code>：消息返回结构体调用<br><code>objc_msgSend_fpret</code>：消息返回浮点数调用<br><code>objc_msgSendSuper</code>：给超类发送消息调用</p><h2 id="4-如何解决unrecognized-selector-send-to-instance"><a href="#4-如何解决unrecognized-selector-send-to-instance" class="headerlink" title="4.如何解决unrecognized selector send to instance"></a>4.如何解决unrecognized selector send to instance</h2><p>作者这里主要指的是在消息转发阶段处理，而不是简单地添加上方法实现。</p><p><strong>消息转发的三个流程：</strong></p><ol><li><p>对象收到无法识别的消息，根据是类方法还是对象方法调用<code>+ (BOOL)resolveInstanceMethod:(SEL)selector</code>或者<code>+ (BOOL)resolveClassMethod:(SEL)selector</code>。<br>前提：相关方法的实现代码已经写好。<br>使用：根据类方法还是对象方法，在<code>resolveMethod</code>中为无法响应的<code>selector</code>动态添加方法实现(提供函数指针<code>IMP</code>)</p> <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">class_addMethod(<span class="name">self</span>, selector, (<span class="name">IMP</span>)methodImplemention,<span class="string">"v@:@"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p> 若没有做出处理，返回<code>NO</code>。</p></li><li><p>倘若没有相关方法实现，进入<code>- (id)forwardingTargetForSelector:(SEL)selector</code>，将消息转发给其他对象，若找不到，返回<code>nil</code>。</p></li><li><p>完整的消息转发，调用对象方法<code>- (void)forwardInvocation:(NSInvocation *)invocation</code>。首先发送<code>-methodSignatureForSelector:</code>获取函数的参数和返回值类型，若返回<code>nil</code>，直接挂掉，否则<code>runtime</code>创建一个<code>NSInvocation</code>对象，发送<code>forwardInvocation</code>消息给目标对象。</p></li></ol><h2 id="5-如何实现多重继承"><a href="#5-如何实现多重继承" class="headerlink" title="5.如何实现多重继承"></a>5.如何实现多重继承</h2><p>让C类产生的对象同时具备A类方法和B类方法的能力：</p><ol><li>C类继承自A类。</li><li>使C类对象中拥有B类对象(<strong>组合</strong>)，在C类对象中实现对象方法<code>forwardingTargetForSelect:</code>方法，将发送来的关于B类方法转发给所拥有的B类对象处理。</li></ol><h2 id="6-怎么实现方法实现的交换"><a href="#6-怎么实现方法实现的交换" class="headerlink" title="6.怎么实现方法实现的交换"></a>6.怎么实现方法实现的交换</h2><p>一般在<code>load</code>方法中实现交换。<br><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">lowercaseString</span> =</span> class_getInstanceMethod([NSString <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">lowercaseString</span>));</span></span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">uppercaseString</span> =</span> class_getInstanceMethod([NSString <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">uppercaseString</span>));</span></span><br><span class="line">    method_exchangeImplementations(lowercaseString, uppercaseString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>表面上看是死循环:</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)lowercaseString &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.lowercaseString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)uppercaseString &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.uppercaseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上直接交换的示例仅限于不需要调用<code>super</code>的实现，更详细见<a href="https://blog.chenyalun.com/2019/04/25/读「FDFullscreenPopGesture」/#五、再谈Method-Swizzling">《再谈Method-Swizzling》</a>。</p><h2 id="7-简述为代码加锁的方式"><a href="#7-简述为代码加锁的方式" class="headerlink" title="7.简述为代码加锁的方式"></a>7.简述为代码加锁的方式</h2><p>同步块:</p><pre><code>@synchronized(self) {//...}</code></pre><p>滥用<code>@synchronized(self)</code>很危险，所有的块都会彼此抢夺同一个锁。</p><p>锁对象:<br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">_lock</span> = [[<span class="symbol">NSLock</span> alloc] init];</span><br><span class="line"></span><br><span class="line">[<span class="symbol">_lock</span> lock];</span><br><span class="line">// ...</span><br><span class="line">[<span class="symbol">_lock</span> unlock];</span><br></pre></td></tr></table></figure></p><h2 id="8-原子性一定安全吗，如何确保属性的线程安全"><a href="#8-原子性一定安全吗，如何确保属性的线程安全" class="headerlink" title="8.原子性一定安全吗，如何确保属性的线程安全"></a>8.原子性一定安全吗，如何确保属性的线程安全</h2><p>不一定。<br>原子性能保证存取方法的线程安全，也即读或者写操作是原子性的，在读或者写发生的时候，其他读或者写操作必须等待。<br>然而同一个线程上多次调用<code>get</code>方法，每一次获取到的值未必相同，多次访问期间，其他线程可能会写入新的值。比如当A线程的写操作结束后，B线程进行写操作，然后当A线程需要读操作时，却获得了在B线程中的值，这就破坏了线程安全。</p><p>线程安全：<strong>不会出现数据不一致或者数据污染，也即多线程访问时没有出现意料之外的结果</strong>。</p><p>比如使用<code>atomic</code>修饰的<code>age</code>属性：<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YACat </span>: NSObject</span><br><span class="line"><span class="variable">@property</span> (atomic, assign) NSUInteger age;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p><p>在使用时：<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">// thread A</span><br><span class="line">dispatch_async(<span class="name">dispatch_queue_create</span>(<span class="string">"A"</span>, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">   for (<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 1000; i ++) &#123;</span></span><br><span class="line">       gCat.age = gCat.age + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">       NSLog(@<span class="string">"Thread A: %ld\n"</span>, gCat.age)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">// thread B</span><br><span class="line">dispatch_async(<span class="name">dispatch_queue_create</span>(<span class="string">"B"</span>, DISPATCH_QUEUE_CONCURRENT), ^&#123;</span><br><span class="line">   for (<span class="name">int</span> i = <span class="number">0</span><span class="comment">; i &lt; 1000; i ++) &#123;</span></span><br><span class="line">       gCat.age = gCat.age + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">       NSLog(@<span class="string">"Thread B: %ld\n"</span>, gCat.age)<span class="comment">;</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>结果并不一定是1000，出现的结果不符合预期。原因在于，<code>gCat.age = gCat.age + 1;</code>这个读、加一、写的整体操作并不是线程安全的。这时，可以通过加锁来保证线程安全：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[_Lock <span class="keyword">lock</span>];</span><br><span class="line">gCat.age = gCat.age + 1;</span><br><span class="line">[_Lock <span class="keyword">unlock</span>];</span><br></pre></td></tr></table></figure></p><h2 id="9-performSelector的局限性有哪些"><a href="#9-performSelector的局限性有哪些" class="headerlink" title="9.performSelector的局限性有哪些"></a>9.performSelector的局限性有哪些</h2><ol><li>由于无法确定将要执行的<code>selector</code>具体是什么，ARC无法将其纳入合适的内存管理方法中，可能有内存泄漏。</li><li><code>selector</code>的返回值类型和参数个数、类型受到限制。建议使用GCD中的<code>dispatch_async/dispatch_after</code>等代替相应的<code>performSelector</code>。</li></ol><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">- (void)fetchSelector:(NSInteger)condition &#123;</span><br><span class="line">    <span class="keyword">SEL </span><span class="keyword">selector;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (condition == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">selector </span>= <span class="comment">@selector(dismiss);</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span> (condition == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">selector </span>= <span class="comment">@selector(miss:);</span></span><br><span class="line">    &#125; <span class="meta">else</span> &#123;</span><br><span class="line">         <span class="keyword">selector </span>= <span class="comment">@selector(love);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self </span>performSelector:<span class="keyword">selector];</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>会出现警告：<code>/Users/chenyalun/Desktop/iOS/program/Demo170404/Demo170404/YAHeader.m:70:11: PerformSelector may cause a leak because its selector is unknown</code>。</p><p>更多<code>performSelector</code>内容见<a href="https://blog.chenyalun.com/2018/09/30/详解performSelector/">《详解performSelector》</a>。</p><h2 id="10-bridge、-bridge-retained与-bridge-transfer的区别"><a href="#10-bridge、-bridge-retained与-bridge-transfer的区别" class="headerlink" title="10.__bridge、__bridge_retained与__bridge_transfer的区别"></a>10.<code>__bridge</code>、<code>__bridge_retained</code>与<code>__bridge_transfer</code>的区别</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[@<span class="number">10</span>, @<span class="number">11</span>, @<span class="number">12</span>];</span><br><span class="line"><span class="built_in">CFArrayRef</span> cfarray = (__bridge <span class="built_in">CFArrayRef</span>)array;</span><br><span class="line">    </span><br><span class="line"><span class="built_in">CFArrayRef</span> cfarray2 = (__bridge_retained <span class="built_in">CFArrayRef</span>)array;</span><br><span class="line"><span class="built_in">CFRelease</span>(cfarray2);</span><br><span class="line">    </span><br><span class="line"><span class="built_in">NSArray</span> *array2 = (__bridge_transfer <span class="built_in">NSArray</span> *)cfarray;</span><br></pre></td></tr></table></figure><p><code>__bridge</code>：表示ARC仍然具备该对象的所有权。</p><p><code>__bridge_retained</code>：表示ARC交出该对象的所有权(需手动<code>release</code>)。</p><p><code>__bridge_transfer</code>：表示反向转换，同时ARC获取对象所有权。</p><h2 id="11-NSCache相较NSDictionary的优点"><a href="#11-NSCache相较NSDictionary的优点" class="headerlink" title="11.NSCache相较NSDictionary的优点"></a>11.NSCache相较NSDictionary的优点</h2><ol><li>在系统发出低内存通知时，NSCache自动删减缓存，并且先行删减最久未使用的对象。</li><li>增加键的引用计数而不是拷贝它。</li><li><code>NSCache</code>线程安全，可以多线程访问而不出错。</li><li><code>NSPurgeableData</code>是<code>NSMutableData</code>的子类，将它与<code>NSCache</code>搭配使用，当<code>NSPurgeableData</code>对象所占内存为系统所丢弃时，该对象自动从<code>NSCache</code>缓存中清除。</li></ol><p><code>NSPurgeableData</code>使用示例：</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSCache *cache = [[NSCache alloc] init];</span><br><span class="line">    </span><br><span class="line">NSPurgeableData *purgeableData = [NSPurgeableData <span class="string">dataWithBytes:</span>@<span class="string">"ILOVEYOU"</span> <span class="string">length:</span><span class="number">10</span>];</span><br><span class="line">[cache <span class="string">setObject:</span>purgeableData <span class="string">forKey:</span>@<span class="number">00</span>];</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问NSPurgeableData</span></span><br><span class="line"><span class="keyword">if</span> (purgeableData) &#123;</span><br><span class="line">   <span class="comment">// 开始访问,现在还不应该丢弃自己所占用的内存</span></span><br><span class="line">   [purgeableData beginContentAccess];</span><br><span class="line">   </span><br><span class="line">   [self <span class="string">useData:</span>purgeableData];</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 结束访问,现在可以丢弃自己所占用的内存啦</span></span><br><span class="line">   [purgeableData endContentAccess];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考并感谢：<br><a href="http://blog.csdn.net/chenyufeng1991/article/details/49687215" target="_blank" rel="noopener">乞力马扎罗的雪的博客</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p align=&quot;center&quot;&gt; 许多小技巧。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS开发" scheme="http://blog.chenyalun.com/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
      <category term="阅读" scheme="http://blog.chenyalun.com/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>从C++到汇编</title>
    <link href="http://blog.chenyalun.com/2017/04/02/%E4%BB%8EC++%E5%88%B0%E6%B1%87%E7%BC%96/"/>
    <id>http://blog.chenyalun.com/2017/04/02/从C++到汇编/</id>
    <published>2017-04-02T03:22:17.000Z</published>
    <updated>2019-09-12T06:49:27.336Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2019.08.18 补充汇编内容</p></blockquote><p align="center"> C++和汇编。 </p><a id="more"></a><p>本文主要是复习C++时的笔记，主要是语法方面的内容。为加深理解，部分语法尝试使用汇编窥测其实现。</p><h1 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>作用：防止出现变量或函数的命名冲突。</p><h3 id="定义及使用"><a href="#定义及使用" class="headerlink" title="定义及使用"></a>定义及使用</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">namespace</span> YA &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">// 变量、类、函数、typedef、#define 等都可以出现在命名空间中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式一:域解析操作符</span></span><br><span class="line"><span class="comment">// :是域解析操作符,指明要使用的命名空间</span></span><br><span class="line">YA :: a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式二:针对变量</span></span><br><span class="line"><span class="comment">// 如果以后出现了未指明命名空间的a，就使用YA :: a</span></span><br><span class="line"><span class="keyword">using</span> YA :: a;</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式三:针对命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YA; <span class="comment">// 声明整个命名空间</span></span><br></pre></td></tr></table></figure><h3 id="系统的命名空间"><a href="#系统的命名空间" class="headerlink" title="系统的命名空间"></a>系统的命名空间</h3><p>对于不带<code>.h</code>的头文件，所有的符号都位于命名空间 <code>std</code> 中，使用时需要声明命名空间<code>std</code>；<br>对于带<code>.h</code>的头文件，没有使用任何命名空间，所有符号都位于全局作用域。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><h3 id="全局命名空间"><a href="#全局命名空间" class="headerlink" title="全局命名空间"></a>全局命名空间</h3><p>在 <code>main()</code> 函数中声明命名空间 <code>std</code>，它的作用范围就位于 <code>main()</code> 函数内部，如果在其他函数中又用到了 <code>std</code>，就需要重新声明。如果希望在所有函数中都使用命名空间 <code>std</code>，可以将它声明在全局范围中。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> YA &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"YA"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"YA"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> YA;</span><br><span class="line">    ::func();</span><br><span class="line">    YA::func();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p>在C++（.cpp）文件中编译C语言（.c）的函数，出现编译不过，需要用到<code>extern &quot;C&quot;</code>。被 <code>extern &quot;C&quot;</code> 修饰的代码，按照C语言的方式编译。可以放在函数声明前面，也可以使用大括号的形式：<code>extern &quot;C&quot; {/*  */}</code>。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span>  &#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cMath.h"</span>  <span class="comment">// 对应cMath.c</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好在cMath.h中配合<code>__cplusplus</code>宏使用：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cMath.h:</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __CMATH_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __CMATH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __cplusplus</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// !__CMATH_H</span></span></span><br></pre></td></tr></table></figure></p><p><code>__CMATH_H</code>可以防止整个文件的内容被重复包含，新标准下<code>#pragma once</code>也可以。</p><h2 id="cin与cout"><a href="#cin与cout" class="headerlink" title="cin与cout"></a>cin与cout</h2><p><code>cout</code> 和 <code>cin</code> 分别是 <code>ostream</code> 和 <code>istream</code> 类的对象，而不是关键字。使用示例：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a是"</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b是"</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><p>其中<code>endl</code>表示end of line。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>const的作用主要有：<br>1.定义常量<br><code>const int a = 10; // a不可修改</code></p><p>2.类型检查<br><code>void f(const int i){}// 对传进来的参数进行类型检查,不匹配则提示</code></p><p>3.保护参数<br><code>void f(const int i){}// i不可修改</code></p><p>4.节省空间<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替换三次,分配三次内存空间</span></span><br><span class="line">#define pi <span class="number">3.14</span></span><br><span class="line"><span class="keyword">double</span> a = pi;</span><br><span class="line"><span class="keyword">double</span> b = pi;</span><br><span class="line"><span class="keyword">double</span> c = pi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> <span class="literal">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 只分配一次内存空间</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="literal">PI</span>;</span><br><span class="line"><span class="comment">// 不再分配内存空间</span></span><br><span class="line"><span class="keyword">double</span> e = <span class="literal">PI</span>;</span><br></pre></td></tr></table></figure></p><p>混淆点:<br>指针本身是常量不可变，不可以指向其他：<code>char* const pContent;</code><br>指针所指向的内容是常量不可变：<code>const char *pContent;</code><br>两者都不可变：<code>const char* const pContent;</code></p><p>示例如下：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">    int mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person p1 = &#123; <span class="number">5</span> &#125;;</span><br><span class="line">Person p2 = &#123; <span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">const Person *ptr2 = &amp;p1;</span><br><span class="line">*ptr2 = p2; <span class="comment">//no</span></span><br><span class="line">ptr2-&gt;mAge = <span class="number">16</span>; <span class="comment">//no</span></span><br><span class="line">(*ptr2).mAge = <span class="number">13</span>; <span class="comment">//no</span></span><br><span class="line">ptr2 = &amp;p2; <span class="comment">//yes</span></span><br><span class="line"></span><br><span class="line">Person * const ptr3 = &amp;p1;</span><br><span class="line">*ptr3 = p2; <span class="comment">//yes</span></span><br><span class="line">ptr3-&gt;mAge = <span class="number">16</span>; <span class="comment">//yes</span></span><br><span class="line">(*ptr3).mAge = <span class="number">13</span>; <span class="comment">//yes</span></span><br><span class="line">ptr3 = &amp;p2; <span class="comment">//no</span></span><br></pre></td></tr></table></figure></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>在C++中，使用引用(Reference)可以起到与指针类似的功能。引用相当于是变量的别名(基本数据类型、枚举、结构体、类、指针、数组等，都可以有引用)，对引用做计算，就是对引用所指向的变量做计算。在定义的时候就必须初始化，一旦指向了某个变量，就不可以再改变。可以利用引用初始化另一个引用，相当于某个变量的多个别名。但是不存在引用的引用、指向引用的指针、引用数组。</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">int age = <span class="number">10</span>;</span><br><span class="line">int &amp;<span class="keyword">new</span><span class="type">Age</span> = age; <span class="comment">// newAge与age等价，相当于别名</span></span><br><span class="line">age = <span class="number">20</span>; <span class="comment">// age、newAge都是20</span></span><br><span class="line"><span class="keyword">new</span><span class="type">Age</span> = <span class="number">30</span>; <span class="comment">// age、newAge都是30</span></span><br></pre></td></tr></table></figure><p>引用比指针更安全、函数返回值可以被赋值。一个引用占用一个指针的大小（64位8个字节或者32位4个字节），引用的本质就是指针，只是编译器削弱了它的功能，所以引用就是弱化了的指针。</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span><span class="comment">;</span></span><br><span class="line"><span class="number">01171010</span>  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>],<span class="number">0Ah</span>  </span><br><span class="line"><span class="keyword">int</span> *pAge = &amp;age<span class="comment">; // 指针</span></span><br><span class="line"><span class="number">01171017</span>  <span class="keyword">lea</span>         <span class="built_in">eax</span>,[<span class="built_in">ebp</span>-<span class="number">8</span>]  </span><br><span class="line">0117101A  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">0Ch</span>],<span class="built_in">eax</span>  </span><br><span class="line"><span class="keyword">int</span> &amp;newAge = age<span class="comment">; // 引用</span></span><br><span class="line"><span class="number">0117101D</span>  <span class="keyword">lea</span>         <span class="built_in">ecx</span>,[<span class="built_in">ebp</span>-<span class="number">8</span>]  </span><br><span class="line"><span class="number">01171020</span>  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10h</span>],<span class="built_in">ecx</span></span><br></pre></td></tr></table></figure><p>从汇编看，效果是一样的：ebp-8是变量age的地址，之后都是把这个地址ebp-8存储到一个指针指向的空间中。</p><h3 id="指针、引用、数组"><a href="#指针、引用、数组" class="headerlink" title="指针、引用、数组"></a>指针、引用、数组</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="comment">// 指针数组，数组中的元素是指针类型 int *</span></span><br><span class="line"><span class="keyword">int</span> *p;</span><br><span class="line"><span class="keyword">int</span> *arr1[<span class="number">3</span>] = &#123;p, p, p&#125;;</span><br><span class="line"><span class="comment">// 指向数组的指针</span></span><br><span class="line"><span class="keyword">int</span> (*arr2)[<span class="number">3</span>];</span><br><span class="line"><span class="comment">// 数组的引用</span></span><br><span class="line"><span class="keyword">int</span> (&amp;arr3)[<span class="number">3</span>] = <span class="built_in">array</span>;</span><br></pre></td></tr></table></figure><h3 id="指针、引用、const"><a href="#指针、引用、const" class="headerlink" title="指针、引用、const"></a>指针、引用、const</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> age2 = <span class="number">11</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ref1指向不可修改，ref1指向的内容可以修改</span></span><br><span class="line"><span class="keyword">int</span> &amp; <span class="keyword">const</span> ref1 = age; <span class="comment">// 等价于int &amp;ref1 = age;</span></span><br><span class="line">ref1 = <span class="number">13</span>; <span class="comment">//yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p1指向不可修改， p1指向的内容可以修改</span></span><br><span class="line"><span class="keyword">int</span> * <span class="keyword">const</span> p1 = &amp;age;</span><br><span class="line">p1 = &amp;age2; <span class="comment">//no</span></span><br><span class="line">*p1 = <span class="number">13</span>; <span class="comment">//yes</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ref1指向不可修改，ref1指向的内容不可以修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;ref2 = age;</span><br><span class="line">ref2 = <span class="number">13</span>; <span class="comment">//no</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// p2指向可以修改， p2指向的内容不可以修改</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> *p2 = &amp;age;</span><br><span class="line">p2 = &amp;age2; <span class="comment">//yes</span></span><br><span class="line">*p2 = <span class="number">13</span>; <span class="comment">//no</span></span><br></pre></td></tr></table></figure><p><strong>常引用的临时数据</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;age1 = <span class="number">20</span>; <span class="comment">//直接赋值临时变量</span></span><br><span class="line"><span class="keyword">int</span> &amp;age1 = <span class="number">20</span>;<span class="comment">//no</span></span><br><span class="line"><span class="keyword">int</span> &amp;age2 = age;<span class="comment">//yes</span></span><br></pre></td></tr></table></figure><p><strong>函数参数是引用类型时，接受const与非const实参</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp;a, <span class="keyword">const</span> <span class="keyword">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受各种类型的参数</span></span><br><span class="line">sum(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">sum(a, b);</span><br></pre></td></tr></table></figure><h2 id="内存布局"><a href="#内存布局" class="headerlink" title="内存布局"></a>内存布局</h2><p>每个应用都有自己独立的内存空间，其内存空间一般有以下几大区域 ：</p><ol><li>代码段(代码区)：用于存放代码（只读）。</li><li>数据段(全局区)：用于存放全局变量等。</li><li>栈空间：每调用一个函数就会给它分配一段连续的栈空间，等函数调用完毕后会自动回收这段栈空间。会自动分配和回收。</li><li>堆空间：需要主动去申请和释放。</li></ol><p><strong>函数代码存放在代码段，局部变量存放在栈空间。</strong></p><h3 id="对象的内存"><a href="#对象的内存" class="headerlink" title="对象的内存"></a>对象的内存</h3><p>对象的内存可以存在于3种地方：</p><ul><li>全局区(数据段)：全局变量 </li><li>栈空间：函数里面的局部变量 </li><li>堆空间：动态申请内存(malloc、new等)</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局区</span></span><br><span class="line">Person gPer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 栈空间</span></span><br><span class="line">    Person per;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 堆空间</span></span><br><span class="line">    Person *p = <span class="keyword">new</span> Person;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><p>类只是一个模板（Template），编译后不占用内存空间，所以在定义类时不能对成员变量进行初始化，因为没有地方存储数据。只有在创建对象以后才会给成员变量分配内存，这个时候就可以赋值了。</p><p>存储在栈上的对象</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Student stu<span class="comment">;</span></span><br><span class="line">Student *p = &amp;stu<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>存储在堆上的对象<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Student *stu = <span class="keyword">new</span> <span class="type">Student</span>;</span><br></pre></td></tr></table></figure></p><p>使用 <code>new</code> 在堆上创建出来的对象是匿名的，必须要用一个指针指向它，再借助指针来访问它的成员变量或成员函数。</p><h2 id="动态分配内存"><a href="#动态分配内存" class="headerlink" title="动态分配内存"></a>动态分配内存</h2><p>在程序运行过程，为了能够自由控制内存的生命周期、大小，会经常使用堆空间的内存。</p><p>堆空间的申请\释放：</p><ul><li><p>malloc \ free </p>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">10</span>);</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">10</span>); <span class="comment">// 从p地址开始，每一个字节都设值为0；   </span></span><br><span class="line"><span class="built_in">free</span>(p);</span><br></pre></td></tr></table></figure></li><li><p>new \ delete</p>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="keyword">new</span> <span class="keyword">char</span>; <span class="comment">// 未初始化</span></span><br><span class="line"><span class="keyword">char</span> *p = <span class="keyword">new</span> <span class="keyword">char</span>(); <span class="comment">// 将默认初始化</span></span><br><span class="line"><span class="keyword">delete</span> p;</span><br></pre></td></tr></table></figure></li><li><p>new [] \ delete []</p>  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> *p = <span class="keyword">new</span> <span class="keyword">char</span> <span class="comment">// 未初始化</span></span><br><span class="line"><span class="keyword">char</span> *p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">6</span>] <span class="comment">// 将默认初始化</span></span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br></pre></td></tr></table></figure></li></ul><p>申请堆空间成功后，会返回那一段内存空间的地址。申请和释放必须是1对1的关系，不然可能会存在内存泄露。</p><p><strong>memset函数是将较大的数据结构(比如对象、数组等)内存清零的比较快的方法。</strong><br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Person per;</span><br><span class="line">per.age = <span class="number">1</span>;</span><br><span class="line">per.num = <span class="number">2</span>;</span><br><span class="line">per.id = <span class="number">3</span>;</span><br><span class="line">memset(&amp;per, <span class="number">0</span>, sizeof(per));</span><br><span class="line"></span><br><span class="line">Person persons[] = &#123;&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>&#125;, &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, &#123;<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;&#125;;</span><br><span class="line">memset(&amp;persons, <span class="number">0</span>, sizeof(persons));</span><br></pre></td></tr></table></figure></p><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>为了消除函数调用的时空开销，在<strong>编译</strong>时将函数调用处用函数体替换，类似于C语言中的宏展开。这种在函数调用处直接嵌入函数体的函数称为内联函数。使用inline修饰函数的声明或者实现，将<strong>建议</strong>编译器使其成为内联函数，在函数定义处添加inline关键字，声明处添加无效，最好声明和实现都增加inline修饰。</p><p>若编译器使得函数成为内联函数，编译器会将函数调用直接展开为函数体代码，可以减少函数调用的开销，但是会增大代码体积。编译后的程序会存在多份相同的函数拷贝，如果被声明为内联函数的函数体非常大，那么编译后的程序体积也将会变得很大。一些函数即使声明为inline，也不一定会被编译器内联，比如递归函数。尽量不要内联超过10行代码的函数。</p><p>内联函数和宏，都可以减少函数调用的开销，对比宏，内联函数多了语法检测和函数特性。<br>以func函数为例：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">int</span> a)</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有使用内联时：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = func(<span class="number">5</span>)<span class="comment">;</span></span><br><span class="line"><span class="number">01321016</span>  <span class="keyword">push</span>        <span class="number">5</span>  </span><br><span class="line"><span class="number">01321018</span>  <span class="keyword">call</span>        func (<span class="number">01321000h</span>)  </span><br><span class="line"><span class="number">0132101D</span>  <span class="keyword">add</span>         <span class="built_in">esp</span>,<span class="number">4</span>  </span><br><span class="line"><span class="number">01321020</span>  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [a],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><p>使用内联时：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = func(<span class="number">5</span>)<span class="comment">;</span></span><br><span class="line"><span class="number">00291006</span>  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="number">5</span>  </span><br><span class="line">0029100B  <span class="keyword">add</span>         <span class="built_in">eax</span>,<span class="number">3</span>  </span><br><span class="line">0029100E  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [a],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><p>可见函数调用<code>call func (01321000h)</code>确实是直接被替换成了函数体的内容：<code>add eax,3</code>。</p><h2 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h2><p><strong>在类体中定义的成员函数会自动成为内联函数</strong>，在类体外定义的不会。内联函数一般不是我们所期望的，它会将函数调用处用函数体替代，所以建议在类体内部对成员函数作声明，而在类体外部进行定义。</p><p>不使用内联函数:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="keyword">int</span> age;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;  <span class="comment">//内联函数声明</span></span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="keyword">void</span> Student::say()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h2><p>默认参数需要按照从右到左的顺序（与函数参数压栈顺序一致）设置。如果函数同时有声明、实现，默认参数只能放在函数声明中，默认参数的值可以是常量、全局符号(全局变量、函数名)。</p><p><strong>本质：编译器隐式传入默认参数，调用函数时依旧是将所有参数压栈。</strong></p><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">int func(int a, int b = <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="built_in">return</span> a * b + a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">2</span>);</span><br><span class="line"><span class="number">010B1998</span>  <span class="built_in">push</span>        <span class="number">7</span>  </span><br><span class="line"><span class="number">010B199A</span>  <span class="built_in">push</span>        <span class="number">2</span>  </span><br><span class="line"><span class="number">010B199C</span>  call        func (<span class="number">010B1438h</span>)  </span><br><span class="line"><span class="number">010B19A1</span>  add         esp,<span class="number">8</span></span><br></pre></td></tr></table></figure><p>虽然调用时只传入一个参数，实际上编译器还是会传递默认参数进行调用：<code>push 7</code>。默认参数并不是包含在函数体中的。</p><p>注意：C与C++都可以将函数作为函数参数传递。<br><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span>(<span class="params"><span class="keyword">int</span> a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span> * a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func2</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span>(*p</span>)(<span class="params"><span class="keyword">int</span></span>)) </span>&#123;</span><br><span class="line">    p(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="函数的重载"><a href="#函数的重载" class="headerlink" title="函数的重载"></a>函数的重载</h2><p>重载就是在一个作用范围内（同一个类、同一个命名空间等）有多个名称相同但参数不同的函数。重载的结果是让一个函数名拥有了多种用途，使得命名更加方便，调用更加灵活。<br>要求：函数名相同且参数列表不同。<strong>仅仅返回类型不同不足以成为函数的重载</strong>。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交换 int 变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换 float 变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">float</span> *a, <span class="keyword">float</span> *b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重载的本质：在编译时会根据参数列表对函数进行重命名，采用了name mangling或者叫name decoration技术，函数重载仅仅是语法层面的，本质上它们还是<strong>不同的函数</strong>，占用不同的内存，入口地址也不一样。<br><figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="function"><span class="keyword">func</span><span class="params">(int a)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> a * a + a<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> <span class="function"><span class="keyword">func</span><span class="params">(int a, int b)</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> a * b + a + b<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="number">12</span>)</span>;</span></span><br><span class="line"><span class="number">003</span>A18C8  push        <span class="number">0</span>Ch</span><br><span class="line"><span class="number">003</span>A18CA  <span class="built_in">call</span>        <span class="function"><span class="keyword">func</span> <span class="params">(<span class="number">03</span>A1433h)</span></span></span><br><span class="line"><span class="number">003</span>A18CF  add         esp, <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span></span><br><span class="line"><span class="number">003</span>A18D2  push        <span class="number">2</span></span><br><span class="line"><span class="number">003</span>A18D4  push        <span class="number">1</span></span><br><span class="line"><span class="number">003</span>A18D6  <span class="built_in">call</span>        <span class="function"><span class="keyword">func</span> <span class="params">(<span class="number">03</span>A1438h)</span></span></span><br><span class="line"><span class="number">003</span>A18DB  add         esp, <span class="number">8</span></span><br></pre></td></tr></table></figure></p><p>func()函数的重载，最终根据不同的参数类型生成不同的函数：<code>func (03A1433h)</code>、<code>func (03A1438h)</code>。<br>注意：调用函数时，实参的隐式类型转换可能会产生二义性。</p><h2 id="struct与class"><a href="#struct与class" class="headerlink" title="struct与class"></a>struct与class</h2><p>C++中可以使用struct、class来定义一个类。struct与class的区别：</p><ol><li>使用 <code>class</code> 时，类中的成员默认都是 <code>private</code> 属性的；而使用 <code>struct</code> 时，结构体中的成员默认都是 <code>public</code> 属性的</li><li><code>class</code> 继承默认是 <code>private</code> 继承，而 <code>struct</code> 继承默认是 <code>public</code> 继承。</li><li><code>class</code> 可以使用模板，而 <code>struct</code> 不能。</li></ol><p><strong>struct</strong></p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">struct Person &#123;</span><br><span class="line">    <span class="keyword">int</span> mAge<span class="comment">;</span></span><br><span class="line">    <span class="keyword">int</span> mNum<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Person per<span class="comment">;</span></span><br><span class="line">per.mAge = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">00811A02  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">10h</span>],<span class="number">0Ah</span>  </span><br><span class="line">per.mNum = <span class="number">101</span><span class="comment">;</span></span><br><span class="line">00811A09  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">0Ch</span>],<span class="number">65h</span></span><br></pre></td></tr></table></figure><p><strong>class</strong><br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">class Person &#123;</span><br><span class="line"><span class="symbol">public:</span></span><br><span class="line">    <span class="keyword">int</span> mAge<span class="comment">;</span></span><br><span class="line">    <span class="keyword">int</span> mNum<span class="comment">;</span></span><br><span class="line">&#125;<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Person per<span class="comment">;</span></span><br><span class="line">per.mAge = <span class="number">10</span><span class="comment">;</span></span><br><span class="line">012D1A02  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span>[<span class="built_in">ebp</span> - <span class="number">10h</span>], <span class="number">0Ah</span></span><br><span class="line">per.mNum = <span class="number">101</span><span class="comment">;</span></span><br><span class="line">012D1A09  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span>[<span class="built_in">ebp</span> - <span class="number">0Ch</span>], <span class="number">65h</span></span><br></pre></td></tr></table></figure></p><p>对比发现，struct与class在汇编层面（本质上）是一致的。区别主要体现在权限上。</p><p>变量名规范参考：</p><ul><li>全局变量：gName </li><li>成员变量：mName </li><li>静态变量：sName</li><li>常量：cName</li></ul><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><strong>怎么实现C++中函数访问成员变量？</strong><br>函数在代码区，访问其他区的对象（栈、堆、静态区）。可以试着传递对象的地址。比如：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showAge</span><span class="params">(Person *per)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 方法中访问成员变量</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; per-&gt;mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person per;</span><br><span class="line">per.mAge = <span class="number">10</span>;</span><br><span class="line">per.showAge(&amp;per);</span><br></pre></td></tr></table></figure></p><p>由这个思路，便产生了this。this是 C++ 中的一个关键字，也是一个 <strong>const 指针</strong>，它指向当前对象，通过它可以访问当前对象的所有成员。this虽然用在类的内部，但是只有在对象被创建以后才会给this赋值，并且这个赋值的过程是<strong>编译器自动完成的</strong>，不需要用户干预，用户也不能显式地给this赋值。</p><p>本质上<strong><code>this</code> 是成员函数的一个形参</strong>，存储着函数调用者（对象）的地址。<code>this</code> 这个形参是隐式的，它并不出现在代码中，而是在编译阶段由编译器默默地将它添加到参数列表中。<code>this</code> 作为隐式形参，<strong>是成员函数的局部变量</strong>，所以只能用在成员函数的内部，并且只有在通过对象调用成员函数时才给 <code>this</code> 赋值。</p><p>窥测其实现：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">configAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;mAge = <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Person per;</span><br><span class="line">per.configAge();</span><br></pre></td></tr></table></figure></p><p>转成汇编后：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Person per<span class="comment">;</span></span><br><span class="line">per.configAge()<span class="comment">;</span></span><br><span class="line">01001A12  <span class="keyword">lea</span>         <span class="built_in">ecx</span>,[<span class="built_in">ebp</span>-<span class="number">0Ch</span>]  </span><br><span class="line">01001A15  <span class="keyword">call</span>        <span class="number">01001460</span> </span><br><span class="line"></span><br><span class="line">void configAge() &#123;</span><br><span class="line">....</span><br><span class="line">010019A0  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>],<span class="built_in">ecx</span>  </span><br><span class="line">.... </span><br><span class="line">this-&gt;mAge = <span class="number">5</span><span class="comment">;</span></span><br><span class="line">010019AD  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>]  </span><br><span class="line">010019B0  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>],<span class="number">5</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>把per对象的地址（ebp-0Ch）存储在ecx中，调用per.configAge()函数。在该函数执行过程中，把ecx存储的值（per对象的地址）放到ebp-8指向的内存空间中，也即ebp-8是this指针的地址，这个地址指向的空间存储着per对象的地址。再把ebp-8存储的内容赋值到eax中，那么eax存储的即是per对象的地址，也即per.mAge的地址。赋值即可。</p><p>this是指针，<code>this-&gt;</code>表示访问this指针指向的对象。在开发中可以省略<code>this-&gt;</code>，直接使用<code>mAge = 5</code>赋值。实际上是语法糖。编译器会帮我们加上<code>this-&gt;</code>。</p><p>利用指针间接访问所指对象的成员变量，先从指针中取出对象的地址，利用对象的地址加上成员变量的偏移量计算出成员变量的地址。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>构造函数(也叫构造器)，在对象创建的时候自动调用，一般用于完成对象的初始化工作。函数名与类同名，无返回值，可以有参数，可以重载，可以有多个构造函数。一旦自定义了构造函数，必须用其中一个自定义的构造函数来初始化对象。通过malloc分配的对象不会调用构造函数。</p><p><strong>调用没有参数的构造函数可以省略括号</strong>。<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Student stu()<span class="comment">;</span></span><br><span class="line">Student stu<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Student *stu = new Student()<span class="comment">;</span></span><br><span class="line">Student *stu = new Student<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p><strong>构造函数中初始化</strong><br>如果自定义了构造函数，除了全局区，其他内存空间的成员变量默认都不会被初始化，需要开发人员手动初始化。可以理解，自定义构造函数的大多数原因是为了初始化。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person() &#123;</span><br><span class="line">    <span class="built_in">memset</span>(<span class="keyword">this</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(Person));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>易混淆点</strong><br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span> <span class="keyword">person</span>; // 创建<span class="keyword">person</span>对象</span><br><span class="line"><span class="keyword">Person</span> <span class="keyword">person</span>(); // 返回<span class="keyword">Person</span>类型的函数声明</span><br><span class="line"><span class="keyword">Person</span> <span class="keyword">person</span>(2); // 创建<span class="keyword">person</span>对象，自定义构造函数</span><br></pre></td></tr></table></figure></p><p><code>Person *p = new Person();</code>创建出来的Car对象在堆空间。<br><code>Person p;</code>创建出来的Car对象在栈空间。</p><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><p>析构函数(也叫析构器)，在对象销毁的时候自动调用，一般用于完成对象的清理工作。函数名以~开头，与类同名，无返回值，无参，不可以重载，有且只有一个析构函数。通过malloc分配的对象free的时候不会调用析构函数。构造函数、析构函数要声明为public，才能被外界正常使用。</p><figure class="highlight pony"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span>() &#123;</span><br><span class="line">    car = <span class="function"><span class="keyword">new</span> <span class="title">Car</span>();</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">~<span class="title">Person</span>() &#123;</span></span><br><span class="line"><span class="function">    <span class="title">delete</span> <span class="title">car</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>析构函数清理未被回收的堆空间对象。</p><h2 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Person(<span class="keyword">int</span> age, <span class="keyword">int</span> id) &#123;</span><br><span class="line">    mAge = age;</span><br><span class="line">    mId = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 完全等价于</span></span><br><span class="line">Person(<span class="keyword">int</span> age, <span class="keyword">int</span> id) :mAge(age), mId(id) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以传入函数</span></span><br><span class="line"><span class="keyword">int</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="keyword">return</span> <span class="number">10</span>;&#125;</span><br><span class="line">Person(<span class="keyword">int</span> age, <span class="keyword">int</span> id) :mAge(<span class="function"><span class="keyword">func</span><span class="params">()</span>), <span class="title">mId</span><span class="params">(id)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>初始化列表的初始化顺序<strong>与成员变量声明顺序有关</strong>。</p><p>带默认参数的初始化列表：<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 也可以传入函数</span></span><br><span class="line">Person(<span class="keyword">int</span> age = <span class="number">0</span>, <span class="keyword">int</span> <span class="keyword">id</span> = <span class="number">0</span>) :mAge(age), mId(<span class="keyword">id</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>如果函数声明和实现是分离的，初始化列表只能写在函数的实现中。默认参数只能写在函数的声明中。</p><h2 id="构造函数调用构造函数"><a href="#构造函数调用构造函数" class="headerlink" title="构造函数调用构造函数"></a>构造函数调用构造函数</h2><p>子类的构造函数默认会调用父类的无参构造函数。如果子类的构造函数显式地调用了父类的有参构造函数，就不会再去默认调用父类的无参构造函数。如果父类缺少无参构造函数，子类的构造函数必须显式调用父类的有参构造函数。</p><p>构造函数调用构造函数必须放到初始化列表中。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">Person(<span class="keyword">int</span> age, <span class="keyword">int</span> <span class="keyword">id</span>) &#123;</span><br><span class="line">    mAge = age;</span><br><span class="line">    mId = <span class="keyword">id</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数调用构造函数</span></span><br><span class="line">Person() :Person(<span class="number">10</span>,<span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不能像下面这样调用。这样相当于创建一个临时的对象。<br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span>() &#123;</span><br><span class="line">    <span class="keyword">Person</span>(10,2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在C++中也不能这样调用。<br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span>() &#123;</span><br><span class="line">    this-&gt;<span class="keyword">Person</span>(1, 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>拷贝构造函数是构造函数的一种。当利用已存在的对象创建一个新对象时(类似于拷贝)，就会调用新对象的拷贝构造函数进行初始化。拷贝构造函数的格式是固定的，接收一个const引用作为参数(使用const修饰，则可以接收非const对象和const对象；使用引用，可以避免产生死循环)。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mID;</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 默认参数与初始化列表</span></span><br><span class="line">    Person(<span class="keyword">int</span> id = <span class="number">0</span>, <span class="keyword">int</span> age = <span class="number">0</span>) :mID(id), mAge(age) &#123;&#125;</span><br><span class="line">    <span class="comment">// 拷贝构造函数</span></span><br><span class="line">    Person(<span class="keyword">const</span> Person &amp;per) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;mID = per.mID;</span><br><span class="line">        <span class="keyword">this</span>-&gt;mAge = per.mAge;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; mID &lt;&lt; <span class="built_in">endl</span> &lt;&lt; mAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>使用拷贝<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Person</span> <span class="selector-tag">per</span>(<span class="number">1</span>,<span class="number">12</span>);</span><br><span class="line"><span class="selector-tag">per</span><span class="selector-class">.show</span>();</span><br><span class="line"><span class="selector-tag">Person</span> <span class="selector-tag">per2</span>(per);</span><br><span class="line"><span class="selector-tag">per2</span><span class="selector-class">.show</span>();</span><br></pre></td></tr></table></figure></p><p>当完全省略拷贝构造函数时，x86下汇编为：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Person per2(per)<span class="comment">;</span></span><br><span class="line">009E2076  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [per]  </span><br><span class="line">009E2079  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [per2],<span class="built_in">eax</span>  </span><br><span class="line">009E207C  <span class="keyword">mov</span>         <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">0Ch</span>]  </span><br><span class="line">009E207F  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">1Ch</span>],<span class="built_in">ecx</span></span><br></pre></td></tr></table></figure></p><p>x64下汇编为：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">Person per2(per)<span class="comment">;</span></span><br><span class="line">00007FF669AD1AF8  <span class="keyword">mov</span>         <span class="built_in">rax</span>,<span class="built_in">qword</span> <span class="built_in">ptr</span> [per]  </span><br><span class="line">00007FF669AD1AFC  <span class="keyword">mov</span>         <span class="built_in">qword</span> <span class="built_in">ptr</span> [per2],<span class="built_in">rax</span></span><br></pre></td></tr></table></figure></p><p>可见，默认实现即是把per指向的内存空间中的8个字节拷贝到per2指向的内存空间中。与<code>this-&gt;mID = per.mID; this-&gt;mAge = per.mAge;</code>相同。x86下，一次操作拷贝4个字节（dword），x64下，一次操作拷贝8个字节（qword）。</p><p>调用父类的拷贝构造函数<br><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="type">Student</span> : <span class="type">Person</span> &#123;</span></span><br><span class="line"><span class="class">    int mSchoolID;</span></span><br><span class="line"><span class="class">public:</span></span><br><span class="line"><span class="class">    <span class="type">Student</span>(<span class="title">int</span> <span class="type">ID</span> = 0, <span class="title">int</span> <span class="title">age</span> = 0, <span class="title">int</span> <span class="title">schoolID</span> = 0) :<span class="type">Person</span>(<span class="type">ID</span>, <span class="title">age</span>), mSchoolID(<span class="title">schoolID</span>) &#123;&#125;</span></span><br><span class="line"><span class="class">    // 调用父类的拷贝构造函数</span></span><br><span class="line"><span class="class">    <span class="type">Student</span>(<span class="title">const</span> <span class="type">Student</span> &amp;<span class="title">stu</span>) : <span class="type">Person</span>(<span class="title">stu</span>), mSchoolID(<span class="title">stu</span>.<span class="title">mSchoolID</span>) &#123;&#125;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br></pre></td></tr></table></figure></p><p>注意：<code>Person per2(per);</code>与<code>Person per2 = per;</code>完全等价，都是拷贝构造。</p><p>区分拷贝操作：<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Person per<span class="comment">;</span></span><br><span class="line">Person per2<span class="comment">;</span></span><br><span class="line">// 仅仅是拷贝</span><br><span class="line"><span class="attribute">per2</span> = per<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h2 id="深复制与浅复制"><a href="#深复制与浅复制" class="headerlink" title="深复制与浅复制"></a>深复制与浅复制</h2><p>编译器默认的提供的拷贝是浅拷贝(shallow copy)。将一个对象中所有成员变量的值拷贝到另一个对象。如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间。可能会导致堆空间多次free的问题。如果需要实现深拷贝(deep copy)，就需要自定义拷贝构造函数。将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间。</p><p>危险的堆空间指针指向栈空间：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doge</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">    <span class="keyword">char</span> *mName;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Doge(<span class="keyword">int</span> age, <span class="keyword">const</span> <span class="keyword">char</span>* name) :mAge(age), mName(name) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Doge *doge;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> name[] = &#123; <span class="string">'A'</span>, <span class="string">'a'</span>, <span class="string">'r'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>, <span class="string">'\0'</span> &#125;;</span><br><span class="line">    doge = <span class="keyword">new</span> Doge(<span class="number">3</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>name过了作用域会被回收，此时doge中的mName就很危险。需要重写构造函数，将mName存储到堆空间上：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Doge(<span class="keyword">int</span> age, <span class="keyword">const</span> <span class="keyword">char</span>* name) :mAge(age) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 申请堆空间 &#123;&#125;是清零操作</span></span><br><span class="line">    mName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(name) + <span class="number">1</span>] &#123;&#125;;</span><br><span class="line">    <span class="comment">// 拷贝</span></span><br><span class="line">    <span class="built_in">strcpy</span>(mName, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重写析构函数，清除mName：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">~Dog() &#123;</span><br><span class="line">    <span class="keyword">if</span> (mName == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] mName;</span><br><span class="line">    mName = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>深拷贝：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Doge(<span class="keyword">const</span> Doge&amp; doge) : mAge(doge.mAge) &#123;</span><br><span class="line">    <span class="keyword">if</span> (doge.mName == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">// 申请堆空间 &#123;&#125;是清零操作</span></span><br><span class="line">    mName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(doge.mName) + <span class="number">1</span>]&#123;&#125;;</span><br><span class="line">    <span class="comment">// 拷贝</span></span><br><span class="line">    <span class="built_in">strcpy</span>(mName, doge.mName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="静态成员变量"><a href="#静态成员变量" class="headerlink" title="静态成员变量"></a>静态成员变量</h2><p><code>static</code> 成员变量属于类，不属于某个具体的对象，即使创建多个对象，也只分配一份内存。<code>static</code> 成员变量的内存既不是在声明类时分配，也不是在创建对象时分配，而是在（类外）初始化时分配。反过来说，没有在类外初始化的 <code>static</code> 成员变量不能使用。</p><p>static 成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 mTotal 声明为静态成员变量</span></span><br><span class="line"><span class="comment">//通过类类访问 static 成员变量</span></span><br><span class="line">Student::mTotal = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过对象来访问 static 成员变量</span></span><br><span class="line"><span class="function">Student <span class="title">stu</span><span class="params">(<span class="string">"小明"</span>, <span class="number">15</span>, <span class="number">92.5f</span>)</span></span>;</span><br><span class="line">stu.mTotal = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过对象指针来访问 static 成员变量</span></span><br><span class="line">Student *pstu = <span class="keyword">new</span> Student(<span class="string">"李华"</span>, <span class="number">16</span>, <span class="number">96</span>);</span><br><span class="line">pstu -&gt; mTotal = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>静态成员变量必须初始化，而且只能在类体外进行。</p><p><code>static</code> 成员变量和普通 <code>static</code> 变量一样，都在内存分区中的<strong>全局数据区</strong>分配内存，到程序结束时才释放。这就意味着，<code>static</code> 成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。普通成员变量占用对象的内存，静态成员函数没有 <code>this</code> 指针，不知道指向哪个对象，无法访问对象的成员变量，也就是说静态成员函数不能访问普通成员变量，只能访问静态成员变量。<br>普通成员函数必须通过对象才能调用，而静态成员函数没有 <code>this</code> 指针，无法在函数体内部访问某个对象，所以不能调用普通成员函数，只能调用静态成员函数。</p><p>静态成员函数与普通成员函数的根本区别在于：普通成员函数有 <code>this</code> 指针，可以访问类中的任意成员；而静态成员函数没有 <code>this</code> 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。</p><h2 id="常成员函数"><a href="#常成员函数" class="headerlink" title="常成员函数"></a>常成员函数</h2><p><code>const</code> 成员函数可以使用类中的所有成员变量，但是不能修改它们的值，这种措施主要还是为了保护数据而设置的。</p><p>常成员函数需要在声明和定义的时候在函数头部的结尾加上 <code>const</code> 关键字：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="comment">//声明常成员函数</span></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//定义常成员函数</span></span><br><span class="line"><span class="keyword">int</span> Student::getage() <span class="keyword">const</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="友元函数与友元类"><a href="#友元函数与友元类" class="headerlink" title="友元函数与友元类"></a>友元函数与友元类</h2><p>借助友元（friend），可以<strong>使得其他类中的成员函数以及全局范围内的函数访问当前类的 <code>private</code> 成员</strong>。在当前类以外定义的、不属于当前类的函数可以在类中声明，但要在前面加 <code>friend</code> 关键字，这样就构成了友元函数。友元函数不同于类的成员函数，在友元函数中不能直接访问类的成员，必须要借助对象。</p><p>一个函数可以被多个类声明为友元函数，这样就可以访问多个类中的 <code>private</code> 成员。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">// 构造函数</span></span><br><span class="line">    Address(<span class="keyword">char</span> *province, <span class="keyword">char</span> *city, <span class="keyword">char</span> *district);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将Student类中的成员函数show()声明为友元函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> Student::show(Address *addr);</span><br></pre></td></tr></table></figure></p><p>友元类中的所有成员函数都是另外一个类的友元函数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Address(<span class="keyword">char</span> *province, <span class="keyword">char</span> *city, <span class="keyword">char</span> *district);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//将Student类声明为Address类的友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>;</span></span><br></pre></td></tr></table></figure></p><p>友元的关系是单向的而不是双向的。如果声明了类 B 是类 A 的友元类，不等于类 A 是类 B 的友元类，类 A 中的成员函数不能访问类 B 中的 <code>private</code> 成员。友元的关系不能传递。如果类 B 是类 A 的友元类，类 C 是类 B 的友元类，不等于类 C 是类 A 的友元类。</p><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承方式包括 <code>public</code>（公有的）、<code>private</code>（私有的）和 <code>protected</code>（受保护的），此项是可选的，如果不写，那么默认为 <code>private</code>。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 派生类名:<span class="type">［继承方式］ 基类名&#123;</span></span></span><br><span class="line">   派生类新增加的成员</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>不同的继承方式会影响基类成员在派生类中的访问权限。</p><p>1) public继承方式</p><ul><li>基类中所有 public 成员在派生类中为 public 属性；</li><li>基类中所有 protected 成员在派生类中为 protected 属性；</li><li>基类中所有 private 成员在派生类中不能使用。</li></ul><p>2) protected继承方式</p><ul><li>基类中的所有 public 成员在派生类中为 protected 属性；</li><li>基类中的所有 protected 成员在派生类中为 protected 属性；</li><li>基类中的所有 private 成员在派生类中不能使用。</li></ul><p>3) private继承方式</p><ul><li>基类中的所有 public 成员在派生类中均为 private 属性；</li><li>基类中的所有 protected 成员在派生类中均为 private 属性；</li><li>基类中的所有 private 成员在派生类中不能使用。</li></ul><p>基类的 <code>private</code> 成员是能够被继承的，并且（成员变量）会占用派生类对象的内存，它只是在派生类中不可见，导致无法使用罢了。基类成员函数和派生类成员函数不会构成重载，如果派生类有同名函数，那么就会遮蔽基类中的所有同名函数，不管它们的参数是否一样。对象的内存布局：父类的成员变量在前，子类的成员变量在后。</p><ol><li>类的构造函数不能被继承；</li><li>析构函数也不能被继承；</li><li>派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的。</li></ol><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>C++允许一个类可以有多个父类。<br><strong>同名成员变量访问</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> A, B &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问</span></span><br><span class="line">C c;</span><br><span class="line">c.mAge = <span class="number">10</span>;</span><br><span class="line">c.B::mAge = <span class="number">12</span>;</span><br><span class="line">c.A::mAge = <span class="number">13</span>;</span><br></pre></td></tr></table></figure><p><strong>多继承的场景主要是应用在继承协议遵从接口。</strong></p><h2 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h2><h3 id="菱形继承"><a href="#菱形继承" class="headerlink" title="菱形继承"></a>菱形继承</h3><p><img src="http://static.chenyalun.com/2017/04/03/20170403002.jpg" alt><br>假如类 A 有一个成员变量 a，那么在类 D 中直接访问 a 就会产生歧义，编译器不知道它究竟来自 A –&gt;B–&gt;D 这条路径，还是来自 A–&gt;C–&gt;D 这条路径。因为类 B 和类 C 中都有成员变量 a（从 A 类继承而来），编译器不知道选用哪一个，所以产生了错误。</p><p>菱形继承带来的问题：最底下子类从基类继承的成员变量冗余、重复；最底下子类无法访问基类的成员，有二义性。为了解决这个问题，便有了虚继承。</p><p>在继承方式前面加上 virtual 关键字就是虚继承：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//间接基类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接基类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接基类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A &#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类D</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> B, <span class="keyword">public</span> C &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123; m_a = a; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setb</span><span class="params">(<span class="keyword">int</span> b)</span> </span>&#123; m_b = b; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(<span class="keyword">int</span> c)</span> </span>&#123; m_c = c; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setd</span><span class="params">(<span class="keyword">int</span> d)</span> </span>&#123; m_d = d; &#125;  <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在类被构造的时候，先执行<strong>虚拟继承的父类的构造函数</strong>，然后从<strong>左到右执行普通继承的父类的构造函数</strong>，然后按照<strong>定义的顺序执行数据成员的初始化</strong>，最后是<strong>自身的构造函数的调用</strong>。析构函数与之完全相反，互成镜像。<a href="http://gaocegege.com/Blog/cpp/cppclass" target="_blank" rel="noopener">more</a>。</p><p><strong>虚继承解决菱形继承问题。虚函数解决多态问题。纯虚函数解决协议问题。</strong></p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><strong>默认情况下，编译器只会根据指针类型调用对应的函数，不存在多态。</strong>C++中的多态通过虚函数实现。</p><p>多态的要素：</p><ul><li>子类重写父类的成员函数(override) </li><li>父类指针指向子类对象 </li><li>利用父类指针调用重写的成员函数</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Object::show"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Person子类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span> :</span> Object &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"Person::show"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student子类</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> :</span> Object &#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Student::show"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">Object *p1 = <span class="keyword">new</span> Student();</span><br><span class="line">p1-&gt;show();</span><br><span class="line">Object*p2 = <span class="keyword">new</span> Person();</span><br><span class="line">p2-&gt;show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">Object::show</span><br><span class="line">Object::show</span><br></pre></td></tr></table></figure><p>默认没有实现多态。使用虚函数后：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Object</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Object::show"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印</span></span><br><span class="line">Student::show</span><br><span class="line">Person::show</span><br></pre></td></tr></table></figure><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><p>父类添加virtual，声明为虚函数，子类的这些函数将自动成为虚函数。</p><p>没有添加virtual关键字时：<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">p2-&gt;show()<span class="comment">;</span></span><br><span class="line">00AD2AF4  <span class="keyword">mov</span>         <span class="built_in">ecx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [p2]  </span><br><span class="line">00AD2AF7  <span class="keyword">call</span>        Object::show (<span class="number">0AD14CEh</span>)</span><br></pre></td></tr></table></figure></p><p>添加virtual关键字时：</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">p2-&gt;show()<span class="comment">;</span></span><br><span class="line">// 取出p2所指对象的地址给<span class="built_in">eax</span></span><br><span class="line">000666EF  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [p2]  </span><br><span class="line">// 取出对象最前面的<span class="number">4</span>个字节给<span class="built_in">edx</span></span><br><span class="line">000666F2  <span class="keyword">mov</span>         <span class="built_in">edx</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">eax</span>] </span><br><span class="line">// 取出虚表的最前面的<span class="number">4</span>个字节给<span class="built_in">eax</span></span><br><span class="line">000666F9  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">edx</span>]</span><br><span class="line">// 调用函数  </span><br><span class="line">000666FB  <span class="keyword">call</span>        <span class="built_in">eax</span></span><br></pre></td></tr></table></figure><p>虚函数的实现原理是虚表，这个虚表里面存储着最终需要调用的虚函数地址，这个虚表也叫虚函数表。同一个基类的所有实例共用一份虚表。父类中的函数有virtual修饰，则子类中的该函数也会有virtual修饰，可省略。</p><p>重写后调用父类方法：<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> : <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="type">Person</span>::<span class="function"><span class="keyword">func</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>如果存在父类类型指针指向子类对象，应该将析构函数声明为虚函数(虚析构函数)。这样delete父类指针时，才会调用子类的析构函数，保证析构的完整性。</p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>纯虚函数：没有函数体且初始化为0的虚函数，用来定义接口规范。抽象类(Abstract Class)：含有纯虚函数的类，不可以实例化(不可以创建对象) 。抽象类也可以包含非纯虚函数，如果父类是抽象类，子类没有完全实现纯虚函数，那么这个子类依然是抽象类。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p>运算符重载(操作符重载):可以为运算符增加一些新的功能。</p><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="built_in">CGPoint</span> &#123;</span><br><span class="line">    <span class="keyword">float</span> mX;</span><br><span class="line">    <span class="keyword">float</span> mY;</span><br><span class="line">    Person(<span class="keyword">int</span> x, <span class="keyword">int</span> y) :mX(x), mY(y) &#123;&#125;</span><br><span class="line">    <span class="comment">// 左边的const防止返回值被赋值，如 (p2 + p2) = p;</span></span><br><span class="line">    <span class="comment">// 右边的const保证返回值能再次调用operator+， 如 p = p1 + p2 + p3;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">CGPoint</span> operator+(<span class="keyword">const</span> <span class="built_in">CGPoint</span> &amp;p) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">CGPoint</span>(mX + p.mX, mY + p.mY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGPoint</span> operator+(<span class="keyword">const</span> <span class="built_in">CGPoint</span> &amp;p1, <span class="keyword">const</span> <span class="built_in">CGPoint</span> &amp;p2) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">CGPoint</span>(p1.mX + p2.mX, p1.mY + p2.mY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CGPoint</span> per = <span class="built_in">CGPoint</span>(<span class="number">2</span>, <span class="number">3</span>) + <span class="built_in">CGPoint</span>(<span class="number">3</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><h2 id="内部类局部类"><a href="#内部类局部类" class="headerlink" title="内部类局部类"></a>内部类局部类</h2><p>如果将类A定义在类C的内部，那么类A就是一个内部类(嵌套类)。<br>内部类的特点</p><ul><li>支持public、protected、private权限 </li><li>成员函数可以直接访问其外部类对象的所有成员(反过来则不行) </li><li>成员函数可以直接不带类名、对象名访问其外部类的static成员 </li><li>不会影响外部类的内存布局 </li><li>可以在外部类内部声明，在外部类外面进行定义</li></ul><p>在一个函数内部定义的类，称为局部类。<br>局部类的特点：</p><ul><li>作用域仅限于所在的函数内部 </li><li>其所有的成员必须定义在类内部，不允许定义static成员变量 </li><li>成员函数不能直接访问函数的局部变量(static变量除外)</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> mAge;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    Person::show();<span class="comment">// 函数调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对象型参数和返回值"><a href="#对象型参数和返回值" class="headerlink" title="对象型参数和返回值"></a>对象型参数和返回值</h2><p>使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person()&#123;&#125; <span class="comment">// 构造</span></span><br><span class="line">    Person(<span class="keyword">int</span> age) :mAge(age)&#123;&#125; <span class="comment">// 初始化列表</span></span><br><span class="line">    Person(<span class="keyword">const</span> Person &amp;per) :mAge(per.age)&#123;&#125; <span class="comment">// 拷贝构造</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">(Person per)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 拷贝构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为返回值</span></span><br><span class="line"><span class="function">Person <span class="title">func2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">per</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> per;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function">Person <span class="title">per1</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">func1(per1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">Person per2;</span><br><span class="line">per2 = func2();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">Person per3 = func2();</span><br></pre></td></tr></table></figure></p><p>对于<code>Person per1(12); func1(per1);</code>，当对象作为参数传递到另一个函数栈空间时，调用拷贝构造函数，创建出一个新的临时对象。<br>对于<code>Person per2; per2 = func2();</code>，当对象作为返回值传递到另一个函数栈时，也会调用拷贝构造函数，创建出新的临时对象。<br>对于<code>Person per3 = func2();</code>，原则上也应该调用拷贝构造函数，创建出新的对象。实际上编译器做了优化，在return之前，预先把结果对象的地址传递给函数，函数创建完对象就把该对象放到该地址对象的空间上。</p><p>对象作为参数或者返回值时尽量使用引用：<br><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(Person &amp;p)</span></span> &#123;&#125;</span><br><span class="line">Person &amp;<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;&#125; <span class="comment">// 返回对象而不是指针</span></span><br></pre></td></tr></table></figure></p><p><strong>匿名对象</strong><br><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">Person</span><span class="params">(<span class="number">12</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>隐式构造</strong><br>某些情况下，会隐式调用单参数的构造函数。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Person <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">12</span>; <span class="comment">// 隐式构造</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person per = <span class="number">22</span>; <span class="comment">// 隐式构造，一次构造</span></span><br><span class="line"></span><br><span class="line">Person per2;  <span class="comment">// 构造</span></span><br><span class="line">per2 = <span class="number">23</span>; <span class="comment">// 拷贝构造</span></span><br></pre></td></tr></table></figure><p>使用关键字explicit禁用掉隐式构造。</p><h2 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sum</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 重载运算符: ()</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">Sum sum;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>使用成员函数，可以使用仿函数。对比普通函数，可以作为对象保存状态。</p><p>有些运算符不可以被重载，比如：</p><ul><li>对象成员访问运算符：<code>.</code></li><li>域运算符：<code>::</code></li><li>三目运算符：<code>?:</code></li><li><code>sizeof</code></li></ul><p>有些运算符只能重载为成员函数，比如：</p><ul><li>赋值运算符：<code>=</code></li><li>下标运算符：<code>[]</code></li><li>函数运算符：<code>()</code></li><li>指针访问成员：<code>-&gt;</code></li></ul><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>泛型，是一种将类型参数化以达到代码复用的技术，C++中使用模板来实现泛型。模板的使用格式如下：<br><code>template &lt;typename\class T&gt;</code>，其中typename和class是等价的。</p><p><strong>模板没有被使用时，是不会被实例化出来的。</strong><br>模板的声明和实现如果分离到.h和.cpp中，会导致链接错误。原因是，实现文件不知道外界究竟怎么使用模板，不知道该怎么生成具体的实现，这就导致了多个目标文件链接的时候，无法找到具体的函数实现地址。一般将模板的声明和实现统一放到一个.hpp文件中。这样，使用了哪些函数，编译器就生成哪些实现。</p><p><strong>函数模板</strong><br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">template &lt;class T&gt;</span><br><span class="line">void <span class="keyword">swap(T </span>&amp;a, T &amp;<span class="keyword">b) </span>&#123;</span><br><span class="line">    T tmp = a<span class="comment">;</span></span><br><span class="line">    a = <span class="keyword">b;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">b </span>= tmp<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>多参数模板</strong><br><figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> T1, <span class="keyword">class</span> T2&gt;</span><br><span class="line"><span class="keyword">void</span> show(<span class="keyword">const</span> T1 &amp;a, <span class="keyword">const</span> T2 &amp;b) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>类模板</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> &lt;&gt;show(T &amp;t); <span class="comment">// 类模板中的友元函数</span></span><br><span class="line">    T t;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>C语言风格的类型转换符 </p><ul><li>(type)expression</li><li>type(expression)</li></ul><p>C++中有4个类型转换符 </p><ul><li>static_cast</li><li>dynamic_cast</li><li>reinterpret_cast</li><li>const_cast </li></ul><p>使用格式：<code>xx_cast&lt;type&gt;(expression)</code></p><p><strong>const_cast</strong><br>一般用于去除const属性，将const转换成非const。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Person *p = <span class="keyword">new</span> Person();</span><br><span class="line">Person *p2 = <span class="keyword">const_cast</span>&lt;Person *&gt;(p);</span><br><span class="line"><span class="comment">// 等价于 Person *p2 = (Person *)p;</span></span><br></pre></td></tr></table></figure></p><p><strong>dynamic_cast</strong><br>一般用于多态类型的转换，有运行时安全检测。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person *p1 = <span class="keyword">new</span> Person();</span><br><span class="line">Person *p2 = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 相比较 Student *s = (Student *)p;，多了安全检测, s1会为空</span></span><br><span class="line">Student *s1 = <span class="keyword">dynamic_cast</span>&lt;Student *&gt;(p1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// s2正常</span></span><br><span class="line">Student *s2 = <span class="keyword">dynamic_cast</span>&lt;Student *&gt;(p2);</span><br></pre></td></tr></table></figure></p><p><strong>static_cast</strong><br>对比dynamic_cast，缺乏运行时安全检测</p><ul><li>不能交叉转换(不是同一继承体系的，无法转换) </li><li>常用于基本数据类型的转换、非const转成const </li><li>适用范围较广</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="comment">// 等价于 const Person *p2 = p1;</span></span><br><span class="line">Person p2 = <span class="keyword">static_cast</span>&lt;Student *&gt;(p1);</span><br></pre></td></tr></table></figure><p><strong>reinterpret_cast</strong><br>属于比较底层的强制转换，没有任何类型检查和格式转换，仅仅是简单的二进制数据拷贝。<br>可以交叉转换，可以将指针和整数互相转换。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">一个字节为<span class="number">8</span>位。一个十六进制位等于<span class="number">4</span>个二进制位。</span><br><span class="line">int a = <span class="number">10</span>;</span><br><span class="line">在计算机存储（小端模式）：</span><br><span class="line">二进制： <span class="number">0000</span> <span class="number">1010</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span>  <span class="number">0000</span> <span class="number">0000</span></span><br><span class="line">十六进制：<span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"></span><br><span class="line">double b = a; <span class="comment">//按照8个字节来说</span></span><br><span class="line">浮点数的存储于整数存储大不相同：</span><br><span class="line">十六进制：<span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">24</span> <span class="number">40</span></span><br><span class="line">浮点数存储不是简单把二进制数据拷贝存储。</span><br></pre></td></tr></table></figure><p>数据拷贝存储：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">double</span> b = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">double</span>&amp;&gt;(a);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span> *&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> m = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">int</span>&gt;(p);</span><br></pre></td></tr></table></figure><h2 id="C-11新特性"><a href="#C-11新特性" class="headerlink" title="C++11新特性"></a>C++11新特性</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">auto a</span> = 5;</span><br></pre></td></tr></table></figure><p>可以从初始化表达式中推断出变量的类型。</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">int <span class="keyword">b </span>= <span class="number">5</span><span class="comment">;</span></span><br><span class="line">decltype(<span class="keyword">b) </span>c = <span class="number">6</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>可以获取变量的类型。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = &amp;b;</span><br><span class="line">p = <span class="literal">nullptr</span>;</span><br></pre></td></tr></table></figure><p>指针置为空。</p><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">int <span class="keyword">array</span>[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (int <span class="literal">item</span> : <span class="keyword">array</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速遍历。</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">int array[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>初始化。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (*p)(<span class="keyword">int</span>, <span class="keyword">int</span>) = [](<span class="keyword">int</span> a, <span class="keyword">int</span> b) -&gt; <span class="keyword">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> exec(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>(*<span class="function"><span class="keyword">func</span>)<span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="function"><span class="keyword">func</span> == <span class="title">nullptr</span>) <span class="title">return</span> 0;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">func</span><span class="params">(a, b)</span>;</span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"><span class="title">exec</span><span class="params">(1, 2, [](<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a + b;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 值捕获与引用捕获</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">auto <span class="function"><span class="keyword">func</span> = [&amp;<span class="title">a</span>, <span class="title">b</span>]</span> &#123;</span><br><span class="line">    <span class="comment">// a是引用捕获， b是值捕获</span></span><br><span class="line">    a += <span class="number">1</span>;</span><br><span class="line">    cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mutable</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line">auto func2 = [c]() mutable &#123;</span><br><span class="line">    c += <span class="number">1</span>; <span class="comment">// c是11</span></span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; c &lt;&lt; endl; <span class="comment">//c为10</span></span><br></pre></td></tr></table></figure><p>Lambda表达式。</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h3 id="auto-ptr-已经废弃"><a href="#auto-ptr-已经废弃" class="headerlink" title="auto_ptr(已经废弃)"></a>auto_ptr(已经废弃)</h3><figure class="highlight pony"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    auto_ptr&lt;<span class="type">Person</span>&gt; p(<span class="function"><span class="keyword">new</span> <span class="title">Person</span>(<span class="number">1</span>));</span></span><br><span class="line"><span class="function">    <span class="title">p</span>-&gt;<span class="title">show</span>();</span></span><br><span class="line"><span class="function">&#125; <span class="comment">// 不需要调用delete函数</span></span></span><br></pre></td></tr></table></figure><p>自实现：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">template&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SP</span> </span>&#123;</span><br><span class="line">    T *mPointer;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SP(T *pointer) :mPointer(pointer) &#123;&#125;</span><br><span class="line">    ~SP() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mPointer == nullptr) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 指针销毁， 释放对象</span></span><br><span class="line">        delete mPointer;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// -&gt;运算符重载</span></span><br><span class="line">    T *<span class="keyword">operator</span>-&gt;() &#123;</span><br><span class="line">        <span class="keyword">return</span> mPointer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>auto_ptr不支持数组：<br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">auto_ptr&lt;<span class="keyword">Person</span><span class="comment">[]</span>&gt; p(new <span class="keyword">Person</span><span class="comment">[3]</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h3><p>多个shared_ptr可以指向同一个对象，当最后一个shared_ptr在作用域范围内结束时，对象才会被自动释放。<br>原理：<br>一个shared_ptr会对一个对象产生强引用(strong reference)。每个对象都有个与之对应的强引用计数，记录着当前对象被多少个shared_ptr强引用着，可以通过shared_ptr的use_count函数获得强引用计数。当有一个新的shared_ptr指向对象时，对象的强引用计数就会+1，当有一个shared_ptr销毁时(比如作用域结束)，对象的强引用计数就会-1，当一个对象的强引用计数为0时(没有任何shared_ptr指向对象时)，对象就会自动销毁(析构)。</p><p>可以支持数组：<br><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">shared_ptr&lt;<span class="keyword">Person</span><span class="comment">[]</span>&gt; ptr(new <span class="keyword">Person</span><span class="comment">[5]</span>&#123;&#125;);</span><br></pre></td></tr></table></figure></p><p>可以多个指针：<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">shared_ptr&lt;Person&gt; </span>ptr(new Person(<span class="number">2</span>))<span class="comment">;</span></span><br><span class="line"><span class="keyword">shared_ptr&lt;Person&gt; </span>ptr2 = ptr<span class="comment">;</span></span><br><span class="line"><span class="keyword">shared_ptr&lt;Person&gt; </span>ptr3 = ptr<span class="comment">;</span></span><br><span class="line">cout &lt;&lt; ptr.use_count &lt;&lt; endl<span class="comment">;</span></span><br></pre></td></tr></table></figure></p><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><p> weak_ptr会对一个对象产生弱引用，可以指向对象解决shared_ptr的循环引用问题。<br> 循环引用问题：<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Person&gt; mPerson;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">shared_ptr</span>&lt;Car&gt; mCar;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Person&gt; per(<span class="keyword">new</span> Person());</span><br><span class="line"><span class="built_in">shared_ptr</span>&lt;Car&gt; car(<span class="keyword">new</span> Car());</span><br><span class="line">per-&gt;mCar = car;</span><br><span class="line">car-&gt;mPer = per;</span><br></pre></td></tr></table></figure></p><p>解决循环引用：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">Car</span> &#123;</span><br><span class="line"><span class="attribute">public</span>:</span><br><span class="line">    weak_ptr&lt;Person&gt; mPerson;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">class</span> <span class="selector-tag">Person</span> &#123;</span><br><span class="line"><span class="attribute">public</span>:</span><br><span class="line">    shared_ptr&lt;Car&gt; mCar;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><p>unique_ptr也会对一个对象产生强引用，它可以确保同一时间只有1个指针指向对象当unique_ptr销毁时(作用域结束时)，其指向的对象也就自动销毁了。可以使用<code>std::move</code>函数转移unique_ptr的所有权。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">unique_ptr</span>&lt;Person&gt; ptr1(<span class="keyword">new</span> Person());</span><br><span class="line"><span class="comment">// 转移</span></span><br><span class="line"><span class="built_in">unique_ptr</span>&lt;person&gt; ptr2 = <span class="built_in">std</span>::move(ptr1);</span><br></pre></td></tr></table></figure></p><h1 id="二、其他"><a href="#二、其他" class="headerlink" title="二、其他"></a>二、其他</h1><h2 id="函数调用的流程"><a href="#函数调用的流程" class="headerlink" title="函数调用的流程"></a>函数调用的流程</h2><p>创建函数栈空间后，全部填充0xCCCCCCCC，即中断指令。起到断点的作用。<br>函数调用是有时间和空间开销的(递归效率低下)。<br>程序在执行一个函数之前需要做一些准备工作，要将实参、局部变量、返回地址以及若干寄存器都压入栈中，然后才能执行函数体中的代码；函数体中的代码执行完毕后还要清理现场，将之前压入栈中的数据都出栈，才能接着执行函数调用位置以后的代码。</p><h2 id="变量地址"><a href="#变量地址" class="headerlink" title="变量地址"></a>变量地址</h2><p>每一个字节都有自己的内存地址。一个变量的地址值，是它所有字节地址中的最小的那个地址值。CPU大小端模式，大多数是小端，即地址值低的位置优先（存储）读，高字节放高地址，低字节放低地址。</p><p>例：4个字节存储int类型的整数3：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">16</span>进制： <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span>H</span><br><span class="line"><span class="number">2</span>进制： <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000011</span></span><br></pre></td></tr></table></figure></p><p>例：<code>int age = 9;</code>的存储实现：</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="comment">// age地址是0x0113FD40</span></span><br><span class="line">int age = <span class="number">9</span>; </span><br><span class="line"><span class="number">0x0113FD40</span>  <span class="number">09</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> cc cc cc </span><br><span class="line"></span><br><span class="line"><span class="comment">// 从低到高吞并4个字节 由于是小端，则从右向左读取</span></span><br><span class="line"><span class="number">0x0113FD40</span>  <span class="number">09</span></span><br><span class="line"><span class="number">0x0113FD41</span>  <span class="number">00</span></span><br><span class="line"><span class="number">0x0113FD42</span>  <span class="number">00</span></span><br><span class="line"><span class="number">0x0113FD43</span>  <span class="number">00</span></span><br></pre></td></tr></table></figure><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>x64汇编兼容x86汇编<br>64位，一个寄存器存8个字节。32位，一个寄存器存4个字节。</p><p>64位<br>RAX\RBX\RCX\RDX 通用寄存器<br>32位<br>EAX\EBX\ECX\EDX 通用寄存器</p><p>RAX的低4个字节就是EAX。EAX的低2个字节就是AX。AX的低1个字节就是AL，AX的高1个字节就是AH。</p><h2 id="c-嵌入汇编"><a href="#c-嵌入汇编" class="headerlink" title="c++嵌入汇编"></a>c++嵌入汇编</h2><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line">__asm &#123;</span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">ax</span>, <span class="number">8</span></span><br><span class="line">    <span class="keyword">mov</span> <span class="built_in">eax</span>, <span class="number">12345678H</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mov dest, src</code>：将src的内容赋值给dest，类似于dest = src。</p><p>[地址值] 中括号[ ]里面放的都是内存地址。word是2字节，dword是4字节(double word)，qword是8字节(quad word) 。</p><p><code>mov eax, dword ptr [1234h]</code>：从1234h开始取出4个字节（往高字节）的内容给eax寄存器。</p><p><code>mov [1234h], 6</code>：表示把6赋值到<code>1234h</code>地址所在的内存空间。</p><p><code>call 函数地址</code>：调用函数。</p><p><code>lea dest, [地址值]</code>：将地址值赋值给dest，类似于dest = 地址值。</p><p><code>ret</code>：函数返回。</p><p><code>xor op1, op2</code>：将op1和op2异或的结果赋值给op1，类似于op1 = op1 ^ op2。</p><p><code>add op1, op2</code>：类似于op1 = op1 + op2。</p><p><code>sub op1, op2</code>：类似于op1 = op1 - op2。</p><p><code>inc op</code>：自增，类似于op = op + 1。</p><p><code>dec op</code>：自减，类似于op = op – 1。</p><p><code>jmp 内存地址</code>：跳转到某个内存地址去执行代码。j开头的一般都是跳转，大多数是带条件的跳转，一般跟test、cmp等指令配合使用。</p><p>eax一般存储函数返回值。jne不相等跳转。je相等跳转。<br><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> m = <span class="number">8</span><span class="comment">;</span></span><br><span class="line">012E18C8  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>],<span class="number">8</span>  </span><br><span class="line"><span class="keyword">int</span> n = m<span class="comment">;</span></span><br><span class="line">012E18CF  <span class="keyword">mov</span>         <span class="built_in">eax</span>,<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">8</span>]  </span><br><span class="line">012E18D2  <span class="keyword">mov</span>         <span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">ebp</span>-<span class="number">14h</span>],<span class="built_in">eax</span></span><br></pre></td></tr></table></figure></p><h2 id="C语言中模拟面向对象"><a href="#C语言中模拟面向对象" class="headerlink" title="C语言中模拟面向对象"></a>C语言中模拟面向对象</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"func show\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 方法（指向函数的指针）</span></span><br><span class="line">    <span class="keyword">void</span> (*show)(<span class="keyword">void</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br><span class="line">    stu.age = <span class="number">10</span>;</span><br><span class="line">    stu.show = show;</span><br><span class="line">    stu.show();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="声明与实现分离"><a href="#声明与实现分离" class="headerlink" title="声明与实现分离"></a>声明与实现分离</h2><p>头文件<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mAge;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    Person();</span><br><span class="line">    ~Person();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>实现文件<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Person.hpp"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Person::setAge(<span class="keyword">int</span> age) &#123;</span><br><span class="line">    mAge = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Person::getAge() &#123;</span><br><span class="line">    <span class="keyword">return</span> mAge;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::Person() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person::~Person() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="string的使用"><a href="#string的使用" class="headerlink" title="string的使用"></a>string的使用</h2><p>前提:<code>#include &lt;string&gt;</code></p><p>1.输入输出</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">string s<span class="comment">;</span></span><br><span class="line">cin &gt;&gt; s<span class="comment">;</span></span><br><span class="line">cou &lt;&lt; s &lt;&lt; endl<span class="comment">;</span></span><br></pre></td></tr></table></figure><p>2.通过下标访问<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> s = <span class="string">"qwert"</span>;</span><br><span class="line">s[<span class="number">3</span>] = 'd';</span><br><span class="line">couy &lt;&lt; s[<span class="number">2</span>];</span><br></pre></td></tr></table></figure></p><p>3.拼接<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">string s = <span class="string">"i"</span><span class="comment">;</span></span><br><span class="line">char *<span class="built_in">s1</span> = <span class="string">"love"</span><span class="comment">;</span></span><br><span class="line">char <span class="built_in">s2</span>[] = <span class="string">"you"</span><span class="comment">;</span></span><br><span class="line">char <span class="built_in">s3</span> = <span class="string">'!'</span><span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">string rs = s + <span class="built_in">s1</span> + <span class="built_in">s2</span> + <span class="built_in">s3</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p><p>4.插入<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> s = <span class="string">"sdf"</span>;</span><br><span class="line">s.insert(<span class="number">1</span>,<span class="string">"sds"</span>); <span class="comment">// 索引/内容</span></span><br></pre></td></tr></table></figure></p><p>5.删除<br><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="built_in">s1</span> = <span class="built_in">s2</span> = <span class="built_in">s3</span> = <span class="string">"1234567890"</span><span class="comment">;</span></span><br><span class="line"><span class="built_in">s2</span>.erase(<span class="number">5</span>)<span class="comment">;</span></span><br><span class="line"><span class="built_in">s3</span>.erase(<span class="number">5</span>, <span class="number">3</span>)<span class="comment">; // 长度为3</span></span><br></pre></td></tr></table></figure></p><p>6.提取</p><p><code>s1.substr(6, 6); // 长度为6</code></p><p>7.查找</p><p><code>s.find(&quot;,&quot;,1); // 从索引1开始查找逗号,返回索引</code></p><h2 id="C-中的单例"><a href="#C-中的单例" class="headerlink" title="C++中的单例"></a>C++中的单例</h2><p>1.构造函数、拷贝构造函数以及析构函数私有。<br>2.定义一个私有的static静态成员变量。<br>3.提供公开访问接口。</p><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="keyword">App</span> &#123;</span><br><span class="line">public:</span><br><span class="line">    static <span class="keyword">App</span> *sharedApp() &#123;</span><br><span class="line">        <span class="comment">// 考虑加锁...</span></span><br><span class="line">        <span class="keyword">if</span> (gApp == NULL) &#123;</span><br><span class="line">            gApp = new <span class="keyword">App</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 考虑解锁...</span></span><br><span class="line">        <span class="keyword">return</span> gApp;</span><br><span class="line">    &#125;</span><br><span class="line">private:</span><br><span class="line">    <span class="keyword">App</span>() &#123;&#125;</span><br><span class="line">    <span class="keyword">App</span>(<span class="keyword">const</span> <span class="keyword">App</span> &amp;<span class="keyword">app</span>) &#123;&#125;</span><br><span class="line">    ~<span class="keyword">App</span>() &#123;&#125;</span><br><span class="line">    static <span class="keyword">App</span>*gApp;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">App</span> *<span class="keyword">App</span>::gApp = NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建单例</span></span><br><span class="line"><span class="keyword">App</span> *<span class="keyword">app</span> = <span class="keyword">App</span>::sharedApp();</span><br></pre></td></tr></table></figure><blockquote><p>参考博客：<br><a href="http://c.biancheng.net/cpp/biancheng/cpp/rumen/" target="_blank" rel="noopener">C语言中文网</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2019.08.18 补充汇编内容&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt; C++和汇编。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://blog.chenyalun.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>排序算法实现</title>
    <link href="http://blog.chenyalun.com/2017/03/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
    <id>http://blog.chenyalun.com/2017/03/05/排序算法实现/</id>
    <published>2017-03-05T03:52:27.000Z</published>
    <updated>2019-08-17T23:37:36.180Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>2017.03.25 修改<br>2017.04.24 修改部分代码</p></blockquote><p align="center"> 排序算法。 </p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为笔试使用的编译器语言为Python2.7，所以以下代码使用Python2实现并规定从小到大为目标顺序。</p><p>八大排序：<br>直接插入排序，希尔排序，简单选择排序，堆排序，冒泡排序，快速排序，归并排序，基数排序。</p><h2 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h2><p>假定n1 = n2，排序前n1位于n2前面，如果排序后n1扔领先于n2，则称排序算法稳定。</p><h2 id="内排序与外排序"><a href="#内排序与外排序" class="headerlink" title="内排序与外排序"></a>内排序与外排序</h2><p>内排序：排序的整个过程中，待排序的所有记录全部被放置在内存中。<br>外排序：由于排序的记录太多，排序的过程中，需要内外存之间多次交换才能进行。</p><h1 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h1><p>原理：通过相邻元素的比较和交换，把较大的数交换到后面，类似水泡向上面(数组的后面，所以总是靠后的数字有序)升，故称为冒泡排序。如果两数相等，不交换，所以稳定。</p><p>普通方式</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line">n = len(tempList)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, n - x):<span class="comment"># 索引n-x之后的数已经排序好了</span></span><br><span class="line"><span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><p>优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，无需继续迭代。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交换排序-冒泡排序优化1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort1</span><span class="params">(tempList)</span>:</span></span><br><span class="line">n = len(tempList)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line"><span class="comment">#标志位,倘若没有交换,说明已经排序好了</span></span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, n - x):<span class="comment"># 索引n-x之后的数已经排序好了</span></span><br><span class="line"><span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line">flag = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> flag: <span class="comment"># 发现并没有发生交换</span></span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort1([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><p>优化2：记录最后发生交换的位置，位置之后的数据已经井然有序。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交换排序-冒泡排序优化2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort2</span><span class="params">(tempList)</span>:</span></span><br><span class="line">n = len(tempList)</span><br><span class="line"><span class="comment"># 循环范围</span></span><br><span class="line">m = n</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line"><span class="comment">#标志位,倘若没有交换,说明已经排序好了</span></span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, m):<span class="comment"># 索引m之后的数已经排序好了</span></span><br><span class="line"><span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line">m = y</span><br><span class="line">flag = <span class="keyword">False</span></span><br><span class="line"><span class="keyword">if</span> flag: <span class="comment"># 发现并没有发生交换</span></span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort2([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>最好情况:数据井然有序,根据优化后的代码,只需要迭代一次,即n-1次的比较,则时间复杂度为O(n)<br>最坏情况:数据逆序,需要比较的次数为1+2+3+4+…+(n-1)=n(n-1)/2次,时间复杂度为O(n^2)</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">假定有4个数,分别为4<span class="number"> 3 </span>2 1,排序过程为:</span><br><span class="line">原数据:<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">第1次:<span class="number"> 3 </span>4<span class="number"> 2 </span>1</span><br><span class="line">第2次:<span class="number"> 3 </span>2<span class="number"> 4 </span>1</span><br><span class="line">第3次:<span class="number"> 3 </span>2<span class="number"> 1 </span>4</span><br><span class="line">第4次:<span class="number"> 2 </span>3<span class="number"> 1 </span>4</span><br><span class="line">第5次:<span class="number"> 2 </span>1<span class="number"> 3 </span>4</span><br><span class="line">第6次:<span class="number"> 1 </span>2<span class="number"> 3 </span>4</span><br><span class="line"></span><br><span class="line">归纳推理:n(n-1)/2次</span><br></pre></td></tr></table></figure><h1 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h1><p>在未排序序列中找到最小元素，存放到排序序列的起始位置(与第一个元素交换位置)，然后，再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾(与第二个元素交换位置)。以此类推，直到所有元素均排序完毕。</p><p>通过n-i次关键字间的比较,从n-i+1个记录中选出最小的记录,并和第i个记录交换之.</p><p>选择排序的交换操作介于 0 和 ( n − 1 )次之间。<br>选择排序的比较操作为 n ( n − 1 ) / 2次之间。<br>选择排序的赋值操作介于 0 和 3 ( n − 1 )次之间。</p><p>当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</p><figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">def selectionSort(tempList):</span><br><span class="line">n = len(tempList)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line"><span class="meta"># 假定索引x对应的是最小值</span></span><br><span class="line"><span class="keyword">index</span> = x</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(x + <span class="number">1</span>,n):</span><br><span class="line"><span class="meta"># 如果找到比索引index对应的值还要小的值,交换两者位置</span></span><br><span class="line"><span class="keyword">if</span> tempList[<span class="keyword">index</span>] &gt; tempList[y]:</span><br><span class="line">tempList[<span class="keyword">index</span>], tempList[y] = tempList[y], tempList[<span class="keyword">index</span>]</span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print selectionSort([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure><p><strong>分析</strong><br>特点:交换移动数据次数相当少<br>最好情况与最坏情况:比较次数一样多,为n(n-1)/2次,时间复杂度:O(n^2)</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">假定有4个数据,分别为<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">原数据:<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">第1次比较:<span class="number"> 4 </span>与 3</span><br><span class="line">第2次比较:<span class="number"> 4 </span>与 2</span><br><span class="line">第3次比较:<span class="number"> 4 </span>与<span class="number"> 1 </span>(此时数据为1<span class="number"> 3 </span>2 4)</span><br><span class="line">第4次比较:<span class="number"> 3 </span>与 2</span><br><span class="line">第5次比较:<span class="number"> 3 </span>与<span class="number"> 4 </span>(此时数据为<span class="number"> 1 </span>2<span class="number"> 3 </span>4)</span><br><span class="line">第6次比较:<span class="number"> 3 </span>与 4</span><br><span class="line"></span><br><span class="line">最终结果:<span class="number"> 1 </span>2<span class="number"> 3 </span>4</span><br><span class="line">比较次数:6次</span><br></pre></td></tr></table></figure><p>选择排序是不稳定的排序算法,比如<code>5 8 5 2 9</code>,显然第1个5最终落到第2个5的后面.</p><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">原数据:    5'<span class="number"> 8 </span>5<span class="number"> 2 </span>9</span><br><span class="line">第1次交换:<span class="number"> 2 </span>8<span class="number"> 5 </span>5' 9</span><br><span class="line">第2次交换:<span class="number"> 2 </span>5<span class="number"> 8 </span>5' 9</span><br><span class="line">第3次交换:<span class="number"> 2 </span>5 5'<span class="number"> 8 </span>9</span><br><span class="line">第4次交换:<span class="number"> 2 </span>5 5'<span class="number"> 8 </span>9</span><br><span class="line"></span><br><span class="line">最终 5'在<span class="number"> 5 </span>的前面.</span><br></pre></td></tr></table></figure><h1 id="三、直接插入排序"><a href="#三、直接插入排序" class="headerlink" title="三、直接插入排序"></a>三、直接插入排序</h1><p>原理:在一个已经有序的数据序列中插入一个数，在插入后此数据序列仍然有序。默认前1个数有序，第二个数与前一个数组成的有序数列比较并插入，第三个数与前两个数组成的有序数列比较并插入……所以总是靠前的数字有序。</p><p>遇到相等的数，插入到该数的后面，而不是前面，所以是稳定排序算法。</p><p><img src="http://static.chenyalun.com/2017/03/15/2017031501.gif" alt></p><p>最好情况：序列已经是升序排列了，需要进行的比较操作需(n-1)次,时间复杂度为O(n)。<br>最坏情况：序列是降序排列，那么此时需要进行的比较共有 n ( n − 1 ) / 2 次。<br>插入排序的赋值操作是比较操作的次数加上(n-1)次。<br>平均来说插入排序算法复杂度为 O ( n^2 )。<br>插入排序不适合对于数据量比较大的排序应用。<strong>用于少量元素的排序</strong>（通常为8个或以下）。</p><p>直接插入</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(tempList)</span></span><span class="symbol">:</span></span><br><span class="line"><span class="comment"># 获取列表的长度</span></span><br><span class="line">n = len(tempList)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,n): <span class="comment"># 从第1个元素而非第0个元素开始遍历</span></span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> xrange(x, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment"># 在已经排好序的列表中逐个扫描</span></span><br><span class="line"><span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]: <span class="comment"># 如果当前元素比前面的小</span></span><br><span class="line">tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y] <span class="comment"># 两者位置互换</span></span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="comment"># print insertionSort([])</span></span><br><span class="line"><span class="comment"># print insertionSort([8])</span></span><br><span class="line"><span class="comment"># print insertionSort([5,2,7,0,1,5,9])</span></span><br></pre></td></tr></table></figure><h1 id="四、二分插入排序"><a href="#四、二分插入排序" class="headerlink" title="四、二分插入排序"></a>四、二分插入排序</h1><p>二分查找插入与希尔排序是直接插入排序的优化。</p><p>二分查找插入</p><p>使用Python模块实现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> bisect模块实现了一个算法, 用于向一个有序列表中插入一个元素,不改变列表的序列</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用这个模块的函数前先确保操作的列表是已排序的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">import bisect </span></span><br><span class="line">def insertionSortBisect(tempList):  </span><br><span class="line">    for i in xrange(1, len(tempList)):  </span><br><span class="line">        bisect.insort(tempList, tempList.pop(i), 0, i) # 排序列表,移除并插入元素,区间开始,区间结束</span><br><span class="line">    return tempList</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([])</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([8])</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([5,2,7,0,1,5,9])</span></span><br></pre></td></tr></table></figure><p>手动实现</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二分查找的前提必须待查找的序列有序</span></span><br><span class="line"><span class="comment"># 在有序列表中,返回值m应该所在的索引</span></span><br><span class="line">def indexOfInsertionSort(tempList, m):</span><br><span class="line"><span class="comment"># 获取列表的长度</span></span><br><span class="line">n = <span class="built_in">len</span>(tempList)</span><br><span class="line">left, <span class="literal">right</span> = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> left &lt;= <span class="literal">right</span>:</span><br><span class="line"><span class="keyword">middle</span> = (left + <span class="literal">right</span>) / <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> tempList[<span class="keyword">middle</span>] &lt; m:<span class="comment"># 右半部分</span></span><br><span class="line">left = <span class="keyword">middle</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>: <span class="comment">#左半部分,含相同元素</span></span><br><span class="line"><span class="literal">right</span> = <span class="keyword">middle</span> <span class="number">-1</span></span><br><span class="line"><span class="literal">return</span> <span class="literal">right</span> +<span class="number">1</span></span><br><span class="line"></span><br><span class="line">def insertionSortbin(tempList):</span><br><span class="line"><span class="comment"># 获取列表的长度</span></span><br><span class="line">n = <span class="built_in">len</span>(tempList)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,n): <span class="comment"># 从头至尾遍历列表中的元素</span></span><br><span class="line">m = tempList[x]</span><br><span class="line">tempList.pop(x)</span><br><span class="line">index = indexOfInsertionSort(tempList[<span class="number">0</span>:x],m)</span><br><span class="line">tempList.insert(index , m) <span class="comment">#第一个参数是索引,第二个参数是数值</span></span><br><span class="line"><span class="literal">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="comment">#print insertionSortbin([12,12,16,8,5,10,7])</span></span><br></pre></td></tr></table></figure><h1 id="五、希尔排序"><a href="#五、希尔排序" class="headerlink" title="五、希尔排序"></a>五、希尔排序</h1><p>先将待排记录序列分割为若干个子序列，分别进行直接插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序。</p><p>采用跳跃分割的策略:把相距某个”增量”的记录组成一个序列，保证在子序列内分别进行直接插入排序后得到的结果是基本有序的。</p><p>原始序列</p><blockquote><p>2 5 1 9 8 2 10 4</p></blockquote><p>4步长，分组，每列排序</p><blockquote><p>2 5 1 9<br>8 2 10 4</p></blockquote><p>排序后</p><blockquote><p>2 2 1 4<br>8 5 10 9</p></blockquote><p>也即</p><blockquote><p>2 2 1 4 8 5 10 9</p></blockquote><p>2步长，再分组</p><blockquote><p>2 2<br>1 4<br>8 5<br>10 9</p></blockquote><p>排序</p><blockquote><p>1 2<br>2 4<br>8 5<br>10 9</p></blockquote><p>也即：</p><blockquote><p>1 2 2 4 8 5 10 9</p></blockquote><p>最后以1步长进行排序（还是直接插入排序）。</p><p>一般插入</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def insertionSortShell(tempList):</span><br><span class="line">n = len(tempList)</span><br><span class="line"># 确定分组,假定n = 6</span><br><span class="line"><span class="built_in">group </span>= n / 2 # 此时group = 3,分成3组,3组元素索引分别为3与3-3,4与4-3,5与5-3</span><br><span class="line"><span class="keyword">while</span><span class="built_in"> group </span>&gt; 0:</span><br><span class="line">#x从3到5</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(group,n):</span><br><span class="line"># 每组元素:x,x-group,x-group-group <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>插入排序</span><br><span class="line">temp = tempList[x]</span><br><span class="line">y = x</span><br><span class="line"># 这里使用简单的插入排序</span><br><span class="line"><span class="keyword">while</span> y &gt;=<span class="built_in"> group </span><span class="keyword">and</span> tempList[y - group] &gt; temp:</span><br><span class="line">tempList[y] = tempList[y - group]</span><br><span class="line">y -= group</span><br><span class="line">tempList[y] = temp</span><br><span class="line"></span><br><span class="line"><span class="built_in">group </span>/= 2</span><br><span class="line">return tempList</span><br></pre></td></tr></table></figure><p>互换法</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def insertionSortShellExchange(tempList):</span><br><span class="line">n = len(tempList)</span><br><span class="line"># 确定分组,假定n = 6</span><br><span class="line"><span class="built_in">group </span>= n / 2 # 此时group = 3,分成3组,3组元素索引分别为3与3-3,4与4-3,5与5-3</span><br><span class="line"><span class="keyword">while</span><span class="built_in"> group </span>&gt; 0:</span><br><span class="line">#x从3到5</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> xrange(group,n):</span><br><span class="line"># 每组元素:x,x-group,x-group-group <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>插入排序</span><br><span class="line">y = x</span><br><span class="line">m = tempList[x]</span><br><span class="line"><span class="keyword">while</span> y &gt;=<span class="built_in"> group </span><span class="keyword">and</span> tempList[y - group] &gt; m:</span><br><span class="line"># 这里直接交换位置</span><br><span class="line">tempList[y], tempList[y - group] = tempList[y - group], tempList[y]</span><br><span class="line">y -= group</span><br><span class="line"></span><br><span class="line"><span class="built_in">group </span>/= 2</span><br><span class="line">return tempList</span><br><span class="line"></span><br><span class="line"><span class="comment">#print insertionSortShell([1,8,10,2,4,0])</span></span><br><span class="line"><span class="comment">#print insertionSortShellExchange([1,8,10,2,4,0])</span></span><br></pre></td></tr></table></figure><p>由于记录是跳跃式的，希尔排序是不稳定的排序算法。</p><h1 id="六、堆排序"><a href="#六、堆排序" class="headerlink" title="六、堆排序"></a>六、堆排序</h1><p>堆排序是对简单选择排序的改进。</p><p>堆是具有以下性质的完全二叉树:<br>每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆。<br>每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p><p>性质:按层遍历的方式给结点编号，则有:</p><pre><code>k(i) &gt;= k(2i)k(i) &gt;= k(2i+1)或k(i) &lt;= k(2i)k(i) &lt;= k(2i+1)</code></pre><p>堆排序就是利用堆进行排序的算法，基本思想是:将待排序的序列构造成一个大顶堆，此时整个序列的最大值就是堆顶的根结点。把它移走(其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值)，然后将剩余的n-1个值重新构造成一个堆，这样就会得到n个元素中的次小值，如此反复执行，便能得到一个有序序列了。</p><p>需要解决的两个问题:<br><strong>1. 如何由一个无序序列构建成一个堆</strong><br><strong>2. 如何在获取堆顶元素后，调整剩余元素成为一个新的堆</strong></p><p>所谓的将待排序的序列构建成一个大顶堆，其实就是从下往上、从右往左，将每个非叶结点当作根节点，将其和其子树调整成大顶堆。</p><p>在正式排序时，第i次取堆顶记录重建需要O(logi)的时间，并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为O(nlogn)。</p><p>堆排序对原始状态的排序不敏感，无论是最好最坏还是平均情况时间复杂度总是为O(nlogn)。</p><p>注意:由于初始构建堆所需的比较次数较多，因此，它并<strong>不适合待排序序列个数较少的情况</strong>。</p><p>实现</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start是当前需要调整最小堆的位置,end是调整边界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapAdjust</span><span class="params">(tempList, start, end)</span>:</span></span><br><span class="line">    root = start</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        child = root * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> child &gt; end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> child + <span class="number">1</span> &lt;= end <span class="keyword">and</span> tempList[child] &lt; tempList[child + <span class="number">1</span>]:</span><br><span class="line">            child += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tempList[root] &lt; tempList[child]:</span><br><span class="line">            tempList[root], tempList[child] = tempList[child], tempList[root]</span><br><span class="line">            root = child</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line">    n = len(tempList)</span><br><span class="line">    <span class="comment"># 构造小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n / <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        heapAdjust(tempList, i, n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># 将堆顶记录和当前未排序子序列的最后一个记录交换</span></span><br><span class="line">        tempList[<span class="number">0</span>], tempList[i] = tempList[i], tempList[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 重新调整为小顶堆</span></span><br><span class="line">        heapAdjust(tempList, <span class="number">0</span>, i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> heapSort([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure><h1 id="七、归并排序"><a href="#七、归并排序" class="headerlink" title="七、归并排序"></a>七、归并排序</h1><p>归并排序就是利用归并的思想实现的排序算法。原理是:假设初始序列含有n个记录，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两合并，得到n/2的向上取整个长度为2或者为1的有序子序列，然后两两合并，如此重复，直到得到一个长度为n的有序序列。该方法也称为2路归并排序。</p><p>比较操作的次数介于 ( nlogn ) / 2 和 nlogn − n + 1。<br>赋值操作的次数是 ( 2 nlogn )。</p><p><img src="http://static.chenyalun.com/2017/03/15/2017031503.gif" alt></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#归并排序</span></span><br><span class="line">def mergeSort(tempList):</span><br><span class="line"><span class="built_in">length</span> = <span class="built_in">len</span>(tempList)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">length</span> &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="literal">return</span> tempList</span><br><span class="line"><span class="comment"># 二分列表</span></span><br><span class="line"><span class="keyword">middle</span> = <span class="built_in">length</span> / <span class="number">2</span></span><br><span class="line">leftList = mergeSort(tempList[:<span class="keyword">middle</span>])</span><br><span class="line">rightList = mergeSort(tempList[<span class="keyword">middle</span>:])</span><br><span class="line"></span><br><span class="line"><span class="literal">return</span> <span class="built_in">merge</span>(leftList,rightList)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">merge</span>(leftList,rightList):</span><br><span class="line">leftIndex,rightIndex = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="built_in">result</span> = []</span><br><span class="line"><span class="keyword">while</span> leftIndex &lt; <span class="built_in">len</span>(leftList) <span class="keyword">and</span> rightIndex &lt; <span class="built_in">len</span>(rightList):</span><br><span class="line"><span class="keyword">if</span> leftList[leftIndex] &lt; rightList[rightIndex]:</span><br><span class="line"><span class="built_in">result</span>.append(leftList[leftIndex])</span><br><span class="line">leftIndex += <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">result</span>.append(rightList[rightIndex])</span><br><span class="line">rightIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">result</span> += leftList[leftIndex:]</span><br><span class="line"><span class="built_in">result</span> += rightList[rightIndex:]</span><br><span class="line"><span class="literal">return</span> <span class="built_in">result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print mergeSort([<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>一趟归并需要耗费O(n)时间，由完全二叉树的深度可知，整个归并排序需要进行logn次，故，总的时间复杂度为O(logn)，并且最好/最坏/平均时间性能均是如此。</p><p>归并排序需要两两比较，不存在跳跃，因此稳定。</p><h1 id="八、快速排序"><a href="#八、快速排序" class="headerlink" title="八、快速排序"></a>八、快速排序</h1><p>20世纪十大算法之一。</p><p>关键词:基准 分组 递归</p><p>在平均状况下，排序n个项目要Ο(n log n)次比较。<br>在最坏状况下则需要Ο(n2)次比较。</p><p><img src="http://static.chenyalun.com/2017/03/15/2017031502.gif" alt></p><p>快速排序使用分治法策略来把一个序列分为两个子序列。</p><p>步骤为：</p><ol><li>从数列中挑出一个元素，作为基准数，</li><li>分区：把比基准大的放在右边，比基准小的放在左边，等于基准的放在基准列表中。</li><li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line"><span class="keyword">if</span> len(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基准列表</span></span><br><span class="line">pivotList = []</span><br><span class="line"><span class="comment"># 比基准小的列表</span></span><br><span class="line">lessList = []</span><br><span class="line"><span class="comment"># 比基准大的列表</span></span><br><span class="line">moreList = []</span><br><span class="line"><span class="comment">#将第一个值作为基准</span></span><br><span class="line">pivot = tempList[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 遍历tempList</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> tempList:</span><br><span class="line"><span class="comment"># 比基准大,放入moreList</span></span><br><span class="line"><span class="keyword">if</span> x &gt; pivot:</span><br><span class="line">moreList.append(x)</span><br><span class="line"><span class="comment"># 比基准小,放入lessList</span></span><br><span class="line"><span class="keyword">elif</span> x &lt; pivot:</span><br><span class="line">lessList.append(x)</span><br><span class="line"><span class="comment"># 与基准相等,放入基准列表中</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pivotList.append(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对lessList和moreList递归操作</span></span><br><span class="line">lessList = quickSort(lessList)</span><br><span class="line">moreList = quickSort(moreList)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回排序好的列表</span></span><br><span class="line"><span class="keyword">return</span> lessList + pivotList + moreList</span><br></pre></td></tr></table></figure><p>甚至可以这么写</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort1</span><span class="params">(tempList)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tempList</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = tempList[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> quickSort1([x <span class="keyword">for</span> x <span class="keyword">in</span> tempList[<span class="number">1</span>:] <span class="keyword">if</span> x &lt; pivot])\</span><br><span class="line">         + [pivot] + \</span><br><span class="line">         quickSort1([x <span class="keyword">for</span> x <span class="keyword">in</span> tempList[<span class="number">1</span>:] <span class="keyword">if</span> x &gt;= pivot])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quickSort1([<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure><p>快速排序的时间复杂度取决于快速排序递归的深度，在最优情况下时间复杂度为O(logn)。最坏情况下，待排序为正序或者逆序，时间复杂度为O(n^2)</p><p>由于关键字的比较和交换是跳跃进行的，因此快速排序不稳定。</p><p>快速排序的优化:</p><ol><li><strong>优化选取枢轴</strong><br>三数取中法:取三个关键字先进行排序，将中间数作为枢轴，一般取左端、右端和中间三个数，也可以随机选取，至少枢轴不是最大或者最小的数。</li></ol><h1 id="九、计数排序"><a href="#九、计数排序" class="headerlink" title="九、计数排序"></a>九、计数排序</h1><p>计数排序是用来排序0到100之间的数字的最好的算法。</p><p>步骤:</p><blockquote><p>找出待排序的数组中最大和最小的元素<br>统计数组中每个值为i的元素出现的次数，存入数组 C 的第 i 项<br>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）<br>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</p></blockquote><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计数排序</span></span><br><span class="line">def countsort(tempList):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line"><span class="literal">return</span> tempList</span><br><span class="line"></span><br><span class="line">maxValue = <span class="built_in">max</span>(tempList)</span><br><span class="line">minValue = <span class="built_in">min</span>(tempList)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建计数列表countList</span></span><br><span class="line">countList = [<span class="number">0</span>] * (maxValue - minValue + <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 获取元素出现次数</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> tempList:</span><br><span class="line">countList[e - minValue] += <span class="number">1</span></span><br><span class="line">index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 填值</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">a</span> <span class="keyword">in</span> xrange(maxValue - minValue + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> xrange(countList[<span class="keyword">a</span>]):</span><br><span class="line">tempList[index] = <span class="keyword">a</span> + minValue</span><br><span class="line">index += <span class="number">1</span></span><br><span class="line"><span class="literal">return</span> tempList</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print countsort([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>那么,以1,6,3,2,3为例<br>最值<br>maxValue = 6<br>minValue = 1</p><p>计数列表<br>countList = [0, 0, 0, 0, 0, 0]</p><p>元素出现的次数<br>countList = [1, 1, 2, 0, 0, 1]</p><table><thead><tr><th>a</th><th>countList[a] 即遍历次数</th><th>tempList[index]</th></tr></thead><tbody><tr><td>0</td><td>1</td><td>tempList[0] = 1</td></tr><tr><td>1</td><td>1</td><td>tempList[1] = 2</td></tr><tr><td>2</td><td>2</td><td>tempList[2] = 3以及tempList[3] = 3</td></tr><tr><td>3</td><td>0</td><td></td></tr><tr><td>4</td><td>0</td><td></td></tr><tr><td>5</td><td>1</td><td>tempList[4] = 6</td></tr></tbody></table><p>排序成功:1, 2, 3, 3, 6</p><h1 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h1><p>算法分析：</p><p><img src="http://static.chenyalun.com/2017/03/15/2017031504.jpg" alt></p><p>代码保存在<a href="https://github.com/ChenYalun/YACode/tree/master/Blog" target="_blank" rel="noopener">GitHub</a>上。</p><blockquote><p>参考资料：<br>《大话数据结构》<br><a href="https://zh.wikipedia.org/zh-hans/" target="_blank" rel="noopener">维基百科</a><br><a href="https://segmentfault.com/a/1190000006546190#articleHeader17" target="_blank" rel="noopener">segmentfault</a><br><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="noopener">WuChong</a><br><a href="http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/" target="_blank" rel="noopener">bubkoo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;2017.03.25 修改&lt;br&gt;2017.04.24 修改部分代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p align=&quot;center&quot;&gt; 排序算法。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://blog.chenyalun.com/tags/Python/"/>
    
      <category term="算法" scheme="http://blog.chenyalun.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="排序" scheme="http://blog.chenyalun.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
</feed>
