<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[开源项目：YAPageView]]></title>
      <url>http://blog.chenyalun.com/2019/08/07/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9AYAPageView/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 轻量级、新样式轮播视图。 </p><br><a id="more"></a><p></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在拜读<a href="http://adad184.com/" target="_blank" rel="noopener">里脊串的开发随笔</a>大神的博客时，发现个好玩的东西：<a href="http://adad184.com/2015/07/01/opensource-xxpagingscrollview/" target="_blank" rel="noopener">《开源项目:XXPagingScrollView》</a>。虽然是很常见的轮播视图，但是这种新样式的实现思路挺有意思。记得两年前在写某个项目时也遇到过这个，但是当然确实没有想出来咋实现这种非全屏有间隙的轮播控件。</p>
<p>读完大神的文章，很是兴奋，一般是不爱造重复的轮子，但是作者这个是<a href="https://github.com/adad184/XXPagingScrollView/blob/master/Classes/XXPagingScrollView.swift" target="_blank" rel="noopener">Swift版本</a>的，而且是基础组件，少了很多功能，所以心血来潮，在大神基础上再进一步。</p>
<p>相比较来说更加完善了：</p>
<ul>
<li>支持设置pagingWidth</li>
<li>支持设置pageInset</li>
<li>支持无限循环轮播</li>
<li>支持本地图片</li>
<li>支持网络图片</li>
<li>支持自动轮播、设置轮播时间间隔</li>
<li>支持点击回调</li>
</ul>
<p>整体代码约150行左右，更加精简。<br><img src="https://image.chenyalun.com/2019/08/07/003.gif"><br>项目地址:<a href="https://github.com/ChenYalun/YAPageView" target="_blank" rel="noopener">https://github.com/ChenYalun/YAPageView</a></p>
<h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>实际上轮播视图是烂大街的东西了，网上现成代码特别多。一般而言，假定需要n个页面，实现方式有：</p>
<ol>
<li>使用<code>UIScrollView</code>，添加 n 个<code>UIImageView</code>。</li>
<li>使用<code>UIScrollView</code>，添加两个<code>UIImageView</code>，动态循环调整。</li>
<li>使用<code>UICollectionView</code>。</li>
</ol>
<p>方法1比较基础，更适合非循环；方法3比较简单，但是<code>UICollectionView</code>过于heavily。<br>方法2，很精简轻量，就是处理起来有点绕。然而，绕一次，换来永久的舒适，很值得。</p>
<p>如何实现自定义<code>Page width</code>的视图，作者给出的方案是：</p>
<blockquote>
<p>方案1: 不使用<code>pagingEnabled</code>属性 而是手动的计算并设置滑动偏移<br>方案2: 使用<code>pagingEnabled</code>属性 扩大<code>UIScrollview</code>的显示范围即可</p>
</blockquote>
<p>很明显，方案2更好。思路是，扩大<code>UIScrollView</code>的可显示范围并让UIScrollView响应超出其本身范围的触摸事件。思路知道了，实现起来很简单，就是<code>clipsToBounds</code>属性和<code>pointInside</code>方法。</p>
<h4 id="间距处理"><a href="#间距处理" class="headerlink" title="间距处理"></a>间距处理</h4><p>核心有三条：</p>
<ol>
<li><code>UIScrollView</code>的宽度就是<code>pageWidth + pageInset</code>。</li>
<li>为了保持左右显示区域的对称性，<code>UIScrollView</code>的<code>x</code>是<code>(superView.width - pageWidth) * 0.5</code>。</li>
<li>子视图的frame是<code>CGRectMake(idx * (pageWidth + pageInset), 0, pageWidth, height)</code>，也即，子视图的宽度与<code>UIScrollView</code>的宽度保持一致。</li>
</ol>
<h4 id="无限循环处理"><a href="#无限循环处理" class="headerlink" title="无限循环处理"></a>无限循环处理</h4><ol>
<li>视图循环利用<br>使用三个<code>UIImageView</code>，记为左、中、右，重复利用。默认显示中间的imageView。</li>
<li>刷新逻辑<br>在<code>scrollViewDidScroll</code>回调中，当<code>UIScrollView</code>即将显示出下一个（可能是左、也可能是右）视图时，立即调用刷新方法。刷新的逻辑是：</li>
</ol>
<ul>
<li><p>重新计算left、currentIndex、right三个索引</p>
  <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kLeft (_currentIndex == 0 ? kCount - 1 : _currentIndex - 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> kRight (_currentIndex == kCount - 1 ? 0 : _currentIndex + 1)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对左、中、右三个<code>UIImageView</code>重新设置配图</p>
  <figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">self.pageArray<span class="string">[0]</span>.image = self.imageArray<span class="string">[kLeft]</span>;</span><br><span class="line">self.pageArray<span class="string">[1]</span>.image = self.imageArray<span class="string">[_currentIndex]</span>;</span><br><span class="line">self.pageArray<span class="string">[2]</span>.image = self.imageArray<span class="string">[kRight]</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以非动画方式设置<code>UIScrollView</code>的偏移量</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> x = <span class="keyword">self</span>.scrollView.contentOffset.x;</span><br><span class="line"><span class="built_in">CGFloat</span> width = <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span>) &#123;</span><br><span class="line">   x = width;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   x += x &gt; width ? -width : width;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="keyword">self</span>.scrollView setContentOffset:<span class="built_in">CGPointMake</span>(x, <span class="number">0</span>)];</span><br></pre></td></tr></table></figure>
<p>  这样便实现了无限循环。</p>
</li>
</ul>
<ol start="3">
<li><p>刷新时机处理<br><code>scrollViewDidScroll</code>会回调很多次，本来以为使用一个标志位就可以控制只刷新一次，但是并没有实现😂 所以，退一步，用了两个标志位：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> leftLock;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> rightLock;</span><br></pre></td></tr></table></figure>
<p>逻辑是这样的：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Turn left.</span></span><br><span class="line"><span class="keyword">if</span> (offsetX &gt; <span class="number">2</span> * (width - <span class="keyword">self</span>.pageInset)) <span class="keyword">self</span>.rightLock = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.leftLock &amp;&amp; offsetX &lt; width - <span class="number">2</span> * <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">    <span class="keyword">self</span>.leftLock = <span class="literal">YES</span>;</span><br><span class="line">    _currentIndex = kLeft;</span><br><span class="line">    [<span class="keyword">self</span> refresh];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Turn right.</span></span><br><span class="line"><span class="keyword">if</span> (offsetX &lt; <span class="number">2</span> * <span class="keyword">self</span>.pageInset) <span class="keyword">self</span>.leftLock = <span class="literal">NO</span>;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">self</span>.rightLock &amp;&amp; offsetX &gt; width + <span class="number">2</span> * <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">    <span class="keyword">self</span>.rightLock = <span class="literal">YES</span>;</span><br><span class="line">    _currentIndex = kRight;</span><br><span class="line">    [<span class="keyword">self</span> refresh];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 请牢记<code>UIScrollView</code>的宽度width是<code>width=pageWidth+pageInset</code>，这里以即将显示右边视图为例：<br> scrollView的初始偏移量是<code>width</code>，逐渐偏移，直到越过空白间距(pageInset)要显示下一个视图时，此时offsetX为<code>width + (pageWidth - pageInset)</code>，也即代码中的<code>2 * (width - pageInset)</code>，立即将offsetX还原为<code>2 * (width - pageInset) - (width)</code>也就是<code>pageWidth-pageInset</code>，对leftLock加锁，更新当前索引。</p>
</li>
</ol>
<h4 id="点击事件处理"><a href="#点击事件处理" class="headerlink" title="点击事件处理"></a>点击事件处理</h4><p>对<code>UIScrollView</code>添加点击手势，计算出当前点击位置在图片数组中的索引即可：<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CGFloat</span> pointX = [tap locationInView:tap.view].x;</span><br><span class="line"><span class="built_in">NSUInteger</span> idx = _currentIndex;</span><br><span class="line"><span class="keyword">if</span> (pointX &lt; <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">   idx = kLeft;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pointX &gt; <span class="number">2</span> * <span class="keyword">self</span>.pageWidth + <span class="keyword">self</span>.pageInset) &#123;</span><br><span class="line">   idx = kRight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="自动轮播处理"><a href="#自动轮播处理" class="headerlink" title="自动轮播处理"></a>自动轮播处理</h4><p>当设置<code>timeInterval</code>属性时，说明需要自动轮播，懒加载创建定时器：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">_timer = [<span class="built_in">NSTimer</span> timerWithTimeInterval:_timeInterval repeats:<span class="literal">YES</span> block:^(<span class="built_in">NSTimer</span> *timer) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.scrollView setContentOffset:<span class="built_in">CGPointMake</span>(<span class="built_in">CGRectGetWidth</span>(<span class="keyword">self</span>.scrollView.frame) * <span class="number">2</span>, <span class="number">0</span>) animated:<span class="literal">YES</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>并把定时器放到<code>currentRunLoop</code>中，设置<code>NSRunLoopCommonModes</code>。当然，需要在ScrollView的一些代理中处理用户手动滑动与定时器设置的滑动的冲突。</p>
<h4 id="定时器循环引用处理"><a href="#定时器循环引用处理" class="headerlink" title="定时器循环引用处理"></a>定时器循环引用处理</h4><p>在<a href="https://blog.chenyalun.com/2018/09/30/详解performSelector/">《详解performSelector》</a>一文中，已经详细分析了定时器造成循环引用的原因，这里不做赘述。<br>解决方式是，当PageView从父视图上移除时，手动销毁定时器：<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">- (void)willMoveToSuperview:<span class="type"></span>(UIView *)<span class="keyword">new</span><span class="type">Superview</span> &#123;</span><br><span class="line">    [<span class="keyword">super</span> willMoveToSuperview:<span class="type">newSuperview</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">new</span><span class="type">Superview</span> == nil) &#123; <span class="comment">// 视图从父视图移除时, 销毁定时器</span></span><br><span class="line">        [_timer invalidate];</span><br><span class="line">        _timer = nil;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="点击回调循环引用处理"><a href="#点击回调循环引用处理" class="headerlink" title="点击回调循环引用处理"></a>点击回调循环引用处理</h4><p>点击事件给出的接口我选择使用block，（使用弱引用的代理就不会有这个问题了，但是代理会增加调用的复杂性，设置代理、遵守协议、实现方法巴拉巴拉。。。）</p>
<p>然而，同许多视图的block回调一样，会有循环引用的问题，只能这样使用：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) <span class="keyword">self</span> = weakSelf;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"self = %@, index = %lu, url = %@"</span>, <span class="keyword">self</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)idx, url);</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>万一调用方忘了呢，那就内存泄漏了。</p>
<p>大神<a href="https://yulingtianxia.com/blog/2015/11/13/Summary-of-the-first-month-in-the-internship-of-Tencent/" target="_blank" rel="noopener">玉令天下</a>的方式是使用弱引用的变量持有外界的调用者，然后在适当时机将组件“自己”置为空。不过需要给调用者写个分类（属性）持有组件，还需要明确切断循环引用的时机，对于我的这个100来行的PageView，可能有点不太合适。</p>
<p>想到一个方法，显式让使用方传进来调用者，重新定义外界的<code>self</code>，将其作为一个回调参数传递给使用方（PageView内部使用weak持有外界的<code>self</code>）。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^tapHandler)(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="keyword">id</span> <span class="keyword">self</span>);</span><br></pre></td></tr></table></figure>
<p>外界使用的时候像这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="built_in">UIViewController</span> *<span class="keyword">self</span>) &#123;</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>确实能解决循环引用，而且不是很费事。但是，实际使用的时候是这样的：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url, <span class="keyword">id</span> controller) &#123;</span><br><span class="line">   <span class="comment">// 需要手动把id类型改成实际的类型，如UIViewController、UIView等等</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>并不知道外界的<code>self</code>是啥类型，只能用<code>id</code>。我感觉也不是很巧妙。我还没有想到更好的办法，所以，暂时还是使用主流的方式吧：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="keyword">void</span> (^tapHandler)(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url);</span><br></pre></td></tr></table></figure>
<p>就让外界使用weak-strong来解决循环引用问题。</p>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><h4 id="本地图片"><a href="#本地图片" class="headerlink" title="本地图片"></a>本地图片</h4><p>本地图片直接传入UIImage数组即可。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定构造器，设定pageWidth、pageInset等</span></span><br><span class="line">YAPageView *pageView = [[YAPageView alloc] <span class="string">initWithFrame:</span>CGRectMake(<span class="number">0</span>, <span class="number">200</span>, kScreenWidth, <span class="number">200</span>) <span class="string">controller:</span>self <span class="string">pageWidth:</span><span class="number">300</span> <span class="string">pageInset:</span><span class="number">20</span>];</span><br><span class="line">pageView.imageArray = @[</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"1"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"2"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"3"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"4"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"5"</span>],</span><br><span class="line">    [UIImage <span class="string">imageNamed:</span>@<span class="string">"6"</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h4 id="网络图片"><a href="#网络图片" class="headerlink" title="网络图片"></a>网络图片</h4><p>网络图片传入图片URL数组，并设置处理图片的block。这个block指的是给UIImageView设置图片URL的方式。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果使用SDWebImage，可以这么设置</span></span><br><span class="line">pageView.configImageHandler = ^(<span class="built_in">UIImageView</span> *imageView, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   [imageView sd_setImageWithURL:url];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pageView.imageURLArray = @[</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/230/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/231/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/232/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/233/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/234/350/200"</span>],</span><br><span class="line">    [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"https://picsum.photos/id/235/350/200"</span>]</span><br><span class="line">];</span><br></pre></td></tr></table></figure>
<h4 id="设置自动轮播时间"><a href="#设置自动轮播时间" class="headerlink" title="设置自动轮播时间"></a>设置自动轮播时间</h4><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">pageView.timeInterval = <span class="number">3</span>.f<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="设置点击回调"><a href="#设置点击回调" class="headerlink" title="设置点击回调"></a>设置点击回调</h4><p>别忘了循环引用的问题。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">pageView.tapHandler = ^(<span class="built_in">NSUInteger</span> idx, <span class="built_in">UIImage</span> *img, <span class="built_in">NSURL</span> *url) &#123;</span><br><span class="line">   __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) <span class="keyword">self</span> = weakSelf;</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"self = %@, index = %lu, url = %@"</span>, <span class="keyword">self</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)idx, url);</span><br><span class="line">   [<span class="keyword">self</span>.navigationController popViewControllerAnimated:<span class="literal">YES</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整体而言，没有冗余逻辑，能优化的也优化了（比如索引计算对取模的优化、定时器懒加载、刷新时机次数等等），应该算是比较轻量了吧哈哈哈哈。</p>
<p>具体应用方面，比如腾讯视频App中的首页Tab、会员Tab都有这种custom width的轮播图。<br><img src="https://image.chenyalun.com/2019/08/07/002.gif" style="zoom:80%"></p>
<p>QQ音乐中的发现Tab也是这种轮播图，不过不能无限循环（不能无限循环岂不是更简单。。）。<br><img src="https://image.chenyalun.com/2019/08/07/001.gif" style="zoom:80%"></p>
<p>好了，把两年前的坑填上了。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数据结构的Swift实现]]></title>
      <url>http://blog.chenyalun.com/2019/07/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84Swift%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 使用Swift实现常见的数据结构。 </p><br><a id="more"></a><p></p>
<h2 id="1-动态数组"><a href="#1-动态数组" class="headerlink" title="1.动态数组"></a>1.动态数组</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量(只读)</span></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ensureCapacity()</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (index...<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">            elements[idx + <span class="number">1</span>] = elements[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        elements[index] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> elements[index]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        elements[index] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = <span class="keyword">get</span>(index)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> index..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = elements[idx + <span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        elements[<span class="built_in">count</span> - <span class="number">1</span>] = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// item 不可能为nil</span></span><br><span class="line">        <span class="keyword">return</span> indexOf(item) != <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某个元素对应的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的item不可能为nil</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> elements[idx]! == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &gt; elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">self</span>.elements[idx] = elements[idx]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现过程中几个需要注意的点:</p>
<ol>
<li>在<code>indexOf()</code>函数中，元素使用<code>==</code>判等，需要遵守Equatable协议</li>
<li>数组的扩容中，使用位运算符可以避免产生浮点数</li>
<li>由于Swift中可选类型的存在，可以使用nil来占位。当然，在<code>set()、append()</code>等函数中，由于类型确定也省略了外界传参时对空值的判断</li>
</ol>
<h3 id="动态数组优化"><a href="#动态数组优化" class="headerlink" title="动态数组优化"></a>动态数组优化</h3><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OPArrayList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量(只读)</span></span><br><span class="line">    <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 首位元素索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        ensureCapacity()</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (index..&lt;<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">            elements[actualIndex(idx + <span class="number">1</span>)] = elements[actualIndex(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        elements[actualIndex(index)] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> elements[actualIndex(index)]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">set</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        elements[actualIndex(index)] = item</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[actualIndex(index)]!</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">            frontIndex += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> index..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                elements[actualIndex(idx)] = elements[actualIndex(idx + <span class="number">1</span>)]</span><br><span class="line">            &#125;</span><br><span class="line">            elements[actualIndex(<span class="built_in">count</span> - <span class="number">1</span>)] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[actualIndex(idx)] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否包含某个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">contains</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="comment">// item 不可能为nil</span></span><br><span class="line">        <span class="keyword">return</span> indexOf(item) != <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某个元素对应的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 这里的item不可能为nil</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> elements[actualIndex(idx)]! == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取真实索引: (frontIndex + index) % elements.count</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">actualIndex</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (frontIndex + idx) % elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> index = (frontIndex + idx) % elements.<span class="built_in">count</span></span><br><span class="line">                <span class="keyword">self</span>.elements[idx] = elements[index]</span><br><span class="line">            &#125;</span><br><span class="line">            frontIndex = <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组内容打印</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">"["</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> a = <span class="string">", "</span></span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                a = <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> elements[idx] != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">"<span class="subst">\(a)</span><span class="subst">\(elements[idx]!)</span>"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">"<span class="subst">\(a)</span>nil"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">"], frontIndex = <span class="subst">\(frontIndex)</span>, count = <span class="subst">\(<span class="built_in">count</span>)</span>"</span></span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-单向链表"><a href="#2-单向链表" class="headerlink" title="2.单向链表"></a>2.单向链表</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OneWayLinkedList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素没有找到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> first: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> firstEle: <span class="type">T</span>?) &#123;</span><br><span class="line">        <span class="keyword">if</span> firstEle == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            first = <span class="type">Node</span>(ele: firstEle!, next: <span class="literal">nil</span>)</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利构造</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(ele: <span class="type">T</span>, next: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.next = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引所在元素获取</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> node(index).ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在某索引处插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = first</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, next: prev)</span><br><span class="line">            first = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = node(index - <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, next: prev.next)</span><br><span class="line">            prev.next = newNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除某索引的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">            first = first?.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> noe = node(index - <span class="number">1</span>)</span><br><span class="line">            noe.next = noe.next?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某元素所在索引</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node!.ele == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">self</span>.first = <span class="literal">nil</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                str += <span class="string">"first:<span class="subst">\(node!.ele)</span>,"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node!.next != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, <span class="subst">\(node!.next!.ele)</span>]"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, nil]"</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">","</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在的结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">node</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">var</span> node = <span class="keyword">self</span>.first</span><br><span class="line">        <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;index &#123;</span><br><span class="line">            node = node?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-单向循环链表"><a href="#3-单向循环链表" class="headerlink" title="3.单向循环链表"></a>3.单向循环链表</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">class OneWayCircularLinkedList&lt;T: Equatable&gt;: OneWayLinkedList<span class="symbol">&lt;T&gt;</span> &#123;</span><br><span class="line">    override func <span class="keyword">insert</span>(_ item: T, _ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> &lt; <span class="number">0</span> || <span class="built_in">index</span> &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            // 越界</span><br><span class="line">            fatalError(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">first</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, nex<span class="variable">t:</span> <span class="keyword">prev</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">prev</span> == nil &#123;</span><br><span class="line">                // 只有一个元素</span><br><span class="line">                newNode.<span class="keyword">next</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">first</span> = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = node(<span class="built_in">index</span> - <span class="number">1</span>)</span><br><span class="line">            // 处理添加到最后一个位置</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">fir</span> = (<span class="built_in">index</span> == <span class="built_in">count</span>) ? <span class="keyword">first</span> : <span class="keyword">prev</span>.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, nex<span class="variable">t:</span> <span class="keyword">fir</span>)</span><br><span class="line">            <span class="keyword">prev</span>.<span class="keyword">next</span> = newNode</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="built_in">remove</span>(_ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        checkBounds(<span class="built_in">index</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">last</span> = node(<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">            // 对最后一个元素的处理</span><br><span class="line">            <span class="keyword">first</span> = (<span class="built_in">count</span> - <span class="number">1</span> == <span class="built_in">index</span>) ? nil : <span class="keyword">first</span>?.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">last</span>.<span class="keyword">next</span> = <span class="keyword">first</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> noe = node(<span class="built_in">index</span> - <span class="number">1</span>)</span><br><span class="line">            noe.<span class="keyword">next</span> = noe.<span class="keyword">next</span>?.<span class="keyword">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func clear() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">last</span> = node(<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">        // 打破循环引用</span><br><span class="line">        <span class="keyword">last</span>.<span class="keyword">next</span> = nil</span><br><span class="line">        // 调用父类</span><br><span class="line">        super.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-双向链表"><a href="#4-双向链表" class="headerlink" title="4.双向链表"></a>4.双向链表</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TwoWayLinkedList</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素没有找到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> first: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> last: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">    <span class="keyword">fileprivate</span>(<span class="keyword">set</span>) <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> ele: <span class="type">T</span>?) &#123;</span><br><span class="line">        <span class="keyword">if</span> ele == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = <span class="literal">nil</span></span><br><span class="line">            last = <span class="literal">nil</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            first = <span class="type">Node</span>(ele: ele!, prev: <span class="literal">nil</span>, next: <span class="literal">nil</span>)</span><br><span class="line">            last = first</span><br><span class="line">            <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 便利构造</span></span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>() &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(<span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> prev: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> next: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(ele: <span class="type">T</span>, prev: <span class="type">Node</span>?, next: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.prev = prev</span><br><span class="line">            <span class="keyword">self</span>.next = next</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引所在元素获取</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">return</span> node(index).ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在某索引处插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">insert</span><span class="params">(<span class="number">_</span> item: T, <span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> index == <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> prev = last</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, prev: prev, next: <span class="literal">nil</span>)</span><br><span class="line">            last = newNode</span><br><span class="line">            prev?.next = newNode</span><br><span class="line">            <span class="keyword">if</span> index == <span class="number">0</span> &#123;</span><br><span class="line">                first = last</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> next = node(index)</span><br><span class="line">            <span class="keyword">let</span> prev = next.prev</span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele: item, prev: prev, next: next)</span><br><span class="line">            next.prev = newNode</span><br><span class="line">            prev?.next = newNode</span><br><span class="line">            <span class="keyword">if</span> newNode.prev == <span class="literal">nil</span> &#123;</span><br><span class="line">                first = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 追加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">append</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        insert(item, <span class="built_in">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除某索引的元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">let</span> old = node(index)</span><br><span class="line">        <span class="keyword">let</span> prev = old.prev</span><br><span class="line">        <span class="keyword">let</span> next = old.next</span><br><span class="line">        <span class="keyword">if</span> next == <span class="literal">nil</span> &#123;</span><br><span class="line">            last = prev</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next?.prev = prev</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> prev == <span class="literal">nil</span> &#123;</span><br><span class="line">            first = next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev?.next = next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> old.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取某元素所在索引</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">indexOf</span><span class="params">(<span class="number">_</span> item: T)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> idx = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node!.ele == item &#123;</span><br><span class="line">                <span class="keyword">return</span> idx</span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            idx += <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">ELEMENT_NOT_FOUND</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 打破循环引用</span></span><br><span class="line">        <span class="keyword">var</span> first = <span class="keyword">self</span>.first</span><br><span class="line">        <span class="keyword">while</span> first != <span class="literal">nil</span> &#123;</span><br><span class="line">            first?.prev = <span class="literal">nil</span></span><br><span class="line">            first = first?.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.first = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">self</span>.last = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node = first</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> idx == <span class="number">0</span> &#123;</span><br><span class="line">                str += <span class="string">"first:<span class="subst">\(node!.ele)</span>,"</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> node!.next != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, <span class="subst">\(node!.next!.ele)</span>]"</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                str += <span class="string">" [<span class="subst">\(node!.ele)</span>, nil]"</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> node != <span class="literal">nil</span> &#123;</span><br><span class="line">                str += <span class="string">","</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> idx == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                str += <span class="string">" last:<span class="subst">\(node!.ele)</span>"</span></span><br><span class="line">            &#125;</span><br><span class="line">            node = node!.next</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(str)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引所在的结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">node</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt; &#123;</span><br><span class="line">        checkBounds(index)</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="built_in">count</span> &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="comment">// 在前半部分查找</span></span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">self</span>.first</span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">0</span>..&lt;index &#123;</span><br><span class="line">                node = node?.next</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node!</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 在后半部分查找</span></span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">self</span>.last</span><br><span class="line">            <span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> (index + <span class="number">1</span>..&lt;<span class="built_in">count</span>).reversed() &#123;</span><br><span class="line">                node = node?.prev</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 索引越界检查</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">checkBounds</span><span class="params">(<span class="number">_</span> index: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="comment">// 越界</span></span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-双向循环链表"><a href="#5-双向循环链表" class="headerlink" title="5.双向循环链表"></a>5.双向循环链表</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">class TwoWayCircularLinkedList&lt;T: Equatable&gt;: TwoWayLinkedList<span class="symbol">&lt;T&gt;</span> &#123;</span><br><span class="line">    override func <span class="keyword">insert</span>(_ item: T, _ <span class="built_in">index</span>: Int) &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> &lt; <span class="number">0</span> || <span class="built_in">index</span> &gt; <span class="built_in">count</span> &#123;</span><br><span class="line">            // 越界</span><br><span class="line">            fatalError(<span class="string">"索引有误, 已经越界"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">last</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, <span class="keyword">pre</span><span class="variable">v:</span> <span class="keyword">prev</span>, nex<span class="variable">t:</span> <span class="keyword">first</span>)</span><br><span class="line">            <span class="keyword">last</span> = newNode</span><br><span class="line">            <span class="keyword">prev</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">first</span> = <span class="keyword">last</span></span><br><span class="line">                <span class="keyword">last</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">first</span>?.<span class="keyword">prev</span> = newNode</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">next</span> = node(<span class="built_in">index</span>)</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">prev</span> = <span class="keyword">next</span>.<span class="keyword">prev</span></span><br><span class="line">            <span class="keyword">let</span> newNode = Node(ele: item, <span class="keyword">pre</span><span class="variable">v:</span> <span class="keyword">prev</span>, nex<span class="variable">t:</span> <span class="keyword">next</span>)</span><br><span class="line">            <span class="keyword">next</span>.<span class="keyword">prev</span> = newNode</span><br><span class="line">            <span class="keyword">prev</span>?.<span class="keyword">next</span> = newNode</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">                // 首位插入元素</span><br><span class="line">                <span class="keyword">first</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func <span class="built_in">remove</span>(_ <span class="built_in">index</span>: Int) -&gt; T &#123;</span><br><span class="line">        checkBounds(<span class="built_in">index</span>)</span><br><span class="line">        <span class="keyword">let</span> old: Node = node(<span class="built_in">index</span>)</span><br><span class="line">        var <span class="keyword">prev</span> = old.<span class="keyword">prev</span></span><br><span class="line">        var <span class="keyword">next</span> = old.<span class="keyword">next</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> == <span class="number">1</span> &amp;&amp; <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            // 只有一个元素</span><br><span class="line">            <span class="keyword">prev</span> = nil</span><br><span class="line">            <span class="keyword">next</span> = nil</span><br><span class="line">            old.<span class="keyword">next</span> = nil</span><br><span class="line">            old.<span class="keyword">prev</span> = nil</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">first</span> = <span class="keyword">next</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">index</span> == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">last</span> = <span class="keyword">prev</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">prev</span>?.<span class="keyword">next</span> = <span class="keyword">next</span></span><br><span class="line">        <span class="keyword">next</span>?.<span class="keyword">prev</span> = <span class="keyword">prev</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> old.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    override func clear() &#123;</span><br><span class="line">        // 打破循环引用</span><br><span class="line">        var <span class="keyword">first</span> = self.<span class="keyword">first</span></span><br><span class="line">        <span class="keyword">for</span> idx in <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">first</span>?.<span class="keyword">prev</span> = nil</span><br><span class="line">            <span class="keyword">first</span> = <span class="keyword">first</span>?.<span class="keyword">next</span></span><br><span class="line">            <span class="keyword">if</span> idx == <span class="built_in">count</span> - <span class="number">1</span> &#123;</span><br><span class="line">                <span class="keyword">first</span>?.<span class="keyword">next</span> = nil</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        self.<span class="keyword">first</span> = nil</span><br><span class="line">        self.<span class="keyword">last</span> = nil</span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-栈"><a href="#6-栈" class="headerlink" title="6.栈"></a>6.栈</h2><p>使用动态数组实现。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 设置容量默认为10, 可自动扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">ArrayList</span>&lt;<span class="type">T</span>&gt; = <span class="type">ArrayList</span>(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">push</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出栈</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pop</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(size() - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取栈顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">top</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span> ? <span class="literal">nil</span> : list.<span class="keyword">get</span>(size() - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-队列"><a href="#7-队列" class="headerlink" title="7.队列"></a>7.队列</h2><p>因为频繁地在开头末尾添加删除元素所以使用链表实现<br>又因为双向链表有头指针和尾指针而单向链表只有头指针所以使用双向链表实现(减少遍历)</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">TwoWayLinkedList</span>&lt;<span class="type">T</span>&gt; = <span class="type">TwoWayLinkedList</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.first?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.desc()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="使用栈实现队列"><a href="#使用栈实现队列" class="headerlink" title="使用栈实现队列"></a>使用栈实现队列</h4><p>原理:</p>
<ol>
<li>入队时, 把元素放入inStack中</li>
<li>出队时, 如果outStack为空, 则把inStack中的全部栈顶元素依次放到outStack中, 返回outStack的栈顶元素, 否则, 直接返回outStack的栈顶元素<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue_UseStack</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 维护两个栈</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> inStack: <span class="type">Stack</span>&lt;<span class="type">T</span>&gt; = <span class="type">Stack</span>()</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> outStack: <span class="type">Stack</span>&lt;<span class="type">T</span>&gt; = <span class="type">Stack</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> inStack.size() + outStack.size()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size() == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        inStack.push(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> outStack.isEmpty() &#123;</span><br><span class="line">            <span class="keyword">while</span> inStack.isEmpty() == <span class="literal">false</span> &#123;</span><br><span class="line">                outStack.push(inStack.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> outStack.isEmpty() &#123;</span><br><span class="line">            <span class="keyword">while</span> inStack.isEmpty() == <span class="literal">false</span> &#123;</span><br><span class="line">                outStack.push(inStack.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> outStack.top()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        inStack.clear()</span><br><span class="line">        outStack.clear()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="8-循环队列"><a href="#8-循环队列" class="headerlink" title="8.循环队列"></a>8.循环队列</h2><p>使用动态数组实现, 且各接口优化到O(1)时间复杂度<br>要点:</p>
<ol>
<li>有一个指向队头元素的索引frontIndex, 必不可少</li>
<li>接口索引与真实索引的互换: 真实索引 = (frontIndex + index) % elements.count</li>
<li>入队</li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指向队头的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        elements[index(<span class="built_in">count</span>)] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[frontIndex]</span><br><span class="line">        <span class="keyword">if</span> ele == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">        <span class="comment">// 不是frontIndex += 1, 要考虑frontIndex == elements.count但是elements有空闲位置的情况</span></span><br><span class="line">        <span class="comment">// 这时应该是frontIndex = (frontIndex + 1) % elements.count, 也就是index(1)</span></span><br><span class="line">        frontIndex = index(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[frontIndex]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> capacity: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 不需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> elements.<span class="built_in">count</span> &gt;= capacity &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">        <span class="comment">// 扩容1.5倍</span></span><br><span class="line">        <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> newElements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            newElements[idx] = elements[index(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.elements = newElements</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引对应真实索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (frontIndex + index) % elements.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"frontIndex: <span class="subst">\(frontIndex)</span>"</span> + <span class="string">" eles: <span class="subst">\(elements)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-双端队列"><a href="#9-双端队列" class="headerlink" title="9.双端队列"></a>9.双端队列</h2><p>两端都可以入队和出队</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleEndedQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: <span class="type">TwoWayLinkedList</span>&lt;<span class="type">T</span>&gt; = <span class="type">TwoWayLinkedList</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueFront</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.insert(item, <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueRear</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        list.append(item)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueFront</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueRear</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list.remove(list.<span class="built_in">count</span> - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.first?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rear</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> list.last?.ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        list.desc()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-循环双端队列"><a href="#10-循环双端队列" class="headerlink" title="10.循环双端队列"></a>10.循环双端队列</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircleDoubleEndedQueue</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指向队头的索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> frontIndex: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> elements: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">ELEMENT_NOT_FOUND</span> = -<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器, 初始化容量为capaticy的数组</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        elements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">count</span> == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueFront</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        frontIndex = index(-<span class="number">1</span>)</span><br><span class="line">        elements[frontIndex] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾入队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueueRear</span><span class="params">(<span class="number">_</span> item: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(<span class="built_in">count</span> + <span class="number">1</span>)</span><br><span class="line">        elements[index(<span class="built_in">count</span>)] = item</span><br><span class="line">        <span class="built_in">count</span> += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队头出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueFront</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[frontIndex]</span><br><span class="line">        elements[frontIndex] = <span class="literal">nil</span></span><br><span class="line">        frontIndex = index(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从队尾出队</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueueRear</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &lt;= <span class="number">0</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"队列为空"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> ele = elements[index(<span class="built_in">count</span> - <span class="number">1</span>)]!</span><br><span class="line">        elements[index(<span class="built_in">count</span> - <span class="number">1</span>)] = <span class="literal">nil</span></span><br><span class="line">        <span class="built_in">count</span> -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队头元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[frontIndex]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取队尾元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">rear</span><span class="params">()</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">return</span> elements[index(<span class="built_in">count</span> - <span class="number">1</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;elements.<span class="built_in">count</span> &#123;</span><br><span class="line">            elements[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">        <span class="built_in">count</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> capacity: Int)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 不需要扩容</span></span><br><span class="line">        <span class="keyword">if</span> elements.<span class="built_in">count</span> &gt;= capacity &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> elements = <span class="keyword">self</span>.elements</span><br><span class="line">        <span class="comment">// 扩容1.5倍</span></span><br><span class="line">        <span class="keyword">let</span> newCapacity = elements.<span class="built_in">count</span> + elements.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> newElements = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">            newElements[idx] = elements[index(idx)]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.elements = newElements</span><br><span class="line">        frontIndex = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取索引对应真实索引</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">index</span><span class="params">(<span class="number">_</span> index: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> index = index</span><br><span class="line">        index += frontIndex</span><br><span class="line">        <span class="keyword">if</span> index &lt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index + elements.<span class="built_in">count</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//        return index % elements.count</span></span><br><span class="line">        <span class="keyword">return</span> index - (index &gt;= elements.<span class="built_in">count</span> ? elements.<span class="built_in">count</span> : <span class="number">0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"frontIndex: <span class="subst">\(frontIndex)</span>"</span> + <span class="string">",eles: <span class="subst">\(elements)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-二叉树"><a href="#11-二叉树" class="headerlink" title="11. 二叉树"></a>11. 二叉树</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> nodeCount = <span class="number">0</span> <span class="comment">// 结点数量</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> root: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? <span class="comment">// 根节点</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 二叉树是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nodeCount == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        root = <span class="literal">nil</span></span><br><span class="line">        nodeCount = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 前序遍历(一般是根左右)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是前序遍历的递归方式结果---------"</span>)</span><br><span class="line">        preorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是前序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 先访问 根</span></span><br><span class="line">                results.append(p!.ele)</span><br><span class="line">                stack.push(p!)</span><br><span class="line">                <span class="comment">// 再访问 左 (持续遍历左子树)</span></span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = stack.pop()</span><br><span class="line">            <span class="comment">// 最后访问 右</span></span><br><span class="line">            p = p?.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">preorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">        preorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        preorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 中序遍历(一般是左根右)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是中序遍历的递归方式结果---------"</span>)</span><br><span class="line">        inorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是中序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 持续访问左子树</span></span><br><span class="line">                stack.push(p!)</span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 弹出栈顶元素</span></span><br><span class="line">            p = stack.pop()</span><br><span class="line">            <span class="comment">// 先访问左子树</span></span><br><span class="line">            results.append(p!.ele)</span><br><span class="line">            p = p?.<span class="keyword">right</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">inorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">        inorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 后序遍历(一般是左右根)</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是后序遍历的递归方式结果---------"</span>)</span><br><span class="line">        postorderTraversal(root)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是后序遍历的非递归方式结果---------"</span>)</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        <span class="keyword">let</span> stack = <span class="type">Stack</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">var</span> last: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? = <span class="literal">nil</span></span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> || stack.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 持续访问左子树</span></span><br><span class="line">                stack.push(p!)</span><br><span class="line">                p = p?.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            p = stack.top()</span><br><span class="line">            <span class="keyword">if</span> p?.<span class="keyword">right</span> == <span class="literal">nil</span> || p?.<span class="keyword">right</span> == last &#123;</span><br><span class="line">                <span class="comment">// 没有右子树或者访问过右子树</span></span><br><span class="line">                results.append(p!.ele)</span><br><span class="line">                <span class="number">_</span> = stack.pop()</span><br><span class="line">                last = p</span><br><span class="line">                p = <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                p = p?.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">postorderTraversal</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        postorderTraversal(node!.<span class="keyword">left</span>)</span><br><span class="line">        postorderTraversal(node!.<span class="keyword">right</span>)</span><br><span class="line">        <span class="built_in">print</span>(node!.ele)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 层序遍历--使用队列实现</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">levelOrderTranversal</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> results = [<span class="type">T</span>]()</span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            results.append(r.ele)</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"---------以下是层序遍历的结果---------"</span>)</span><br><span class="line">        <span class="built_in">print</span>(results)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否是一颗完全二叉树</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isComplete</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 树为空</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> isAllLeaf = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            <span class="keyword">if</span> isAllLeaf &amp;&amp; !r.isLeaf() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> r.<span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 左子树为空而右子树不为空, 不是完全二叉树</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 左不为空右为空  或者 左右都为空, 要求之后的必须都是叶子结点</span></span><br><span class="line">                isAllLeaf = <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找前驱结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">precursor</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="comment">// 1. 空结点, 其前驱为空</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 前驱结点在左结点的右子树上, 比如找6的前驱</span></span><br><span class="line">        <span class="keyword">var</span> p = node!.<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p!.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                p = p!.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 前驱结点在父节点\祖父结点上, 比如找9的前驱</span></span><br><span class="line">        p = node</span><br><span class="line">        <span class="keyword">while</span> p!.parent != <span class="literal">nil</span> &amp;&amp; p == p!.parent?.<span class="keyword">left</span> &#123;</span><br><span class="line">            p = p!.parent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p!.parent</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查找后继结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">successor</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="comment">// 1. 空结点, 其后继为空</span></span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 后继结点在右结点的左子树上, 比如找7的后继</span></span><br><span class="line">        <span class="keyword">var</span> p = node!.<span class="keyword">right</span></span><br><span class="line">        <span class="keyword">if</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> p!.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                p = p!.<span class="keyword">left</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 后继结点在父节点\祖父结点上, 比如找5的后继</span></span><br><span class="line">        p = node</span><br><span class="line">        <span class="keyword">while</span> p!.parent != <span class="literal">nil</span> &amp;&amp; p == p!.parent?.<span class="keyword">right</span> &#123;</span><br><span class="line">            p = p!.parent</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p!.parent</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 树的高度--迭代写法</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="comment">// 层序遍历法</span></span><br><span class="line">        <span class="keyword">let</span> queue = <span class="type">Queue</span>&lt;<span class="type">Node</span>&lt;<span class="type">T</span>&gt;&gt;()</span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> level = <span class="number">1</span></span><br><span class="line">        <span class="keyword">var</span> height = <span class="number">0</span></span><br><span class="line">        queue.enQueue(root!)</span><br><span class="line">        <span class="keyword">while</span> queue.size() != <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> r = queue.deQueue()</span><br><span class="line">            level -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">left</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">left</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> r.<span class="keyword">right</span> != <span class="literal">nil</span> &#123;</span><br><span class="line">                queue.enQueue(r.<span class="keyword">right</span>!)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> level == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="comment">// 这一层遍历结束</span></span><br><span class="line">                level = queue.size()</span><br><span class="line">                height += <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height</span><br><span class="line">        <span class="comment">//return height(root)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 树的高度--递归写法</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">height</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;?)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">max</span>(height(node!.<span class="keyword">left</span>), height(node!.<span class="keyword">right</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结点类</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>: <span class="title">Equatable</span>&gt;: <span class="title">Equatable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ele: <span class="type">T</span></span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">left</span>: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> <span class="keyword">right</span>: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">var</span> parent: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;?</span><br><span class="line">        <span class="keyword">init</span>(<span class="number">_</span> ele: <span class="type">T</span>, <span class="number">_</span> parent: <span class="type">Node</span>?) &#123;</span><br><span class="line">            <span class="keyword">self</span>.ele = ele</span><br><span class="line">            <span class="keyword">self</span>.parent = parent</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 叶子结点, 左右结点均为空</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isLeaf</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">left</span> == <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> == <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 有两个结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">hasTwoChildren</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">left</span> != <span class="literal">nil</span> &amp;&amp; <span class="keyword">right</span> != <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是左子结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isLeftChild</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="comment">// 比较指针是否一致</span></span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">nil</span> &amp;&amp; parent?.<span class="keyword">left</span> === <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 是右子结点</span></span><br><span class="line">        <span class="function"><span class="keyword">func</span> <span class="title">isRightChild</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="comment">// 比较指针是否一致</span></span><br><span class="line">            <span class="keyword">return</span> parent != <span class="literal">nil</span> &amp;&amp; parent?.<span class="keyword">right</span> === <span class="keyword">self</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对等比较</span></span><br><span class="line">        <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> == <span class="params">(lhs: Node&lt;T&gt;, rhs: Node&lt;T&gt;)</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> lhs.ele == rhs.ele</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-二叉搜索树"><a href="#12-二叉搜索树" class="headerlink" title="12.二叉搜索树"></a>12.二叉搜索树</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">BinaryTree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 查找结点</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">findNode</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? &#123;</span><br><span class="line">        <span class="keyword">var</span> p = root</span><br><span class="line">        <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ele == p!.ele &#123;</span><br><span class="line">                <span class="comment">// 元素相等, 直接替换</span></span><br><span class="line">                <span class="keyword">return</span> p</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ele &lt; p!.ele &#123;</span><br><span class="line">                <span class="comment">// 位于左子树</span></span><br><span class="line">                p = p!.<span class="keyword">left</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 位于右子树</span></span><br><span class="line">                p = p!.<span class="keyword">right</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加结点</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">addNode</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 添加的是根节点</span></span><br><span class="line">        <span class="keyword">if</span> root == <span class="literal">nil</span> &#123;</span><br><span class="line">            root = <span class="type">Node</span>(ele, <span class="literal">nil</span>)</span><br><span class="line">            nodeCount += <span class="number">1</span></span><br><span class="line">            afterAdd(root!)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">            <span class="comment">// 添加的不是根结点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> p = root</span><br><span class="line">            <span class="keyword">var</span> parent = root</span><br><span class="line">            <span class="keyword">while</span> p != <span class="literal">nil</span> &#123;</span><br><span class="line">                parent = p</span><br><span class="line">                <span class="keyword">if</span> ele == p!.ele &#123;</span><br><span class="line">                    <span class="comment">// 元素相等, 直接替换</span></span><br><span class="line">                    p?.ele = ele</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ele &lt; p!.ele &#123;</span><br><span class="line">                    <span class="comment">// 位于左子树</span></span><br><span class="line">                    p = p!.<span class="keyword">left</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 位于右子树</span></span><br><span class="line">                    p = p!.<span class="keyword">right</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 得到parent结点</span></span><br><span class="line">            <span class="keyword">let</span> newNode = <span class="type">Node</span>(ele, parent)</span><br><span class="line">            <span class="keyword">if</span> ele &gt; parent!.ele &#123;</span><br><span class="line">                parent?.<span class="keyword">right</span> = newNode</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                parent?.<span class="keyword">left</span> = newNode</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 总结点数量加1</span></span><br><span class="line">            nodeCount += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            afterAdd(newNode)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 移除结点</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> node: <span class="type">Node</span>&lt;<span class="type">T</span>&gt;? = findNode(ele)</span><br><span class="line">        <span class="keyword">if</span> node == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// 没有找到需要删除的结点</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 结点数量减1</span></span><br><span class="line">        nodeCount -= <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 度为2的结点</span></span><br><span class="line">        <span class="keyword">if</span> node!.hasTwoChildren() &#123;</span><br><span class="line">            <span class="comment">// 找它的后继结点</span></span><br><span class="line">            <span class="keyword">let</span> p = successor(node)</span><br><span class="line">            <span class="comment">// 用后继结点内容替换待删除结点内容</span></span><br><span class="line">            node!.ele = p!.ele</span><br><span class="line">            <span class="comment">// 需要删的结点就是node结点了</span></span><br><span class="line">            node = p</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// node是叶子结点而且也是根结点</span></span><br><span class="line">        <span class="keyword">if</span> node?.parent == <span class="literal">nil</span> &#123;</span><br><span class="line">            root = <span class="literal">nil</span></span><br><span class="line">            afterRemove(node!)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 需要替换的结点</span></span><br><span class="line">        <span class="keyword">let</span> replace = node?.<span class="keyword">left</span> == <span class="literal">nil</span> ? node?.<span class="keyword">right</span> : node?.<span class="keyword">left</span></span><br><span class="line">        <span class="keyword">if</span> replace == <span class="literal">nil</span> &#123;</span><br><span class="line">            <span class="comment">// node没有左子树也没有右子树, 说明node是叶子结点</span></span><br><span class="line">            <span class="keyword">if</span> node?.parent?.<span class="keyword">left</span> == node &#123;</span><br><span class="line">                <span class="comment">// node是父结点的左结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">left</span> = <span class="literal">nil</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// node是父结点的右结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">right</span> = <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">            afterRemove(node!)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> node?.parent == <span class="literal">nil</span> &#123;</span><br><span class="line">                <span class="comment">// 是根结点</span></span><br><span class="line">                root = replace</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> node?.parent?.<span class="keyword">left</span> == node &#123;</span><br><span class="line">                <span class="comment">// 是左结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">left</span> = replace</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 是右结点</span></span><br><span class="line">                node?.parent?.<span class="keyword">right</span> = replace</span><br><span class="line">            &#125;</span><br><span class="line">            afterRemove(node!)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">afterAdd</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">afterRemove</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-AVLTree"><a href="#13-AVLTree" class="headerlink" title="13.AVLTree"></a>13.AVLTree</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">BinarySearchTree</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">afterAdd</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"已经添加<span class="subst">\(node)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">afterRemove</span><span class="params">(<span class="number">_</span> node: Node&lt;T&gt;)</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"已经移除<span class="subst">\(node)</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还木有写完。。。。</p>
<h2 id="14-红黑树"><a href="#14-红黑树" class="headerlink" title="14.红黑树"></a>14.红黑树</h2><h2 id="15-二叉堆"><a href="#15-二叉堆" class="headerlink" title="15.二叉堆"></a>15.二叉堆</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Heap</span>  </span>&#123;</span><br><span class="line">    associatedtype <span class="type">T</span></span><br><span class="line">    <span class="keyword">var</span> size: <span class="type">Int</span> &#123; <span class="keyword">get</span> <span class="keyword">set</span> &#125;</span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span></span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> ele: T)</span></span></span><br><span class="line">    <span class="comment">// 获取堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> -&gt; <span class="type">T</span></span><br><span class="line">    <span class="comment">// 删除堆顶元素的同时插入一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replace</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">T</span>?</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinaryHeap</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt;: <span class="title">Heap</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用nil作为占位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> list: [<span class="type">T</span>?]</span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">var</span> size = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 默认10个元素</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> <span class="type">DEFAULT_CAPACITY</span> = <span class="number">10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> capaticy: <span class="type">Int</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> capaticy = capaticy &lt; <span class="type">DEFAULT_CAPACITY</span> ? <span class="type">DEFAULT_CAPACITY</span> : capaticy</span><br><span class="line">        list = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: capaticy)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 数组扩容</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">ensureCapacity</span><span class="params">(<span class="number">_</span> <span class="built_in">count</span>: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">count</span> &gt; list.<span class="built_in">count</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> oldList = <span class="keyword">self</span>.list</span><br><span class="line">            <span class="comment">// 扩容1.5倍</span></span><br><span class="line">            <span class="keyword">let</span> newCapacity = oldList.<span class="built_in">count</span> + oldList.<span class="built_in">count</span> &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">self</span>.list = [<span class="type">T</span>?](repeating: <span class="literal">nil</span>, <span class="built_in">count</span>: newCapacity)</span><br><span class="line">            <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">                <span class="keyword">self</span>.list[idx] = oldList[idx]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;size &#123;</span><br><span class="line">            list[idx] = <span class="literal">nil</span></span><br><span class="line">        &#125;</span><br><span class="line">        size = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>)</span><br><span class="line">        list[size] = ele</span><br><span class="line">        size += <span class="number">1</span></span><br><span class="line">        siftUp(size - <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">get</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list[<span class="number">0</span>]!</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除堆顶元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">remove</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        size -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> first = list[<span class="number">0</span>]!</span><br><span class="line">        list[<span class="number">0</span>] = list[size]</span><br><span class="line">        list[size] = <span class="literal">nil</span></span><br><span class="line">        siftDown(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> first</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除堆顶元素的同时插入一个新元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">replace</span><span class="params">(<span class="number">_</span> ele: T)</span></span> -&gt; <span class="type">T</span>? &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.isEmpty() &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"堆为空, 无法删除"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> root: <span class="type">T</span>?</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">            list[<span class="number">0</span>] = ele</span><br><span class="line">            size += <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root = list[<span class="number">0</span>];</span><br><span class="line">            list[<span class="number">0</span>] = ele;</span><br><span class="line">            siftDown(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 建堆</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">heapify</span><span class="params">(<span class="number">_</span> eles: [T])</span></span> &#123;</span><br><span class="line">        size = eles.<span class="built_in">count</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="number">0</span>..&lt;eles.<span class="built_in">count</span> &#123;</span><br><span class="line">            list[idx] = eles[idx]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 自上而下的上滤O(nlogn)</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         for idx in 0..&lt;size &#123;</span></span><br><span class="line"><span class="comment">         siftUp(idx)</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 自下而上的上滤O(n)</span></span><br><span class="line">        <span class="keyword">for</span> idx <span class="keyword">in</span> (<span class="number">0</span>...size &gt;&gt; <span class="number">1</span>).reversed() &#123;</span><br><span class="line">            siftDown(idx)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// index位置的元素下滤</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">siftDown</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> ele = list[idx]!</span><br><span class="line">        <span class="keyword">var</span> idx = idx</span><br><span class="line">        <span class="keyword">while</span> idx &lt; size &gt;&gt; <span class="number">1</span> &#123;</span><br><span class="line">            <span class="comment">// 左结点</span></span><br><span class="line">            <span class="keyword">var</span> childIdx = idx &lt;&lt; <span class="number">1</span> + <span class="number">1</span></span><br><span class="line">            <span class="keyword">var</span> child = list[childIdx]!</span><br><span class="line">            <span class="comment">// 右结点索引</span></span><br><span class="line">            <span class="keyword">let</span> rightIdx = childIdx + <span class="number">1</span></span><br><span class="line">            <span class="comment">// 如果右结点存在, 则取出左右结点中较大的一个</span></span><br><span class="line">            <span class="keyword">if</span> rightIdx &lt; size &amp;&amp; list[rightIdx]! &gt; child &#123;</span><br><span class="line">                childIdx = rightIdx</span><br><span class="line">                child = list[childIdx]!</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果自己不小于较大子结点, 停止下滤</span></span><br><span class="line">            <span class="keyword">if</span> ele &gt;= child &#123;</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换自己与较大子结点的位置</span></span><br><span class="line">            list[idx] = child</span><br><span class="line">            idx = childIdx</span><br><span class="line">        &#125;</span><br><span class="line">        list[idx] = ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// index位置的元素上滤</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">siftUp</span><span class="params">(<span class="number">_</span> idx: Int)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> idx = idx</span><br><span class="line">        <span class="keyword">let</span> ele = list[idx]!</span><br><span class="line">        <span class="keyword">while</span> idx &gt; <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> parentIdx = (idx - <span class="number">1</span>) &gt;&gt; <span class="number">1</span></span><br><span class="line">            <span class="keyword">let</span> parent = list[parentIdx]!</span><br><span class="line">            <span class="keyword">if</span> parent &gt;= ele &#123;</span><br><span class="line">                <span class="comment">// 父结点不小于自己, 停止上滤</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 交换自己与父结点的位置</span></span><br><span class="line">            list[idx] = parent</span><br><span class="line">            idx = parentIdx</span><br><span class="line">        &#125;</span><br><span class="line">        list[idx] = ele</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">desc</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(list)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>上滤</strong><br>1、当插入一个新元素时，放在最末尾。<br>2、若有父节点，将插入节点和父节点比较，如果插入节点大于父节点，交换位置。<br>3、重复2，直至插入节点不小于父节点或者没有父节点，上滤结束。</p>
<p><strong>下滤</strong><br>1、删除首元素，将最后一个元素移到首节点。<br>2、若有孩子，则比较该节点和最大孩子的值，若小于最大孩子的值，与最大的孩子互换位置。<br>3、重复2，直至该节点的值大于最大孩子的值或者没有孩子，下滤结束，堆序性得以满足。</p>
<h2 id="16-优先级队列"><a href="#16-优先级队列" class="headerlink" title="16.优先级队列"></a>16.优先级队列</h2><p>使用二叉堆实现。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">T</span>: <span class="title">Comparable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> heap: <span class="type">BinaryHeap</span> = <span class="type">BinaryHeap</span>&lt;<span class="type">T</span>&gt;(<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">size</span><span class="params">()</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.size</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">isEmpty</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.isEmpty()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">clear</span><span class="params">()</span></span> &#123;</span><br><span class="line">        heap.clear()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">enQueue</span><span class="params">(<span class="number">_</span> ele: T)</span></span> &#123;</span><br><span class="line">        heap.add(ele)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">deQueue</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.remove()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">front</span><span class="params">()</span></span> -&gt; <span class="type">T</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> heap.<span class="keyword">get</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「KVO」源码]]></title>
      <url>http://blog.chenyalun.com/2019/05/31/%E8%AF%BB%E3%80%8CKVO%E3%80%8D%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<p align="center"> KVO源码阅读。 </p>

<a id="more"></a>
<p>尝试去读一遍KVO的源码，发现它比KVC复杂的多，只能明白个大概。<br>文章最后按照自己的理解，再结合源码的实现流程自己写了一个KVO，锻炼锻炼。</p>
<h1 id="一、常用接口"><a href="#一、常用接口" class="headerlink" title="一、常用接口"></a>一、常用接口</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// KVO的回调</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueObserving</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object change:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *)change context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加及移除观察者</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueObserverRegistration</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context API_AVAILABLE(macos(<span class="number">10.7</span>), ios(<span class="number">5.0</span>), watchos(<span class="number">2.0</span>), tvos(<span class="number">9.0</span>));</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h1 id="二、技巧回顾"><a href="#二、技巧回顾" class="headerlink" title="二、技巧回顾"></a>二、技巧回顾</h1><h2 id="1-如何使得属性在未改变的情况下不发送通知-手动控制"><a href="#1-如何使得属性在未改变的情况下不发送通知-手动控制" class="headerlink" title="1.如何使得属性在未改变的情况下不发送通知(手动控制)?"></a>1.如何使得属性在未改变的情况下不发送通知(手动控制)?</h2><p>示例如下，主要有:</p>
<ol>
<li>重写<code>automaticallyNotifiesObserversForKey:</code>方法</li>
<li>重写<code>setter</code>方法</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAObject</span></span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)automaticallyNotifiesObserversForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@"name"</span>]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> automaticallyNotifiesObserversForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name != _name) &#123;</span><br><span class="line">        [<span class="keyword">self</span> willChangeValueForKey:<span class="string">@"name"</span>];</span><br><span class="line">        _name = name;</span><br><span class="line">        [<span class="keyword">self</span> didChangeValueForKey:<span class="string">@"name"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="2-如何注册依赖键-多个属性影响到某一个属性"><a href="#2-如何注册依赖键-多个属性影响到某一个属性" class="headerlink" title="2.如何注册依赖键(多个属性影响到某一个属性)?"></a>2.如何注册依赖键(多个属性影响到某一个属性)?</h2><ol>
<li>重写<code>getter</code>方法，定义依赖关系</li>
<li>重写<code>keyPathsForValuesAffectingValueForKey:</code>方法，添加依赖的key集合</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *firstName;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *lastName;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAObject</span></span></span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="comment">// 定义依赖关系</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"firstName is %@ and lastName is %@"</span>, <span class="keyword">self</span>.firstName, <span class="keyword">self</span>.lastName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPathsForValuesAffectingValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSSet</span> *keyPaths = [<span class="keyword">super</span> keyPathsForValuesAffectingValueForKey:key];</span><br><span class="line">    <span class="keyword">if</span> ([key isEqualToString:<span class="string">@"name"</span>]) &#123;</span><br><span class="line">        keyPaths = [keyPaths setByAddingObjectsFromArray:@[<span class="string">@"firstName"</span>, <span class="string">@"lastName"</span>]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> keyPaths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> // 也可以命名为keyPathsForValuesAffecting&lt;Key&gt;的类方法来达到同样的目的</span></span><br><span class="line"><span class="comment"> + (NSSet&lt;NSString *&gt; *)keyPathsForValuesAffectingName &#123;</span></span><br><span class="line"><span class="comment">     return [NSSet setWithObjects:@"firstName", @"lastName", nil];</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="3-当NSMutableArray中元素增加和减少时如何监听到"><a href="#3-当NSMutableArray中元素增加和减少时如何监听到" class="headerlink" title="3.当NSMutableArray中元素增加和减少时如何监听到?"></a>3.当NSMutableArray中元素增加和减少时如何监听到?</h2><p>示例代码:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAObject </span>: NSObject</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) NSMutableArray *nameList;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"><span class="variable">@implementation</span> YAObject</span><br><span class="line"><span class="comment">// 实现集合代理对象: 一般建议-countOf&lt;Key&gt;和-objectIn&lt;Key&gt;AtIndex:</span></span><br><span class="line">- (NSUInteger)countOfNameList &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[_nameList count]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">objectInNameListAtIndex</span><span class="selector-pseudo">:(NSUInteger)index</span> &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[_nameList objectAtIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 至少实现一个插入方法和一个删除方法</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">insertObject</span><span class="selector-pseudo">:(id)object</span> <span class="selector-tag">inNameListAtIndex</span><span class="selector-pseudo">:(NSUInteger)index</span> &#123;</span><br><span class="line">    <span class="selector-attr">[_nameList insertObject:object atIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)<span class="attribute">removeObjectFromNameListAtIndex</span>:(NSUInteger)index &#123;</span><br><span class="line">    <span class="selector-attr">[_nameList removeObjectAtIndex:index]</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure>
<p>使用:</p>
<ol>
<li>务必使用<code>mutableArrayValueForKey</code>获取集合</li>
<li>使用<code>insertObject</code>方法添加元素</li>
</ol>
<p>比如:</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSMutableArray *nameList = [self.obj <span class="string">mutableArrayValueForKey:</span>@<span class="string">"nameList"</span>];</span><br><span class="line">[nameList <span class="string">insertObject:</span>obj <span class="string">atIndex:</span><span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<h1 id="三、几个问题"><a href="#三、几个问题" class="headerlink" title="三、几个问题"></a>三、几个问题</h1><p>总结的几个问题。</p>
<h2 id="1-KVO的实现原理是什么"><a href="#1-KVO的实现原理是什么" class="headerlink" title="1.KVO的实现原理是什么?"></a>1.KVO的实现原理是什么?</h2><blockquote>
<p>Objective-C依托于强大的runtime机制来实现KVO。当我们第一次观察某个对象的属性时，runtime会创建一个新的继承自这个对象的class的subclass(前缀是<code>NSKVONotifying_</code>)。在这个新的subclass中，它会重写所有被观察的key的setter，然后将object的isa指针指向新创建的class(这个指针告诉Objective-C运行时某个object到底是什么类型的)。所以object神奇地变成了新的子类的实例。</p>
</blockquote>
<p>——摘自南峰子的博客。</p>
<h2 id="2-KVO源码中添加观察者时整体的大致流程是什么"><a href="#2-KVO源码中添加观察者时整体的大致流程是什么" class="headerlink" title="2.KVO源码中添加观察者时整体的大致流程是什么?"></a>2.KVO源码中添加观察者时整体的大致流程是什么?</h2><ol>
<li>将<code>keyPath</code>、<code>class</code>等信息封装成<code>NSKeyValueProperty</code>，分别解析一般属性(<code>@&quot;aa&quot;</code>)、可计算属性(<code>@&quot;@aa&quot;</code>)、属性链(<code>@&quot;aa.bb.@cc.dd&quot;</code>)，进行子类化，缓存在<code>CFMutableSet</code>中方便下次快速取出。</li>
<li>将<code>NSKeyValueProperty</code>、<code>context</code>、<code>options</code>、<code>observer</code>等信息封装成<code>NSKeyValueObservance</code>，缓存在<code>NSHashTable</code>中。</li>
<li>倘若设置了<code>NSKeyValueObservingOptionInitial</code>选项，会在注册观察服务时调用一次触发方法。</li>
<li>动态创建名为<code>NSKVONotifying_+原来类名</code>的新类，重写其<code>dealloc</code>、<code>_isKVOA</code>方法，再重写<code>class</code>方法，利用<code>object_setClass()</code>函数将其isa指针指向原先的类。</li>
<li>重写<code>willChangeValueForKey:</code>和<code>didChangeValueForKey:</code>方法，重写被观察属性的<code>setter</code>方法，在<code>setter</code>中先调用<code>willChangeValueForKey:</code>方法，然后调用父类的 <code>setter</code> 方法对成员变量赋值，之后再调用 <code>didChangeValueForKey:</code> 方法。</li>
<li><code>didChangeValueForKey:</code> 方法中会调用<code>observeValueForKeyPath:ofObject:change:context:</code>方法。</li>
</ol>
<h2 id="3-KVO中所封装组件的关系是怎样的"><a href="#3-KVO中所封装组件的关系是怎样的" class="headerlink" title="3.KVO中所封装组件的关系是怎样的?"></a>3.KVO中所封装组件的关系是怎样的?</h2><ol>
<li>将<code>keyPath、class</code>等信息封装成<code>NSKeyValueProperty</code>，使用<code>CFMutableSet</code>缓存<code>NSKeyValueProperty</code>。</li>
<li>将<code>observer、property、options、context 、originalObservable</code>等信息封装成<code>NSKeyValueObservance</code>，<code>使用NSHashTable(NSKeyValueShareableObservationInfos)</code>缓存。</li>
<li><code>NSKeyValueObservationInfo</code>与<code>NSKeyValueObservance</code>的关系是: <code>NSKeyValueObservationInfo</code>中有一个<code>observances</code>数组，数组里面是<code>NSKeyValueObservance</code>对象。</li>
<li>每一个<code>object</code>都有一个<code>observationInfo</code>属性(<code>void *</code>类型)，它与<code>NSKeyValueObservationInfo</code>会相互转化。</li>
</ol>
<p>如图所示:</p>
<p>图片</p>
<p><code>class</code>和<code>keyPath</code>决定了是否是同一个<code>NSKeyValueProperty</code>。<br><code>NSKeyValueProperty</code>、<code>Observer</code>、<code>options</code>、<code>context</code> 决定了是否是同一个<code>NSKeyValueObservance</code>。</p>
<h2 id="4-KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到"><a href="#4-KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到" class="headerlink" title="4.KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到?"></a>4.KVO多次使用完全相同的参数进行addObserver操作，也会得到相应次数的回调，如何做到?</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br><span class="line">[self.obj <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span>NULL];</span><br></pre></td></tr></table></figure>
<p>如上面代码，会有四次回调。</p>
<p>在每次添加观察者时，都会获取<code>NSKeyValueObservance</code>对象(可能从缓存中获取也可能新建)，并把它追加到object的<code>observances</code>数组中(即使该数组中已经存在完全相同（指针一致）的<code>NSKeyValueObservance</code>对象)，由此保证了多次<code>addObserver</code>操作会有多次回调。</p>
<p>通过打印可以证明：</p>
<p><img src="https://image.chenyalun.com/2019/05/30/001.png" style="zoom:50%"></p>
<h1 id="四、添加观察者"><a href="#四、添加观察者" class="headerlink" title="四、添加观察者"></a>四、添加观察者</h1><p>这一步骤中封装出了许多的类，同时也把产生的许多对象做了进一步的缓存处理。</p>
<h2 id="1-封装"><a href="#1-封装" class="headerlink" title="1.封装"></a>1.封装</h2><h3 id="1-1接口方法"><a href="#1-1接口方法" class="headerlink" title="1.1接口方法"></a>1.1接口方法</h3><p>加锁，接口方法中使用<code>pthread</code>中的<code>pthread_mutex_lock()</code>和<code>pthread_mutex_unlock</code>函数。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这是个接口方法, 添加观察者分为两个流程: 1，根据class和keyPath获取NSKeyValueProperty对象。2，添加对property的观察。</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">d_addObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">context:</span>(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="comment">// 加锁</span></span><br><span class="line">    pthread_mutex_lock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">    <span class="comment">// 获取当前线程pthread</span></span><br><span class="line">    _NSKeyValueObserverRegistrationLockOwner = pthread_self();</span><br><span class="line">    <span class="comment">// 根据class和keyPath获取NSKeyValueProperty</span></span><br><span class="line">    NSKeyValueProperty *property = NSKeyValuePropertyForIsaAndKeyPath(object_getClass(self),keyPath);</span><br><span class="line">    <span class="comment">// 添加对property的观察</span></span><br><span class="line">    [self <span class="string">_d_addObserver:</span>observer <span class="string">forProperty:</span>property <span class="string">options:</span>options <span class="string">context:</span>context];</span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    pthread_mutex_unlock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-添加对NSKeyValueProperty的观察的具体实现"><a href="#1-2-添加对NSKeyValueProperty的观察的具体实现" class="headerlink" title="1.2.添加对NSKeyValueProperty的观察的具体实现"></a>1.2.添加对NSKeyValueProperty的观察的具体实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 添加观察者过程中, 不是单纯地'观察'keyPath, 而是观察对keyPath封装的NSKeyValueProperty</span></span><br><span class="line">- (<span class="keyword">void</span>)_addObserver:(<span class="keyword">id</span>)observer forProperty:(<span class="built_in">NSKeyValueProperty</span> *)property options:(<span class="keyword">int</span>)options context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span>(options &amp; <span class="built_in">NSKeyValueObservingOptionInitial</span>) &#123;</span><br><span class="line">        <span class="comment">// NSKeyValueObservingOptionInitial: 观察最初的值（在注册观察服务时会调用一次触发方法）</span></span><br><span class="line">        <span class="built_in">NSString</span> *keyPath = [property keyPath];</span><br><span class="line">        _NSKeyValueObserverRegistrationLockOwner = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        pthread_mutex_unlock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">            <span class="comment">// newValue就是当前的值</span></span><br><span class="line">            newValue = [<span class="keyword">self</span> valueForKeyPath:keyPath];</span><br><span class="line">            <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">                newValue = [<span class="built_in">NSNull</span> null]; <span class="comment">// 使用NSNull对象</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSKeyValueChangeDictionary</span> *changeDictionary = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 创建NSKeyValueChangeDetails结构体</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         typedef struct &#123;</span></span><br><span class="line"><span class="comment">             NSKeyValueChange kind;</span></span><br><span class="line"><span class="comment">             id oldValue;</span></span><br><span class="line"><span class="comment">             id newValue;</span></span><br><span class="line"><span class="comment">             NSIndexSet *indexes;</span></span><br><span class="line"><span class="comment">             id extraData;</span></span><br><span class="line"><span class="comment">         &#125; NSKeyValueChangeDetails;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="built_in">NSKeyValueChangeDetails</span> changeDetails = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        changeDetails.kind = <span class="built_in">NSKeyValueChangeSetting</span>;</span><br><span class="line">        changeDetails.oldValue = <span class="literal">nil</span>;</span><br><span class="line">        changeDetails.newValue = newValue;</span><br><span class="line">        changeDetails.indexes = <span class="literal">nil</span>;</span><br><span class="line">        changeDetails.extraData = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 函数1: 通知观察者, 传递结构体changeDetails</span></span><br><span class="line">        <span class="built_in">NSKeyValueNotifyObserver</span>(observer,keyPath, <span class="keyword">self</span>, context, <span class="literal">nil</span>, <span class="literal">NO</span>,changeDetails, &amp;changeDictionary);</span><br><span class="line">        </span><br><span class="line">        [changeDictionary release];</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        pthread_mutex_lock(&amp;_NSKeyValueObserverRegistrationLock);</span><br><span class="line">        <span class="comment">// 获取当前pthread</span></span><br><span class="line">        _NSKeyValueObserverRegistrationLockOwner = pthread_self();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数2: 获取oldObservationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *oldObservationInfo = _NSKeyValueRetainedObservationInfoForObject(<span class="keyword">self</span>,property.containerClass);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">BOOL</span> cacheHit = <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *addedObservance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> originalObservable = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((options &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0x01</span>) &#123;</span><br><span class="line">        <span class="comment">// _CFGetTSD: 获取线程信息</span></span><br><span class="line">        <span class="comment">// Get some thread specific data from a pre-assigned slot.</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservingTSD</span> *TSD = _CFGetTSD(<span class="built_in">NSKeyValueObservingTSDKey</span>);</span><br><span class="line">        <span class="keyword">if</span> (TSD) &#123;</span><br><span class="line">            originalObservable = TSD-&gt;implicitObservanceAdditionInfo.originalObservable;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 函数3: 获取newObservationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *newObservationInfo = _NSKeyValueObservationInfoCreateByAdding(oldObservationInfo, observer, property, options, context, originalObservable,&amp;cacheHit,&amp;addedObservance);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 函数4: 将self的observationInfo设置为newObservationInfo</span></span><br><span class="line">    _NSKeyValueReplaceObservationInfoForObject(<span class="keyword">self</span>,property.containerClass,oldObservationInfo,newObservationInfo);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// - (void)object:(id)object didAddObservance:(NSKeyValueObservance *)observance recurse:(BOOL)recurse &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 实际上这个方法啥事也没做</span></span><br><span class="line">    [property object:<span class="keyword">self</span> didAddObservance:addedObservance recurse:<span class="literal">YES</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 核心方法: 获取property中已经修改过的class</span></span><br><span class="line">    Class isaForAutonotifying = [property isaForAutonotifying];</span><br><span class="line">    <span class="keyword">if</span>(isaForAutonotifying) &#123;</span><br><span class="line">        Class cls = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        <span class="keyword">if</span>(cls != isaForAutonotifying) &#123;</span><br><span class="line">            <span class="comment">// 通过 object_setClass()修改isa指针, 设置自己的class为property的isaForAutonotifying</span></span><br><span class="line">            object_setClass(<span class="keyword">self</span>,isaForAutonotifying);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [newObservationInfo release];</span><br><span class="line">    [oldObservationInfo release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数1-设置changeDictionary并调用NSKVONotify-函数"><a href="#函数1-设置changeDictionary并调用NSKVONotify-函数" class="headerlink" title="函数1: 设置changeDictionary并调用NSKVONotify()函数"></a>函数1: 设置changeDictionary并调用NSKVONotify()函数</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="built_in">NSKeyValueNotifyObserver</span>(<span class="keyword">id</span> observer,<span class="built_in">NSString</span> * keyPath, <span class="keyword">id</span> object, <span class="keyword">void</span> *context, <span class="keyword">id</span> originalObservable, <span class="built_in">BOOL</span> isPriorNotification, <span class="built_in">NSKeyValueChangeDetails</span> changeDetails, <span class="built_in">NSKeyValueChangeDictionary</span> **changeDictionary) &#123;</span><br><span class="line">    <span class="keyword">if</span>(*changeDictionary) &#123;</span><br><span class="line">        [*changeDictionary setDetailsNoCopy:changeDetails originalObservable:originalObservable];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *changeDictionary =  [[<span class="built_in">NSKeyValueChangeDictionary</span> alloc] initWithDetailsNoCopy:changeDetails originalObservable:originalObservable isPriorNotification:isPriorNotification];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSUInteger</span> retainCountBefore = [*changeDictionary retainCount];</span><br><span class="line">    <span class="built_in">NSKVONotify</span>(observer, keyPath, object, *changeDictionary, context);</span><br><span class="line">    <span class="keyword">if</span>(retainCountBefore != (<span class="built_in">NSUInteger</span>)INTMAX_MAX &amp;&amp; retainCountBefore != [*changeDictionary retainCount]) &#123;</span><br><span class="line">        [*changeDictionary retainObjects];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKVONotify()函数就是调用observeValueForKeyPath方法</span></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">NSKVONotify</span>(<span class="keyword">id</span> observer, <span class="built_in">NSString</span> *keyPath, <span class="keyword">id</span> object, <span class="built_in">NSDictionary</span> *changeDictionary, <span class="keyword">void</span> *context) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservingAssertRegistrationLockNotHeld</span>();</span><br><span class="line">    [observer observeValueForKeyPath:keyPath ofObject:object change:changeDictionary context:context];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数2-获取object的observationInfo对象"><a href="#函数2-获取object的observationInfo对象" class="headerlink" title="函数2: 获取object的observationInfo对象"></a>函数2: 获取object的observationInfo对象</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueRetainedObservationInfoForObject(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueContainerClass</span> *containerClass) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *observationInfo = <span class="literal">nil</span>;</span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    <span class="keyword">if</span> (containerClass) &#123;</span><br><span class="line">        <span class="comment">// 调用containerClass的cachedObservationInfoImplementation实现</span></span><br><span class="line">        observationInfo = ((<span class="built_in">NSKeyValueObservationInfo</span> * (*)(<span class="keyword">id</span>,SEL))containerClass.cachedObservationInfoImplementation)(object, <span class="keyword">@selector</span>(observationInfo));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接获取object的d_observationInfo对象</span></span><br><span class="line">        observationInfo = (<span class="built_in">NSKeyValueObservationInfo</span> *)[object d_observationInfo];</span><br><span class="line">    &#125;</span><br><span class="line">    [observationInfo <span class="keyword">retain</span>];</span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    <span class="keyword">return</span>  observationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数3-获取’添加观察者’时所需要的NSKeyValueObservationInfo"><a href="#函数3-获取’添加观察者’时所需要的NSKeyValueObservationInfo" class="headerlink" title="函数3: 获取’添加观察者’时所需要的NSKeyValueObservationInfo"></a>函数3: 获取’添加观察者’时所需要的NSKeyValueObservationInfo</h4><p>如果<code>baseObservationInfo</code>存在，则一顿封装操作后，会把封装完毕的<code>NSKeyValueObservance</code>“追加”到<code>baseObservationInfo</code>的<code>observances</code>数组中。如果<code>baseObservationInfo</code>不存在，则一顿封装操作后，会把封装完毕的<code>NSKeyValueObservance</code>放到新创建的<code>NSKeyValueObservationInfo</code>对象的<code>observances</code>数组中。最后，<code>cacheHit</code>告诉调用者是否有命中缓存，<code>*addedObservance</code>指向了<code>observance</code>对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueObservationInfoCreateByAdding(<span class="built_in">NSKeyValueObservationInfo</span> *baseObservationInfo, <span class="keyword">id</span> observer, <span class="built_in">NSKeyValueProperty</span> *property, <span class="keyword">int</span> options, <span class="keyword">void</span> *context, <span class="keyword">id</span> originalObservable,  <span class="built_in">BOOL</span> *cacheHit, <span class="built_in">NSKeyValueObservance</span> **addedObservance) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *createdObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用弱引用表NSKeyValueShareableObservationInfos缓存观察者对象</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">        <span class="comment">// 自定义NSPointerFunctions</span></span><br><span class="line">        <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">        <span class="comment">// 设置hash函数</span></span><br><span class="line">        [pointerFunctions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">        <span class="comment">// 设置判等函数</span></span><br><span class="line">        [pointerFunctions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">        <span class="comment">// 创建NSHashTable</span></span><br><span class="line">        <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span>) &#123;</span><br><span class="line">        <span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span> = [<span class="built_in">NSKeyValueShareableObservationInfoKey</span> <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过这个公共key到缓存表NSKeyValueShareableObservationInfos中查找</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservationInfoKey</span> * shareableObservationInfoKey;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!shareableObservationInfoKey) &#123;</span><br><span class="line">        <span class="comment">// 第一次使用, 为空时创建</span></span><br><span class="line">        shareableObservationInfoKey = [[<span class="built_in">NSKeyValueShareableObservationInfoKey</span> alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置key的信息</span></span><br><span class="line">    shareableObservationInfoKey.addingNotRemoving = <span class="literal">YES</span>;</span><br><span class="line">    shareableObservationInfoKey.baseObservationInfo = baseObservationInfo;</span><br><span class="line">    shareableObservationInfoKey.additionObserver = observer;</span><br><span class="line">    shareableObservationInfoKey.additionProperty = property;</span><br><span class="line">    shareableObservationInfoKey.additionOptions = options;</span><br><span class="line">    shareableObservationInfoKey.additionContext = context;</span><br><span class="line">    shareableObservationInfoKey.additionOriginalObservable = originalObservable;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据shareableObservationInfoKey的已有信息进行查找</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> * existsObservationInfo = [<span class="built_in">NSKeyValueShareableObservationInfos</span> member:shareableObservationInfoKey];</span><br><span class="line">    <span class="comment">// 清空shareableObservationInfoKey的废弃信息(主要是减少对observer的引用计数)</span></span><br><span class="line">    shareableObservationInfoKey.additionOriginalObservable = <span class="literal">nil</span>;</span><br><span class="line">    shareableObservationInfoKey.additionObserver = <span class="literal">nil</span>;</span><br><span class="line">    shareableObservationInfoKey.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!existsObservationInfo) &#123; <span class="comment">// 缓存中不存在</span></span><br><span class="line">        <span class="comment">// (一般是第一次使用时)NSHashTable为空, 创建</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservances</span>) &#123;</span><br><span class="line">            <span class="built_in">NSKeyValueShareableObservances</span> = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 通过这个公共key到缓存表NSKeyValueShareableObservances中查找</span></span><br><span class="line">        <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservanceKey</span> *shareableObservanceKey;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!shareableObservanceKey) &#123; <span class="comment">// key不存在时创建</span></span><br><span class="line">            shareableObservanceKey = [[<span class="built_in">NSKeyValueShareableObservanceKey</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置key的信息</span></span><br><span class="line">        shareableObservanceKey.observer = observer;</span><br><span class="line">        shareableObservanceKey.property = property;</span><br><span class="line">        shareableObservanceKey.options = options;</span><br><span class="line">        shareableObservanceKey.context = context;</span><br><span class="line">        shareableObservanceKey.originalObservable = originalObservable;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 查找Observance缓存</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *existsObservance = [<span class="built_in">NSKeyValueShareableObservances</span> member:shareableObservanceKey];</span><br><span class="line">        <span class="comment">// 清空shareableObservanceKey的废弃信息</span></span><br><span class="line">        shareableObservanceKey.originalObservable = <span class="literal">nil</span>;</span><br><span class="line">        shareableObservanceKey.observer = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *observance = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!existsObservance) &#123;</span><br><span class="line">            <span class="comment">// 没有找到, 则创建observance</span></span><br><span class="line">            observance = [[<span class="built_in">NSKeyValueObservance</span> alloc] _initWithObserver:observer property:property options:options context:context originalObservable:originalObservable];</span><br><span class="line">            <span class="keyword">if</span>(observance.cachedIsShareable) &#123;</span><br><span class="line">                <span class="comment">// 可以缓存, 放入NSKeyValueShareableObservances中</span></span><br><span class="line">                [<span class="built_in">NSKeyValueShareableObservances</span> addObject:observance];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 找到了, observance就指向existsObservance</span></span><br><span class="line">            observance = existsObservance;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (baseObservationInfo) &#123;</span><br><span class="line">            <span class="comment">// 复制baseObservationInfo并追加observance</span></span><br><span class="line">            createdObservationInfo = [baseObservationInfo _copyByAddingObservance:observance];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 创建新的ObservationInfo</span></span><br><span class="line">            createdObservationInfo = [[<span class="built_in">NSKeyValueObservationInfo</span> alloc] _initWithObservances:&amp;observance count:<span class="number">1</span> hashValue:<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (createdObservationInfo.cachedIsShareable)&#123;</span><br><span class="line">            <span class="comment">// 允许缓存, 添加到NSKeyValueShareableObservationInfos中</span></span><br><span class="line">            [<span class="built_in">NSKeyValueShareableObservationInfos</span> addObject:createdObservationInfo];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有命中缓存</span></span><br><span class="line">        *cacheHit = <span class="literal">NO</span>;</span><br><span class="line">        <span class="comment">// 设置新添加的Observance</span></span><br><span class="line">        *addedObservance = observance;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 缓存中存在</span></span><br><span class="line">        <span class="comment">// 设置命中缓存</span></span><br><span class="line">        *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">        <span class="comment">// observance必定就是已存在的info.observance列表最后一个, 因为判断equal就是按照这个原则去判断的</span></span><br><span class="line">        <span class="comment">// 判等函数: NSKeyValueShareableObservationInfoNSHTIsEqual()</span></span><br><span class="line">        *addedObservance = existsObservationInfo.observances.lastObject;</span><br><span class="line">        <span class="comment">// 设置createdObservationInfo</span></span><br><span class="line">        createdObservationInfo = existsObservationInfo;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 解锁</span></span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">    <span class="keyword">return</span> createdObservationInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="函数4-将object的observationInfo设置为newObservationInfo"><a href="#函数4-将object的observationInfo设置为newObservationInfo" class="headerlink" title="函数4:将object的observationInfo设置为newObservationInfo"></a>函数4:将object的observationInfo设置为newObservationInfo</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _NSKeyValueReplaceObservationInfoForObject(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueContainerClass</span> * containerClass, <span class="built_in">NSKeyValueObservationInfo</span> *oldObservationInfo, <span class="built_in">NSKeyValueObservationInfo</span> *newObservationInfo) &#123;</span><br><span class="line">    os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (newObservationInfo) [newObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不理解??????</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     typedef struct &#123;</span></span><br><span class="line"><span class="comment">         CFMutableArrayRef pendingArray;//0</span></span><br><span class="line"><span class="comment">         ObservationInfoWatcher *firstWatcher;//4</span></span><br><span class="line"><span class="comment">         ImplicitObservanceAdditionInfo  implicitObservanceAdditionInfo;</span></span><br><span class="line"><span class="comment">         ImplicitObservanceRemovalInfo implicitObservanceRemovalInfo;</span></span><br><span class="line"><span class="comment">     &#125; NSKeyValueObservingTSD;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservingTSD</span> *TSD = _CFGetTSD(<span class="built_in">NSKeyValueObservingTSDKey</span>);</span><br><span class="line">    <span class="keyword">if</span>(TSD) &#123;</span><br><span class="line">        ObservationInfoWatcher *next = TSD-&gt;firstWatcher;</span><br><span class="line">        <span class="keyword">while</span>(next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (next-&gt;object == object) &#123;</span><br><span class="line">                [next-&gt;observationInfo release];</span><br><span class="line">                next-&gt;observationInfo = [newObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            next = next-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(containerClass) &#123;</span><br><span class="line">        <span class="comment">// 调用object的d_setObservationInfo:方法, 并传参数newObservationInfo</span></span><br><span class="line">        containerClass.cacheNSetObservationInfoImplementation(object, <span class="keyword">@selector</span>(d_setObservationInfo:), newObservationInfo);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 直接设置新值</span></span><br><span class="line">        [object d_setObservationInfo: newObservationInfo];</span><br><span class="line">    &#125;</span><br><span class="line">    os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoSpinLock</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-缓存"><a href="#2-缓存" class="headerlink" title="2.缓存"></a>2.缓存</h2><p>缓存查找逻辑是一致的: 确定这些对象的<code>hash</code>和<code>isEqual:</code>方法，通过创建与目标对象判等属性一致的key去查找。</p>
<h3 id="2-1-NSKeyValueProperty的缓存"><a href="#2-1-NSKeyValueProperty的缓存" class="headerlink" title="2.1.NSKeyValueProperty的缓存"></a>2.1.NSKeyValueProperty的缓存</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueProperties</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建集合NSKeyValueProperties</span></span><br><span class="line">    <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    callbacks.version =  kCFTypeSetCallBacks.version;</span><br><span class="line">    callbacks.retain =  kCFTypeSetCallBacks.retain;</span><br><span class="line">    callbacks.release =  kCFTypeSetCallBacks.release;</span><br><span class="line">    callbacks.copyDescription =  kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">    <span class="comment">// 设置CFSet集合中元素判等的依据</span></span><br><span class="line">    callbacks.equal =  (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValuePropertyIsEqual</span>;</span><br><span class="line">    <span class="comment">// 设置CFSet集合中元素的hash值获取函数</span></span><br><span class="line">    callbacks.hash =  (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValuePropertyHash</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueProperties</span> =  <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;callbacks);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把property添加到NSKeyValueProperties集合中</span></span><br><span class="line"><span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueProperties</span>, property);</span><br></pre></td></tr></table></figure>
<p>CFSet集合中元素判等的依据</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> <span class="built_in">NSKeyValuePropertyIsEqual</span>(<span class="built_in">NSKeyValueProperty</span> *property1, <span class="built_in">NSKeyValueProperty</span> *property2) &#123;</span><br><span class="line">    <span class="keyword">return</span> (property1.containerClass == property2.containerClass) &amp;&amp;</span><br><span class="line">    (property1.keyPath == property2.keyPath || [property1.keyPath isEqual: property2.keyPath]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回NSKeyValueProperty的hash值</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">NSUInteger NSKeyValuePropertyHash(NSKeyValueProperty *<span class="keyword">property</span><span class="title"></span>) &#123;</span><br><span class="line">    return <span class="keyword">property</span>.<span class="title"></span>keyPath.hash ^ (NSUInteger)(void *)<span class="keyword">property</span>.<span class="title"></span>containerClass;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再次证明了 <code>class</code>和<code>keyPath</code>决定了是否是同一个<code>NSKeyValueProperty</code>。</p>
<h3 id="2-2-NSKeyValueObservance的缓存"><a href="#2-2-NSKeyValueObservance的缓存" class="headerlink" title="2.2.NSKeyValueObservance的缓存"></a>2.2.NSKeyValueObservance的缓存</h3><p>缓存查找</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *<span class="built_in">NSKeyValueShareableObservances</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservances</span>) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueShareableObservances</span> = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observance查找key</span></span><br><span class="line"><span class="keyword">static</span> DNSKeyValueShareableObservanceKey *shareableObservanceKey;</span><br><span class="line"><span class="keyword">if</span>(!shareableObservanceKey) &#123;</span><br><span class="line">    shareableObservanceKey = [[DNSKeyValueShareableObservanceKey alloc] init];</span><br><span class="line">&#125;</span><br><span class="line">shareableObservanceKey.observer = observer;</span><br><span class="line">shareableObservanceKey.property = property;</span><br><span class="line">shareableObservanceKey.options = options;</span><br><span class="line">shareableObservanceKey.context = context;</span><br><span class="line">shareableObservanceKey.originalObservable = originalObservable;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找缓存</span></span><br><span class="line"><span class="built_in">NSKeyValueObservance</span> *existsObservance = [<span class="built_in">NSKeyValueShareableObservances</span> member:shareableObservanceKey];</span><br><span class="line">shareableObservanceKey.originalObservable = <span class="literal">nil</span>;</span><br><span class="line">shareableObservanceKey.observer = <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure>
<p>重写<code>NSKeyValueObservance</code>的<code>hash</code>和<code>isEqual:</code>方法</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line">    <span class="keyword">return</span> _NSKVOPointersHash(<span class="number">5</span>, _observer, _property, (<span class="keyword">void</span> *)(<span class="built_in">NSUInteger</span>)(_options), _context, _originalObservable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (![object isKindOfClass: <span class="keyword">self</span>.class])  <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *other = (<span class="built_in">NSKeyValueObservance</span> *)object;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> other.observer == <span class="keyword">self</span>.observer &amp;&amp;</span><br><span class="line">    other.options == <span class="keyword">self</span>.options &amp;&amp;</span><br><span class="line">    other.context == <span class="keyword">self</span>.context &amp;&amp;</span><br><span class="line">    other.originalObservable == <span class="keyword">self</span>.originalObservable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-NSKeyValueObservationInfo的缓存"><a href="#2-3-NSKeyValueObservationInfo的缓存" class="headerlink" title="2.3.NSKeyValueObservationInfo的缓存"></a>2.3.NSKeyValueObservationInfo的缓存</h3><p>缓存查找</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *<span class="built_in">NSKeyValueShareableObservationInfos</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// observationInfo缓存</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">    <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">    [pointerFunctions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">    [pointerFunctions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">    <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-NSKeyValueObservationInfo的存储-observationInfo"><a href="#2-4-NSKeyValueObservationInfo的存储-observationInfo" class="headerlink" title="2.4.NSKeyValueObservationInfo的存储(observationInfo)"></a>2.4.NSKeyValueObservationInfo的存储(observationInfo)</h3><p>当封装成<code>NSKeyValueObservationInfo</code>时，<code>weak</code>的<code>NSHashTable</code>并不负责存储，那么，谁负责真正的存储呢?</p>
<p>Take or return a pointer that identifies information about all of the observers that are registered with the receiver, the options that were used at registration-time, etc. The default implementation of these methoNS store observation info in a global dictionary keyed by the receivers’ pointers. For improved performance, you can override these methoNS to store the opaque data pointer in an instance variable. Overrides of these methoNS must not attempt to send Objective-C messages to the passed-in observation info, including -retain and -release.</p>
<blockquote>
<p>这个方法的默认实现是以对象的指针作为key，从一个全局的字典中获取信息。</p>
</blockquote>
<p>如何获取对象的指针？这里有个定义：<br><code>OBSERVATION_INFO_KEY</code>的定义是: <code>#define OBSERVATION_INFO_KEY(object) ((void *)(~(NSUInteger)(object)))</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">CFMutableDictionaryRef</span> <span class="built_in">NSKeyValueObservationInfoPerObject</span> = <span class="literal">NULL</span>;</span><br><span class="line">- (<span class="keyword">void</span> *)observationInfo &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSKeyValueObservationInfoPerObject</span> ? (<span class="keyword">void</span> *)<span class="built_in">CFDictionaryGetValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>)) : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObservationInfo:(<span class="keyword">void</span> *)info &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">NSKeyValueObservationInfoPerObject</span>) &#123;</span><br><span class="line">        <span class="built_in">NSKeyValueObservationInfoPerObject</span> = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info) &#123;</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>), info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryRemoveValue</span>(<span class="built_in">NSKeyValueObservationInfoPerObject</span>, OBSERVATION_INFO_KEY(<span class="keyword">self</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>即这个方法的默认实现是以对象的指针作为key，从一个全局的字典中获取信息。由此，我们可以理解为，KVO的信息是存储在一个全局字典中，而不是存储在对象本身。<br>不过，为了提高效率，我们可以重写observationInfo属性的set和get方法，以将这个不透明的数据指针存储到一个实例变量中。但是，在重写时，我们不应该尝试去向这些数据发送一个Objective-C消息，包括retain和release。</p>
</blockquote>
<h2 id="3-新建与重写"><a href="#3-新建与重写" class="headerlink" title="3.新建与重写"></a>3.新建与重写</h2><p>在这一步骤中，动态创建了原来class的子类，当然，也重写和添加了许多方法。</p>
<h3 id="3-1动态创建子类的核心实现"><a href="#3-1动态创建子类的核心实现" class="headerlink" title="3.1动态创建子类的核心实现"></a>3.1动态创建子类的核心实现</h3><p>动态创建子类中，重写了<code>dealloc、class、_isKVOA</code>方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueNotifyingInfo</span> *_NSKVONotifyingCreateInfoWithOriginalClass(Class originalClass) &#123;</span><br><span class="line">    <span class="keyword">static</span> IMP <span class="built_in">NSObjectWillChange</span>;</span><br><span class="line">    <span class="keyword">static</span> IMP <span class="built_in">NSObjectDidChange</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造新的子类名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originalClassName = class_getName(originalClass);</span><br><span class="line">    size_t size = strlen(originalClassName) + <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">char</span> *newClassName = (<span class="keyword">char</span> *)malloc(size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// #define NOTIFY_CLASSNAME_PREFIX "NSKVONotifying_"</span></span><br><span class="line">    strlcpy(newClassName, NOTIFY_CLASSNAME_PREFIX, size);</span><br><span class="line">    strlcat(newClassName, originalClassName, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建子类</span></span><br><span class="line">    Class newSubClass = objc_allocateClassPair(originalClass, newClassName, <span class="keyword">sizeof</span>(<span class="built_in">NSKeyValueNotifyingInfo</span>));</span><br><span class="line">    objc_registerClassPair(newSubClass);</span><br><span class="line">    </span><br><span class="line">    free(newClassName);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *ivars = object_getIndexedIvars(newSubClass);</span><br><span class="line">    <span class="comment">// 创建NSKeyValueNotifyingInfo对象, 封装子类\原始类等信息</span></span><br><span class="line">    <span class="built_in">NSKeyValueNotifyingInfo</span> *notifyingInfo = (<span class="built_in">NSKeyValueNotifyingInfo</span> *)ivars;</span><br><span class="line">    notifyingInfo-&gt;originalClass = originalClass;</span><br><span class="line">    notifyingInfo-&gt;newSubClass = newSubClass;</span><br><span class="line">    notifyingInfo-&gt;notifyingKeys = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;kCFCopyStringSetCallBacks);</span><br><span class="line">    notifyingInfo-&gt;selKeyMap = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">    </span><br><span class="line">    pthread_mutexattr_t mutexattr;</span><br><span class="line">    pthread_mutexattr_init(&amp;mutexattr);</span><br><span class="line">    pthread_mutexattr_settype(&amp;mutexattr, PTHREAD_MUTEX_RECURSIVE);</span><br><span class="line">    pthread_mutex_init(&amp;notifyingInfo-&gt;mutex, &amp;mutexattr);</span><br><span class="line">    pthread_mutexattr_destroy(&amp;mutexattr);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取NSObject类的 willChangeValueForKey 和 didChangeValueForKey实现</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> <span class="built_in">NSObjectIMPLookupOnce</span>;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;<span class="built_in">NSObjectIMPLookupOnce</span>, ^&#123;</span><br><span class="line">        <span class="built_in">NSObjectWillChange</span> = class_getMethodImplementation([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(d_willChangeValueForKey:));</span><br><span class="line">        <span class="built_in">NSObjectDidChange</span> = class_getMethodImplementation([<span class="built_in">NSObject</span> <span class="keyword">class</span>], <span class="keyword">@selector</span>(d_didChangeValueForKey:));</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 判断originalClass类是否重写了 willChangeValueForKey 或  didChangeValueForKey</span></span><br><span class="line">    <span class="comment">// 就是拿NSObject的实现与originalClass的实现做对比(函数指针IMP比较)</span></span><br><span class="line">    notifyingInfo-&gt;overrideWillOrDidChange = class_getMethodImplementation(notifyingInfo-&gt;originalClass, <span class="keyword">@selector</span>(d_willChangeValueForKey:)) != <span class="built_in">NSObjectWillChange</span> || class_getMethodImplementation(notifyingInfo-&gt;originalClass, <span class="keyword">@selector</span>(d_didChangeValueForKey:)) != <span class="built_in">NSObjectDidChange</span>;</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 _isKVOA方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, ISKVOA_SELECTOR, (IMP)<span class="built_in">NSKVOIsAutonotifying</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 dealloc方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, <span class="keyword">@selector</span>(dealloc), (IMP)<span class="built_in">NSKVODeallocate</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 对notifyingInfo的originalClass添加 class方法</span></span><br><span class="line">    <span class="built_in">NSKVONotifyingSetMethodImplementation</span>(notifyingInfo, <span class="keyword">@selector</span>(<span class="keyword">class</span>), (IMP)<span class="built_in">NSKVOClass</span>, <span class="literal">NULL</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> notifyingInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="添加-isKVOA方法"><a href="#添加-isKVOA方法" class="headerlink" title="添加_isKVOA方法"></a>添加_isKVOA方法</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> <span class="built_in">NSKVOIsAutonotifying</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重写class方法"><a href="#重写class方法" class="headerlink" title="重写class方法"></a>重写class方法</h4><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">Class</span> <span class="title">NSKVOClass</span>(<span class="title">id</span> <span class="title">object</span>, <span class="title">SEL</span> <span class="title">selector</span>) &#123;</span></span><br><span class="line">    // 新的<span class="class"><span class="keyword">class</span>: <span class="title">NSKVONotifying_XXXX</span></span></span><br><span class="line">    <span class="class"><span class="keyword">Class</span> <span class="title">currentClass</span> = <span class="title">object_getClass</span>(<span class="title">object</span>);</span></span><br><span class="line">    // 原先的<span class="class"><span class="keyword">class</span>: <span class="title">XXXX</span></span></span><br><span class="line">    <span class="class"><span class="keyword">Class</span> <span class="title">originalClass</span> =  <span class="title">_NSKVONotifyingOriginalClassForIsa</span>(<span class="title">currentClass</span>);</span></span><br><span class="line">    <span class="keyword">if</span> (currentClass == originalClass) &#123;</span><br><span class="line">        // 相同, 返回object的currentClass</span><br><span class="line">        <span class="function"><span class="keyword">Method</span> <span class="title">m</span> =</span> class_getInstanceMethod(currentClass, selector);</span><br><span class="line">        <span class="keyword">return</span> ((<span class="class"><span class="keyword">Class</span> (*)(<span class="title">id</span>,<span class="title">Method</span>))<span class="title">method_invoke</span>)(<span class="title">object</span>, <span class="title">m</span>);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        // 不同, 返回originalClass</span><br><span class="line">        <span class="keyword">return</span> [originalClass <span class="class"><span class="keyword">class</span>];</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="重写dealloc方法"><a href="#重写dealloc方法" class="headerlink" title="重写dealloc方法"></a>重写dealloc方法</h4><p>获取<code>object</code>对应的<code>observationInfo</code>(对象)并把它放到结构体中，在调用完<code>object</code>原先的<code>dealloc</code>方法之后判断<code>observationInfo</code>是否还存在，若存在说明<code>observer</code>没有在<code>dealloc</code>之前被移除掉，进而抛出异常。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="built_in">NSKVODeallocate</span>(<span class="keyword">id</span> object, SEL selector) &#123;</span><br><span class="line">    <span class="comment">// 获取object对应的observationInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *observationInfo = _NSKeyValueRetainedObservationInfoForObject(object, <span class="literal">nil</span>);</span><br><span class="line">    ObservationInfoWatcher watcher = &#123;object, observationInfo, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    _NSKeyValueAddObservationInfoWatcher(&amp;watcher);</span><br><span class="line">    <span class="comment">// 获取notifyInfo</span></span><br><span class="line">    <span class="built_in">NSKeyValueNotifyingInfo</span> *notifyInfo = (<span class="built_in">NSKeyValueNotifyingInfo</span> *)object_getIndexedIvars(object_getClass(object));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用object原来的dealloc实现</span></span><br><span class="line">    Method originDellocMethod = class_getInstanceMethod(notifyInfo-&gt;originalClass, selector);</span><br><span class="line">    ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>,Method))method_invoke)(object, originDellocMethod);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(watcher.observationInfo) &#123;</span><br><span class="line">            <span class="comment">// observationInfo不存在才对, 如果还存在, 说明没有正确地移除observer</span></span><br><span class="line">            <span class="built_in">BOOL</span> keyExistsAndHasValidFormat = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">BOOL</span> cleansUpBeforeThrowing = <span class="literal">false</span>;</span><br><span class="line">            </span><br><span class="line">            cleansUpBeforeThrowing = (<span class="built_in">BOOL</span>)<span class="built_in">CFPreferencesGetAppBooleanValue</span>(<span class="built_in">CFSTR</span>(<span class="string">"NSKVODeallocateCleansUpBeforeThrowing"</span>), kCFPreferencesCurrentApplication, (Boolean *)&amp;keyExistsAndHasValidFormat);</span><br><span class="line">            <span class="comment">// key存在且key对应的value为YES</span></span><br><span class="line">            cleansUpBeforeThrowing = cleansUpBeforeThrowing &amp;&amp; keyExistsAndHasValidFormat;</span><br><span class="line">            <span class="comment">// dyld_get_program_sdk_version返回系统版本</span></span><br><span class="line">            <span class="keyword">if</span> (dyld_get_program_sdk_version() &gt; <span class="number">0x7FFFF</span> || cleansUpBeforeThrowing) &#123;</span><br><span class="line">                <span class="keyword">if</span> (cleansUpBeforeThrowing) &#123;</span><br><span class="line">                    _NSKeyValueRemoveObservationInfoForObject(object, watcher.observationInfo);</span><br><span class="line">                &#125;</span><br><span class="line">                [<span class="built_in">NSException</span> raise:<span class="built_in">NSInternalInconsistencyException</span> format:<span class="string">@"An instance %p of class %@ was deallocated while key value observers were still registered with it. Current observation info: %@"</span>, object, notifyInfo-&gt;originalClass, watcher.observationInfo];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSKVODeallocateBreak</span>(object);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *exception) &#123;</span><br><span class="line">        [exception raise];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@finally</span> &#123;</span><br><span class="line">        <span class="comment">// 移除watcher</span></span><br><span class="line">        _NSKeyValueRemoveObservationInfoWatcher(&amp;watcher);</span><br><span class="line">        </span><br><span class="line">        [watcher.observationInfo release];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-回调通知"><a href="#4-回调通知" class="headerlink" title="4.回调通知"></a>4.回调通知</h2><p>上文分析，<code>NSKeyValueNotifyObserver()</code>就是回调的函数，通过它调用<code>observeValueForKeyPath:ofObject:change:context:</code>方法。这里还剩下最后一个问题，回调是怎么处理的?</p>
<p>在<code>NSKVONotifyingEnableForInfoAndKey()</code>函数中重写setter方法，之后在<code>NSSetPrimitiveValueAndNotify()</code>函数中先调用<code>willChangeValueForKey</code>，再调用原先的setter方法，再调用<code>didChangeValueForKey</code>。</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">static inline void NSSetPrimitiveValueAndNotify(id object,SEL selector, void (^setValueWithImplementation)(IMP imp)) &#123;</span><br><span class="line">    NSKeyValueNotifyingInfo *info = object_getIndexedIvars(object_getClass(object));</span><br><span class="line">    <span class="function"><span class="title">pthread_mutex_lock</span>(&amp;info-&gt;</span>mutex);</span><br><span class="line">    NSS<span class="function"><span class="title">tring</span> *key = CFDictionaryGetValue(info-&gt;</span>selKeyMap, selector);</span><br><span class="line">    key = [key copyWithZone:<span class="literal">nil</span>];</span><br><span class="line">    <span class="function"><span class="title">pthread_mutex_unlock</span>(&amp;info-&gt;</span>mutex);</span><br><span class="line">    <span class="function"><span class="title">if</span> (info-&gt;</span>overrideWillOrDidChange) &#123;</span><br><span class="line">        [object willChangeValueForKey:key];</span><br><span class="line">        IMP <span class="function"><span class="title">imp</span> = class_getMethodImplementation(info-&gt;</span>originalClass, selector);</span><br><span class="line">        setValueWithImplementation(imp);</span><br><span class="line">        [object didChangeValueForKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [object changeValueForKey:key key:<span class="literal">nil</span> key:<span class="literal">nil</span> usingBlock:^&#123;</span><br><span class="line">            IMP <span class="function"><span class="title">imp</span> = class_getMethodImplementation(info-&gt;</span>originalClass, selector);</span><br><span class="line">            setValueWithImplementation(imp);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    [key release];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然，这里的<code>didChangeValueForKey</code>也被重写实现了，它会调用真正的回调<code>observeValueForKeyPath:ofObject:change:context:</code>方法。</p>
<h1 id="五、移除观察者"><a href="#五、移除观察者" class="headerlink" title="五、移除观察者"></a>五、移除观察者</h1><p>找到NSKeyValueObservance移除即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSKeyValueObservationInfo</span> *_NSKeyValueObservationInfoCreateByRemoving(<span class="built_in">NSKeyValueObservationInfo</span> *baseObservationInfo, <span class="keyword">id</span> observer, <span class="built_in">NSKeyValueProperty</span> *property, <span class="keyword">void</span> *context, <span class="built_in">BOOL</span> shouldCompareContext,  <span class="keyword">id</span> originalObservable,  <span class="built_in">BOOL</span> *cacheHit, <span class="built_in">NSKeyValueObservance</span> **removalObservance) &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueObservationInfo</span> *createdObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 当前已经存在的observance的数量</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> observanceCount = <span class="built_in">CFArrayGetCount</span>((<span class="built_in">CFArrayRef</span>)baseObservationInfo.observances);</span><br><span class="line">    <span class="built_in">NSKeyValueObservance</span> *observancesBuff[observanceCount];</span><br><span class="line">    <span class="built_in">CFArrayGetValues</span>((<span class="built_in">CFArrayRef</span>)baseObservationInfo.observances, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, observanceCount), (<span class="keyword">const</span> <span class="keyword">void</span> **)observancesBuff);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSUInteger</span> removalObservanceIndex = <span class="built_in">NSNotFound</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = observanceCount - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">// 逐个遍历observancesBuff数组中的元素</span></span><br><span class="line">        <span class="built_in">NSKeyValueObservance</span> *observance = observancesBuff[i];</span><br><span class="line">        <span class="comment">// property和observer一致</span></span><br><span class="line">        <span class="keyword">if</span> (observance.property == property &amp;&amp; observance.observer == observer) &#123;</span><br><span class="line">            <span class="comment">// 不需要比较context或者context一致</span></span><br><span class="line">            <span class="keyword">if</span> (!shouldCompareContext || observance.context == context) &#123;</span><br><span class="line">                <span class="comment">// originalObservable一致</span></span><br><span class="line">                <span class="keyword">if</span> (!originalObservable || observance.originalObservable == originalObservable) &#123;</span><br><span class="line">                    <span class="comment">// 需要移除的observance</span></span><br><span class="line">                    *removalObservance = observance;</span><br><span class="line">                    <span class="comment">// 确定了将要移除的observance的索引</span></span><br><span class="line">                    removalObservanceIndex = i;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 已经找到需要移除的observance</span></span><br><span class="line">    <span class="keyword">if</span> (*removalObservance) &#123;</span><br><span class="line">        <span class="comment">// 原先observance的数量大于1个</span></span><br><span class="line">        <span class="keyword">if</span> (observanceCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            os_lock_lock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">            <span class="comment">// NSKeyValueShareableObservationInfos缓存不存在, 创建</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">NSKeyValueShareableObservationInfos</span>) &#123;</span><br><span class="line">                <span class="built_in">NSPointerFunctions</span> *functions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">                [functions setHashFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>];</span><br><span class="line">                [functions setIsEqualFunction:<span class="built_in">NSKeyValueShareableObservationInfoNSHTIsEqual</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">NSKeyValueShareableObservationInfos</span> = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:functions capacity:<span class="number">0</span>];</span><br><span class="line">                </span><br><span class="line">                [functions release];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span>) &#123;</span><br><span class="line">                <span class="comment">// 就是NSKeyValueShareableObservationInfoKey.class</span></span><br><span class="line">                <span class="built_in">NSKeyValueShareableObservationInfoKeyIsa</span> = <span class="built_in">NSKeyValueShareableObservationInfoKey</span>.self;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">static</span> <span class="built_in">NSKeyValueShareableObservationInfoKey</span> * shareableObservationInfoKey = <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">// 构建查找缓存的Key</span></span><br><span class="line">            <span class="keyword">if</span> (!shareableObservationInfoKey) &#123;</span><br><span class="line">                shareableObservationInfoKey = [[<span class="built_in">NSKeyValueShareableObservationInfoKey</span> alloc] init];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            shareableObservationInfoKey.addingNotRemoving = <span class="literal">NO</span>;</span><br><span class="line">            shareableObservationInfoKey.baseObservationInfo = baseObservationInfo;</span><br><span class="line">            shareableObservationInfoKey.removalObservance = *removalObservance;</span><br><span class="line">            shareableObservationInfoKey.removalObservanceIndex = removalObservanceIndex;</span><br><span class="line">            shareableObservationInfoKey.cachedHash = <span class="built_in">NSKeyValueShareableObservationInfoNSHTHash</span>(shareableObservationInfoKey, <span class="literal">NULL</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 尝试在缓存中查找NSKeyValueObservationInfo</span></span><br><span class="line">            <span class="built_in">NSKeyValueObservationInfo</span> *existsObservationInfo = [<span class="built_in">NSKeyValueShareableObservationInfos</span> member:shareableObservationInfoKey];</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 重置key的数据</span></span><br><span class="line">            shareableObservationInfoKey.removalObservance = <span class="literal">nil</span>;</span><br><span class="line">            shareableObservationInfoKey.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSUInteger</span> cachedHash = shareableObservationInfoKey.cachedHash;</span><br><span class="line">            </span><br><span class="line">            shareableObservationInfoKey.cachedHash = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (!existsObservationInfo) &#123;</span><br><span class="line">                <span class="comment">// 在缓存中没有找到, 移除removalObservanceIndex对应的元素</span></span><br><span class="line">                memmove(observancesBuff + removalObservanceIndex, observancesBuff + removalObservanceIndex + <span class="number">1</span>, (observanceCount - (removalObservanceIndex + <span class="number">1</span>)) * <span class="keyword">sizeof</span>(<span class="built_in">NSKeyValueObservance</span> *));</span><br><span class="line">                <span class="comment">// 重新创建ObservationInfo, 数量为observanceCount - 1</span></span><br><span class="line">                createdObservationInfo = [[<span class="built_in">NSKeyValueObservationInfo</span> alloc] _initWithObservances:observancesBuff count:observanceCount - <span class="number">1</span> hashValue:cachedHash];</span><br><span class="line">                <span class="keyword">if</span> (createdObservationInfo.cachedIsShareable) &#123;</span><br><span class="line">                    <span class="comment">// 缓存ObservationInfo</span></span><br><span class="line">                    [<span class="built_in">NSKeyValueShareableObservationInfos</span> addObject:createdObservationInfo];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 没有命中缓存</span></span><br><span class="line">                *cacheHit = <span class="literal">NO</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 命中缓存</span></span><br><span class="line">                *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">                <span class="comment">// 直接赋值existsObservationInfo</span></span><br><span class="line">                createdObservationInfo = [existsObservationInfo <span class="keyword">retain</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            os_lock_unlock(&amp;<span class="built_in">NSKeyValueObservationInfoCreationSpinLock</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">return</span> createdObservationInfo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 原先只有一个observance, 命中缓存</span></span><br><span class="line">            *cacheHit = <span class="literal">YES</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 没有找到需要移除的observance, 返回nil</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="六、小结"><a href="#六、小结" class="headerlink" title="六、小结"></a>六、小结</h1><p>这里学到一个技巧：如何确认<code>NSUserDefaults</code>中某个key是否存在?</p>
<p>比如</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">BOOL result</span> = [NSUserDefaults.standardUserDefaults boolForKey:@<span class="string">"key"</span>];</span><br></pre></td></tr></table></figure>
<p>当result为NO时，怎么判断是存储键<code>@&quot;key&quot;</code>对应的value是NO，还是说压根就没有存过这个key呢?可以使用<code>CFPreferencesGetAppBooleanValue()</code>函数。<br>KVO中有这么一段代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> keyExistsAndHasValidFormat = <span class="literal">false</span>; <span class="comment">// key是否存在</span></span><br><span class="line"><span class="built_in">BOOL</span> cleansUpBeforeThrowing = <span class="literal">false</span>; <span class="comment">// 存储的值为YES或者NO</span></span><br><span class="line"></span><br><span class="line">cleansUpBeforeThrowing = (<span class="built_in">BOOL</span>)<span class="built_in">CFPreferencesGetAppBooleanValue</span>(<span class="built_in">CFSTR</span>(<span class="string">"key"</span>), kCFPreferencesCurrentApplication, (Boolean *)&amp;keyExistsAndHasValidFormat);</span><br><span class="line"><span class="comment">// 能判断出key存在</span></span><br><span class="line">cleansUpBeforeThrowing = cleansUpBeforeThrowing &amp;&amp; keyExistsAndHasValidFormat;</span><br></pre></td></tr></table></figure>
<h1 id="七、手动实现KVO"><a href="#七、手动实现KVO" class="headerlink" title="七、手动实现KVO"></a>七、手动实现KVO</h1><p>有很多同学尝试自己实现了KVO，有按照原生接口的，也有自我发挥直接传递block的。由于之前我已经读过一些开源的代码，见<a href="https://blog.chenyalun.com/2019/01/12/「KVOController」的封装/">《「KVOController」的封装》</a>，作者就是使用了block很好地封装了KVO的回调。所以，这里还是试着按照原生接口实现一下。</p>
<p>由于对源码理解地不是十分透彻，再加上能力有限，在尝试实现过程中遇到不少问题，幸好都解决了。<br>比如：</p>
<ol>
<li>如何更好地重写<code>hash</code>方法？</li>
<li>一个包含n个完全相同元素的数组，如果做到只移除一个元素？</li>
</ol>
<p>当然，代码肯定有不少问题的，而且仅仅实现一点核心功能，姑且当做玩具看看吧。</p>
<h2 id="1-接口"><a href="#1-接口" class="headerlink" title="1.接口"></a>1.接口</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> NSObject(YAKVO)</span><br><span class="line"><span class="meta">@property</span> <span class="keyword">void</span> *ya_observationInfo;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_willChangeValueForKey:</span>(NSString *)key;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_didChangeValueForKey:</span>(NSString *)key;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_addObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_removeObserver:</span>(NSObject *)observer <span class="string">forKeyPath:</span>(NSString *)keyPath <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">ya_observeValueForKeyPath:</span>(NSString *)keyPath <span class="string">ofObject:</span>(id)object <span class="string">change:</span>(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change <span class="string">context:</span>(<span class="keyword">void</span> *)context;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#define ClassPrefixCStr <span class="meta-string">"YAKVONotifying_"</span> // 新类的前缀</span></span><br><span class="line"><span class="meta">#define ClassPrefix     @ ClassPrefixCStr</span></span><br><span class="line"><span class="meta">#define OBSERVATION_INFO_KEY(object) ((void *)(~(NSUInteger)(object)))</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableDictionary</span> *YAKeyValueChangeDictionary = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 一些私有方法和属性</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">YAKVOPrivate</span>)</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">YAKVOPrivate</span>)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)ya_isKVOClass &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_changeValueForKey:(<span class="built_in">NSString</span> *)key usingBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [<span class="keyword">self</span> ya_willChangeValueForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (block) block();</span><br><span class="line">    [<span class="keyword">self</span> ya_didChangeValueForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装keyPath和originalClass</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueProperty</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) Class isaForAutonotifying;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *keyPath;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) Class originalClass;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithOriginalClass:(Class)originalClass keyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueProperty</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithOriginalClass:(Class)originalClass</span><br><span class="line">                              keyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _originalClass = originalClass;</span><br><span class="line">        _keyPath = keyPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)isaForAutonotifying &#123;</span><br><span class="line">    <span class="comment">// 构造新的子类名</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *originalClassName = class_getName(_originalClass);</span><br><span class="line">    size_t size = strlen(originalClassName) + <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">char</span> *newClassName = (<span class="keyword">char</span> *)malloc(size);</span><br><span class="line">    </span><br><span class="line">    strlcpy(newClassName, ClassPrefixCStr, size);</span><br><span class="line">    strlcat(newClassName, originalClassName, size);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建子类</span></span><br><span class="line">    Class newSubClass = objc_allocateClassPair(_originalClass, newClassName, <span class="number">0</span>);</span><br><span class="line">    objc_registerClassPair(newSubClass);</span><br><span class="line">    free(newClassName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Setter方法替换</span></span><br><span class="line">    <span class="built_in">NSString</span> *uppercase= [[_keyPath substringToIndex:<span class="number">1</span>] uppercaseString];</span><br><span class="line">    <span class="built_in">NSString</span> *last = [_keyPath substringFromIndex:<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">NSString</span> *<span class="keyword">setter</span> = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@%@:"</span>, uppercase, last];</span><br><span class="line">    SEL sel = <span class="built_in">NSSelectorFromString</span>(<span class="keyword">setter</span>);</span><br><span class="line">    Method method = class_getInstanceMethod(newSubClass, sel);</span><br><span class="line">    <span class="keyword">if</span> (method) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *typeEncoding = method_getTypeEncoding(method);</span><br><span class="line">        class_replaceMethod(newSubClass, sel, (IMP)YASetValueAndNotifyForKey, typeEncoding);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [[<span class="built_in">NSException</span> exceptionWithName:<span class="string">@"缺少参数"</span> reason:<span class="string">@"没有实现Setter方法"</span> userInfo:<span class="literal">nil</span>] raise];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// class方法替换、ya_isKVOClass方法替换</span></span><br><span class="line">    YAKVONotifyingSetMethodImplementation(newSubClass, <span class="keyword">@selector</span>(ya_isKVOClass), (IMP)YAKVOIsAutonotifying);</span><br><span class="line">    YAKVONotifyingSetMethodImplementation(newSubClass, <span class="keyword">@selector</span>(<span class="keyword">class</span>), (IMP)YAKVOClass);</span><br><span class="line">    <span class="keyword">return</span> newSubClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的ya_isKVOClass方法</span></span><br><span class="line"><span class="built_in">BOOL</span> YAKVOIsAutonotifying(<span class="keyword">id</span> object, SEL sel) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的class方法</span></span><br><span class="line">Class YAKVOClass(<span class="keyword">id</span> object, SEL sel) &#123;</span><br><span class="line">    <span class="comment">// 新的class: NSKVONotifying_XXXX</span></span><br><span class="line">    Class currentClass = object_getClass(object);</span><br><span class="line">    <span class="keyword">if</span> ([object ya_isKVOClass]) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *clsStr = [<span class="built_in">NSStringFromClass</span>(currentClass) stringByReplacingOccurrencesOfString:ClassPrefix withString:<span class="string">@""</span>];</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">NSClassFromString</span>(clsStr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> currentClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应originalClass的setter方法</span></span><br><span class="line"><span class="keyword">void</span> YASetValueAndNotifyForKey(<span class="keyword">id</span> obj, SEL sel, <span class="keyword">id</span> value, IMP imp) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = [[<span class="built_in">NSStringFromSelector</span>(sel) substringFromIndex:<span class="number">3</span>] lowercaseString];</span><br><span class="line">    key = [key substringToIndex:key.length - <span class="number">1</span>];</span><br><span class="line">    [obj ya_changeValueForKey:key usingBlock:^&#123;</span><br><span class="line">        Class cls = [obj <span class="keyword">class</span>];</span><br><span class="line">        <span class="comment">// 调用父类的setter方法</span></span><br><span class="line">        IMP superImp = class_getMethodImplementation(cls, sel);</span><br><span class="line">        ((<span class="keyword">void</span> (*)(<span class="keyword">id</span> ,SEL , <span class="keyword">id</span>))superImp)(obj, sel, value);</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对某个class添加实例方法</span></span><br><span class="line"><span class="keyword">void</span> YAKVONotifyingSetMethodImplementation(Class cls, SEL sel, IMP imp) &#123;</span><br><span class="line">    Method originMethod = class_getInstanceMethod(cls, sel);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *encoding = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (originMethod) &#123;</span><br><span class="line">        encoding = method_getTypeEncoding(originMethod);</span><br><span class="line">        class_addMethod(cls, sel, imp, encoding);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装property、observer、context、options</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservance</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) YAKeyValueProperty *property;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> observer;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">void</span> *context;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">int</span> options;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">id</span>)observer property:(YAKeyValueProperty *)property options:(<span class="keyword">int</span>)options context:(<span class="keyword">void</span> *)context;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservance</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">id</span>)observer</span><br><span class="line">                        property:(YAKeyValueProperty *)property</span><br><span class="line">                         options:(<span class="keyword">int</span>)options</span><br><span class="line">                         context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observer = observer;</span><br><span class="line">        _property = property;</span><br><span class="line">        _options = options;</span><br><span class="line">        _context = context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)hash &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> observerContextHash = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-%p"</span>, _observer, _context] hash];</span><br><span class="line">    <span class="keyword">return</span> observerContextHash ^ _property.hash ^ _options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)isEqual:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">if</span> (object == <span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">if</span> (![object isKindOfClass:object_getClass(<span class="keyword">self</span>)]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    YAKeyValueObservance *other = (YAKeyValueObservance *)object;</span><br><span class="line">    <span class="keyword">return</span> other.observer == <span class="keyword">self</span>.observer &amp;&amp;</span><br><span class="line">    other.options == <span class="keyword">self</span>.options &amp;&amp;</span><br><span class="line">    other.context == <span class="keyword">self</span>.context;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 包装YAKeyValueObservance数组</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservationInfo</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observances;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObservances:(<span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *)observances</span><br><span class="line">                              count:(<span class="built_in">NSUInteger</span>)count;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservationInfo</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObservances:(<span class="built_in">NSArray</span>&lt;YAKeyValueObservance *&gt; *)observances</span><br><span class="line">                              count:(<span class="built_in">NSUInteger</span>)count &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observances = [[<span class="built_in">NSArray</span> alloc] initWithArray:observances];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 配置YAKeyValueObservationInfoKey，去查询匹配的YAKeyValueObservationInfo</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAKeyValueObservationInfoKey</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) YAKeyValueObservationInfo *baseObservationInfo;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *additionObserver;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) YAKeyValueProperty *additionProperty;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSUInteger</span> additionOptions;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="keyword">void</span>* additionContext;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAKeyValueObservationInfoKey</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Private methods</span></span><br><span class="line"><span class="built_in">BOOL</span> YAKeyValuePropertyIsEqual(YAKeyValueProperty *property1, YAKeyValueProperty *property2) &#123;</span><br><span class="line">    <span class="keyword">return</span> (property1.originalClass == property2.originalClass) &amp;&amp;</span><br><span class="line">    (property1.keyPath == property2.keyPath || [property1.keyPath isEqual: property2.keyPath]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> YAKeyValuePropertyHash(YAKeyValueProperty *property) &#123;</span><br><span class="line">    <span class="keyword">return</span> property.keyPath.hash ^ (<span class="built_in">NSUInteger</span>)(__bridge <span class="keyword">void</span> *)property.originalClass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取YAKeyValueProperty</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> YAKeyValueProperty *getKeyValueProperty(Class cls, <span class="built_in">NSString</span> *keyPath) &#123;</span><br><span class="line">    <span class="comment">// 缓存集合</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">CFMutableSetRef</span> YAKeyValueProperties;</span><br><span class="line">    <span class="keyword">if</span>(!YAKeyValueProperties) &#123;</span><br><span class="line">        <span class="comment">// 创建YAKeyValueProperties</span></span><br><span class="line">        <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        callbacks.version =  kCFTypeSetCallBacks.version;</span><br><span class="line">        callbacks.retain =  kCFTypeSetCallBacks.retain;</span><br><span class="line">        callbacks.release =  kCFTypeSetCallBacks.release;</span><br><span class="line">        callbacks.copyDescription =  kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">        callbacks.equal =  (<span class="built_in">CFSetEqualCallBack</span>)YAKeyValuePropertyIsEqual;</span><br><span class="line">        callbacks.hash =  (<span class="built_in">CFSetHashCallBack</span>)YAKeyValuePropertyHash;</span><br><span class="line">        YAKeyValueProperties = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, &amp;callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueProperty *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) finder = [YAKeyValueProperty new];</span><br><span class="line">    finder.originalClass = cls;</span><br><span class="line">    finder.keyPath = keyPath;</span><br><span class="line">    YAKeyValueProperty *property = <span class="built_in">CFSetGetValue</span>(YAKeyValueProperties, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(finder));</span><br><span class="line">    <span class="keyword">if</span> (!property) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        property = [[YAKeyValueProperty alloc] initWithOriginalClass:cls keyPath:keyPath];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        <span class="built_in">CFSetAddValue</span>(YAKeyValueProperties, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(property));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> property;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取YAKeyValueObservance</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> YAKeyValueObservance *getKeyValueObservance(YAKeyValueProperty *property,</span><br><span class="line">                                                          <span class="keyword">id</span> observer,</span><br><span class="line">                                                          <span class="keyword">void</span> *context,</span><br><span class="line">                                                          <span class="keyword">int</span> options) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSHashTable</span> *YAKeyValueShareableObservances;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueShareableObservances) &#123;</span><br><span class="line">        YAKeyValueShareableObservances = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueObservance *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) finder = [YAKeyValueObservance new];</span><br><span class="line">    finder.property = property;</span><br><span class="line">    finder.context = context;</span><br><span class="line">    finder.observer = observer;</span><br><span class="line">    finder.options = options;</span><br><span class="line">    YAKeyValueObservance *observance = [YAKeyValueShareableObservances member:finder];</span><br><span class="line">    <span class="keyword">if</span> (!observance) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        observance = [[YAKeyValueObservance alloc] initWithObserver:observer property:property options:options context:context];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        [YAKeyValueShareableObservances addObject:observance];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> observance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSUInteger</span> YAKeyValueObservationInfoNSHTHash(<span class="keyword">const</span> <span class="keyword">void</span> *item, <span class="built_in">NSUInteger</span> (*size)(<span class="keyword">const</span> <span class="keyword">void</span> *item)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">        YAKeyValueObservationInfoKey *key = (__bridge YAKeyValueObservationInfoKey *)item;</span><br><span class="line">        <span class="keyword">return</span> key.baseObservationInfo.observances.firstObject.hash;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        YAKeyValueObservationInfo *info = (__bridge YAKeyValueObservationInfo *)item;</span><br><span class="line">        <span class="keyword">return</span> info.observances.firstObject.hash;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">BOOL</span> YAKeyValueObservationInfoNSHTIsEqual(<span class="keyword">const</span> <span class="keyword">void</span> *item1, <span class="keyword">const</span> <span class="keyword">void</span> *item2, <span class="built_in">NSUInteger</span> (* size)(<span class="keyword">const</span> <span class="keyword">void</span> * item)) &#123;</span><br><span class="line">    <span class="comment">// 这里仅仅写了YAKeyValueObservationInfoKey与YAKeyValueObservationInfo的比较</span></span><br><span class="line">    <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item1) == YAKeyValueObservationInfoKey.class || object_getClass((__bridge <span class="keyword">id</span>)item2) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">        YAKeyValueObservationInfo *info = <span class="literal">nil</span>;</span><br><span class="line">        YAKeyValueObservationInfoKey *key = <span class="literal">nil</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 确定哪一个是info, 哪一个是key</span></span><br><span class="line">        <span class="keyword">if</span> (object_getClass((__bridge <span class="keyword">id</span>)item1) == YAKeyValueObservationInfoKey.class) &#123;</span><br><span class="line">            info = (__bridge YAKeyValueObservationInfo *)item2;</span><br><span class="line">            key = (__bridge YAKeyValueObservationInfoKey *)item1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            info = (__bridge YAKeyValueObservationInfo *)item1;</span><br><span class="line">            key = (__bridge YAKeyValueObservationInfoKey *)item2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observancesInKey = key.baseObservationInfo.observances;</span><br><span class="line">        <span class="built_in">NSArray</span> &lt;YAKeyValueObservance *&gt; *observancesInInfo = info.observances;</span><br><span class="line">        <span class="comment">// key中observance的数量</span></span><br><span class="line">        <span class="built_in">NSUInteger</span> countInkey = observancesInKey.count;</span><br><span class="line">        <span class="comment">// info中observance的数量</span></span><br><span class="line">        <span class="built_in">NSUInteger</span> countInInfo = observancesInInfo.count;</span><br><span class="line">        <span class="keyword">if</span> (countInkey != countInInfo) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>; i &lt; countInkey; i++) &#123;</span><br><span class="line">            <span class="comment">// 保证每个observance完全匹配</span></span><br><span class="line">            <span class="keyword">if</span> (observancesInKey[i] != observancesInInfo[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#pragma mark - Public methods</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">YAKVO</span>)</span></span><br><span class="line"><span class="built_in">CFMutableDictionaryRef</span> YAKeyValueObservationInfoPerObject = <span class="literal">NULL</span>;</span><br><span class="line">- (<span class="keyword">void</span> *)ya_observationInfo &#123;</span><br><span class="line">    <span class="keyword">return</span> YAKeyValueObservationInfoPerObject ? (<span class="keyword">void</span> *)<span class="built_in">CFDictionaryGetValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>)) : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setYa_observationInfo:(<span class="keyword">void</span> *)info &#123;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueObservationInfoPerObject) &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryValueCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        callbacks.version = kCFTypeDictionaryKeyCallBacks.version;</span><br><span class="line">        callbacks.retain = kCFTypeDictionaryKeyCallBacks.retain;</span><br><span class="line">        callbacks.release = kCFTypeDictionaryKeyCallBacks.release;</span><br><span class="line">        callbacks.copyDescription = kCFTypeDictionaryKeyCallBacks.copyDescription;</span><br><span class="line">        YAKeyValueObservationInfoPerObject = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, &amp;callbacks);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (info) &#123;</span><br><span class="line">        <span class="built_in">CFDictionarySetValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>), info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CFDictionaryRemoveValue</span>(YAKeyValueObservationInfoPerObject, OBSERVATION_INFO_KEY(<span class="keyword">self</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_willChangeValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueChangeDictionary) &#123;</span><br><span class="line">        YAKeyValueChangeDictionary = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">id</span> oldValue = <span class="literal">nil</span>;</span><br><span class="line">    oldValue = [<span class="keyword">self</span> valueForKeyPath:key];</span><br><span class="line">    <span class="keyword">if</span> (!oldValue) oldValue = [<span class="built_in">NSNull</span> null];</span><br><span class="line">    [YAKeyValueChangeDictionary setObject:oldValue forKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_didChangeValueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, key);</span><br><span class="line">        YAKeyValueObservationInfo *observation = <span class="keyword">self</span>.ya_observationInfo;</span><br><span class="line">        [observation.observances enumerateObjectsUsingBlock:^(YAKeyValueObservance *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj.property isEqual:property]) &#123;</span><br><span class="line">                <span class="built_in">NSMutableDictionary</span> *change = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">                <span class="keyword">if</span> (obj.options &amp; <span class="built_in">NSKeyValueObservingOptionOld</span>) &#123;</span><br><span class="line">                    <span class="keyword">id</span> old = [YAKeyValueChangeDictionary objectForKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                    [change setObject:old forKey:<span class="string">@"old"</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    [YAKeyValueChangeDictionary removeObjectForKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-old"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> (obj.options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">                    <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">                    newValue = [<span class="keyword">self</span> valueForKeyPath:key];</span><br><span class="line">                    <span class="keyword">if</span> (!newValue) newValue = [<span class="built_in">NSNull</span> null];</span><br><span class="line">                    [YAKeyValueChangeDictionary setObject:newValue forKey:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p-new"</span>, <span class="keyword">self</span>]];</span><br><span class="line">                    [change setObject:newValue forKey:<span class="string">@"new"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [obj.observer ya_observeValueForKeyPath:key ofObject:<span class="keyword">self</span> change:change context:<span class="literal">nil</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_addObserver:(<span class="built_in">NSObject</span> *)observer</span><br><span class="line">            forKeyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">               options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">               context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, keyPath);</span><br><span class="line">    YAKeyValueObservance *observance = getKeyValueObservance(property, observer, context, options);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSHashTable</span> *YAKeyValueShareableObservationInfos;</span><br><span class="line">    <span class="keyword">if</span> (!YAKeyValueShareableObservationInfos) &#123;</span><br><span class="line">        <span class="built_in">NSPointerFunctions</span> *pointerFunctions = [[<span class="built_in">NSPointerFunctions</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</span><br><span class="line">        [pointerFunctions setHashFunction:YAKeyValueObservationInfoNSHTHash];</span><br><span class="line">        [pointerFunctions setIsEqualFunction:YAKeyValueObservationInfoNSHTIsEqual];</span><br><span class="line">        YAKeyValueShareableObservationInfos = [[<span class="built_in">NSHashTable</span> alloc] initWithPointerFunctions:pointerFunctions capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> YAKeyValueObservationInfoKey *finder;</span><br><span class="line">    <span class="keyword">if</span> (!finder) &#123;</span><br><span class="line">        finder = [YAKeyValueObservationInfoKey new];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueObservationInfo *info = (__bridge <span class="keyword">id</span>)[<span class="keyword">self</span> ya_observationInfo];</span><br><span class="line">    finder.baseObservationInfo = info;</span><br><span class="line">    finder.additionObserver = observer;</span><br><span class="line">    finder.additionContext = context;</span><br><span class="line">    finder.additionOptions = options;</span><br><span class="line">    finder.additionProperty = property;</span><br><span class="line">    </span><br><span class="line">    YAKeyValueObservationInfo *observation = [YAKeyValueShareableObservationInfos member:finder];</span><br><span class="line">    <span class="comment">// 重置finder数据</span></span><br><span class="line">    finder.baseObservationInfo = <span class="literal">nil</span>;</span><br><span class="line">    finder.additionObserver = <span class="literal">nil</span>;</span><br><span class="line">    finder.additionContext = <span class="literal">NULL</span>;</span><br><span class="line">    finder.additionOptions = <span class="number">0</span>;</span><br><span class="line">    finder.additionProperty = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!observation) &#123;</span><br><span class="line">        <span class="comment">// 缓存中没有找到, 创建</span></span><br><span class="line">        observation = [[YAKeyValueObservationInfo alloc] initWithObservances:@[observance] count:<span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 添加到缓存中</span></span><br><span class="line">        [YAKeyValueShareableObservationInfos addObject:observation];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *buffer = [<span class="built_in">NSMutableArray</span> arrayWithArray:observation.observances];</span><br><span class="line">        [buffer addObject:observance];</span><br><span class="line">        observation.observances = [<span class="built_in">NSArray</span> arrayWithArray:buffer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">self</span>.ya_observationInfo = (__bridge <span class="keyword">void</span> *)(observation);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        Class isaForAutonotifying = [property isaForAutonotifying];</span><br><span class="line">        <span class="comment">// 更改isa指针</span></span><br><span class="line">        object_setClass(<span class="keyword">self</span>, isaForAutonotifying);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionInitial</span>) &#123;</span><br><span class="line">        <span class="keyword">id</span> newValue = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (options &amp; <span class="built_in">NSKeyValueObservingOptionNew</span>) &#123;</span><br><span class="line">            newValue = [<span class="keyword">self</span> valueForKeyPath:keyPath];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!newValue) newValue = [<span class="built_in">NSNull</span> null]; <span class="comment">// 使用NSNull对象</span></span><br><span class="line">        <span class="built_in">NSDictionary</span> *change = @&#123;<span class="string">@"new"</span>: newValue&#125;;</span><br><span class="line">        [observer ya_observeValueForKeyPath:keyPath ofObject:<span class="keyword">self</span> change:change context:context];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_removeObserver:(<span class="built_in">NSObject</span> *)observer forKeyPath:(<span class="built_in">NSString</span> *)keyPath context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.ya_isKVOClass) &#123;</span><br><span class="line">        YAKeyValueProperty *property = getKeyValueProperty(<span class="keyword">self</span>.class, keyPath);</span><br><span class="line">        YAKeyValueObservationInfo *observation = <span class="keyword">self</span>.ya_observationInfo;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *diff = [<span class="built_in">NSMutableArray</span> arrayWithArray:observation.observances];</span><br><span class="line">        __block <span class="built_in">NSInteger</span> removeIdx = <span class="number">-1</span>;</span><br><span class="line">        [diff enumerateObjectsUsingBlock:^(YAKeyValueObservance *obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj.property isEqual:property] &amp;&amp; obj.observer == observer &amp;&amp; obj.context == context) &#123;</span><br><span class="line">                removeIdx = idx;</span><br><span class="line">                *stop = <span class="literal">YES</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">if</span> (removeIdx != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">// 找到需要移除的元素</span></span><br><span class="line">            [diff removeObjectAtIndex:removeIdx];</span><br><span class="line">            observation.observances = [<span class="built_in">NSArray</span> arrayWithArray:diff];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)ya_observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context&#123;&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="功能check"><a href="#功能check" class="headerlink" title="功能check"></a>功能check</h2><p>1.添加观察者与设置回调：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> [<span class="keyword">self</span>.obj ya_addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"name"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> | <span class="built_in">NSKeyValueObservingOptionOld</span> context:<span class="string">"NULL"</span>];</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)ya_observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">self</span>.obj.name = <span class="string">@"Aaron"</span>;</span><br><span class="line"><span class="keyword">self</span>.obj.name = <span class="string">@"Jack"</span>;</span><br></pre></td></tr></table></figure>
<p>打印：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">2019<span class="string">-05</span><span class="string">-30</span> 09:41:23.595046<span class="string">+0800</span> Aaron[24893:604622] &#123;</span><br><span class="line">    new = Aaron;</span><br><span class="line">    old = "&lt;null&gt;";</span><br><span class="line">&#125;</span><br><span class="line">2019<span class="string">-05</span><span class="string">-30</span> 09:41:23.595215<span class="string">+0800</span> Aaron[24893:604622] &#123;</span><br><span class="line">    new = Jack;</span><br><span class="line">    old = Aaron;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2.使用NSKeyValueObservingOptionInitial</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionInitial <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">self.obj.name = @<span class="string">"Aaron"</span>;</span><br></pre></td></tr></table></figure>
<p>打印<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-05</span><span class="number">-30</span> <span class="number">09</span>:<span class="type">45</span>:<span class="number">01.717131</span>+<span class="number">0800</span> Aaron[<span class="number">25010</span>:<span class="type">609398</span>] &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type"></span>= <span class="string">"&lt;null&gt;"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>3.多次添加观察者</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">[self.obj <span class="string">ya_addObserver:</span>self <span class="string">forKeyPath:</span>@<span class="string">"name"</span> <span class="string">options:</span>NSKeyValueObservingOptionNew <span class="string">context:</span><span class="string">"NULL"</span>];</span><br><span class="line">self.obj.name = @<span class="string">"Aaron"</span>;</span><br></pre></td></tr></table></figure>
<p>打印</p>
<pre><code>2019-05-30 09:47:20.625826+0800 Aaron[25107:613531] {
    new = Aaron;
}
2019-05-30 09:47:20.625992+0800 Aaron[25107:613531] {
    new = Aaron;
}
2019-05-30 09:47:20.626128+0800 Aaron[25107:613531] {
    new = Aaron;
}
</code></pre><p>具体的代码放到了github上：<a href="https://github.com/ChenYalun/Project/tree/master/KVO" target="_blank" rel="noopener">https://github.com/ChenYalun/Project/tree/master/KVO</a></p>
<p>KVO的源码来自：<a href="https://github.com/renjinkui2719/DIS_KVC_KVO" target="_blank" rel="noopener">https://github.com/renjinkui2719/DIS_KVC_KVO</a> 。感谢作者。</p>
<blockquote>
<p>参考文章<br><a href="http://southpeak.github.io/2015/04/23/cocoa-foundation-nskeyvalueobserving/" target="_blank" rel="noopener">http://southpeak.github.io/2015/04/23/cocoa-foundation-nskeyvalueobserving/</a><br><a href="https://tech.glowing.com/cn/implement-kvo/" target="_blank" rel="noopener">https://tech.glowing.com/cn/implement-kvo/</a><br><a href="https://knightsj.github.io/2017/05/15/使用Block实现KVO/" target="_blank" rel="noopener">https://knightsj.github.io/2017/05/15/使用Block实现KVO/</a><br><a href="https://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/" target="_blank" rel="noopener">https://blog.sunnyxx.com/2014/03/09/objc_kvo_secret/</a><br><a href="http://chuquan.me/2018/12/12/kvo-principle/" target="_blank" rel="noopener">http://chuquan.me/2018/12/12/kvo-principle/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[详解「KVC」源码]]></title>
      <url>http://blog.chenyalun.com/2019/05/05/%E8%AF%A6%E8%A7%A3%E3%80%8CKVC%E3%80%8D%E6%BA%90%E7%A0%81/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> KVC源码阅读。 </p><br><a id="more"></a><p></p>
<h1 id="一、接口"><a href="#一、接口" class="headerlink" title="一、接口"></a>一、接口</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line"><span class="comment">// 是否可以直接访问实例变量(实例变量访问开关, 默认YES)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> accessInstanceVariablesDirectly;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过key访问</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 尝试验证将要设定的value(ioValue指针指向的对象)是否合理有效</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)validateValue:(<span class="keyword">inout</span> <span class="keyword">id</span> _Nullable * _Nonnull)ioValue forKey:(<span class="built_in">NSString</span> *)inKey error:(<span class="keyword">out</span> <span class="built_in">NSError</span> **)outError;</span><br><span class="line"><span class="comment">// 获取相对应的精确容器类型</span></span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)mutableArrayValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="built_in">NSMutableOrderedSet</span> *)mutableOrderedSetValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="built_in">NSMutableSet</span> *)mutableSetValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过keyPath访问</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">BOOL</span>)validateValue:(<span class="keyword">inout</span> <span class="keyword">id</span> _Nullable * _Nonnull)ioValue forKeyPath:(<span class="built_in">NSString</span> *)inKeyPath error:(<span class="keyword">out</span> <span class="built_in">NSError</span> **)outError;</span><br><span class="line">- (<span class="built_in">NSMutableArray</span> *)mutableArrayValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">NSMutableOrderedSet</span> *)mutableOrderedSetValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="built_in">NSMutableSet</span> *)mutableSetValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找key失败默认抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)valueForUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 设置value失败默认抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forUndefinedKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 设置value为nil时抛出异常, 可重写自行实现</span></span><br><span class="line">- (<span class="keyword">void</span>)setNilValueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 传入key数组, 返回一个成员变量名和变量值的键值对组成的字典(可用于模型转字典)</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)dictionaryWithValuesForKeys:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keys;</span><br><span class="line"><span class="comment">// 字典转模型</span></span><br><span class="line">- (<span class="keyword">void</span>)setValuesForKeysWithDictionary:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)keyedValues;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/// 容器扩展</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDictionary</span>&lt;<span class="title">KeyType</span>, <span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">nullable</span> ObjectType)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableDictionary</span>&lt;<span class="title">KeyType</span>, <span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> ObjectType)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSSet</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSOrderedSet</span>&lt;<span class="title">ObjectType</span>&gt;(<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">nullable</span> <span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="集合代理对象"><a href="#集合代理对象" class="headerlink" title="集合代理对象"></a>集合代理对象</h2><p>这里简单总结集合代理对象的使用。</p>
<blockquote>
<p>当我们在对象上调用 <code>-valueForKey:</code> 的时候，它可以返回 <code>NSArray</code>，<code>NSSet</code> 或是 <code>NSOrderedSet</code> 的集合代理对象。这个类没有实现通常的 <code>-&lt;Key&gt;</code> 方法，但是它实现了代理对象所需要使用的很多方法。</p>
</blockquote>
<h3 id="NSArray"><a href="#NSArray" class="headerlink" title="NSArray"></a>NSArray</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Primes</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *primes;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Primes</span></span></span><br><span class="line"><span class="keyword">@dynamic</span> primes; <span class="comment">// 不要生成get方法</span></span><br><span class="line"><span class="keyword">static</span> int32_t <span class="keyword">const</span> primes[] = &#123;</span><br><span class="line">    <span class="number">2</span>, <span class="number">101</span>, <span class="number">233</span>, <span class="number">383</span>, <span class="number">3</span>, <span class="number">103</span>, <span class="number">239</span>, <span class="number">389</span>, <span class="number">5</span>, <span class="number">107</span>, <span class="number">241</span>, <span class="number">397</span>, <span class="number">7</span>, <span class="number">109</span>,</span><br><span class="line">    <span class="number">251</span>, <span class="number">401</span>, <span class="number">11</span>, <span class="number">113</span>, <span class="number">257</span>, <span class="number">409</span>, <span class="number">13</span>, <span class="number">127</span>, <span class="number">263</span>, <span class="number">419</span>, <span class="number">17</span>, <span class="number">131</span>, <span class="number">269</span>,</span><br><span class="line">    <span class="number">421</span>, <span class="number">19</span>, <span class="number">137</span>, <span class="number">271</span>, <span class="number">431</span>, <span class="number">23</span>, <span class="number">139</span>, <span class="number">277</span>, <span class="number">433</span>, <span class="number">29</span>, <span class="number">149</span>, <span class="number">281</span>, <span class="number">439</span>,</span><br><span class="line">    <span class="number">31</span>, <span class="number">151</span>, <span class="number">283</span>, <span class="number">443</span>, <span class="number">37</span>, <span class="number">157</span>, <span class="number">293</span>, <span class="number">449</span>, <span class="number">41</span>, <span class="number">163</span>, <span class="number">307</span>, <span class="number">457</span>, <span class="number">43</span>,</span><br><span class="line">    <span class="number">167</span>, <span class="number">311</span>, <span class="number">461</span>, <span class="number">47</span>, <span class="number">173</span>, <span class="number">313</span>, <span class="number">463</span>, <span class="number">53</span>, <span class="number">179</span>, <span class="number">317</span>, <span class="number">467</span>, <span class="number">59</span>, <span class="number">181</span>,</span><br><span class="line">    <span class="number">331</span>, <span class="number">479</span>, <span class="number">61</span>, <span class="number">191</span>, <span class="number">337</span>, <span class="number">487</span>, <span class="number">67</span>, <span class="number">193</span>, <span class="number">347</span>, <span class="number">491</span>, <span class="number">71</span>, <span class="number">197</span>, <span class="number">349</span>,</span><br><span class="line">    <span class="number">499</span>, <span class="number">73</span>, <span class="number">199</span>, <span class="number">353</span>, <span class="number">503</span>, <span class="number">79</span>, <span class="number">211</span>, <span class="number">359</span>, <span class="number">509</span>, <span class="number">83</span>, <span class="number">223</span>, <span class="number">367</span>, <span class="number">521</span>,</span><br><span class="line">    <span class="number">89</span>, <span class="number">227</span>, <span class="number">373</span>, <span class="number">523</span>, <span class="number">97</span>, <span class="number">229</span>, <span class="number">379</span>, <span class="number">541</span>, <span class="number">547</span>, <span class="number">701</span>, <span class="number">877</span>, <span class="number">1049</span>,</span><br><span class="line">    <span class="number">557</span>, <span class="number">709</span>, <span class="number">881</span>, <span class="number">1051</span>, <span class="number">563</span>, <span class="number">719</span>, <span class="number">883</span>, <span class="number">1061</span>, <span class="number">569</span>, <span class="number">727</span>, <span class="number">887</span>,</span><br><span class="line">    <span class="number">1063</span>, <span class="number">571</span>, <span class="number">733</span>, <span class="number">907</span>, <span class="number">1069</span>, <span class="number">577</span>, <span class="number">739</span>, <span class="number">911</span>, <span class="number">1087</span>, <span class="number">587</span>, <span class="number">743</span>,</span><br><span class="line">    <span class="number">919</span>, <span class="number">1091</span>, <span class="number">593</span>, <span class="number">751</span>, <span class="number">929</span>, <span class="number">1093</span>, <span class="number">599</span>, <span class="number">757</span>, <span class="number">937</span>, <span class="number">1097</span>, <span class="number">601</span>,</span><br><span class="line">    <span class="number">761</span>, <span class="number">941</span>, <span class="number">1103</span>, <span class="number">607</span>, <span class="number">769</span>, <span class="number">947</span>, <span class="number">1109</span>, <span class="number">613</span>, <span class="number">773</span>, <span class="number">953</span>, <span class="number">1117</span>,</span><br><span class="line">    <span class="number">617</span>, <span class="number">787</span>, <span class="number">967</span>, <span class="number">1123</span>, <span class="number">619</span>, <span class="number">797</span>, <span class="number">971</span>, <span class="number">1129</span>, <span class="number">631</span>, <span class="number">809</span>, <span class="number">977</span>,</span><br><span class="line">    <span class="number">1151</span>, <span class="number">641</span>, <span class="number">811</span>, <span class="number">983</span>, <span class="number">1153</span>, <span class="number">643</span>, <span class="number">821</span>, <span class="number">991</span>, <span class="number">1163</span>, <span class="number">647</span>, <span class="number">823</span>,</span><br><span class="line">    <span class="number">997</span>, <span class="number">1171</span>, <span class="number">653</span>, <span class="number">827</span>, <span class="number">1009</span>, <span class="number">1181</span>, <span class="number">659</span>, <span class="number">829</span>, <span class="number">1013</span>, <span class="number">1187</span>, <span class="number">661</span>,</span><br><span class="line">    <span class="number">839</span>, <span class="number">1019</span>, <span class="number">1193</span>, <span class="number">673</span>, <span class="number">853</span>, <span class="number">1021</span>, <span class="number">1201</span>, <span class="number">677</span>, <span class="number">857</span>, <span class="number">1031</span>,</span><br><span class="line">    <span class="number">1213</span>, <span class="number">683</span>, <span class="number">859</span>, <span class="number">1033</span>, <span class="number">1217</span>, <span class="number">691</span>, <span class="number">863</span>, <span class="number">1039</span>, <span class="number">1223</span>, <span class="number">1229</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">sizeof</span>(primes) / <span class="keyword">sizeof</span>(*primes));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectInPrimesAtIndex:(<span class="built_in">NSUInteger</span>)idx &#123;</span><br><span class="line">    <span class="built_in">NSParameterAssert</span>(idx &lt; <span class="keyword">sizeof</span>(primes) / <span class="keyword">sizeof</span>(*primes));</span><br><span class="line">    <span class="keyword">return</span> @(primes[idx]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>对于NSArray， 实现<code>-countOf&lt;Key&gt;</code>方法，<code>-objectIn&lt;Key&gt;AtIndex:</code>或者<code>-&lt;key&gt;AtIndexes:</code>中的一个即可，当然如果再实现<code>-get&lt;Key&gt;:range:</code>将会增强性能。</p>
<p>上面的例子中，key是”primes”，实际上并没有这个primes数组，而是用了一个C数组代理了。<code>@property (nonatomic, copy, readonly) NSArray *primes;</code>和<code>@dynamic primes;</code> 这两句话可以省略（下文的例子就省略了），这里加上的原因是，便于外界知晓具体的key值。</p>
<p>使用：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">Primes *primes = [Primes <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueArray</span>'</span></span><br><span class="line">id obj = [primes valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure>
<p>可见，获得的对象并不是一个NSArray，而是<code>NSKeyValueArray</code>。</p>
<h3 id="NSSet"><a href="#NSSet" class="headerlink" title="NSSet"></a>NSSet</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PrimesSet</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PrimesSet</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSSet</span> *_numSet;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _numSet = [<span class="built_in">NSSet</span> setWithObjects:@<span class="number">0</span>, @<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numSet.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSEnumerator</span> *)enumeratorOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numSet.objectEnumerator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)memberOfPrimes:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numSet member:obj];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>对于NSSet，要实现<code>-countOf&lt;Key&gt;</code>、<code>-enumeratorOf&lt;Key&gt;</code>和<code>-memberOf&lt;Key&gt;:</code>这三个方法。</p>
<p>使用：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">PrimesSet *primesSet = [PrimesSet <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueSet</span>'</span></span><br><span class="line">id obj = [primesSet valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure>
<p>获取到的对象是<code>NSKeyValueSet</code>。</p>
<h3 id="NSOrderedSet"><a href="#NSOrderedSet" class="headerlink" title="NSOrderedSet"></a>NSOrderedSet</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">PrimesOrderedSet</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">PrimesOrderedSet</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSOrderedSet</span> *_numOrderedSet;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _numOrderedSet = [<span class="built_in">NSOrderedSet</span> orderedSetWithObjects:@<span class="number">0</span>, @<span class="number">1</span>, @<span class="number">2</span>, @<span class="number">3</span>, <span class="literal">nil</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)countOfPrimes &#123;</span><br><span class="line">    <span class="keyword">return</span> _numOrderedSet.count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSUInteger</span>)indexInPrimesOfObject:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numOrderedSet indexOfObject:obj];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectInPrimesAtIndex:(<span class="built_in">NSUInteger</span>)idx &#123;</span><br><span class="line">    <span class="keyword">return</span> [_numOrderedSet objectAtIndex:idx];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于提高性能</span></span><br><span class="line">- (<span class="keyword">void</span>)getPrimes:(<span class="keyword">id</span> __<span class="keyword">unsafe_unretained</span> *)buffer range:(<span class="built_in">NSRange</span>)inRange &#123;</span><br><span class="line">    <span class="comment">// 返回提供的缓冲区内指定范围内的数据集合</span></span><br><span class="line">    [_numOrderedSet getObjects:buffer range:inRange];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>必须实现的方法是<code>-countOf&lt;Key&gt;</code>和<code>-indexIn&lt;Key&gt;OfObject:</code>。二选一实现的方法是<code>-objectIn&lt;Key&gt;AtIndex:</code>和<code>-&lt;key&gt;AtIndexes:</code>。如果再实现<code>-get&lt;Key&gt;:range:</code>将会增强性能。</p>
<p>使用：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line">PrimesOrderedSet *primesOrderedSet = [PrimesOrderedSet <span class="keyword">new</span>];</span><br><span class="line"><span class="regexp">//</span> obj <span class="keyword">is</span> kind <span class="keyword">of</span> <span class="class"><span class="keyword">class</span> '<span class="title">NSKeyValueOrderedSet</span>'</span></span><br><span class="line">id obj = [primesOrderedSet valueForKey:@<span class="string">"primes"</span>];</span><br></pre></td></tr></table></figure>
<p>获取到的对象是<code>NSKeyValueOrderedSet</code>。</p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>数组最大值：</p>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">NSArray <span class="symbol">*</span>array = <span class="meta">@[</span><span class="meta">@1,</span> <span class="meta">@8,</span> <span class="meta">@5];</span></span><br><span class="line">[array valueForKeyPath:<span class="meta">@"</span><span class="meta">@max.self"];</span></span><br></pre></td></tr></table></figure>
<p>模型数组最大值：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">NSArray *<span class="keyword">array</span> = @[person1, person2, person3];</span><br><span class="line">[<span class="keyword">array</span> valueForKeyPath:@<span class="string">"@max.age"</span>];</span><br></pre></td></tr></table></figure>
<p>其他操作符：</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@max</span> <span class="variable">@min</span>: 获得数组中最大(或者最小)的一个元素</span><br><span class="line"><span class="variable">@avg</span>: 将集合中对象转换成double类型，返回数组中指定的平均值的number对象</span><br><span class="line"><span class="variable">@sum</span>: 将集合中每个对象都转换成double类型，然后计算总和，最后返回一个值为这个总和的NSNumber对象</span><br><span class="line"><span class="variable">@count</span>：返回集合中对象总数的NSNumber对象</span><br><span class="line"></span><br><span class="line">返回一个由操作符右边的key path指定的对象属性组成的数组，distincUnionOfObjects会对数组去重。</span><br><span class="line">示例：</span><br><span class="line">[personList <span class="attribute">valueForKeyPath</span>:@<span class="string">"@unionOfObjects.name"</span>];</span><br><span class="line"><span class="selector-attr">[personList valueForKeyPath:@"@distinctUnionOfObjects.name"]</span>;</span><br><span class="line">操作对象：<span class="variable">@unionOfObjects</span>/<span class="variable">@distincUnionOfObjects</span> </span><br><span class="line">操作数组：<span class="variable">@distinctUnionOfArrays</span>/<span class="variable">@unionOfArrays</span></span><br><span class="line">操作集合：<span class="variable">@distinctUnionOfSets</span> 和<span class="variable">@distinctUnionOfArrays</span></span><br></pre></td></tr></table></figure>
<h2 id="分类的KVC"><a href="#分类的KVC" class="headerlink" title="分类的KVC"></a>分类的KVC</h2><p>一般的场景是这样：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> :  <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分类</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> (<span class="title">PrimitiveAccessors</span>)</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span> (<span class="title">PrimitiveAccessors</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *gVolume;</span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume &#123;</span><br><span class="line">    <span class="keyword">return</span> gVolume;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value &#123;</span><br><span class="line">    gVolume = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>对于主类中没有的key，分类实现特定的方法后，KVC也将会生效。如果是取值，分类必须实现这样的方法：<code>getPrimitive&lt;key&gt;</code>或者<code>primitive&lt;key&gt;</code>。上面的例子中，key是volume。如果是设值，分类必须实现<code>setPrimitive&lt;key&gt;:</code>方法。</p>
<p>使用：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">Portion *p = [Portion <span class="keyword">new</span>];</span><br><span class="line">[p <span class="string">setValue:</span>@<span class="number">234</span> <span class="string">forKey:</span>@<span class="string">"volume"</span>];</span><br><span class="line">id m = [p <span class="string">valueForKey:</span>@<span class="string">"volume"</span>];</span><br></pre></td></tr></table></figure>
<p>当然，本质上来讲，并KVC不介意这些方法在主类还是分类实现的，只有实现就成。上面的只是一个例子，实际上，完全依靠主类也是无妨的。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Portion</span> :  <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Portion</span></span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *gVolume;</span><br><span class="line">- (<span class="built_in">NSNumber</span> *)primitiveVolume &#123;</span><br><span class="line">    <span class="keyword">return</span> gVolume;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)setPrimitiveVolume:(<span class="built_in">NSNumber</span> *)value &#123;</span><br><span class="line">    gVolume = value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h1 id="二、取值"><a href="#二、取值" class="headerlink" title="二、取值"></a>二、取值</h1><h2 id="valueForKey"><a href="#valueForKey" class="headerlink" title="valueForKey:"></a>valueForKey:</h2><p>苹果在接口这里已经给出了其基本原理：</p>
<blockquote>
<p>The default implementation of this method does the following:</p>
<ol>
<li><p>Searches the class of the receiver for an accessor method whose name matches the pattern <code>-get&lt;Key&gt;, -&lt;key&gt;, or -is&lt;Key&gt;</code>, in that order. If such a method is found it is invoked. If the type of the method’s result is an object pointer type the result is simply returned. If the type of the result is one of the scalar types supported by NSNumber conversion is done and an NSNumber is returned. Otherwise, conversion is done and an NSValue is returned (new in Mac OS 10.5: results of arbitrary type are converted to NSValues, not just NSPoint, NRange, NSRect, and NSSize).</p>
</li>
<li><p>(introduced in Mac OS 10.7). Otherwise (no simple accessor method is found), searches the class of the receiver for methods whose names match the patterns <code>-countOf&lt;Key&gt; and -indexIn&lt;Key&gt;OfObject: and -objectIn&lt;Key&gt;AtIndex:</code>(corresponding to the primitive methods defined by the NSOrderedSet class) and also <code>-&lt;key&gt;AtIndexes:</code> (corresponding to -[NSOrderedSet objectsAtIndexes:]). If a count method and an indexOf method and at least one of the other two possible methods are found, a collection proxy object that responds to all NSOrderedSet methods is returned. Each NSOrderedSet message sent to the collection proxy object will result in some combination of<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:, -objectIn&lt;Key&gt;AtIndex:, and -&lt;key&gt;AtIndexes:</code> messages being sent to the original receiver of <code>-valueForKey:</code>. If the class of the receiver also implements an optional method whose name matches the pattern -get<key>:range: that method will be used when appropriate for best performance.</key></p>
</li>
</ol>
<ol start="3">
<li><p>Otherwise (no simple accessor method or set of ordered set access methods is found), searches the class of the receiver for methods whose names match the patterns <code>-countOf&lt;Key&gt; and -objectIn&lt;Key&gt;AtIndex:</code>(corresponding to the primitive methods defined by the NSArray class) and (introduced in Mac OS 10.4) also<code>-&lt;key&gt;AtIndexes:</code>(corresponding to -[NSArray objectsAtIndexes:]). If a count method and at least one of the other two possible methods are found, a collection proxy object that responds to all NSArray methods is returned. Each NSArray message sent to the collection proxy object will result in some combination of <code>-countOf&lt;Key&gt;, -objectIn&lt;Key&gt;AtIndex:, and -&lt;key&gt;AtIndexes:</code> messages being sent to the original receiver of <code>-valueForKey:</code>. If the class of the receiver also implements an optional method whose name matches the pattern <code>-get&lt;Key&gt;:range:</code> that method will be used when appropriate for best performance.</p>
</li>
<li><p>(introduced in Mac OS 10.4). Otherwise (no simple accessor method or set of ordered set or array access methods is found), searches the class of the receiver for a threesome of methods whose names match the patterns <code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;, and -memberOf&lt;Key&gt;:</code> (corresponding to the primitive methods defined by the NSSet class). If all three such methods are found a collection proxy object that responds to all NSSet methods is returned. Each NSSet message sent to the collection proxy object will result in some combination of <code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;, and -memberOf&lt;Key&gt;:</code>messages being sent to the original receiver of <code>-valueForKey:</code>.</p>
</li>
<li><p>Otherwise (no simple accessor method or set of collection access methods is found), if the receiver’s class’ +accessInstanceVariablesDirectly property returns YES, searches the class of the receiver for an instance variable whose name matches the pattern <code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, or is&lt;Key&gt;</code>, in that order. If such an instance variable is found, the value of the instance variable in the receiver is returned, with the same sort of conversion to NSNumber or NSValue as in step 1.</p>
</li>
<li><p>Otherwise (no simple accessor method, set of collection access methods, or instance variable is found), invokes <code>-valueForUndefinedKey:</code> and returns the result. The default implementation of <code>-valueForUndefinedKey:</code> raises an NSUndefinedKeyException, but you can override it in your application.</p>
</li>
</ol>
<p>Compatibility notes:</p>
<ul>
<li>For backward binary compatibility, an accessor method whose name matches the pattern <code>-_get&lt;Key&gt;</code>, or <code>-_&lt;key&gt;</code> is searched for between steps 1 and 3. If such a method is found it is invoked, with the same sort of conversion to NSNumber or NSValue as in step 1. KVC accessor methods whose names start with underscores were deprecated as of Mac OS 10.3 though.</li>
<li>The behavior described in step 5 is a change from Mac OS 10.2, in which the instance variable search order was <code>&lt;key&gt;, _&lt;key&gt;</code>.</li>
<li>For backward binary compatibility, <code>-handleQueryWithUnboundKey:</code> will be invoked instead of <code>-valueForUndefinedKey:</code> in step 6, if the implementation of <code>-handleQueryWithUnboundKey:</code> in the receiver’s class is not NSObject’s.</li>
</ul>
</blockquote>
<p>用蹩脚的英语翻译如下：</p>
<ol>
<li>按照<code>-get&lt;Key&gt;, -&lt;key&gt;, -is&lt;Key&gt;</code>的顺序搜索该类的存取器方法，若找到，则直接调用。如果方法调用的结果是<code>id</code>类型，直接把结果返回。如果方法调用的结果是能够被<code>NSNumber</code>转换的标量类型，则结果会被转为<code>NSNumber</code>返回。否则对于一般的标量类型，这些类型将会被转化为<code>NSValue</code>（在Mac OS 10.5及以后，不仅仅支持<code>NSPoint, NRange, NSRect</code>，以及<code>NSSize</code>这些类型）。</li>
<li>如果简单的存取器方法没有找到，那么搜索该类的<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:</code>方法，还有<code>-objectIn&lt;Key&gt;AtIndex:</code>（对应被<code>NSOrderedSet</code>类所定义的方法），<code>-&lt;key&gt;AtIndexes:</code>（对应<code>-[NSOrderedSet objectsAtIndexes:]</code>）方法。如果<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:</code>这两个方法被找到，另外两个方法中的至少一个被找到，那么这个能响应<code>NSOrderedSet</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>-countOf&lt;Key&gt;, -indexIn&lt;Key&gt;OfObject:, -objectIn&lt;Key&gt;AtIndex:, -&lt;key&gt;AtIndexes:</code>这些方法共同处理。如果这个代理对象也实现了可选的<code>-get&lt;Key&gt;:range:</code>方法，这将有助于增强性能。</li>
<li>如果存取器方法和<code>ordered set</code>的代理方法没有被找到，那么搜索该类的<code>-countOf&lt;Key&gt;</code>方法，还有<code>-objectIn&lt;Key&gt;AtIndex:</code>（对应被<code>NSArray</code>类所定义的方法），<code>-&lt;key&gt;AtIndexes:</code>（对应<code>-[NSArray objectsAtIndexes:]</code>）方法。如果<code>-countOf&lt;Key&gt;</code>这个方法被找到，另外两个方法中的至少一个被找到，那么这个能响应<code>NSArray</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>-countOf&lt;Key&gt;, -objectIn&lt;Key&gt;AtIndex:, -&lt;key&gt;AtIndexes:</code>这些方法共同处理。如果这个代理对象也实现了可选的<code>-get&lt;Key&gt;:range:</code>方法，这将有助于增强性能。</li>
<li>如果存取器方法、<code>ordered set</code>和<code>array</code>的代理方法都没有被找到，那么尝试搜索<code>-countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;,  -memberOf&lt;Key&gt;:</code>这些(被<code>NSSet</code>类所定义的)方法。如果这三个方法都能被找到，那么这个能响应<code>NSSet</code>所有方法的集合代理对象会被返回。发送给原来消息接收者的<code>-valueForKey:</code>消息，将会被这个集合代理对象的<code>countOf&lt;Key&gt;, -enumeratorOf&lt;Key&gt;,  -memberOf&lt;Key&gt;:</code>这些方法共同处理。</li>
<li>如果存取器方法、<code>ordered set</code>、<code>array</code>以及<code>set</code>的代理方法都没有被找到，倘若此时消息接收者的<code>+accessInstanceVariablesDirectly</code>属性返回的是<code>YES</code>，那么按照<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>的顺序搜索该类的实例变量。如果找到这个实例变量，那么按照步骤1中的类型转换规则返回这个实例变量的值。</li>
<li>否则(啥也没找到)，调用<code>-valueForUndefinedKey:</code>方法并返回结果。这个方法的默认实现是抛出<code>NSUndefinedKeyException</code>异常，不过你可以重写该方法自行实现。</li>
</ol>
<p>兼容性：</p>
<ul>
<li><p>为了向后兼容，会在步骤1中查找名称为<code>-_get&lt;Key&gt;,  -_&lt;key&gt;</code>的存取器方法。如果找到了，会进行调用并按照步骤1中的类型转换规则返回调用的结果。</p>
</li>
<li><p>从Mac OS 10.2开始，步骤5中的实例变量搜索顺序从原先的<code>&lt;key&gt;, _&lt;key&gt;</code>改为现在的<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>。</p>
</li>
<li><p>如果<code>-handleQueryWithUnboundKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-handleQueryWithUnboundKey:</code>方法），那在步骤6中，<code>-handleQueryWithUnboundKey:</code>方法将会代替<code>-valueForUndefinedKey:</code>方法被调用。</p>
</li>
</ul>
<p>说得清晰明了。流程图如下：</p>
<p><img src="https://image.chenyalun.com/2019/05/05/001.png" alt></p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(key) &#123;</span><br><span class="line">        OSSpinLockLock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 创建缓存getter的CFSet集合NSKeyValueCachedGetters</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">NSKeyValueCachedGetters</span>) &#123;</span><br><span class="line">            <span class="comment">// CFSet对象需要的结构体参数, 告诉这个集合怎么管理容器中的对象</span></span><br><span class="line">            <span class="comment">// retain\release是内存管理 equal\hash是对象处理 copyDescription是复制处理</span></span><br><span class="line">            <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            callbacks.version = kCFTypeSetCallBacks.version;</span><br><span class="line">            <span class="comment">// 也可以禁用掉retain和release, 这样当对象销毁时需要及时将其从集合中移除否则会崩溃</span></span><br><span class="line">            <span class="comment">// callbacks.retain = NULL;</span></span><br><span class="line">            <span class="comment">// callbacks.release = NULL;</span></span><br><span class="line">            callbacks.retain = kCFTypeSetCallBacks.retain;</span><br><span class="line">            callbacks.release = kCFTypeSetCallBacks.release;</span><br><span class="line">            callbacks.copyDescription = kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">            callbacks.equal = (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValueAccessorIsEqual</span>;</span><br><span class="line">            callbacks.hash = (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValueAccessorHash</span>;</span><br><span class="line">            <span class="built_in">NSKeyValueCachedGetters</span> = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>,<span class="number">0</span>,&amp;callbacks);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据class、key和hash创建唯一的NSKeyValueGetter对象, 作为从缓存集合中查找的"引子"</span></span><br><span class="line">        <span class="comment">// 只要hashValue一致, 不管其他属性是否一致, 就可以判定这两个对象是一致的</span></span><br><span class="line">        <span class="comment">// 这也是为啥首先根据class和key, 创建一个"简单"的finder到缓存集合中查找的原因</span></span><br><span class="line">        <span class="built_in">NSKeyValueGetter</span> *finder = [<span class="built_in">NSKeyValueGetter</span> new];</span><br><span class="line">        finder.containerClassID = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        finder.key = key;</span><br><span class="line">        finder.hashValue = <span class="built_in">CFHash</span>(key) ^ (<span class="built_in">NSUInteger</span>)(object_getClass(<span class="keyword">self</span>));</span><br><span class="line">        <span class="comment">// 缓存集合中是否含有特定的NSKeyValueGetter</span></span><br><span class="line">        <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span> =  <span class="built_in">CFSetGetValue</span>(<span class="built_in">NSKeyValueCachedGetters</span>, finder);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">getter</span>) &#123;</span><br><span class="line">            <span class="comment">// 缓存中没有找到, 创建getter</span></span><br><span class="line">            <span class="keyword">getter</span> = [object_getClass(<span class="keyword">self</span>) _createValueGetterWithContainerClassID:object_getClass(<span class="keyword">self</span>) key:key];</span><br><span class="line">            <span class="comment">// 这里的getter相比上面的finder更加具体详细, 虽然根据哈希来说, 二者是"相同的对象"</span></span><br><span class="line">            <span class="comment">// 创建好getter后, 把它放到缓存集合中</span></span><br><span class="line">            <span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueCachedGetters</span>, <span class="keyword">getter</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        OSSpinLockUnlock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 找到getter, 交给_NSGetUsingKeyValueGetter函数处理</span></span><br><span class="line">        <span class="keyword">return</span> _NSGetUsingKeyValueGetter(<span class="keyword">self</span>, <span class="keyword">getter</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// key为空, 抛出异常</span></span><br><span class="line">        [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"%@: attempt to retrieve a value for a nil key"</span>,_NSMethodExceptionProem(<span class="keyword">self</span>,_cmd)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法主要做了四件事:</p>
<ol>
<li><p>取值时，使用<code>OSSpinLockLock</code>保证线程安全</p>
</li>
<li><p>根据class和key，生成一个<code>NSKeyValueGetter</code>对象，用于封装信息</p>
</li>
<li><p>取值时，会根据class和key配置一个简单的<code>Getter</code>，首先到<code>CFSet</code>缓存集合中进行查找，以提高查找速度</p>
</li>
<li><p>当<code>key</code>不存在时，直接抛出异常: 参数有误</p>
</li>
</ol>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>当缓存集合中不存在时，便进入了更为具体的”查找”流程中。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 详细的查找流程(此处假定key为"name")</span></span><br><span class="line">+ (<span class="built_in">NSKeyValueGetter</span> *)_createValueGetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueGetter</span> * <span class="keyword">getter</span> = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取字节长度</span></span><br><span class="line">    <span class="built_in">NSUInteger</span> keyLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 这个数组用于存放首字符大写的key, 例如: "Name"</span></span><br><span class="line">    <span class="keyword">char</span> keyCStrUpFirst[keyLen + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 将key转为C字符串, 存储在keyCStrUpFirst数组中</span></span><br><span class="line">    [key getCString:keyCStrUpFirst maxLength:keyLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span> (key.length) &#123;</span><br><span class="line">        <span class="comment">// 将小写字母转为大写字母</span></span><br><span class="line">        keyCStrUpFirst[<span class="number">0</span>] = toupper(keyCStrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个数组用于存放与key一致的字符, 例如: "name"</span></span><br><span class="line">    <span class="keyword">char</span> keyCStr[keyLen + <span class="number">16</span>];</span><br><span class="line">    <span class="comment">// 再将key转为C字符串, 存储在keyCStr数组中</span></span><br><span class="line">    [key getCString:keyCStr maxLength:keyLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    Method getMethod = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 查询方法指针, 使用'逻辑或'固定了默认顺序:getName==&gt;name==&gt;isName==&gt;_getName==&gt;_name</span></span><br><span class="line">    <span class="comment">// 此处证明了接口文档中的第一步</span></span><br><span class="line">    <span class="comment">// 1. Whose name matches the pattern -get&lt;Key&gt;, -&lt;key&gt;, or -is&lt;Key&gt;, in that order.</span></span><br><span class="line">    <span class="comment">// 2. For backward binary compatibility, an accessor method whose name matches the pattern -_get&lt;Key&gt;, or -_&lt;key&gt; is searched for between steps 1 and 3.</span></span><br><span class="line">    <span class="keyword">if</span>((getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"get%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"%s"</span>,keyCStr)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"is%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"_get%s"</span>,keyCStrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"_%s"</span>,keyCStr))) &#123;</span><br><span class="line">        <span class="comment">// 成功找到, 创建NSKeyValueMethodGetter对象, 保存找到的method</span></span><br><span class="line">        <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueMethodGetter</span> alloc] initWithContainerClassID:containerClassID key:key method:getMethod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没有找到, 进入下个流程, 假定key为"name", 则:</span></span><br><span class="line"><span class="comment">        ountOf_Method 对应 countOfName</span></span><br><span class="line"><span class="comment">        ObjectIn_AtIndexMethod 对应 objectInNameAtIndex:</span></span><br><span class="line"><span class="comment">        _AtIndexesMethod 对应 nameAtIndexes:</span></span><br><span class="line"><span class="comment">        IndexIn_OfObjectMethod 对应 indexInNameOfObject:</span></span><br><span class="line"><span class="comment">        enumeratorOf_Method 对应 enumeratorOfName</span></span><br><span class="line"><span class="comment">        memberOf_Method 对应 memberOfName:</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Method ountOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"countOf%"</span>, keyCStrUpFirst);</span><br><span class="line">        Method ObjectIn_AtIndexMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"objectIn%sAtIndex:"</span>, keyCStrUpFirst);</span><br><span class="line">        Method _AtIndexesMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"%sAtIndexes:"</span>, keyCStr);</span><br><span class="line">        Method IndexIn_OfObjectMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"indexIn%sOfObject:"</span>, keyCStrUpFirst);</span><br><span class="line">        </span><br><span class="line">        Method enumeratorOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"enumeratorOf%s"</span>, keyCStrUpFirst);</span><br><span class="line">        Method memberOf_Method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"memberOf%s:"</span>, keyCStrUpFirst);</span><br><span class="line">        <span class="keyword">if</span>(ountOf_Method &amp;&amp; IndexIn_OfObjectMethod &amp;&amp; (ObjectIn_AtIndexMethod || _AtIndexesMethod)) &#123;</span><br><span class="line">            <span class="comment">// 第二步, 针对NSOrderedSet, ountOf_Method、IndexIn_OfObjectMethod，以及ObjectIn_AtIndexMethod或者_AtIndexesMethod中的一个存在(实现代理集合对象)</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingOrderedSetMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingOrderedSetMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.objectAtIndex =  ObjectIn_AtIndexMethod;</span><br><span class="line">            methodSet.indexOfObject =  IndexIn_OfObjectMethod;</span><br><span class="line">            methodSet.objectsAtIndexes =  _AtIndexesMethod;</span><br><span class="line">            <span class="comment">// eg: getName:range:方法(用于增强性能)</span></span><br><span class="line">            methodSet.getObjectsRange =  <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"get%s:range:"</span>, keyCStrUpFirst);</span><br><span class="line">            <span class="comment">// NSKeyValueNonmutatingOrderedSetMethodSet就是一个拥有几个属性的简单的对象, 用于保存count、objectAtIndex等方法指针信息</span></span><br><span class="line">            <span class="comment">// 成功找到, 创建NSKeyValueCollectionGetter对象, 保存保存好的methodSet对象</span></span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueOrderedSet</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ountOf_Method &amp;&amp; (ObjectIn_AtIndexMethod || _AtIndexesMethod))&#123;</span><br><span class="line">            <span class="comment">// 第三步, 针对NSArray, ountOf_Method、以及ObjectIn_AtIndexMethod或者_AtIndexesMethod中的一个存在</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingArrayMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingArrayMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.objectAtIndex =  ObjectIn_AtIndexMethod;</span><br><span class="line">            methodSet.objectsAtIndexes =  _AtIndexesMethod;</span><br><span class="line">            methodSet.getObjectsRange =  <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"get%s:range:"</span>, keyCStrUpFirst);</span><br><span class="line">            <span class="comment">// 同样的, 成功找到, 创建NSKeyValueCollectionGetter对象,保存methodSet</span></span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueArray</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ountOf_Method &amp;&amp; enumeratorOf_Method &amp;&amp; memberOf_Method)&#123;</span><br><span class="line">            <span class="comment">// 第四步, 针对NSSet, ountOf_Method、enumeratorOf_Method以及memberOf_Method</span></span><br><span class="line">            <span class="built_in">NSKeyValueNonmutatingSetMethodSet</span> *methodSet = [[<span class="built_in">NSKeyValueNonmutatingSetMethodSet</span> alloc] init];</span><br><span class="line">            methodSet.count =  ountOf_Method;</span><br><span class="line">            methodSet.enumerator =  enumeratorOf_Method;</span><br><span class="line">            methodSet.member =  memberOf_Method;</span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueCollectionGetter</span> alloc] initWithContainerClassID:containerClassID key:key  methods:methodSet proxyClass:<span class="built_in">NSKeyValueSet</span>.self];</span><br><span class="line">            [methodSet release];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">            <span class="comment">// 第五步, 如果允许直接访问实例变量, 也即accessInstanceVariablesDirectly为YES, 则直接取出实例变量</span></span><br><span class="line">            <span class="comment">// 默认顺序为_name==&gt;_isName==&gt;name==&gt;isName</span></span><br><span class="line">            Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span>((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCStr)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCStrUpFirst)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCStr)) ||</span><br><span class="line">               (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCStrUpFirst))</span><br><span class="line">               ) &#123;</span><br><span class="line">                <span class="comment">// 此时ivar有值, 创建NSKeyValueIvarGetter</span></span><br><span class="line">                <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueIvarGetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">getter</span>) &#123;</span><br><span class="line">        <span class="comment">// 最后, getter创建失败, 说明方法、实例变量查询失败, 进入下个流程</span></span><br><span class="line">        <span class="keyword">getter</span> = [<span class="keyword">self</span> _createValuePrimitiveGetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">getter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法详细地设定了查找的顺序，值得关注的是，<code>NSKeyValueMethodForPattern()</code>这个函数调用的次数相当的多。</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//最后一次查找</span></span><br><span class="line">+ (<span class="built_in">NSKeyValueGetter</span> *)_createValuePrimitiveGetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> keyCstrLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">char</span> keyCstrUpFirst[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstrUpFirst maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span>(key.length) &#123;</span><br><span class="line">        keyCstrUpFirst[<span class="number">0</span>] = toupper(keyCstrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> keyCstr[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstr maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    Method getMethod = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 同样的套路, 查找顺序: getPrimitiveName==&gt;primitiveName</span></span><br><span class="line">    <span class="keyword">if</span>((getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"getPrimitive%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">       (getMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"primitive%s"</span>, keyCstrUpFirst))</span><br><span class="line">       ) &#123;</span><br><span class="line">        <span class="keyword">getter</span> =  [[<span class="built_in">NSKeyValueMethodGetter</span> alloc] initWithContainerClassID:containerClassID key:key method:getMethod];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">        Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 直接访问实例变量</span></span><br><span class="line">        <span class="comment">// 在方法二中找过一遍了, 为啥还要再找一遍?</span></span><br><span class="line">        <span class="comment">// 说明要么是根本没有找到, 要么是虽然找到了, 但是在创建NSKeyValueIvarGetter或者NSKeyValueMethodGetter的时候失败了, 最终的getter还是nil</span></span><br><span class="line">        <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCstrUpFirst))</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">getter</span> = [[<span class="built_in">NSKeyValueIvarGetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">getter</span>) &#123;</span><br><span class="line">        <span class="keyword">getter</span> = [<span class="keyword">self</span> _createOtherValueGetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">getter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 转发处理给NSKeyValueUndefinedGetter对象</span></span><br><span class="line">+ (id)<span class="string">_createOtherValueGetterWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [[NSKeyValueUndefinedGetter alloc] <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">containerIsa:</span>self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法五"><a href="#方法五" class="headerlink" title="方法五"></a>方法五</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueUndefinedGetter负责调用其父类(NSKeyValueGetter)的构造方法</span></span><br><span class="line"><span class="meta">@implementation</span> NSKeyValueUndefinedGetter</span><br><span class="line">- (id)<span class="string">initWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key <span class="string">containerIsa:</span>(Class)containerIsa &#123;</span><br><span class="line">    <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    arguments[<span class="number">0</span>] = key;</span><br><span class="line">    <span class="comment">// 调用valueForUndefinedKey方法, 该方法默认实现抛出异常</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">implementation:</span>methogetImplementation(class_getInstanceMethod(containerIsa,<span class="meta">@selector</span>(<span class="string">valueForUndefinedKey:</span>))) <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">valueForUndefinedKey:</span>) <span class="string">extraArguments:</span>arguments <span class="string">count:</span><span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="方法指针怎么查找"><a href="#方法指针怎么查找" class="headerlink" title="方法指针怎么查找"></a>方法指针怎么查找</h3><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueMethodForPattern</span></span><br><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">NSKeyValueMethodForPattern</span><span class="params">(<span class="keyword">Class</span> <span class="keyword">class</span>, <span class="keyword">const</span> char *pattern,<span class="keyword">const</span> char *param)</span> <span class="comment">&#123;</span></span></span><br><span class="line"><span class="function"><span class="comment">    size_t paramLen = strlen(param);</span></span></span><br><span class="line"><span class="function"><span class="comment">    size_t patternLen = strlen(pattern);</span></span></span><br><span class="line"><span class="function"><span class="comment">    char selName[patternLen + paramLen * 2 + 1];</span></span></span><br><span class="line"><span class="function"><span class="comment">    snprintf(selName, (patternLen + paramLen * 2 + 1), pattern,param,param);</span></span></span><br><span class="line"><span class="function"><span class="comment">    // 依赖Runtime的class_getInstanceMethod</span></span></span><br><span class="line"><span class="function"><span class="comment">    return class_getInstanceMethod(class, sel_registerName(selName));</span></span></span><br><span class="line"><span class="function"><span class="comment">&#125;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="实例变量怎么查找"><a href="#实例变量怎么查找" class="headerlink" title="实例变量怎么查找"></a>实例变量怎么查找</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// NSKeyValueIvarForPattern</span></span><br><span class="line"><span class="function">Ivar <span class="title">NSKeyValueIvarForPattern</span><span class="params">(Class class, <span class="keyword">const</span> <span class="keyword">char</span> *pattern,<span class="keyword">const</span> <span class="keyword">char</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> paramLen = <span class="built_in">strlen</span>(param);</span><br><span class="line">    <span class="keyword">size_t</span> patternLen = <span class="built_in">strlen</span>(pattern);</span><br><span class="line">    <span class="keyword">char</span> ivarName[paramLen + patternLen + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(ivarName, paramLen + patternLen + <span class="number">1</span>, pattern,param);</span><br><span class="line">    <span class="comment">// 依赖Runtime的class_getInstanceVariable</span></span><br><span class="line">    <span class="keyword">return</span> class_getInstanceVariable(class, ivarName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="NSKeyValueMethodGetter如何创建"><a href="#NSKeyValueMethodGetter如何创建" class="headerlink" title="NSKeyValueMethodGetter如何创建"></a>NSKeyValueMethodGetter如何创建</h3><h4 id="1-NSKeyValueMethodGetter构造方法中生成IMP"><a href="#1-NSKeyValueMethodGetter构造方法中生成IMP" class="headerlink" title="1. NSKeyValueMethodGetter构造方法中生成IMP"></a>1. NSKeyValueMethodGetter构造方法中生成IMP</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSKeyValueMethodGetter</span></span></span><br><span class="line">- (<span class="keyword">id</span>)initWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key method:(Method)method &#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> methodArgumentsCount = methogetNumberOfArguments(method);</span><br><span class="line">    <span class="built_in">NSUInteger</span> extraAtgumentCount = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 默认两个参数((void (*)(id, SEL))objc_msgSend)</span></span><br><span class="line">    <span class="keyword">if</span>(methodArgumentsCount == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> *returnType = methocopyReturnType(method);</span><br><span class="line">        IMP imp = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">switch</span> (returnType[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">                <span class="comment">// 返回类型是对象时, 直接获取method的函数指针</span></span><br><span class="line">                <span class="comment">// 还是以key为"name"举例, 则方法为- (NSString *)name; 这里直接获取其IMP</span></span><br><span class="line">                imp = methogetImplementation(method);</span><br><span class="line">                extraAtgumentCount = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'B'</span>: &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 // 获取将BOOL类型转为NSNumber对象类型的函数指针</span></span><br><span class="line"><span class="comment">                 NSNumber * _NSGetBoolValueWithMethod(id object, SEL selctor, Method method) &#123;</span></span><br><span class="line"><span class="comment">                 return [[[NSNumber alloc] initWithBool: ((BOOL (*)(id,SEL))methogetImplementation(method))(object, methogetName(method))] autorelease];</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 // 比如key为"isMan", 则方法为 - (BOOL)iaMan;</span></span><br><span class="line"><span class="comment">                 // 获取的IMP便是将普通BOOL类型值转化为NSNumber类型对象的函数指针, 其他类似</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetBoolValueWithMethod;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'C'</span>: &#123;imp = (IMP)_NSGetUnsignedCharValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'I'</span>: &#123;imp = (IMP)_NSGetUnsignedIntValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'Q'</span>: &#123;imp = (IMP)_NSGetUnsignedLongLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'L'</span>: &#123;imp = (IMP)_NSGetUnsignedLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'S'</span>: &#123;imp = (IMP)_NSGetUnsignedShortValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>: &#123;imp = (IMP)_NSGetCharValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'d'</span>: &#123;imp = (IMP)_NSGetDoubleValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'f'</span>: &#123;imp = (IMP)_NSGetFloatValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'i'</span>: &#123;imp = (IMP)_NSGetIntValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'l'</span>: &#123;imp = (IMP)_NSGetLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'q'</span>: &#123;imp = (IMP)_NSGetLongLongValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>: &#123;imp = (IMP)_NSGetShortValueWithMethod;&#125; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">                <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetPointValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">NSRange</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetRangeValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGRect</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetRectValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (strcmp(returnType, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>)) == <span class="number">0</span>)&#123;</span><br><span class="line">                    imp = (IMP)_NSGetSizeValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    imp = (IMP)_NSGetValueWithMethod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        free(returnType);</span><br><span class="line">        <span class="keyword">if</span>(imp) &#123;</span><br><span class="line">            <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            <span class="keyword">if</span>(extraAtgumentCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                arguments[<span class="number">0</span>] = method;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将class key selector imp method 参数 参数数量等信息交给父类处理</span></span><br><span class="line">            <span class="keyword">return</span> [<span class="keyword">super</span> initWithContainerClassID:containerClassID key:key implementation:imp selector:methogetName(method) extraArguments:arguments count:extraAtgumentCount];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            [<span class="keyword">self</span> release];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> release];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>由于KVC返回的类型为对象<code>(NSObject)</code>，所以需要对方法返回值类型分别进行判断从而为<code>Getter</code>赋值不同的函数指针。也即从<code>BOOL、double、int、CGSize</code>等普通类型转化为<code>NSNumber、NSValue、id</code>等对象类型的函数(指针)。</p>
<h4 id="2-在父类NSKeyValueAccessor中-对class-key-selector-imp-method-参数-参数数量等信息进行保存"><a href="#2-在父类NSKeyValueAccessor中-对class-key-selector-imp-method-参数-参数数量等信息进行保存" class="headerlink" title="2. 在父类NSKeyValueAccessor中, 对class key selector imp method 参数 参数数量等信息进行保存"></a>2. 在父类<code>NSKeyValueAccessor</code>中, 对<code>class key selector imp method</code> 参数 参数数量等信息进行保存</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">@implementation NSKeyValueAccessor</span><br><span class="line">- (id)initWithContainerClassID:(id)containerClassID key:(NSString *)key implementation:(IMP)implementation selector:(SEL)selector extraArguments:(void *[<span class="number">3</span>])extraArguments <span class="built_in">count</span>:(NSUInteger)<span class="built_in">count</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (self = [super init]) &#123;</span><br><span class="line">        <span class="variable">_containerClassID</span> = containerClassID;</span><br><span class="line">        <span class="variable">_key</span> = key.copy;</span><br><span class="line">        <span class="variable">_implementation</span> = implementation;</span><br><span class="line">        <span class="variable">_selector</span> = selector;</span><br><span class="line">        </span><br><span class="line">        NSUInteger hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (key) &#123;</span><br><span class="line">            hash = CFHash(key);</span><br><span class="line">        &#125;</span><br><span class="line">        hash ^= (NSUInteger)containerClassID;</span><br><span class="line">        <span class="variable">_hashValue</span> = hash;</span><br><span class="line">        <span class="variable">_extraArgumentCount</span> = <span class="built_in">count</span>;</span><br><span class="line">        <span class="variable">_extraArgument1</span> = extraArguments[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">_extraArgument1</span> == key) &#123;</span><br><span class="line">            <span class="variable">_extraArgument1</span> = <span class="variable">_key</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">_extraArgument2</span> = extraArguments[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">_extraArgument2</span> == key) &#123;</span><br><span class="line">            <span class="variable">_extraArgument2</span> = <span class="variable">_key</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">_extraArgument3</span> = extraArguments[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    return self;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<h3 id="NSKeyValueIvarGetter如何创建"><a href="#NSKeyValueIvarGetter如何创建" class="headerlink" title="NSKeyValueIvarGetter如何创建"></a>NSKeyValueIvarGetter如何创建</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)initWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key containerIsa:(Class)containerIsa ivar:(Ivar)ivar &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *ivarEncoding = ivar_getTypeEncoding(ivar);</span><br><span class="line">    IMP imp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">switch</span> (ivarEncoding[<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'#'</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'@'</span>: &#123;</span><br><span class="line">            objc_ivar_memory_management_t mngment = objc_ivar_memoryUnknown;<span class="comment">//_class_getIvarMemoryManagement(containerIsa, ivar);</span></span><br><span class="line">            <span class="keyword">if</span>(mngment &lt; objc_ivar_memoryWeak) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 id _NSGetObjectGetAssignValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">                 return *(id *)object_getIvarAddress(object, ivar);</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetObjectGetAssignValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (mngment == objc_ivar_memoryWeak) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 id _NSGetObjectGetWeakValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">                 return objc_loadWeak((id *)object_getIvarAddress(object, ivar));</span></span><br><span class="line"><span class="comment">                 &#125;</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                imp = (IMP)_NSGetObjectGetWeakValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mngment == objc_ivar_memoryUnretained) &#123;</span><br><span class="line">                imp = (IMP)_NSGetObjectGetAssignValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                imp = (IMP)_NSGetObjectGetIvarValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'C'</span>: &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             NSNumber * _NSGetUnsignedCharValueInIvar(id object, SEL selector, Ivar ivar) &#123;</span></span><br><span class="line"><span class="comment">             unsigned char value = *(unsigned char *)object_getIvarAddress(object, ivar);</span></span><br><span class="line"><span class="comment">             return [[[NSNumber alloc] initWithUnsignedChar:value] autorelease];</span></span><br><span class="line"><span class="comment">             &#125;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            imp = (IMP)_NSGetUnsignedCharValueInIvar;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'B'</span>: &#123;imp = (IMP)_NSGetBoolValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'I'</span>: &#123;imp = (IMP)_NSGetUnsignedIntValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'L'</span>: &#123;imp = (IMP)_NSGetUnsignedLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'Q'</span>: &#123;imp = (IMP)_NSGetUnsignedLongLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'S'</span>: &#123;imp = (IMP)_NSGetUnsignedShortValueInIvar;&#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'&#123;'</span>: &#123;</span><br><span class="line">            <span class="keyword">char</span>* idx = index(ivarEncoding, <span class="string">'='</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                imp = (IMP)_NSGetValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGPoint</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetPointValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">NSRange</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetRangeValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGRect</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetRectValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (strncmp(ivarEncoding, <span class="keyword">@encode</span>(<span class="built_in">CGSize</span>), idx - ivarEncoding) == <span class="number">0</span>)&#123;</span><br><span class="line">                imp = (IMP)_NSGetSizeValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                imp = (IMP)_NSGetValueInIvar;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>: &#123;imp = (IMP)_NSGetCharValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>: &#123;imp = (IMP)_NSGetDoubleValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'f'</span>: &#123;imp = (IMP)_NSGetFloatValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'i'</span>: &#123;imp = (IMP)_NSGetIntValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'l'</span>: &#123;imp = (IMP)_NSGetLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'q'</span>: &#123;imp = (IMP)_NSGetLongLongValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'s'</span>: &#123;imp = (IMP)_NSGetShortValueInIvar;&#125;<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(imp) &#123;</span><br><span class="line">        <span class="keyword">void</span> *arguments[<span class="number">3</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        arguments[<span class="number">0</span>] = ivar;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> initWithContainerClassID:containerClassID key:key implementation:imp selector:<span class="literal">NULL</span> extraArguments:arguments count:<span class="number">1</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> release];</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样地，判断实例变量的类型编码，进而赋值不同的IMP。</p>
<h3 id="怎么根据Getter取值"><a href="#怎么根据Getter取值" class="headerlink" title="怎么根据Getter取值"></a>怎么根据Getter取值</h3><h4 id="1-线程校验"><a href="#1-线程校验" class="headerlink" title="1. 线程校验"></a>1. 线程校验</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">void NSKeyValueObservingAssertRegistrationLockNotHeld() &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">_NSKeyValueObserverRegistrationEnableLockingAssertions</span> &amp;&amp; <span class="variable">_NSKeyValueObserverRegistrationLockOwner</span> == pthreaself()) &#123;</span><br><span class="line">        <span class="built_in">assert</span>(pthreaself() != <span class="variable">_NSKeyValueObserverRegistrationLockOwner</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-直接调用Getter中存储的方法实现-getter-implementation"><a href="#2-直接调用Getter中存储的方法实现-getter-implementation" class="headerlink" title="2. 直接调用Getter中存储的方法实现(getter.implementation)"></a>2. 直接调用Getter中存储的方法实现(getter.implementation)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> _NSGetUsingKeyValueGetter(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueGetter</span> *<span class="keyword">getter</span>) &#123;</span><br><span class="line">    <span class="comment">// 线程判断</span></span><br><span class="line">    <span class="built_in">NSKeyValueObservingAssertRegistrationLockNotHeld</span>();</span><br><span class="line">    <span class="comment">// 根据其他参数数量extraArgumentCount分别进行函数调用</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">getter</span>.extraArgumentCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1, <span class="keyword">getter</span>.extraArgument2);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">            <span class="keyword">return</span> ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">void</span>*,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">getter</span>.implementation )(object,<span class="keyword">getter</span>.selector, <span class="keyword">getter</span>.extraArgument1, <span class="keyword">getter</span>.extraArgument2, <span class="keyword">getter</span>.extraArgument3);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="valueForKeyPath"><a href="#valueForKeyPath" class="headerlink" title="valueForKeyPath:"></a>valueForKeyPath:</h2><p>假定这里的keyPath为<code>@&quot;key1.key2.key3.key4&quot;</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span>(keyPath) &#123;</span><br><span class="line">        <span class="comment">// 字符串编码判断</span></span><br><span class="line">        <span class="built_in">CFStringEncoding</span> encoding = __CFDefaultEightBitStringEncoding;</span><br><span class="line">        <span class="keyword">if</span>(encoding == kCFStringEncodingInvalidId) &#123;</span><br><span class="line">            <span class="comment">// 编码无效 kCFStringEncodingInvalidId就是 (0xffffffffU)</span></span><br><span class="line">            encoding = __CFStringComputeEightBitStringEncoding();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建C字符串: "key1.key2.key3.key4"</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *cStr = <span class="built_in">CFStringGetCStringPtr</span>((<span class="built_in">CFStringRef</span>)keyPath, encoding);</span><br><span class="line">        <span class="keyword">if</span>(cStr) &#123;</span><br><span class="line">            <span class="comment">// memchr函数:从头开始搜寻s 所指的内存内容前n 个字节，直到发现第一个值为c 的字节，则返回指向该字节的指针</span></span><br><span class="line">            <span class="comment">// 所以最后获取到包含'点符号'的后部分 即firstDotPointers为 ".key2.key3.key4"</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *firstDotPointer = memchr(cStr, <span class="string">'.'</span>, keyPath.length);</span><br><span class="line">            <span class="keyword">if</span>(firstDotPointer) &#123;</span><br><span class="line">                <span class="comment">// 这里的subKey是 "key1"</span></span><br><span class="line">                <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, firstDotPointer - cStr)] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="comment">// 这里的subKeyPathLeft是 "key2.key3.key4"</span></span><br><span class="line">                <span class="built_in">NSString</span> *subKeyPathLeft =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(firstDotPointer - cStr + <span class="number">1</span>, keyPath.length -  (firstDotPointer - cStr + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="comment">// 先获取到subKey的结果, 然后用它的结果再求subKeyPathLeft, 进入递归中</span></span><br><span class="line">                <span class="keyword">id</span> value = [[<span class="keyword">self</span> valueForKey:subKey] valueForKeyPath:subKeyPathLeft];</span><br><span class="line">                [subKey release];</span><br><span class="line">                [subKeyPathLeft release];</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// firstDotPointer不存在, 说明keyPath中没有'点符号', 则直接调用valueForKey</span></span><br><span class="line">                <span class="keyword">return</span> [<span class="keyword">self</span> valueForKey:keyPath];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 走到这里, 上面代码没有return, 说明keyPath为nil或者cStr为nil</span></span><br><span class="line">    <span class="built_in">NSRange</span> range = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">    <span class="keyword">if</span>(range.length) &#123;</span><br><span class="line">        <span class="comment">// range.length不为0, 也即keyPath中有'点符号'</span></span><br><span class="line">        <span class="comment">// subKey为"key1"</span></span><br><span class="line">        <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, range.location)] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="comment">// subKeyPathLeft为"key2.key3.key4"</span></span><br><span class="line">        <span class="built_in">NSString</span> *subKeyPathLeft =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(range.location + <span class="number">1</span>, keyPath.length -  (range.location + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="comment">// 同样的, 先获取到subKey的结果, 然后用它的结果再求subKeyPathLeft, 进入递归中</span></span><br><span class="line">        <span class="keyword">id</span> value = [[<span class="keyword">self</span> valueForKey:subKey] valueForKeyPath:subKeyPathLeft];</span><br><span class="line">        [subKey release];</span><br><span class="line">        [subKeyPathLeft release];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// keyPath为nil或者keyPath中没有'点符号', 直接调用valueForKey</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> valueForKey:keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里就有一个问题了，相似的把keyPath拆分逻辑的逻辑为啥要写两个，一个转为C字符串拆分，一个直接拆分?  揣测两者的区别主要是对字符串编码的判断。</p>
<h1 id="三、设值"><a href="#三、设值" class="headerlink" title="三、设值"></a>三、设值</h1><p>设值的流程就比较简单了。</p>
<blockquote>
<p>The default implementation of this method does the following:</p>
<ol>
<li><p>Searches the class of the receiver for an accessor method whose name matches the pattern <code>-set&lt;Key&gt;:</code>. If such a method is found the type of its parameter is checked. If the parameter type is not an object pointer type but the value is nil <code>-setNilValueForKey:</code> is invoked. The default implementation of <code>-setNilValueForKey:</code> raises an NSInvalidArgumentException, but you can override it in your application. Otherwise, if the type of the method’s parameter is an object pointer type the method is simply invoked with the value as the argument. If the type of the method’s parameter is some other type the inverse of the NSNumber/NSValue conversion done by <code>-valueForKey:</code> is performed before the method is invoked.</p>
</li>
<li><p>Otherwise (no accessor method is found), if the receiver’s class’ <code>+accessInstanceVariablesDirectly</code> property returns YES, searches the class of the receiver for an instance variable whose name matches the pattern <code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, or is&lt;Key&gt;</code>, in that order. If such an instance variable is found and its type is an object pointer type the value is retained and the result is set in the instance variable, after the instance variable’s old value is first released. If the instance variable’s type is some other type its value is set after the same sort of conversion from NSNumber or NSValue as in step 1.</p>
</li>
<li><p>Otherwise (no accessor method or instance variable is found), invokes <code>-setValue:forUndefinedKey:</code>. The default implementation of <code>-setValue:forUndefinedKey:</code> raises an NSUndefinedKeyException, but you can override it in your application.</p>
</li>
</ol>
<p>Compatibility notes:</p>
<ul>
<li>For backward binary compatibility with <code>-takeValue:forKey:</code>‘s behavior, a method whose name matches the pattern <code>-_set&lt;Key&gt;:</code> is also recognized in step 1. KVC accessor methods whose names start with underscores were deprecated as of Mac OS 10.3 though.</li>
<li>For backward binary compatibility, -unableToSetNilForKey: will be invoked instead of <code>-setNilValueForKey:</code> in step 1, if the implementation of <code>-unableToSetNilForKey:</code> in the receiver’s class is not NSObject’s.</li>
<li>The behavior described in step 2 is different from <code>-takeValue:forKey:</code>‘s, in which the instance variable search order is <code>&lt;key&gt;, _&lt;key&gt;</code>.</li>
<li>For backward binary compatibility with <code>-takeValue:forKey:</code>‘s behavior, <code>-handleTakeValue:forUnboundKey:</code> will be invoked instead of <code>-setValue:forUndefinedKey:</code> in step 3, if the implementation of <code>-handleTakeValue:forUnboundKey:</code> in the receiver’s class is not NSObject’s.</li>
</ul>
</blockquote>
<p>翻译如下：<br>这个方法的默认实现是这样的：</p>
<ol>
<li>搜索该类名称为<code>-set&lt;Key&gt;:</code>的存取器方法，如果找到，检查其参数类型。如果参数为<code>nil</code>，<code>-setNilValueForKey:</code>方法将会被调用。这个方法的默认实现是抛出<code>NSInvalidArgumentException</code>异常，不过你可以重写该方法自行实现。如果参数类型为对象类型，该存取器方法会被直接调用，这个参数也会被直接使用。如果参数能被转化为<code>NSNumber/NSValue</code>类型，参数会在存取器方法被调用之前进行转换。</li>
<li>如果存取器方法没有被找到，倘若此时消息接收者的<code>+accessInstanceVariablesDirectly</code>属性返回的是<code>YES</code>，那么按照<code>_&lt;key&gt;, _is&lt;Key&gt;, &lt;key&gt;, is&lt;Key&gt;</code>的顺序搜索该类的实例变量。如果找到这个实例变量，当其为对象类型时，该实例变量会在旧值释放之后被设置新值。当其为其他类型时，那么按照步骤1中的类型转换规则设置这个实例变量的值。</li>
<li>如果存取器方法和实例变量都没有被找到，<code>-setValue:forUndefinedKey:</code>方法将会被调用。这个方法的默认实现是抛出<code>NSUndefinedKeyException</code>异常，不过你可以重写该方法自行实现。</li>
</ol>
<p>兼容性：</p>
<ul>
<li>为了向后兼容<code>-takeValue:forKey:</code>，名称为<code>-_set&lt;Key&gt;:</code>的方法也会在步骤1中被查找。</li>
<li>如果<code>-unableToSetNilForKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-unableToSetNilForKey:</code>方法），那在步骤1中，<code>-unableToSetNilForKey:</code>方法将会代替<code>-setNilValueForKey:</code>方法被调用。</li>
<li>对于<code>-takeValue:forKey:</code>，其实例变量的查找顺序不同于步骤2所描述的，调用它时，实例变量查找顺序是<code>&lt;key&gt;, _&lt;key&gt;</code>。</li>
<li>为了向后兼容<code>-takeValue:forKey:</code>，如果<code>-handleTakeValue:forUnboundKey:</code>的实现不是<code>NSObject</code>的默认实现（换句话说，自己手动实现了<code>-handleTakeValue:forUnboundKey:</code>方法），那在步骤3中，<code>-handleTakeValue:forUnboundKey:</code>方法将会代替<code>-setValue:forUndefinedKey:</code>方法被调用。</li>
</ul>
<p>流程图如下：<br><img src="https://image.chenyalun.com/2019/05/05/002.png" alt></p>
<h2 id="setValue"><a href="#setValue" class="headerlink" title="setValue:"></a>setValue:</h2><h3 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一"></a>方法一</h3><p>这里使用<code>NSKeyValueCachedSetters</code>缓存<code>setter</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假定key为@"name"</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="comment">// 加锁</span></span><br><span class="line">        OSSpinLockLock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">NSKeyValueCachedSetters</span>) &#123;</span><br><span class="line">            <span class="built_in">CFSetCallBacks</span> callbacks = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">            callbacks.version = kCFTypeSetCallBacks.version;</span><br><span class="line">            callbacks.retain = kCFTypeSetCallBacks.retain;</span><br><span class="line">            callbacks.release = kCFTypeSetCallBacks.release;</span><br><span class="line">            callbacks.copyDescription = kCFTypeSetCallBacks.copyDescription;</span><br><span class="line">            callbacks.equal = (<span class="built_in">CFSetEqualCallBack</span>)<span class="built_in">NSKeyValueAccessorIsEqual</span>;</span><br><span class="line">            callbacks.hash = (<span class="built_in">CFSetHashCallBack</span>)<span class="built_in">NSKeyValueAccessorHash</span>;</span><br><span class="line">            <span class="built_in">NSKeyValueCachedSetters</span> = <span class="built_in">CFSetCreateMutable</span>(<span class="literal">NULL</span>,<span class="number">0</span>,&amp;callbacks);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSKeyValueSetter</span> *finder = [<span class="built_in">NSKeyValueSetter</span> new];</span><br><span class="line">        finder.containerClassID = object_getClass(<span class="keyword">self</span>);</span><br><span class="line">        finder.key = key;</span><br><span class="line">        finder.hashValue = <span class="built_in">CFHash</span>((<span class="built_in">CFTypeRef</span>)key) ^ (<span class="built_in">NSUInteger</span>)(object_getClass(<span class="keyword">self</span>));</span><br><span class="line">        <span class="comment">// 缓存中取Setter</span></span><br><span class="line">        <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> =  <span class="built_in">CFSetGetValue</span>(<span class="built_in">NSKeyValueCachedSetters</span>, (<span class="keyword">void</span> *)finder);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">setter</span>) &#123;</span><br><span class="line">            <span class="keyword">setter</span> = [object_getClass(<span class="keyword">self</span>) _createValueSetterWithContainerClassID:object_getClass(<span class="keyword">self</span>) key:key];</span><br><span class="line">            <span class="built_in">CFSetAddValue</span>(<span class="built_in">NSKeyValueCachedSetters</span>, (<span class="keyword">void</span>*)<span class="keyword">setter</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解锁</span></span><br><span class="line">        OSSpinLockUnlock(&amp;<span class="built_in">NSKeyValueCachedAccessorSpinLock</span>);</span><br><span class="line">        <span class="comment">// 设值</span></span><br><span class="line">        _NSSetUsingKeyValueSetter(<span class="keyword">self</span>,<span class="keyword">setter</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"%@: attempt to set a value for a nil key"</span>,_NSMethodExceptionProem(<span class="keyword">self</span>,_cmd)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二"></a>方法二</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSKeyValueSetter</span> *)_createValueSetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> key_cstr_len = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 首字符大写的key</span></span><br><span class="line">    <span class="keyword">char</span> key_cstr_upfirst[key_cstr_len + <span class="number">1</span>];</span><br><span class="line">    [key getCString:key_cstr_upfirst maxLength:key_cstr_len + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">if</span> (key.length) &#123;</span><br><span class="line">        key_cstr_upfirst[<span class="number">0</span>] = toupper(key_cstr_upfirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 原来的key</span></span><br><span class="line">    <span class="keyword">char</span> key_cstr[key_cstr_len + <span class="number">1</span>];</span><br><span class="line">    [key getCString:key_cstr maxLength:key_cstr_len + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    Method method = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">// 查找方法顺序, 假定key为@"name"</span></span><br><span class="line">    <span class="comment">// setName: ==&gt; _setName: ==&gt; setIsName:</span></span><br><span class="line">    <span class="keyword">if</span> ((method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"set%s:"</span>, key_cstr_upfirst)) ||</span><br><span class="line">        (method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"_set%s:"</span>, key_cstr_upfirst)) ||</span><br><span class="line">        (method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>, <span class="string">"setIs%s:"</span>, key_cstr_upfirst))</span><br><span class="line">        ) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueMethodSetter</span> alloc] initWithContainerClassID:containerClassID key:key method:method];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">        Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">// 允许直接访问实例变量, 查找顺序为: _name ==&gt; _isName ==&gt; name ==&gt; isName</span></span><br><span class="line">        <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, key_cstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, key_cstr_upfirst)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, key_cstr)) ||</span><br><span class="line">            (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, key_cstr_upfirst))</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueIvarSetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">setter</span>) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [<span class="keyword">self</span> _createValuePrimitiveSetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">setter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法三-1"><a href="#方法三-1" class="headerlink" title="方法三"></a>方法三</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">NSKeyValueSetter</span> *)_createValuePrimitiveSetterWithContainerClassID:(<span class="keyword">id</span>)containerClassID key:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span> = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> keyCstrLen = [key lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="keyword">char</span> keyCstrUpFirst[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    [key getCString:keyCstrUpFirst maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(key.length) &#123;</span><br><span class="line">        keyCstrUpFirst[<span class="number">0</span>] = toupper(keyCstrUpFirst[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> keyCstr[keyCstrLen + <span class="number">1</span>];</span><br><span class="line">    [key getCString:keyCstr maxLength:keyCstrLen + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">    <span class="comment">// 假定key为@"name", 查询 setPrimitiveName:方法</span></span><br><span class="line">    Method method = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>,<span class="string">"setPrimitive%s:"</span>,keyCstrUpFirst);</span><br><span class="line">    <span class="keyword">if</span>(method) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueMethodSetter</span> alloc] initWithContainerClassID:containerClassID key:key method:method];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>([<span class="keyword">self</span> accessInstanceVariablesDirectly]) &#123;</span><br><span class="line">            Ivar ivar = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">if</span> ((ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_%s"</span>, keyCstr)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"_is%s"</span>, keyCstrUpFirst)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"%s"</span>, keyCstr)) ||</span><br><span class="line">                (ivar = <span class="built_in">NSKeyValueIvarForPattern</span>(<span class="keyword">self</span>, <span class="string">"is%s"</span>, keyCstrUpFirst))</span><br><span class="line">                ) &#123;</span><br><span class="line">                <span class="keyword">setter</span> = [[<span class="built_in">NSKeyValueIvarSetter</span> alloc] initWithContainerClassID:containerClassID key:key containerIsa:<span class="keyword">self</span> ivar:ivar];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">setter</span>) &#123;</span><br><span class="line">        <span class="keyword">setter</span> = [<span class="keyword">self</span> _createOtherValueSetterWithContainerClassID:containerClassID key:key];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">setter</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法四-1"><a href="#方法四-1" class="headerlink" title="方法四"></a>方法四</h3><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">+ (NSKeyValueSetter *)<span class="string">_createOtherValueSetterWithContainerClassID:</span>(id)containerClassID <span class="string">key:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [[NSKeyValueUndefinedSetter alloc] <span class="string">initWithContainerClassID:</span>containerClassID <span class="string">key:</span>key <span class="string">containerIsa:</span>self];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="怎么根据Setter设值"><a href="#怎么根据Setter设值" class="headerlink" title="怎么根据Setter设值"></a>怎么根据Setter设值</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _NSSetUsingKeyValueSetter(<span class="keyword">id</span> object, <span class="built_in">NSKeyValueSetter</span> *<span class="keyword">setter</span>, <span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">setter</span>.extraArgumentCount) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector,value);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1, <span class="keyword">setter</span>.extraArgument2);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: &#123;</span><br><span class="line">            ( (<span class="keyword">id</span> (*)(<span class="keyword">id</span>,SEL,<span class="keyword">id</span>,<span class="keyword">void</span>*,<span class="keyword">void</span>*,<span class="keyword">void</span>*))<span class="keyword">setter</span>.implementation )(object,<span class="keyword">setter</span>.selector, value, <span class="keyword">setter</span>.extraArgument1, <span class="keyword">setter</span>.extraArgument2, <span class="keyword">setter</span>.extraArgument3);</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>直接调用Setter中存储的方法实现(getter.implementation)。</p>
<h2 id="setValue-forKeyPath"><a href="#setValue-forKeyPath" class="headerlink" title="setValue:forKeyPath:"></a>setValue:forKeyPath:</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span>(keyPath) &#123;</span><br><span class="line">        <span class="built_in">CFStringEncoding</span> encoding = __CFDefaultEightBitStringEncoding;</span><br><span class="line">        <span class="keyword">if</span>(encoding == kCFStringEncodingInvalidId) &#123;</span><br><span class="line">            encoding = __CFStringComputeEightBitStringEncoding();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *keyPathCStr = <span class="built_in">CFStringGetCStringPtr</span>((<span class="built_in">CFStringRef</span>)keyPath, encoding);</span><br><span class="line">        <span class="keyword">if</span>(keyPathCStr) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *firstDotPointer = memchr(keyPathCStr, <span class="string">'.'</span>, keyPath.length);</span><br><span class="line">            <span class="keyword">if</span>(firstDotPointer) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, firstDotPointer - keyPathCStr)] <span class="keyword">retain</span>];</span><br><span class="line">                <span class="built_in">NSString</span> *subKeyPathAfterDot =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(firstDotPointer - keyPathCStr + <span class="number">1</span>, keyPath.length -  (firstDotPointer - keyPathCStr + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">                </span><br><span class="line">                [[<span class="keyword">self</span> valueForKey:subKey] setValue:value forKeyPath:subKeyPathAfterDot];</span><br><span class="line">                </span><br><span class="line">                [subKey release];</span><br><span class="line">                [subKeyPathAfterDot release];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                [<span class="keyword">self</span> setValue:value forKey:keyPath];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSRange</span> dotRange = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">    <span class="keyword">if</span>(dotRange.length) &#123;</span><br><span class="line">        <span class="built_in">NSString</span> *subKey =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, dotRange.location)] <span class="keyword">retain</span>];</span><br><span class="line">        <span class="built_in">NSString</span> *subKeyPathAfterDot =  [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(dotRange.location + <span class="number">1</span>, keyPath.length -  (dotRange.location + <span class="number">1</span>))] <span class="keyword">retain</span>];</span><br><span class="line">        </span><br><span class="line">        [[<span class="keyword">self</span> valueForKey:subKey] setValue:value forKeyPath:subKeyPathAfterDot];</span><br><span class="line">        </span><br><span class="line">        [subKey release];</span><br><span class="line">        [subKeyPathAfterDot release];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         [<span class="keyword">self</span> setValue:value forKey:keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本是与取值类似的逻辑。</p>
<h1 id="四、集合对象的KVC"><a href="#四、集合对象的KVC" class="headerlink" title="四、集合对象的KVC"></a>四、集合对象的KVC</h1><h2 id="NSArray的KVC"><a href="#NSArray的KVC" class="headerlink" title="NSArray的KVC"></a>NSArray的KVC</h2><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line"><span class="comment">// 返回Array内每个对象的“key”对应值组成的数组</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="comment">// 如果keyPath中包含集合运算符, 则返回运算结果, 否则返回Array内每个对象的“keyPath”对应值组成的数组</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line"><span class="comment">// 设置Array里每个对象的key对应值为value</span></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *operationKey = <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// 集合运算符:如@count, @firstObject, @lastObject等</span></span><br><span class="line">    <span class="keyword">if</span> (key.length &amp;&amp; [key characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span> &amp;&amp; (operationKey = [key substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, key.length - <span class="number">1</span>)])) &#123;</span><br><span class="line">        <span class="comment">// 去掉'@'便是operationKey</span></span><br><span class="line">        <span class="keyword">id</span> value =  [<span class="keyword">super</span> valueForKey:operationKey];</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建与自身相等数量的array</span></span><br><span class="line">        <span class="keyword">id</span> *objectsBuff = <span class="built_in">NSAllocateObjectArray</span>(<span class="keyword">self</span>.count);</span><br><span class="line">        <span class="comment">// 现在, 指针p与指针objectsBuff指向一致</span></span><br><span class="line">        <span class="keyword">id</span> *p = objectsBuff;</span><br><span class="line">        <span class="comment">// 遍历自身</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">            <span class="comment">// 取出容器中的元素对应的value</span></span><br><span class="line">            <span class="keyword">id</span> eachValue = [object valueForKey:key];</span><br><span class="line">            <span class="comment">// 如果eachValue不存在, 则p的next指针指向的对象设置成 NSNull实例对象</span></span><br><span class="line">            <span class="comment">// 如果eachValue有值, 则p的next指针指向的对象设置为eachValue</span></span><br><span class="line">            *(p++) = (eachValue ? : [<span class="built_in">NSNull</span> null]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据objectsBuff创建一个数组, 这个objectsBuff就是'eachValue'的集合</span></span><br><span class="line">        <span class="comment">// 也即假定key为@"name", 遍历容器中所有元素, 取出每个元素key为@"name"对应的值, 这些值的集合就是数组arrayValue</span></span><br><span class="line">        <span class="built_in">NSArray</span> *arrayValue = [[[<span class="built_in">NSArray</span> alloc] initWithObjects:objectsBuff count:<span class="keyword">self</span>.count] autorelease];</span><br><span class="line">        <span class="comment">// 释放objectsBuff</span></span><br><span class="line">        <span class="built_in">NSFreeObjectArray</span>(objectsBuff);</span><br><span class="line">        <span class="keyword">return</span> arrayValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)valueForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="comment">// 集合运算符: 如@count, @firstObject, @"@unionOfObjects.friend.name"等</span></span><br><span class="line">    <span class="comment">// 这里以 @"@unionOfObjects.friend"为例</span></span><br><span class="line">    <span class="keyword">if</span>(keyPath.length &amp;&amp; [keyPath characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span>) &#123;</span><br><span class="line">        <span class="comment">// 说明keyPath中有'@符号', 且'@符号'在第0个位置处</span></span><br><span class="line">        <span class="built_in">NSRange</span> dotRange = [keyPath rangeOfString:<span class="string">@"."</span> options:<span class="built_in">NSLiteralSearch</span> range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, keyPath.length)];</span><br><span class="line">        <span class="keyword">if</span>(dotRange.length) &#123;</span><br><span class="line">            <span class="comment">// dotRange.length不为0, 说明keyPath中有'@符号', 而且还有'点符号'</span></span><br><span class="line">            <span class="comment">// 取出包含运算符的那部分,如 @"unionOfObjects"</span></span><br><span class="line">            <span class="built_in">NSString</span> *operator = [keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, dotRange.location)];</span><br><span class="line">            <span class="comment">// 取出除运算符之外的那部分,如 @"friend"</span></span><br><span class="line">            <span class="built_in">NSString</span> *keyPathForOperator = [keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(dotRange.location + <span class="number">1</span>, keyPath.length - (dotRange.location + <span class="number">1</span>))];</span><br><span class="line">            <span class="keyword">if</span>(keyPathForOperator) &#123;</span><br><span class="line">                <span class="comment">// 说明含运算符的那部分如 @"unionOfObjects" 和除运算符之外的那部分如 @"friend" 都存在</span></span><br><span class="line">                <span class="built_in">NSUInteger</span> operatorCStrLength = [operator lengthOfBytesUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                <span class="keyword">char</span> operatorCStr[operatorCStrLength + <span class="number">1</span>];</span><br><span class="line">                <span class="comment">// 转为C字符串operatorCStr, 也即 @"unionOfObjects" 转为 "unionOfObjects"</span></span><br><span class="line">                [operator getCString:operatorCStr maxLength:operatorCStrLength + <span class="number">1</span> encoding:<span class="built_in">NSUTF8StringEncoding</span>];</span><br><span class="line">                <span class="comment">// 查找方法, 即: "unionOfObjectsForKeyPath:"</span></span><br><span class="line">                Method operatorMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>.class, <span class="string">"%sForKeyPath:"</span>, operatorCStr);</span><br><span class="line">                <span class="keyword">if</span>(!operatorMethod) &#123;</span><br><span class="line">                    <span class="comment">// 上面的方法没找到, 就查找带下划线的那个: "_unionOfObjectsForKeyPath:"</span></span><br><span class="line">                    operatorMethod = <span class="built_in">NSKeyValueMethodForPattern</span>(<span class="keyword">self</span>.class, <span class="string">"_%sForKeyPath:"</span>, operatorCStr);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (operatorMethod) &#123;</span><br><span class="line">                    <span class="comment">// 查找成功, 调用运算符对应的方法</span></span><br><span class="line">                    <span class="keyword">id</span> value = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>,Method,<span class="built_in">NSString</span> *))methoinvoke)(<span class="keyword">self</span>,operatorMethod,keyPathForOperator);</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 没有找到, 说明是不支持的运算符</span></span><br><span class="line">                    [<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"[&lt;%@ %p&gt; valueForKeyPath:]: this class does not implement the %@ operation."</span>, <span class="keyword">self</span>.class,<span class="keyword">self</span>,operator];</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 说明只有包含运算符的那部分如 @"friend", 走NSObject的valueForKey逻辑</span></span><br><span class="line">                <span class="keyword">id</span> value = [<span class="keyword">super</span> valueForKey:operator];</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// keyPath中有'@符号', 但是没有'点符号', 取出除'@符号'之外的key</span></span><br><span class="line">            <span class="built_in">NSString</span> *key = [[keyPath substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, keyPath.length - <span class="number">1</span>)] <span class="keyword">retain</span>];</span><br><span class="line">            <span class="comment">// 走NSObject的valueForKey逻辑</span></span><br><span class="line">            <span class="keyword">id</span> value = [<span class="keyword">super</span> valueForKey:key];</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有'@符号',可能有'点符号', 走NSObject的valueForKeyPath逻辑</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> valueForKeyPath: keyPath];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> object <span class="keyword">in</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 对容器内的每一个元素都设值</span></span><br><span class="line">        [object setValue:value forKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @sum.keyPath, 例如 @"@sum.price", 传递到这个方法中, 参数keyPath为@"price"</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_sumForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSDecimal</span> resultDecimal = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">NSDecimalNumber</span> *zero = [<span class="built_in">NSDecimalNumber</span> zero];</span><br><span class="line">    <span class="keyword">if</span> (zero) resultDecimal = [zero decimalValue];</span><br><span class="line">    <span class="comment">// 这里使用NSDecimalNumber 保证精确度</span></span><br><span class="line">    <span class="built_in">NSDecimal</span> eachDecimal = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="comment">// 获取每个对象的keyPath(如@"price")对应值</span></span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            eachDecimal = [eachValue decimalValue];</span><br><span class="line">            <span class="comment">// 累加</span></span><br><span class="line">            <span class="built_in">NSDecimalAdd</span>(&amp;resultDecimal, &amp;resultDecimal, &amp;eachDecimal, <span class="built_in">NSRoundBankers</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDecimalNumber</span> decimalNumberWithDecimal:resultDecimal];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求平均值"><a href="#求平均值" class="headerlink" title="求平均值"></a>求平均值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求平均值</span></span><br><span class="line"><span class="comment">// @avg.keyPath</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_avgForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.count) &#123;</span><br><span class="line">        <span class="comment">//总和 / 对象数</span></span><br><span class="line">        <span class="keyword">return</span> [(<span class="built_in">NSDecimalNumber</span>*)[<span class="keyword">self</span> _sumForKeyPath:keyPath]  decimalNumberByDividingBy:(<span class="built_in">NSDecimalNumber</span>*)[<span class="built_in">NSDecimalNumber</span> numberWithUnsignedInteger:<span class="keyword">self</span>.count]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求数量"><a href="#求数量" class="headerlink" title="求数量"></a>求数量</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取对象数目</span></span><br><span class="line"><span class="comment">// @count</span></span><br><span class="line">- (<span class="built_in">NSNumber</span> *)_countForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSNumber</span> numberWithInteger:<span class="keyword">self</span>.count];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求最大值"><a href="#求最大值" class="headerlink" title="求最大值"></a>求最大值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求最大值</span></span><br><span class="line"><span class="comment">// @max.keyPath</span></span><br><span class="line">- (<span class="keyword">id</span>)_maxForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">id</span> maxValue = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!maxValue) &#123;</span><br><span class="line">                maxValue = eachValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([maxValue compare:eachValue] == <span class="built_in">NSOrderedAscending</span>)&#123;</span><br><span class="line">                maxValue = eachValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="求最小值"><a href="#求最小值" class="headerlink" title="求最小值"></a>求最小值</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对 Array中每个对象的keyPath对应值 求最小值</span></span><br><span class="line"><span class="comment">// @min.keyPath</span></span><br><span class="line">- (<span class="keyword">id</span>)_minForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="keyword">id</span> minValue = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!minValue) &#123;</span><br><span class="line">                minValue = eachValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([minValue compare:eachValue] == <span class="built_in">NSOrderedDescending</span>)&#123;</span><br><span class="line">                minValue = eachValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> minValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取数组"><a href="#获取数组" class="headerlink" title="获取数组"></a>获取数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应值 组成数组</span></span><br><span class="line"><span class="comment">// @unionOfObjects.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfObjectsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObject:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取去重数组"><a href="#获取去重数组" class="headerlink" title="获取去重数组"></a>获取去重数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应值 组成去重数组</span></span><br><span class="line"><span class="comment">// @distinctUnionOfObjects.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfObjectsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *unionArray = [<span class="keyword">self</span> _unionOfObjectsForKeyPath:keyPath];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithArray:unionArray].allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取成员数组"><a href="#获取成员数组" class="headerlink" title="获取成员数组"></a>获取成员数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应数组的每个成员 组成数组 这里每个keyPath对应值是也是数组，获取的是每个数组展开后组成的总数组</span></span><br><span class="line"><span class="comment">// @unionOfArrays.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfArraysForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObjectsFromArray:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取去重的成员数组"><a href="#获取去重的成员数组" class="headerlink" title="获取去重的成员数组"></a>获取去重的成员数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应数组的每个成员 组成的去重复数组.</span></span><br><span class="line"><span class="comment">// @distinctUnionOfArrays.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfArraysForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSArray</span> *unionArray = [<span class="keyword">self</span> _unionOfArraysForKeyPath:keyPath];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithArray:unionArray].allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取集合数组"><a href="#获取集合数组" class="headerlink" title="获取集合数组"></a>获取集合数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应集合的每个成员 组成的数组. 这里每个keyPath对应值是是集合，获取的是每个集合展开后组成的总数组</span></span><br><span class="line"><span class="comment">// @unionOfSets.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_unionOfSetsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *unionArray = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionArray addObjectsFromArray:[eachValue allObjects]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取去重的集合数组"><a href="#获取去重的集合数组" class="headerlink" title="获取去重的集合数组"></a>获取去重的集合数组</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 Array中每个对象的keyPath对应集合的每个成员 组成的去重复数组.</span></span><br><span class="line"><span class="comment">// @distinctUnionOfSets.keyPath</span></span><br><span class="line">- (<span class="built_in">NSArray</span> *)_distinctUnionOfSetsForKeyPath:(<span class="built_in">NSString</span> *)keyPath &#123;</span><br><span class="line">    <span class="built_in">NSMutableSet</span> *unionSet = [<span class="built_in">NSMutableSet</span> setWithCapacity:<span class="keyword">self</span>.count];</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i=<span class="number">0</span>; i&lt;<span class="keyword">self</span>.count; ++i) &#123;</span><br><span class="line">        <span class="keyword">id</span> eachValue = [<span class="keyword">self</span> _valueForKeyPath:keyPath ofObjectAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (eachValue) &#123;</span><br><span class="line">            [unionSet unionSet:eachValue];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> unionSet.allObjects;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="NSSet的KVC"><a href="#NSSet的KVC" class="headerlink" title="NSSet的KVC"></a>NSSet的KVC</h2><p>与NSArray的逻辑基本保持一致。</p>
<h2 id="NSOrderedSet的KVC"><a href="#NSOrderedSet的KVC" class="headerlink" title="NSOrderedSet的KVC"></a>NSOrderedSet的KVC</h2><p>与NSArray的逻辑基本保持一致。</p>
<h2 id="NSDictionary的KVC"><a href="#NSDictionary的KVC" class="headerlink" title="NSDictionary的KVC"></a>NSDictionary的KVC</h2><p>与NSArray相比，主要区别在于：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">- (id)<span class="symbol">valueForKey:</span>(NSString *)key &#123;</span><br><span class="line">    NSString *operationKey = <span class="literal">nil</span>;</span><br><span class="line">    /<span class="regexp">/ key中包含'@字符', 且'@字符'在第0位, 如 @"@count"</span></span><br><span class="line"><span class="regexp">    if(key.length &amp;&amp; [key characterAtIndex:0] == '@' &amp;&amp; (operationKey = [key substringWithRange:NSMakeRange(1, key.length - 1)])) &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 此时, operationKey为 @"count"</span></span><br><span class="line"><span class="regexp">        return [super valueForKey:operationKey];</span></span><br><span class="line"><span class="regexp">    &#125; else &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/ 没有'@字符', 走字典的objectForKey逻辑</span></span><br><span class="line"><span class="regexp">        return [self objectForKey:key];</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>
<p><code>valueForKey:</code>取值逻辑多了对<code>@</code>字符的处理。</p>
<p><code>valueForKeyPath:</code>与NSArray的逻辑一致。</p>
<h1 id="五、其他分类的KVC"><a href="#五、其他分类的KVC" class="headerlink" title="五、其他分类的KVC"></a>五、其他分类的KVC</h1><h2 id="NSMutableDictionary的KVC"><a href="#NSMutableDictionary的KVC" class="headerlink" title="NSMutableDictionary的KVC"></a>NSMutableDictionary的KVC</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="meta">@implementation</span> NSMutableDictionary (NSKeyValueCoding)</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">setValue:</span>(id)value <span class="string">forKey:</span>(NSString *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(value) &#123;</span><br><span class="line">        [self <span class="string">setObject:</span>value <span class="string">forKey:</span>key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [self <span class="string">removeObjectForKey:</span>key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>
<p>相比主类增加的特性是：在<code>NSMutableDictionary</code>中，如果设置的<code>value</code>为空，则自动将<code>key</code>对应的<code>value</code>移除。</p>
<h2 id="NSUserDefaults的KVC"><a href="#NSUserDefaults的KVC" class="headerlink" title="NSUserDefaults的KVC"></a>NSUserDefaults的KVC</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSUserDefaults</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *subKey = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span>(key.length &amp;&amp; [key characterAtIndex:<span class="number">0</span>] == <span class="string">'@'</span> &amp;&amp; (subKey = [key substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, key.length - <span class="number">1</span>)])) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> valueForKey:subKey];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> objectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setValue:(<span class="keyword">id</span>)value forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">if</span>(value) &#123;</span><br><span class="line">        [<span class="keyword">self</span> setObject:value forKey:key];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [<span class="keyword">self</span> removeObjectForKey:key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>整合了<code>NSDictionary</code>与<code>NSMutableDictionary</code>的特色。</p>
<ol>
<li>增加了对<code>@</code>字符的处理。</li>
<li>如果设置的<code>value</code>为空，则自动将<code>key</code>对应的<code>value</code>移除。</li>
</ol>
<h2 id="NSNull的KVC"><a href="#NSNull的KVC" class="headerlink" title="NSNull的KVC"></a>NSNull的KVC</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSNull</span> (<span class="title">NSKeyValueCoding</span>)</span></span><br><span class="line">- (<span class="keyword">id</span>)valueForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>对于<code>NSNull</code>来说，无论怎么设值，取出来的值总是<code>NSNull</code>对象。</p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>纵观全流程，使用KVC与直接使用存取器相比，速度方面稍有逊色，揣测主要原因如下：</p>
<ol>
<li>字符串处理。尤其是含有键路径的时候，使用到递归。（当然，含有<code>@</code>字符的集合运算符也算。）</li>
<li>方法查找。流程颇多，尽管有使用<code>CFSet</code>作为缓存。</li>
<li>装箱拆箱。KVC要求设值参数和取值参数均为对象，这就需要一般值类型和对象类型的相互转换。</li>
</ol>
<p>这也是为啥现在字典转模型都不使用KVC了，参见<a href="https://blog.chenyalun.com/2018/12/20/读「YYModel」/">读YYModel</a>。</p>
<p>强烈建议阅读：</p>
<blockquote>
<p><a href="https://myzerone.com/posts/2016/10/20/KVC(Key-Value-Coding)/" target="_blank" rel="noopener">https://myzerone.com/posts/2016/10/20/KVC(Key-Value-Coding)/</a><br><a href="https://objccn.io/issue-7-3/" target="_blank" rel="noopener">https://objccn.io/issue-7-3/</a></p>
</blockquote>
<p>源码来自：<a href="https://github.com/renjinkui2719/DIS_KVC_KVO" target="_blank" rel="noopener">https://github.com/renjinkui2719/DIS_KVC_KVO</a> 。感谢作者。</p>
<blockquote>
<p>参考资料<br><a href="https://nshipster.cn/kvc-collection-operators/" target="_blank" rel="noopener">https://nshipster.cn/kvc-collection-operators/</a><br><a href="https://www.jianshu.com/p/a50ea091e1f4" target="_blank" rel="noopener">https://www.jianshu.com/p/a50ea091e1f4</a><br><a href="http://hufeng825.github.io/2013/09/23/ios33/" target="_blank" rel="noopener">http://hufeng825.github.io/2013/09/23/ios33/</a><br><a href="https://www.jianshu.com/p/938855e842e4" target="_blank" rel="noopener">https://www.jianshu.com/p/938855e842e4</a><br><a href="https://suhou.github.io/2017/09/29/KVC原理小记/" target="_blank" rel="noopener">https://suhou.github.io/2017/09/29/KVC原理小记/</a><br><a href="http://blog.cocoabit.com/ios-settter-benchmark/" target="_blank" rel="noopener">http://blog.cocoabit.com/ios-settter-benchmark/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「FDFullscreenPopGesture」]]></title>
      <url>http://blog.chenyalun.com/2019/04/25/%E8%AF%BB%E3%80%8CFDFullscreenPopGesture%E3%80%8D/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2019.5.29 修改Method Swizzling部分内容</p>
</blockquote>
<p></p><p align="center"> 优雅地开启全屏侧滑手势。 </p><br><a id="more"></a><p></p>
<h2 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h2><p>作者给UINavigationController和UIViewController都添加了分类，并进行了默认的参数设置，因此不做任何配置就能拥有这个功能。</p>
<h2 id="二、原理"><a href="#二、原理" class="headerlink" title="二、原理"></a>二、原理</h2><p>作者通过方法交换，hook到系统原生push方法中的手势中的target和动画调用selector，创建自己的UIPanGestureRecognizer，并设置它的target和selector。</p>
<h2 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h2> <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> UINavigationController (FDFullscreenPopGesture)</span><br><span class="line"><span class="comment">// 获取重新实现的侧滑返回手势对象</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong, readonly) UIPanGestureRecognizer *fd_fullscreenPopGestureRecognizer;</span><br><span class="line"><span class="comment">// 是否允许视图控制器单独管理它对应的NavigationBar显示与隐藏.默认是YES</span></span><br><span class="line"><span class="comment">// 这个需要配合视图控制器的fd_prefersNavigationBarHidden属性来使用</span></span><br><span class="line"><span class="comment">// 也就是说如果把这个属性设置为NO, 视图控制器对应的导航栏的隐藏与否不由视图控制器决定</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_viewControllerBasedNavigationBarAppearanceEnabled;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line">  </span><br><span class="line"><span class="variable">@interface</span> UIViewController (FDFullscreenPopGesture)</span><br><span class="line"><span class="comment">// 是否禁用全屏侧滑手势(默认NO)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_interactivePopDisabled;</span><br><span class="line"><span class="comment">// 表明当前控制器的导航栏是显示还是隐藏, 默认NO (显示导航栏)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) BOOL fd_prefersNavigationBarHidden;</span><br><span class="line"><span class="comment">// 设置能够响应侧滑的最大边界(距离)</span></span><br><span class="line"><span class="variable">@property</span> (nonatomic, assign) CGFloat fd_interactivePopMaxAllowedInitialDistanceToLeftEdge;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="四、源码阅读"><a href="#四、源码阅读" class="headerlink" title="四、源码阅读"></a>四、源码阅读</h2><h3 id="FDFullscreenPopGestureRecognizerDelegate"><a href="#FDFullscreenPopGestureRecognizerDelegate" class="headerlink" title="_FDFullscreenPopGestureRecognizerDelegate"></a>_FDFullscreenPopGestureRecognizerDelegate</h3><p><code>_FDFullscreenPopGestureRecognizerDelegate</code>对象。遵循<code>UIGestureRecognizerDelegate</code>协议，主要用于决定控制器是否能响应手势。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_FDFullscreenPopGestureRecognizerDelegate</span> : <span class="title">NSObject</span> &lt;<span class="title">UIGestureRecognizerDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="built_in">UINavigationController</span> *navigationController;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_FDFullscreenPopGestureRecognizerDelegate</span></span></span><br><span class="line">- (<span class="built_in">BOOL</span>)gestureRecognizerShouldBegin:(<span class="built_in">UIPanGestureRecognizer</span> *)gestureRecognizer &#123;</span><br><span class="line">    <span class="comment">// 栈的最顶层, 不需要响应手势</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.navigationController.viewControllers.count &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打开了禁用手势的开关</span></span><br><span class="line">    <span class="built_in">UIViewController</span> *topViewController = <span class="keyword">self</span>.navigationController.viewControllers.lastObject;</span><br><span class="line">    <span class="keyword">if</span> (topViewController.fd_interactivePopDisabled) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 超过自己设置的left edge</span></span><br><span class="line">    <span class="built_in">CGPoint</span> beginningLocation = [gestureRecognizer locationInView:gestureRecognizer.view];</span><br><span class="line">    <span class="built_in">CGFloat</span> maxAllowedInitialDistance = topViewController.fd_interactivePopMaxAllowedInitialDistanceToLeftEdge;</span><br><span class="line">    <span class="keyword">if</span> (maxAllowedInitialDistance &gt; <span class="number">0</span> &amp;&amp; beginningLocation.x &gt; maxAllowedInitialDistance) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 正在执行Transition动画</span></span><br><span class="line">    <span class="keyword">if</span> ([[<span class="keyword">self</span>.navigationController valueForKey:<span class="string">@"_isTransitioning"</span>] boolValue]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手机横屏状态下, 适配侧滑方向</span></span><br><span class="line">    <span class="comment">// It tells you how far the touch moved since it was last reset. It resets when the touch goes down or if you reset it yourself.</span></span><br><span class="line">    <span class="built_in">CGPoint</span> translation = [gestureRecognizer translationInView:gestureRecognizer.view];</span><br><span class="line">    <span class="built_in">BOOL</span> isLeftToRight = [<span class="built_in">UIApplication</span> sharedApplication].userInterfaceLayoutDirection == <span class="built_in">UIUserInterfaceLayoutDirectionLeftToRight</span>;</span><br><span class="line">    <span class="built_in">CGFloat</span> multiplier = isLeftToRight ? <span class="number">1</span> : - <span class="number">1</span>; <span class="comment">// 只能是从左向右滑</span></span><br><span class="line">    <span class="keyword">if</span> ((translation.x * multiplier) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="UIViewController-FDFullscreenPopGesturePrivate"><a href="#UIViewController-FDFullscreenPopGesturePrivate" class="headerlink" title="UIViewController (FDFullscreenPopGesturePrivate)"></a>UIViewController (FDFullscreenPopGesturePrivate)</h3><p>UIViewController的分类。给其添加关联属性<code>fd_willAppearInjectBlock</code>。hook <code>viewWillAppear</code>方法并在其中调用<code>fd_willAppearInjectBlock</code>回调，hook <code>viewWillDisappear</code>方法，并在其中根据控制器的<code>fd_prefersNavigationBarHidden</code>属性来设置状态栏的显示与否。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^_FDViewControllerWillAppearInjectBlock)(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">BOOL</span> animated);</span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesturePrivate</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) _FDViewControllerWillAppearInjectBlock fd_willAppearInjectBlock;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesturePrivate</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="comment">// 方法交换, viewWillAppear和fd_viewWillAppear互换, viewWillDisappear和fd_viewWillDisappear互换</span></span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Method viewWillAppear_originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewWillAppear:));</span><br><span class="line">        Method viewWillAppear_swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_viewWillAppear:));</span><br><span class="line">        method_exchangeImplementations(viewWillAppear_originalMethod, viewWillAppear_swizzledMethod);</span><br><span class="line">    </span><br><span class="line">        Method viewWillDisappear_originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(viewWillDisappear:));</span><br><span class="line">        Method viewWillDisappear_swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_viewWillDisappear:));</span><br><span class="line">        method_exchangeImplementations(viewWillDisappear_originalMethod, viewWillDisappear_swizzledMethod);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_viewWillAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// 主类的实现 Forward to primary implementation.</span></span><br><span class="line">    [<span class="keyword">self</span> fd_viewWillAppear:animated];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.fd_willAppearInjectBlock) &#123;</span><br><span class="line">        <span class="keyword">self</span>.fd_willAppearInjectBlock(<span class="keyword">self</span>, animated);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_viewWillDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// Forward to primary implementation.</span></span><br><span class="line">    [<span class="keyword">self</span> fd_viewWillDisappear:animated];</span><br><span class="line">    <span class="comment">// 延迟为0相当于直接调用异步</span></span><br><span class="line">    <span class="comment">// dispatch_async(dispatch_get_main_queue(), ^&#123;&#125;);</span></span><br><span class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">0</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</span><br><span class="line">        <span class="built_in">UIViewController</span> *viewController = <span class="keyword">self</span>.navigationController.viewControllers.lastObject;</span><br><span class="line">        <span class="comment">// viewController存在而且它的fd_prefersNavigationBarHidden为NO, 把NavigationBar显示出来</span></span><br><span class="line">        <span class="keyword">if</span> (viewController &amp;&amp; !viewController.fd_prefersNavigationBarHidden) &#123;</span><br><span class="line">            [<span class="keyword">self</span>.navigationController setNavigationBarHidden:<span class="literal">NO</span> animated:<span class="literal">NO</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_FDViewControllerWillAppearInjectBlock)fd_willAppearInjectBlock &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_willAppearInjectBlock:(_FDViewControllerWillAppearInjectBlock)block &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_willAppearInjectBlock), block, OBJC_ASSOCIATION_COPY_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="UINavigationController-FDFullscreenPopGesture"><a href="#UINavigationController-FDFullscreenPopGesture" class="headerlink" title="UINavigationController (FDFullscreenPopGesture)"></a>UINavigationController (FDFullscreenPopGesture)</h3><p>UINavigationController的分类。hook<code>pushViewController:animated:</code>方法，给响应push手势的view添加自定义的<code>fd_fullscreenPopGestureRecognizer</code>手势。当然，<code>fd_fullscreenPopGestureRecognizer</code>的target和selector与push原生手势的target及selector保持一致。除此之外，<code>fd_fullscreenPopGestureRecognizer</code>手势的代理是上面的<code>_FDFullscreenPopGestureRecognizerDelegate</code>对象，目的是决定是否响应手势。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UINavigationController</span> (<span class="title">FDFullscreenPopGesture</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="comment">// Inject "-pushViewController:animated:"</span></span><br><span class="line">    <span class="comment">// 交换pushViewController与fd_pushViewController</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">        </span><br><span class="line">        SEL originalSelector = <span class="keyword">@selector</span>(pushViewController:animated:);</span><br><span class="line">        SEL swizzledSelector = <span class="keyword">@selector</span>(fd_pushViewController:animated:);</span><br><span class="line">        </span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">class</span>, originalSelector);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">class</span>, swizzledSelector);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">BOOL</span> success = class_addMethod(<span class="keyword">class</span>, originalSelector, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod));</span><br><span class="line">        <span class="keyword">if</span> (success) &#123;</span><br><span class="line">            class_replaceMethod(<span class="keyword">class</span>, swizzledSelector, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_pushViewController:(<span class="built_in">UIViewController</span> *)viewController</span><br><span class="line">                     animated:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line">    <span class="comment">// 保证view只添加一次fd_fullscreenPopGestureRecognizer手势</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.interactivePopGestureRecognizer.view.gestureRecognizers containsObject:<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer]) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Add our own gesture recognizer to where the onboard screen edge pan gesture recognizer is attached to.</span></span><br><span class="line">        [<span class="keyword">self</span>.interactivePopGestureRecognizer.view addGestureRecognizer:<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取私有变量target和selector</span></span><br><span class="line">        <span class="built_in">NSArray</span> *internalTargets = [<span class="keyword">self</span>.interactivePopGestureRecognizer valueForKey:<span class="string">@"targets"</span>];</span><br><span class="line">        <span class="keyword">id</span> internalTarget = [internalTargets.firstObject valueForKey:<span class="string">@"target"</span>];</span><br><span class="line">        SEL internalAction = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"handleNavigationTransition:"</span>);</span><br><span class="line">        <span class="comment">// 设置滑动手势的代理</span></span><br><span class="line">        <span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer.delegate = <span class="keyword">self</span>.fd_popGestureRecognizerDelegate;</span><br><span class="line">        [<span class="keyword">self</span>.fd_fullscreenPopGestureRecognizer addTarget:internalTarget action:internalAction];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 禁用原生的手势</span></span><br><span class="line">        <span class="keyword">self</span>.interactivePopGestureRecognizer.enabled = <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理navigation bar 的显示与隐藏</span></span><br><span class="line">    [<span class="keyword">self</span> fd_setupViewControllerBasedNavigationBarAppearanceIfNeeded:viewController];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用原来的方法实现(加一个判断, 避免重复push)</span></span><br><span class="line">    <span class="keyword">if</span> (![<span class="keyword">self</span>.viewControllers containsObject:viewController]) &#123;</span><br><span class="line">        [<span class="keyword">self</span> fd_pushViewController:viewController animated:animated];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)fd_setupViewControllerBasedNavigationBarAppearanceIfNeeded:(<span class="built_in">UIViewController</span> *)appearingViewController &#123;</span><br><span class="line">    <span class="comment">// 如果fd_viewControllerBasedNavigationBarAppearanceEnabled设置为NO, 直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>.fd_viewControllerBasedNavigationBarAppearanceEnabled) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 配合fd_prefersNavigationBarHidden来使用</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    _FDViewControllerWillAppearInjectBlock block = ^(<span class="built_in">UIViewController</span> *viewController, <span class="built_in">BOOL</span> animated) &#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) strongSelf = weakSelf;</span><br><span class="line">        <span class="keyword">if</span> (strongSelf) &#123;</span><br><span class="line">            [strongSelf setNavigationBarHidden:viewController.fd_prefersNavigationBarHidden animated:animated];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置appearingViewController、disappearingViewController的fd_willAppearInjectBlock</span></span><br><span class="line">    appearingViewController.fd_willAppearInjectBlock = block;</span><br><span class="line">    <span class="built_in">UIViewController</span> *disappearingViewController = <span class="keyword">self</span>.viewControllers.lastObject;</span><br><span class="line">    <span class="keyword">if</span> (disappearingViewController &amp;&amp; !disappearingViewController.fd_willAppearInjectBlock) &#123;</span><br><span class="line">        disappearingViewController.fd_willAppearInjectBlock = block;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_FDFullscreenPopGestureRecognizerDelegate *)fd_popGestureRecognizerDelegate &#123;</span><br><span class="line">    _FDFullscreenPopGestureRecognizerDelegate *delegate = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="comment">// 只初始化delegate一次</span></span><br><span class="line">    <span class="keyword">if</span> (!delegate) &#123;</span><br><span class="line">        delegate = [[_FDFullscreenPopGestureRecognizerDelegate alloc] init];</span><br><span class="line">        delegate.navigationController = <span class="keyword">self</span>;</span><br><span class="line">        </span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, delegate, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> delegate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">UIPanGestureRecognizer</span> *)fd_fullscreenPopGestureRecognizer &#123;</span><br><span class="line">    <span class="built_in">UIPanGestureRecognizer</span> *panGestureRecognizer = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="comment">// 只初始化panGestureRecognizer一次</span></span><br><span class="line">    <span class="keyword">if</span> (!panGestureRecognizer) &#123;</span><br><span class="line">        panGestureRecognizer = [[<span class="built_in">UIPanGestureRecognizer</span> alloc] init];</span><br><span class="line">        panGestureRecognizer.maximumNumberOfTouches = <span class="number">1</span>;</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, _cmd, panGestureRecognizer, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> panGestureRecognizer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_viewControllerBasedNavigationBarAppearanceEnabled &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *number = objc_getAssociatedObject(<span class="keyword">self</span>, _cmd);</span><br><span class="line">    <span class="keyword">if</span> (number) &#123; <span class="comment">// BOOL值被封装成对象了</span></span><br><span class="line">        <span class="keyword">return</span> number.boolValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 走到这一步说明还没有设置过关联属性, 手动设置</span></span><br><span class="line">    <span class="keyword">self</span>.fd_viewControllerBasedNavigationBarAppearanceEnabled = <span class="literal">YES</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_viewControllerBasedNavigationBarAppearanceEnabled:(<span class="built_in">BOOL</span>)enabled &#123;</span><br><span class="line">    SEL key = <span class="keyword">@selector</span>(fd_viewControllerBasedNavigationBarAppearanceEnabled);</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, @(enabled), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="UIViewController-FDFullscreenPopGesture"><a href="#UIViewController-FDFullscreenPopGesture" class="headerlink" title="UIViewController (FDFullscreenPopGesture)"></a>UIViewController (FDFullscreenPopGesture)</h3><p>UIViewController的分类。给其添加关联属性<code>fd_interactivePopDisabled</code>、<code>fd_interactivePopMaxAllowedInitialDistanceToLeftEdge</code>和<code>fd_prefersNavigationBarHidden</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">UIViewController</span> (<span class="title">FDFullscreenPopGesture</span>)</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_interactivePopDisabled &#123;</span><br><span class="line">    <span class="comment">// 关于_cmd: 这行代码等价于 return [objc_getAssociatedObject(self, @selector(fd_interactivePopDisabled)) boolValue];</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_interactivePopDisabled:(<span class="built_in">BOOL</span>)disabled &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_interactivePopDisabled), @(disabled), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)fd_prefersNavigationBarHidden &#123;</span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) boolValue];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_prefersNavigationBarHidden:(<span class="built_in">BOOL</span>)hidden &#123;</span><br><span class="line">    <span class="comment">// 存储的时候需要把基本数据类型包装成对象 @(hidden)</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(fd_prefersNavigationBarHidden), @(hidden), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">CGFloat</span>)fd_interactivePopMaxAllowedInitialDistanceToLeftEdge &#123;</span><br><span class="line"><span class="meta">#if CGFLOAT_IS_DOUBLE // CGFLOAT_IS_DOUBLE宏: 64位下是1 否则0, 特别严谨</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) doubleValue];</span><br><span class="line"><span class="meta">#else</span></span><br><span class="line">    <span class="keyword">return</span> [objc_getAssociatedObject(<span class="keyword">self</span>, _cmd) floatValue];</span><br><span class="line"><span class="meta">#endif</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setFd_interactivePopMaxAllowedInitialDistanceToLeftEdge:(<span class="built_in">CGFloat</span>)distance &#123;</span><br><span class="line">    SEL key = <span class="keyword">@selector</span>(fd_interactivePopMaxAllowedInitialDistanceToLeftEdge);</span><br><span class="line">    <span class="comment">// 使用@(MAX(0, distance), 适配distance被外界设置为负值的情况</span></span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, key, @(MAX(<span class="number">0</span>, distance)), OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="五、再谈Method-Swizzling"><a href="#五、再谈Method-Swizzling" class="headerlink" title="五、再谈Method Swizzling"></a>五、再谈Method Swizzling</h2><h3 id="实例方法交换"><a href="#实例方法交换" class="headerlink" title="实例方法交换"></a>实例方法交换</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">@interface ViewController ()</span><br><span class="line">@end</span><br><span class="line">@implementation ViewController</span><br><span class="line">- (void)viewWillAppear:(<span class="keyword">BOOL)animated </span>&#123;</span><br><span class="line">    [super viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"原始的方法实现"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@implementation ViewController (MethodSwizzling1)</span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</span><br><span class="line">        Class cls = [self class]<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">originalSel </span>= @selector(viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">swizzledSel </span>= @selector(ya1_viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        Method <span class="keyword">originalMethod </span>= class_getInstanceMethod(cls, <span class="keyword">originalSel);</span></span><br><span class="line"><span class="keyword"> </span>       Method <span class="keyword">swizzledMethod </span>= class_getInstanceMethod(cls, <span class="keyword">swizzledSel);</span></span><br><span class="line"><span class="keyword"> </span>       if (class_addMethod(cls, <span class="keyword">originalSel, </span>method_getImplementation(<span class="keyword">swizzledMethod), </span>method_getTypeEncoding(<span class="keyword">swizzledMethod))) </span>&#123;</span><br><span class="line">            class_replaceMethod(cls, <span class="keyword">swizzledSel, </span>method_getImplementation(<span class="keyword">originalMethod), </span>method_getTypeEncoding(<span class="keyword">originalMethod));</span></span><br><span class="line"><span class="keyword"> </span>       &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(<span class="keyword">originalMethod, </span><span class="keyword">swizzledMethod);</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)ya1_viewWillAppear:(<span class="keyword">BOOL)animated </span> &#123;</span><br><span class="line">    [self ya1_viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"第一次在分类里面互换"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<h3 id="类方法交换"><a href="#类方法交换" class="headerlink" title="类方法交换"></a>类方法交换</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 交换类方法</span></span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        SEL originalSel = <span class="meta">@selector(a)</span>;</span><br><span class="line">        SEL swizzledSel = <span class="meta">@selector(b)</span>;</span><br><span class="line">        Class <span class="class"><span class="keyword">class</span> = <span class="title">object_getClass</span></span>(self);</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">originalSel);</span></span></span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">swizzledSel);</span></span></span><br><span class="line">        <span class="keyword">if</span> (class_addMethod(<span class="class"><span class="keyword">class</span>, <span class="type">originalSel</span>, <span class="type">method_getImplementation</span></span>(swizzledMethod), method_getTypeEncoding(swizzledMethod))) &#123;</span><br><span class="line">            class_replaceMethod(<span class="class"><span class="keyword">class</span>, <span class="type">swizzledSel</span>, <span class="type">method_getImplementation</span></span>(originalMethod), method_getTypeEncoding(originalMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (void)b &#123;</span><br><span class="line">    NSLog(@<span class="string">"b"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题1：实例方法交换与类方法交换有什么区别？"><a href="#问题1：实例方法交换与类方法交换有什么区别？" class="headerlink" title="问题1：实例方法交换与类方法交换有什么区别？"></a>问题1：实例方法交换与类方法交换有什么区别？</h3><p>没有大的变化，唯一的区别在于获取方法所属的对象上，一个获取的是类对象一个获取的是元类对象。即一个是<code>[self class]</code>或者说<code>[self self]</code>，一个是<code>object_getClass(self)</code>。<br>为什么会有这种区别？原因在于，实例方法存储在类对象中，类方法存储在元类对象中。</p>
<p>再一个，看看<code>class</code>的实现：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">+ (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>网上许多文章这么说的：</p>
<blockquote>
<p>object_getClass与self.class的区别<br>self.class:当self是实例对象的时候，返回的是类对象，否则则返回自身。<br>object_getClass:获得的是isa的指向</p>
</blockquote>
<p>这个“返回自身”很含糊。</p>
<p><code>object_getClass()</code>获取isa指向毋庸置疑。实例对象的isa指向类对象，类对象的isa指向元类对象，元类对象的isa指向根元类，根元类的isa指向它自己，耳熟能详。</p>
<p>关键是<code>class</code>，self指向了消息的接收者（“the object that’s received this message”），很自然地，实例方法的消息接收者是实例对象，类方法的消息接收者是类对象。根据代码实现来看，实例方法调用<code>class</code>是获取实例对象的isa指向，即类对象。而类对象调用<code>class</code>返回的消息接收者自己，<strong>这个“自身”指的就是类对象</strong>。于是，不管是实例对象还是类对象调用<code>class</code>方法，返回的总是类对象。</p>
<p>同样地，在实例方法的交换中，这几种获取类对象的方式是等价的：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">self</span>];</span><br><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line"><span class="keyword">Class</span> <span class="keyword">class</span> = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>
<p>调用<code>self</code>的<code>self</code>方法也没啥奇怪的，源码是这样的：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">self</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="问题2：能否做到实例方法与类方法交换？"><a href="#问题2：能否做到实例方法与类方法交换？" class="headerlink" title="问题2：能否做到实例方法与类方法交换？"></a>问题2：能否做到实例方法与类方法交换？</h3><p>实例方法与实例方法互换、类方法与类方法互换都很容易做到。那一个实例方法与一个类方法互换，或者一个类方法与一个实例方法互换可以做到吗？答案是肯定的。<br>根据上文讨论，关键在于获取方法所属的对象上，即巧妙控制好获取的类对象和元类对象即可。</p>
<h4 id="（1）实例方法与类方法互换（新的实例方法交换原先的类方法）"><a href="#（1）实例方法与类方法互换（新的实例方法交换原先的类方法）" class="headerlink" title="（1）实例方法与类方法互换（新的实例方法交换原先的类方法）"></a>（1）实例方法与类方法互换（新的实例方法交换原先的类方法）</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SEL originalSel</span> = @selector(classMethod);</span><br><span class="line"><span class="attribute">SEL swizzledSel</span> = @selector(newInstanceMethod);</span><br><span class="line"><span class="attribute">Class originClass</span> = object_getClass(self);</span><br><span class="line"><span class="attribute">Class swizzleClass</span> = self;</span><br></pre></td></tr></table></figure>
<h4 id="（2）类方法与实例方法互换（新的类方法交换原先的实例方法）"><a href="#（2）类方法与实例方法互换（新的类方法交换原先的实例方法）" class="headerlink" title="（2）类方法与实例方法互换（新的类方法交换原先的实例方法）"></a>（2）类方法与实例方法互换（新的类方法交换原先的实例方法）</h4><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">SEL originalSel</span> = @selector(instanceMethod);</span><br><span class="line"><span class="attribute">SEL swizzledSel</span> = @selector(newClassMethod);</span><br><span class="line"><span class="attribute">Class originClass</span> = self;</span><br><span class="line"><span class="attribute">Class swizzleClass</span> = object_getClass(self);</span><br></pre></td></tr></table></figure>
<p>二者的共同实现是这样的：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">originalMethod</span> = <span class="title">class_getInstanceMethod</span><span class="params">(originClass, originalSel)</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">swizzledMethod</span> = <span class="title">class_getInstanceMethod</span><span class="params">(swizzleClass, swizzledSel)</span>;</span></span><br><span class="line"><span class="keyword">if</span> (class_addMethod(originClass, originalSel, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))) <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">       class_replaceMethod(originClass, swizzledSel, method_getImplementation(originalMethod), method_getTypeEncoding(originalMethod));</span></span><br><span class="line"><span class="comment">&#125;</span> <span class="keyword">else</span> <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">       method_exchangeImplementations(originalMethod, swizzledMethod);</span></span><br><span class="line"><span class="comment">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？"><a href="#问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？" class="headerlink" title="问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？"></a>问题3：方法二次交换是否会影响第一次交换（造成第一次交换失效）？</h3><p>比如：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">@implementation ViewController (MethodSwizzling2)</span><br><span class="line">+ (void)load &#123;</span><br><span class="line">    static <span class="keyword">dispatch_once_t </span>onceToken<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_once(&amp;onceToken, </span>^&#123;</span><br><span class="line">        SEL <span class="keyword">originalSel </span>= @selector(viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        SEL <span class="keyword">swizzledSel </span>= @selector(ya2_viewWillAppear:)<span class="comment">;</span></span><br><span class="line">        Method <span class="keyword">originalMethod </span>= class_getInstanceMethod(self, <span class="keyword">originalSel);</span></span><br><span class="line"><span class="keyword"> </span>       Method <span class="keyword">swizzledMethod </span>= class_getInstanceMethod(self, <span class="keyword">swizzledSel);</span></span><br><span class="line"><span class="keyword"> </span>       if (class_addMethod(self, <span class="keyword">originalSel, </span>method_getImplementation(<span class="keyword">swizzledMethod), </span>method_getTypeEncoding(<span class="keyword">swizzledMethod))) </span>&#123;</span><br><span class="line">            class_replaceMethod(self, <span class="keyword">swizzledSel, </span>method_getImplementation(<span class="keyword">originalMethod), </span>method_getTypeEncoding(<span class="keyword">originalMethod));</span></span><br><span class="line"><span class="keyword"> </span>       &#125; else &#123;</span><br><span class="line">            method_exchangeImplementations(<span class="keyword">originalMethod, </span><span class="keyword">swizzledMethod);</span></span><br><span class="line"><span class="keyword"> </span>       &#125;</span><br><span class="line">    &#125;)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)ya2_viewWillAppear:(<span class="keyword">BOOL)animated </span> &#123;</span><br><span class="line">    [self ya2_viewWillAppear:animated]<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"第二次在分类里面互换"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>很明显不会。</p>
<p>原因: <code>Compile Sources</code>中设定了分类的编译顺序为<code>ViewController+MethodSwizzling.m --&gt; ViewController+MethodSwizzling2.m</code>，<code>load</code>方法的调用顺序也是这样。最新先调用主类的<code>viewWillAppear:</code>方法不必多说，接着调用分类<code>ViewController+MethodSwizzling</code>中的方法互换逻辑，使得第一次方法互换成功。紧接着调用分类<code>ViewController+MethodSwizzling2</code>中的方法互换逻辑，这个不会影响第一次方法互换的逻辑，相当于在第一次的方法互换之后再互换一次。<br><img src="https://image.chenyalun.com/2019/04/23/001.png" style="zoom:50%"></p>
<p>第一次: <code>ya_viewWillAppear</code>的实现与<code>viewWillAppear</code>的实现互换<br>第二次: <code>ya2_viewWillAppear</code>的实现与<code>ya_viewWillAppear</code>的实现互换，因为<code>viewWillAppear</code>的实现被<code>ya_viewWillAppear</code>代替了。所以主类和各个分类的方法都被清晰地调用了。<br><img src="https://image.chenyalun.com/2019/04/23/002.png" style="zoom:50%"></p>
<h3 id="问题4：为什么需要class-replaceMethod-函数"><a href="#问题4：为什么需要class-replaceMethod-函数" class="headerlink" title="问题4：为什么需要class_replaceMethod()函数?"></a>问题4：为什么需要class_replaceMethod()函数?</h3><p>原先的方法存在(有实现)，自不必说，使用<code>method_exchangeImplementations()</code>直接交换函数指针即可。<br>那么有个问题，假定原先的方法不存在，那直接使用<code>class_addMethod()</code>函数把swizzledMethod方法的实现“交给了”原先的originalMethod方法，此时原先的originalMethod方法和新的swizzledMethod方法都指向了同一个实现: swizzledMethod方法的实现。进行到这一步足够了，<code>class_addMethod()</code>函数既判断了原先的方法是否实现，倘若未实现又自动把新方法的实现“交给了”它，完全解决了问题，还需要<code>class_replaceMethod()</code>函数做啥?</p>
<p>原因在于，“原先的方法没有实现”有两种情况，第一种:该方法是仅仅属于这个类的，父类没有。第二种:该方法是继承自这个类的父类的，父类中有实现，而它自己却没有实现。<br>对于第二种情况，倘若仅仅使用<code>class_addMethod()</code>函数而没有使用<code>class_replaceMethod()</code>函数，会造成<strong>“丢失掉原先的父类的实现”</strong>。</p>
<p>示例代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MainObject</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MainObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)a &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"super-main"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// AObject继承自MainObject</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AObject</span> : <span class="title">MainObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AObject</span> (<span class="title">Object</span>)</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AObject</span> (<span class="title">Object</span>)</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        SEL originalSel = <span class="keyword">@selector</span>(a);</span><br><span class="line">        SEL swizzledSel = <span class="keyword">@selector</span>(b);</span><br><span class="line">        Method originalMethod = class_getInstanceMethod(<span class="keyword">self</span>, originalSel);</span><br><span class="line">        Method swizzledMethod = class_getInstanceMethod(<span class="keyword">self</span>, swizzledSel);</span><br><span class="line">        <span class="keyword">if</span> (class_addMethod(<span class="keyword">self</span>, originalSel, method_getImplementation(swizzledMethod), method_getTypeEncoding(swizzledMethod))) &#123;</span><br><span class="line">            <span class="comment">// 什么也不做</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            method_exchangeImplementations(originalMethod, swizzledMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)b &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"b-method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">AObject *obj = [AObject new];</span><br><span class="line">[obj performSelector:<span class="keyword">@selector</span>(a)];</span><br><span class="line">[obj performSelector:<span class="keyword">@selector</span>(b)];</span><br></pre></td></tr></table></figure>
<p>很明显，打印了两次”b-method”。</p>
<blockquote>
<p>2019-05-29 20:01:19.934449+0800 Aaron[35973:604269] b-method<br>2019-05-29 20:01:19.934591+0800 Aaron[35973:604269] b-method</p>
</blockquote>
<p>而如果添加上<code>class_replaceMethod()</code>函数，先给originalSel添加上swizzledMethod的实现，再把父类的实现originalMethod替换到swizzledSel中，这样父类的实现就会得到调用:</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">if (class<span class="emphasis">_addMethod(self, originalSel, method_</span>getImplementation(swizzledMethod), method<span class="emphasis">_getTypeEncoding(swizzledMethod))) &#123;</span></span><br><span class="line"><span class="emphasis">    class_</span>replaceMethod(self, swizzledSel, method<span class="emphasis">_getImplementation(originalMethod), method_</span>getTypeEncoding(originalMethod));</span><br><span class="line">&#125; else &#123;</span><br><span class="line"><span class="code">    method_exchangeImplementations(originalMethod, swizzledMethod);</span></span><br><span class="line">&#125;</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>打印：</p>
<blockquote>
<p>2019-05-29 20:06:39.298454+0800 Aaron[36191:611275] b-method<br>2019-05-29 20:06:39.298605+0800 Aaron[36191:611275] super-main</p>
</blockquote>
<p>因此，当”主类本身没有实现需要替换的方法，而是继承了父类的实现”时，比如一开始的例子<code>viewWillAppear</code>方法，就可以调用到父类的实现，避免出现问题。对于完全无中生有的比如<code>aaa</code>方法，用不用<code>class_replaceMethod()</code>都无妨。</p>
<h2 id="六、自定义侧滑手势"><a href="#六、自定义侧滑手势" class="headerlink" title="六、自定义侧滑手势"></a>六、自定义侧滑手势</h2><p>除了全屏侧滑之外，有些情况下需要自定义侧滑手势，这时可以使用<code>UIScreenEdgePanGestureRecognizer</code>实现。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">UIView</span> *orangeView = [[<span class="built_in">UIView</span> alloc] initWithFrame:<span class="keyword">self</span>.view.bounds];</span><br><span class="line">    orangeView.backgroundColor = <span class="built_in">UIColor</span>.orangeColor;</span><br><span class="line">    [<span class="keyword">self</span>.view addSubview:orangeView];</span><br><span class="line">    <span class="built_in">UIScreenEdgePanGestureRecognizer</span> *pan = [[<span class="built_in">UIScreenEdgePanGestureRecognizer</span> alloc] initWithTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(handlePop:)];</span><br><span class="line">    pan.edges = <span class="built_in">UIRectEdgeLeft</span>;</span><br><span class="line">    [orangeView addGestureRecognizer:pan];</span><br><span class="line">    <span class="keyword">self</span>.orangeView = orangeView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)handlePop:(<span class="built_in">UIScreenEdgePanGestureRecognizer</span> *)pan &#123;</span><br><span class="line">    <span class="keyword">void</span> (^setOriginX)(<span class="built_in">UIView</span> *, <span class="built_in">CGFloat</span>) = ^(<span class="built_in">UIView</span> *view, <span class="built_in">CGFloat</span> x) &#123;</span><br><span class="line">        [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.15</span> animations:^&#123;</span><br><span class="line">            <span class="built_in">CGRect</span> frame = view.frame;</span><br><span class="line">            frame.origin.x = x;</span><br><span class="line">            view.frame = frame;</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UIView</span> *targetView = pan.view;</span><br><span class="line">    <span class="built_in">CGFloat</span> offsetX = [pan translationInView:targetView].x;</span><br><span class="line">    <span class="keyword">if</span> (pan.state == <span class="built_in">UIGestureRecognizerStateChanged</span>) &#123;</span><br><span class="line">        targetView.center = <span class="built_in">CGPointMake</span>(targetView.center.x + offsetX, targetView.center.y);</span><br><span class="line">        [pan setTranslation:<span class="built_in">CGPointZero</span> inView:targetView.superview];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pan.state == <span class="built_in">UIGestureRecognizerStateEnded</span> || pan.state == <span class="built_in">UIGestureRecognizerStateCancelled</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (targetView.frame.origin.x / targetView.frame.size.width &gt; <span class="number">0.3</span>) &#123;</span><br><span class="line">            setOriginX(targetView, targetView.bounds.size.width);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setOriginX(targetView, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考资料<br><a href="http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/" target="_blank" rel="noopener">http://blog.sunnyxx.com/2015/06/07/fullscreen-pop-gesture/</a><br><a href="https://www.jianshu.com/p/d39f7d22db6c" target="_blank" rel="noopener">https://www.jianshu.com/p/d39f7d22db6c</a><br><a href="https://juejin.im/entry/5bea8d6de51d454fbd6b472f" target="_blank" rel="noopener">https://juejin.im/entry/5bea8d6de51d454fbd6b472f</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开源项目：PageMenu]]></title>
      <url>http://blog.chenyalun.com/2019/03/21/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9APageMenu/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 一个使用Swift写的PageMenu。 </p><br><a id="more"></a><p></p>
<p>一个使用Swift写的PageMenu。没有那么多接口，自己可以根据实际需要扩展。写这个的目的一是为了练手，毕竟工作中使用Swift极少，再一个，PageMenu使用场景挺多的，我遇到过好几次，这次做一个总结。</p>
<h1 id="一、思路"><a href="#一、思路" class="headerlink" title="一、思路"></a>一、思路</h1><p>MenuStyle: 用于标题的样式配置<br>PageTitleView: 私有的单个标题控件<br>PageTitle: 标题区视图<br>PageContent: 内容区视图<br>PageMenu: 继承自UIViewController的视图控制器，用于连接PageTitle和PageContent<br>UIColor+RGB: 一些对UIColor的拓展，主要是支持RGB的方式设置颜色</p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="MenuStyle"><a href="#MenuStyle" class="headerlink" title="MenuStyle"></a>MenuStyle</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MenuStyle</span>: <span class="type">UIView &#123;</span></span></span><br><span class="line">    <span class="comment">// 标题之间的间距</span></span><br><span class="line">    <span class="keyword">var</span> margin: CGFloat = <span class="number">10</span></span><br><span class="line">    <span class="comment">// 默认颜色</span></span><br><span class="line">    <span class="keyword">var</span> defaultColor = UIColor(r: <span class="number">0</span>, g: <span class="number">0</span>, b: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 默认字体</span></span><br><span class="line">    <span class="keyword">var</span> defaultFont = UIFont.systemFont(ofSize: <span class="number">17</span>)</span><br><span class="line">    <span class="comment">// 选中态颜色</span></span><br><span class="line">    <span class="keyword">var</span> selectedColor = UIColor(r: <span class="number">239</span>, g: <span class="number">154</span>, b: <span class="number">64</span>)</span><br><span class="line">    <span class="comment">// 选中态字体</span></span><br><span class="line">    <span class="keyword">var</span> selectedFont = UIFont.systemFont(ofSize: <span class="number">18</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指示条高度, 为0表示隐藏</span></span><br><span class="line">    <span class="keyword">var</span> lineHeight: CGFloat = <span class="number">2</span></span><br><span class="line">    <span class="comment">// 指示条宽度, 为0表示自适应</span></span><br><span class="line">    <span class="keyword">var</span> lineWidth: CGFloat = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 指示条颜色, 默认与selectedColor保持一致</span></span><br><span class="line">    <span class="keyword">var</span> lineColor: UIColor?</span><br><span class="line">    <span class="comment">// 是否开启指示条颜色渐变</span></span><br><span class="line">    <span class="keyword">var</span> lineColorGradual = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 指示条圆角</span></span><br><span class="line">    <span class="keyword">var</span> lineCornerRadius: CGFloat = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 标题区的frame</span></span><br><span class="line">    <span class="keyword">var</span> pageTitleFrame = CGRect(x: <span class="number">0</span>, y: <span class="number">20</span>, width: UIScreen.main.bounds.width, height: <span class="number">25</span>)</span><br><span class="line">    <span class="comment">// 标题区与内容区的间距</span></span><br><span class="line">    <span class="keyword">var</span> titleContentMargin: CGFloat = <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PageTitle"><a href="#PageTitle" class="headerlink" title="PageTitle"></a>PageTitle</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PageTitleDelegate</span> : <span class="title">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageTitleDidSelected</span><span class="params">(pageTitle: PageTitle, pageTitleView: PageTitleView)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题视图组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTitleView</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 索引</span></span><br><span class="line">    <span class="keyword">var</span> index: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">    <span class="comment">// 标题</span></span><br><span class="line">    <span class="keyword">var</span> title: <span class="type">String</span>?</span><br><span class="line">    <span class="comment">// 渐变颜色</span></span><br><span class="line">    <span class="keyword">var</span> color: <span class="type">UIColor</span>? &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123;</span><br><span class="line">            label.textColor = color</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 样式</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> style: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="comment">// 选中状态</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> isSelected: <span class="type">Bool</span> = <span class="literal">false</span> &#123;</span><br><span class="line">        <span class="keyword">didSet</span> &#123; reloadState() &#125;<span class="comment">// 刷新数据</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 自身宽度</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> width: <span class="type">CGFloat</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title?.size(withAttributes: [<span class="type">NSAttributedString</span>.<span class="type">Key</span>.font: font]).width ?? <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 字体大小</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> font: <span class="type">UIFont</span> &#123; <span class="keyword">return</span> isSelected ? style.selectedFont : style.defaultFont &#125;</span><br><span class="line">    <span class="comment">// 字体颜色</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> fontColor: <span class="type">UIColor</span> &#123; <span class="keyword">return</span> isSelected ? style.selectedColor : style.defaultColor &#125;</span><br><span class="line">    <span class="comment">// 点击回调</span></span><br><span class="line">    <span class="keyword">fileprivate</span> <span class="keyword">var</span> tapCallBack: ((<span class="number">_</span> view: <span class="type">PageTitleView</span>) -&gt; <span class="type">Void</span>)?</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> label: <span class="type">UILabel</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> label = <span class="type">UILabel</span>()</span><br><span class="line">        <span class="keyword">let</span> gesture = <span class="type">UITapGestureRecognizer</span>(target: <span class="keyword">self</span>, action: #selector(action(<span class="number">_</span>:)))</span><br><span class="line">        label.addGestureRecognizer(gesture)</span><br><span class="line">        label.isUserInteractionEnabled = <span class="literal">true</span></span><br><span class="line">        <span class="keyword">return</span> label</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">init</span>(title: <span class="type">String</span>?, isSelected: <span class="type">Bool</span>, style: <span class="type">MenuStyle</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.title = title</span><br><span class="line">        <span class="keyword">self</span>.isSelected = isSelected</span><br><span class="line">        <span class="keyword">self</span>.style = style</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: <span class="type">CGRect</span>.zero)</span><br><span class="line">        reloadState()</span><br><span class="line">        <span class="keyword">self</span>.addSubview(label)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 动态链接</span></span><br><span class="line">    <span class="meta">@objc</span> <span class="keyword">fileprivate</span> <span class="function"><span class="keyword">func</span> <span class="title">action</span><span class="params">(<span class="number">_</span> tap: UITapGestureRecognizer)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> tapCallBack != <span class="literal">nil</span> &#123;</span><br><span class="line">            tapCallBack!(<span class="keyword">self</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">reloadState</span><span class="params">()</span></span> &#123;</span><br><span class="line">        label.text = title</span><br><span class="line">        label.textColor = fontColor</span><br><span class="line">        label.font = font</span><br><span class="line">        label.sizeToFit()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题视图</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageTitle</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 代理</span></span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">PageTitleDelegate</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> titleList: [<span class="type">String</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> scrollView: <span class="type">UIScrollView</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> scrollView = <span class="type">UIScrollView</span>(frame: bounds)</span><br><span class="line">        scrollView.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">        addSubview(scrollView)</span><br><span class="line">        <span class="keyword">return</span> scrollView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 指示器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> lineView: <span class="type">UIView</span> = &#123;</span><br><span class="line">        <span class="keyword">var</span> lineView = <span class="type">UIView</span>()</span><br><span class="line">        lineView.backgroundColor = menuStyle.lineColor ?? menuStyle.selectedColor</span><br><span class="line">        lineView.layer.cornerRadius = menuStyle.lineCornerRadius</span><br><span class="line">        lineView.layer.masksToBounds = <span class="literal">true</span></span><br><span class="line">        scrollView.addSubview(lineView)</span><br><span class="line">        <span class="keyword">return</span> lineView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="comment">// 样式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> menuStyle: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="comment">// 当前选中标题</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentSelectedView: <span class="type">PageTitleView</span>?</span><br><span class="line">    <span class="comment">// 标题列表</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> titleViewList = [<span class="type">PageTitleView</span>]()</span><br><span class="line">    <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, menuStyle: <span class="type">MenuStyle</span>, titleList: [<span class="type">String</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.menuStyle = menuStyle</span><br><span class="line">        <span class="keyword">self</span>.titleList = titleList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        setupSubViews()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">setupSubViews</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> totalWidth: <span class="type">CGFloat</span> = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 设置子控件</span></span><br><span class="line">        <span class="keyword">for</span> (idx, title) <span class="keyword">in</span> titleList.enumerated() &#123;</span><br><span class="line">            <span class="keyword">let</span> view = <span class="type">PageTitleView</span>(title: title <span class="keyword">as</span> <span class="type">String</span>, isSelected: <span class="literal">false</span>, style: menuStyle)</span><br><span class="line">            view.index = idx</span><br><span class="line">            titleViewList.append(view)</span><br><span class="line">            <span class="keyword">let</span> x = <span class="type">CGFloat</span>(idx + <span class="number">1</span>) * menuStyle.margin + totalWidth</span><br><span class="line">            view.frame = <span class="type">CGRect</span>(x: x, y: <span class="number">0</span>, width: view.width, height: frame.height - menuStyle.lineHeight)</span><br><span class="line">            totalWidth += view.width</span><br><span class="line">            scrollView.addSubview(view)</span><br><span class="line">            view.tapCallBack = &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] view <span class="keyword">in</span></span><br><span class="line">                <span class="keyword">guard</span> <span class="keyword">let</span> <span class="keyword">self</span> = <span class="keyword">self</span> <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">                <span class="keyword">self</span>.changeToSelectedIndex(idx: view.index)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scrollView.contentSize = <span class="type">CGSize</span>(width: totalWidth + <span class="type">CGFloat</span>(titleList.<span class="built_in">count</span> + <span class="number">1</span>) * menuStyle.margin, height: <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 默认选中的索引 0</span></span><br><span class="line">        changeToSelectedIndex()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: 切换过程中需要调用的函数</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageTitle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">changeToSelectedIndex</span><span class="params">(idx: Int = <span class="number">0</span>, progress: CGFloat = <span class="number">1</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 索引值越界</span></span><br><span class="line">        <span class="keyword">if</span> idx &gt; titleViewList.<span class="built_in">count</span> - <span class="number">1</span> || idx &lt; <span class="number">0</span> || titleViewList.<span class="built_in">count</span> &lt;= <span class="number">0</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">var</span> fromView, toView: <span class="type">PageTitleView</span></span><br><span class="line">        <span class="keyword">if</span> currentSelectedView == <span class="literal">nil</span> &#123;</span><br><span class="line">            fromView = titleViewList.first!</span><br><span class="line">            toView = fromView</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fromView = currentSelectedView!</span><br><span class="line">            toView = titleViewList[idx]</span><br><span class="line">            <span class="comment">// 同一个标题</span></span><br><span class="line">            <span class="keyword">if</span> fromView == toView &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> menuStyle.lineHeight != <span class="number">0</span> &#123;</span><br><span class="line">            refreshBottomLineFrame(fromView.frame, toView.frame, progress)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> menuStyle.lineColorGradual &#123;</span><br><span class="line">            refreshTitleViewColor(fromView, toView, progress)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> progress == <span class="number">1</span> &#123;</span><br><span class="line">            refreshTitleViewState(fromView, toView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 设置指示条frame</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshBottomLineFrame</span><span class="params">(<span class="number">_</span> from: CGRect, <span class="number">_</span> to: CGRect, <span class="number">_</span> progress: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">var</span> from = from</span><br><span class="line">        <span class="keyword">var</span> to = to</span><br><span class="line">        <span class="keyword">let</span> lineHeight = menuStyle.lineHeight</span><br><span class="line">        <span class="keyword">let</span> lineWidth = menuStyle.lineWidth</span><br><span class="line">        <span class="keyword">let</span> y = frame.height - lineHeight</span><br><span class="line">        <span class="keyword">let</span> isFixedLineWidth = lineWidth != <span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> fromWidth = isFixedLineWidth ? lineWidth : from.width</span><br><span class="line">        <span class="keyword">let</span> toWidth = isFixedLineWidth ? lineWidth : to.width</span><br><span class="line">        <span class="keyword">let</span> fromMinX = isFixedLineWidth ? from.midX - lineWidth * <span class="number">0.5</span> : from.minX</span><br><span class="line">        <span class="keyword">let</span> fromMaxX = isFixedLineWidth ? fromMinX + lineWidth : from.maxX</span><br><span class="line">        <span class="keyword">let</span> toMinX = isFixedLineWidth ? to.midX - lineWidth * <span class="number">0.5</span> : to.minX</span><br><span class="line">        <span class="keyword">let</span> toMaxX = isFixedLineWidth ? toMinX + lineWidth : to.maxX</span><br><span class="line">        from = <span class="type">CGRect</span>(x: fromMinX, y: y, width: fromWidth, height: lineHeight)</span><br><span class="line">        to = <span class="type">CGRect</span>(x: toMinX, y: y, width: toWidth, height: lineHeight)</span><br><span class="line">        <span class="keyword">let</span> isToLeft = toMinX &lt; fromMinX <span class="comment">// 向左</span></span><br><span class="line">        <span class="keyword">if</span> progress &lt; <span class="number">0.5</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isToLeft &#123; <span class="comment">// 向左移动</span></span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (fromMinX - toMinX) * <span class="number">2</span> * progress</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: fromMinX - offsetWidth, y: y, width:  fromMaxX - fromMinX + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (toMaxX - fromMaxX) * <span class="number">2</span> * progress</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: fromMinX, y: y, width:from.width + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> isToLeft &#123; <span class="comment">// 向左移动</span></span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (fromMaxX - to.maxX) * (<span class="number">1</span> - (progress - <span class="number">0.5</span>) * <span class="number">2</span>)</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: toMinX, y: y, width:to.width + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> offsetWidth = (toMinX - fromMinX) * (<span class="number">1</span> - (progress - <span class="number">0.5</span>) * <span class="number">2</span>)</span><br><span class="line">                lineView.frame = <span class="type">CGRect</span>(x: toMinX - offsetWidth, y: y, width:toMaxX - toMinX + offsetWidth, height: lineHeight)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 刷新标题状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshTitleViewState</span><span class="params">(<span class="number">_</span> fromView: PageTitleView, <span class="number">_</span> toView: PageTitleView)</span></span> &#123;</span><br><span class="line">        <span class="comment">// 更新currentSelectedView</span></span><br><span class="line">        currentSelectedView?.isSelected = <span class="literal">false</span></span><br><span class="line">        toView.isSelected = <span class="literal">true</span></span><br><span class="line">        currentSelectedView = toView</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置标题居中</span></span><br><span class="line">        <span class="keyword">let</span> width = scrollView.bounds.width</span><br><span class="line">        <span class="keyword">let</span> contentWidth = scrollView.contentSize.width</span><br><span class="line">        <span class="keyword">var</span> offsetX = toView.center.x - width * <span class="number">0.5</span></span><br><span class="line">        offsetX = <span class="built_in">max</span>(offsetX, <span class="number">0</span>)</span><br><span class="line">        offsetX = <span class="built_in">min</span>(contentWidth - width, offsetX)</span><br><span class="line">        <span class="keyword">if</span> contentWidth &lt;= width &#123; <span class="comment">// 保持居中</span></span><br><span class="line">            <span class="keyword">let</span> viewWidth = <span class="type">CGFloat</span>(titleViewList.last?.frame.maxX ?? <span class="number">0</span>) - <span class="type">CGFloat</span>(titleViewList.first?.frame.minX ?? <span class="number">0</span>)</span><br><span class="line">            offsetX = -(width - viewWidth) * <span class="number">0.5</span> + menuStyle.margin</span><br><span class="line">        &#125;</span><br><span class="line">        scrollView.setContentOffset(<span class="type">CGPoint</span>(x: offsetX, y: <span class="number">0</span>), animated: <span class="literal">true</span>)</span><br><span class="line">        <span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">            delegate?.pageTitleDidSelected(pageTitle: <span class="keyword">self</span>, pageTitleView: toView)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 标题颜色渐变</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">refreshTitleViewColor</span><span class="params">(<span class="number">_</span> fromView: PageTitleView, <span class="number">_</span> toView: PageTitleView, <span class="number">_</span> progress: CGFloat)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> toRGB = <span class="type">UIColor</span>.rgbValue(menuStyle.selectedColor)</span><br><span class="line">        <span class="keyword">let</span> fromRGB = <span class="type">UIColor</span>.rgbValue(menuStyle.defaultColor)</span><br><span class="line">        <span class="keyword">let</span> deltaRGB = (toRGB.<span class="number">0</span> - fromRGB.<span class="number">0</span>, toRGB.<span class="number">1</span> - fromRGB.<span class="number">1</span>, toRGB.<span class="number">2</span> - fromRGB.<span class="number">2</span>)</span><br><span class="line">        fromView.color = <span class="type">UIColor</span>(r: toRGB.<span class="number">0</span> - deltaRGB.<span class="number">0</span> * progress, g: toRGB.<span class="number">1</span> - deltaRGB.<span class="number">1</span> * progress, b: toRGB.<span class="number">2</span> - deltaRGB.<span class="number">2</span> * progress)</span><br><span class="line">        toView.color = <span class="type">UIColor</span>(r: fromRGB.<span class="number">0</span> + deltaRGB.<span class="number">0</span> * progress, g: fromRGB.<span class="number">1</span> + deltaRGB.<span class="number">1</span> * progress, b: fromRGB.<span class="number">2</span> + deltaRGB.<span class="number">2</span> * progress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: PageContentDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageTitle</span> : <span class="title">PageContentDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageContentDidChange</span><span class="params">(pageContent: PageContent, targetIndex: Int, progress: CGFloat)</span></span> &#123;</span><br><span class="line">        changeToSelectedIndex(idx: targetIndex, progress: progress)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PageContent"><a href="#PageContent" class="headerlink" title="PageContent"></a>PageContent</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">PageContentDelegate</span> : <span class="title">class</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">pageContentDidChange</span><span class="params">(pageContent: PageContent, targetIndex: Int, progress: CGFloat)</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageContent</span>: <span class="title">UIView</span> </span>&#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">PageContentDelegate</span>?</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> controllerList: [<span class="type">UIViewController</span>]</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> identifier = <span class="string">"PageMenu_CollectionView_Identifier"</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> currentIndex = <span class="number">0</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> shouldCallDelegate = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">lazy</span> <span class="keyword">var</span> collectionView: <span class="type">UICollectionView</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> layout = <span class="type">UICollectionViewFlowLayout</span>()</span><br><span class="line">        layout.itemSize = bounds.size</span><br><span class="line">        layout.scrollDirection = .horizontal</span><br><span class="line">        layout.minimumLineSpacing = <span class="number">0</span></span><br><span class="line">        layout.minimumInteritemSpacing = <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> collectionView = <span class="type">UICollectionView</span>(frame: bounds, collectionViewLayout: layout)</span><br><span class="line">        collectionView.dataSource = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UICollectionViewDataSource</span></span><br><span class="line">        collectionView.delegate = <span class="keyword">self</span> <span class="keyword">as</span> <span class="type">UICollectionViewDelegate</span></span><br><span class="line">        collectionView.showsHorizontalScrollIndicator = <span class="literal">false</span></span><br><span class="line">        collectionView.scrollsToTop = <span class="literal">false</span></span><br><span class="line">        collectionView.isPagingEnabled = <span class="literal">true</span></span><br><span class="line">        collectionView.bounces = <span class="literal">false</span></span><br><span class="line">        collectionView.backgroundColor = <span class="type">UIColor</span>.white</span><br><span class="line">        <span class="comment">// 注册cell</span></span><br><span class="line">        collectionView.register(<span class="type">UICollectionViewCell</span>.<span class="keyword">self</span>, forCellWithReuseIdentifier: identifier)</span><br><span class="line">        addSubview(collectionView)</span><br><span class="line">        <span class="keyword">return</span> collectionView</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">init</span>(frame: <span class="type">CGRect</span>, controllerList: [<span class="type">UIViewController</span>]) &#123;</span><br><span class="line">        <span class="keyword">self</span>.controllerList = controllerList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(frame: frame)</span><br><span class="line">        <span class="keyword">self</span>.collectionView.reloadData()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UICollectionViewDataSource</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">UICollectionViewDataSource</span>, <span class="title">UICollectionViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, numberOfItemsInSection section: Int)</span></span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> controllerList.<span class="built_in">count</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">collectionView</span><span class="params">(<span class="number">_</span> collectionView: UICollectionView, cellForItemAt indexPath: IndexPath)</span></span> -&gt; <span class="type">UICollectionViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier, <span class="keyword">for</span>: indexPath)</span><br><span class="line">        <span class="keyword">let</span> view = controllerList[indexPath.row].view!</span><br><span class="line">        view.frame = cell.bounds</span><br><span class="line">        cell.contentView.addSubview(view)</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: UIScrollViewDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">UIScrollViewDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidEndDecelerating</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="type">Int</span>(scrollView.contentOffset.x / scrollView.bounds.width)</span><br><span class="line">        currentIndex = index</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewWillBeginDragging</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        shouldCallDelegate = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">scrollViewDidScroll</span><span class="params">(<span class="number">_</span> scrollView: UIScrollView)</span></span> &#123;</span><br><span class="line">        <span class="keyword">if</span> !shouldCallDelegate &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">let</span> width = scrollView.bounds.width</span><br><span class="line">        <span class="keyword">let</span> offsetX = scrollView.contentOffset.x - <span class="type">CGFloat</span>(currentIndex) * width</span><br><span class="line">        <span class="keyword">let</span> offsetIndex = offsetX &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">        <span class="keyword">let</span> progress = <span class="built_in">abs</span>(offsetX) / width</span><br><span class="line">        <span class="keyword">if</span> delegate != <span class="literal">nil</span> &#123;</span><br><span class="line">            delegate?.pageContentDidChange(pageContent: <span class="keyword">self</span>, targetIndex: currentIndex + offsetIndex, progress: progress)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// MARK: PageTitleDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">PageContent</span> : <span class="title">PageTitleDelegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">func</span> <span class="title">pageTitleDidSelected</span><span class="params">(pageTitle: PageTitle, pageTitleView: PageTitleView)</span></span> &#123;</span><br><span class="line">        shouldCallDelegate = <span class="literal">false</span></span><br><span class="line">        collectionView.scrollToItem(at: <span class="type">IndexPath</span>(item: pageTitleView.index, section: <span class="number">0</span>), at: .<span class="keyword">left</span>, animated: <span class="literal">false</span>)</span><br><span class="line">        currentIndex = pageTitleView.index</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="PageMenu"><a href="#PageMenu" class="headerlink" title="PageMenu"></a>PageMenu</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageMenu</span> : <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pageTitle: <span class="type">PageTitle</span></span><br><span class="line">    <span class="keyword">var</span> pageContent: <span class="type">PageContent</span></span><br><span class="line">    <span class="keyword">var</span> menuStyle: <span class="type">MenuStyle</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> controllerList: [<span class="type">UIViewController</span>]</span><br><span class="line">    <span class="keyword">init</span>(<span class="number">_</span> menuStyle: <span class="type">MenuStyle</span>, <span class="number">_</span> controllerList: [<span class="type">UIViewController</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> titleList = [<span class="type">String</span>]()</span><br><span class="line">        <span class="keyword">for</span> controller <span class="keyword">in</span> controllerList &#123;</span><br><span class="line">            titleList.append(controller.title ?? <span class="string">"null"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">self</span>.pageTitle = <span class="type">PageTitle</span>(frame: menuStyle.pageTitleFrame, menuStyle: menuStyle, titleList: titleList)</span><br><span class="line">        <span class="keyword">self</span>.pageContent = <span class="type">PageContent</span>(frame: <span class="type">CGRect</span>(x: pageTitle.frame.minX, y: pageTitle.frame.maxY + menuStyle.titleContentMargin, width: pageTitle.frame.width, height: <span class="type">UIScreen</span>.main.bounds.height - pageTitle.frame.height), controllerList: controllerList)</span><br><span class="line">        <span class="keyword">self</span>.menuStyle = menuStyle</span><br><span class="line">        <span class="keyword">self</span>.controllerList = controllerList</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(nibName: <span class="literal">nil</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">        configureComponent()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</span><br><span class="line">        <span class="built_in">fatalError</span>(<span class="string">"init(coder:) has not been implemented"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">configureComponent</span><span class="params">()</span></span> &#123;</span><br><span class="line">        view.addSubview(pageTitle)</span><br><span class="line">        view.addSubview(pageContent)</span><br><span class="line">        <span class="keyword">for</span> controller <span class="keyword">in</span> controllerList &#123;</span><br><span class="line">            addChild(controller)</span><br><span class="line">        &#125;</span><br><span class="line">        pageTitle.delegate = pageContent</span><br><span class="line">        pageContent.delegate = pageTitle</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="UIColor-RGB"><a href="#UIColor-RGB" class="headerlink" title="UIColor+RGB"></a>UIColor+RGB</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Foundation</span><br><span class="line"><span class="keyword">import</span> UIKit</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UIColor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">convenience</span> <span class="keyword">init</span>(r : <span class="type">CGFloat</span>, g : <span class="type">CGFloat</span>, b : <span class="type">CGFloat</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(red: r / <span class="number">255.0</span>, green: g / <span class="number">255.0</span>, blue: b / <span class="number">255.0</span>, alpha: <span class="number">1.0</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">rgbValue</span>(<span class="title">_</span> <span class="title">color</span> : <span class="title">UIColor</span>) -&gt; (<span class="title">CGFloat</span>, <span class="title">CGFloat</span>, <span class="title">CGFloat</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> components = color.cgColor.components <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fatalError</span>(<span class="string">"颜色按照RGB设置"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (components[<span class="number">0</span>] * <span class="number">255</span>, components[<span class="number">1</span>] * <span class="number">255</span>, components[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>简单配置一下MenuStyle，创建自己的视图控制器，就能直接使用了。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">override func viewDidLoad() &#123;</span><br><span class="line">    super.viewDidLoad()</span><br><span class="line">    <span class="selector-tag">var</span> controllerList = [UIViewController]()</span><br><span class="line">    let style: MenuStyle = MenuStyle()</span><br><span class="line">    <span class="comment">// 创建style并配置样式</span></span><br><span class="line">    style<span class="selector-class">.margin</span> = <span class="number">30</span></span><br><span class="line">    style<span class="selector-class">.defaultColor</span> = UIColor(r: <span class="number">135</span>, g: <span class="number">135</span>, <span class="selector-tag">b</span>: <span class="number">135</span>)</span><br><span class="line">    style<span class="selector-class">.selectedColor</span> = UIColor(r: <span class="number">0</span>, g: <span class="number">0</span>, <span class="selector-tag">b</span>: <span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 创建控制器</span></span><br><span class="line">    let red = UIViewController()</span><br><span class="line">    red<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.red</span><br><span class="line">    red<span class="selector-class">.title</span> = <span class="string">"关注"</span></span><br><span class="line">    let blue = UIViewController()</span><br><span class="line">    blue<span class="selector-class">.view</span><span class="selector-class">.backgroundColor</span> = UIColor.blue</span><br><span class="line">    blue<span class="selector-class">.title</span> = <span class="string">"热门"</span></span><br><span class="line">    controllerList = [red, blue]</span><br><span class="line">    <span class="comment">// 创建PageMenu</span></span><br><span class="line">    let pageMenu = PageMenu(style, controllerList)</span><br><span class="line">    pageMenu<span class="selector-class">.pageTitle</span><span class="selector-class">.backgroundColor</span> = UIColor(r: <span class="number">45</span>, g: <span class="number">184</span>, <span class="selector-tag">b</span>: <span class="number">105</span>)</span><br><span class="line">    addChild(pageMenu)</span><br><span class="line">    view.addSubview(pageMenu.view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h1><p>微博样式：<br><img src="https://image.chenyalun.com/2019/03/22/weibo.gif" style="zoom:60%"></p>
<p>it之家样式：<br><img src="https://image.chenyalun.com/2019/03/22/ithome.gif" style="zoom:60%"></p>
<h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>处理起来比较麻烦一点的就是，标题区指示条的frame渐变，要考虑左滑和右滑的情况，还要考虑进度progress的问题。不过还好，仔细想想都能解决的。</p>
<p>再一个，PageTitle和PageContent之间互相通信的方案，我选择的是代理。PageTitle是PageContent的代理，同时，PageContent又是PageTitle的代理。由PageMenu负责连接。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现通知中心]]></title>
      <url>http://blog.chenyalun.com/2019/01/28/%E5%AE%9E%E7%8E%B0%E9%80%9A%E7%9F%A5%E4%B8%AD%E5%BF%83/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 自己去实现NotificationCenter。 </p><br><a id="more"></a><p></p>
<p>有几个弱引用容器在日常工作中没有用过，但是又特别想亲手实践一番。偶尔看到一篇文章，说是自己实现了系统中通知中心的功能，出于好奇，于是自己也尝试一番。</p>
<p>主要原理就是创建一个字典observerMap，notificationName作为key，NSMapTable作为value。在这个NSMapTable中，观察者observer作为key，用于存放观察者的NSHashSet作为value。挺绕的。</p>
<h1 id="接口文件"><a href="#接口文件" class="headerlink" title="接口文件"></a>接口文件</h1><p>接口与系统保持一致。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSString</span> *YANotificationName <span class="built_in">NS_EXTENSIBLE_STRING_ENUM</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YANotificationCenter</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">class</span>, <span class="keyword">readonly</span>, <span class="keyword">strong</span>) YANotificationCenter *defaultCenter;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>)observer selector:(SEL)aSelector name:(<span class="keyword">nullable</span> YANotificationName)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject userInfo:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)aUserInfo;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer;</span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer name:(<span class="keyword">nullable</span> YANotificationName)aName object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="built_in">NS_ASSUME_NONNULL_END</span></span><br></pre></td></tr></table></figure>
<h1 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist"></a>Checklist</h1><ul>
<li style="list-style: none"><input type="checkbox" checked> 不增加observer和object的引用计数</li>
<li style="list-style: none"><input type="checkbox" checked> 支持携带参数信息userInfo</li>
<li style="list-style: none"><input type="checkbox" checked> 可以不指定object</li>
<li style="list-style: none"><input type="checkbox" checked> 添加观察者时指定object，post通知时只有相同的object才会有效</li>
<li style="list-style: none"><input type="checkbox" checked> observer为nil，发送通知时没有作用</li>
<li style="list-style: none"><input type="checkbox" checked> 指定线程发送通知，则在指定线程调用</li>
<li style="list-style: none"><input type="checkbox" checked> 没有及时移除通知，observer销毁之后继续发送通知不会产生异常<br>(从iOS 9开始，即使不移除观察者对象，程序也不会出现异常。)</li>
<li style="list-style: none"><input type="checkbox" checked> 支持多个observer监听同一个通知</li>
<li style="list-style: none"><input type="checkbox" checked> 如果notificationName为nil，object有值，则接收所有指定为object的通知</li>
<li style="list-style: none"><input type="checkbox" checked> 如果notificationName为nil，且object也为nil，则接收系统内所有通知<br>(也即YANotificationCenter发出的所有通知)</li>
<li style="list-style: none"><input type="checkbox" checked> 移除所有通知后，相关方法不再调用</li>
<li style="list-style: none"><input type="checkbox" checked> 移除指定通知后，相关方法不再调用</li>
<li style="list-style: none"><input type="checkbox" checked> 同步传递通知给观察者</li>
<li style="list-style: none"><input type="checkbox"> 多次添加observer，发送通知时多次调用</li>
<li style="list-style: none"><input type="checkbox"> 支持异步发布通知（NotificationQueue）</li>
</ul>
<p>如果想；<br>“多次添加observer，发送通知时多次调用”这个没有实现。目前是多次添加observer，发送通知时只会调用一次。其实要实现也有办法，只是个人感觉这样是不是更好一点？</p>
<h1 id="功能测试"><a href="#功能测试" class="headerlink" title="功能测试"></a>功能测试</h1><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 不对observer和object强引用</span><br><span class="line"><span class="number">2.</span> 可以携带参数userInfo</span><br><span class="line"><span class="number">3.</span> 添加观察者时object为nil，post通知时object有值，依然有效(表示不限于指定的object)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_1"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_1"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">4.</span> 添加观察者时指定object，post通知时相同的object，有效，不同的object，无效</span><br><span class="line"><span class="comment">// 有效</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_2"</span> <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_2"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无效</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_3"</span> <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_3"</span> <span class="string">object:</span>a <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> 可以添加n次observer，发送通知时对应调用n次(不支持)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">print3:</span>) <span class="string">name:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_4"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">6.</span> 未添加observer，发送通知时没有作用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_5"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span> 指定线程发送通知，则在指定线程调用</span><br><span class="line"><span class="comment">// print方法是在发送通知的线程中调用的</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_6"</span> <span class="string">object:</span>nil];</span><br><span class="line">dispatch_async(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">NSLog(@<span class="string">"当前线程:%@"</span>,[NSThread currentThread]);</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_6"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span> 没有在observer的dealloc方法中移除通知，observer销毁之后继续发送通知，无影响(从iOS <span class="number">9</span>开始，即使不移除观察者对象，程序也不会出现异常。)</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_7"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// a对象销毁之后继续发送通知</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_7"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span> 多个observer监听同一个通知，所有observer的相关方法均得到调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>a <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>b <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>c <span class="string">selector:</span><span class="meta">@selector</span>(print) <span class="string">name:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_8"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">10.</span> 如果notificationName为nil，object有值，则接收所有指定为object的通知</span><br><span class="line"><span class="comment">// 接收self发送的所有通知</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>nil <span class="string">object:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_9"</span> <span class="string">object:</span>self <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"><span class="number">11.</span> 如果notificationName为nil，且object也为nil，则接收系统内所有通知(也即YANotificationCenter发出的所有通知)</span><br><span class="line"><span class="comment">// 接收系统内所有通知，也即任意一个通知都会触发</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>nil <span class="string">object:</span>nil];</span><br><span class="line"><span class="number">12.</span> 移除所有通知后，相关方法不再调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>@<span class="string">"Noti_10"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// 移除所有通知后，再次发送通知没有效果</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">removeObserver:</span>self];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_10"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="number">13.</span> 移除指定通知后，相关方法不再调用</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(print1) <span class="string">name:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil];</span><br><span class="line"><span class="comment">// 移除指定通知后，再次发送通知没有效果</span></span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">removeObserver:</span>self <span class="string">name:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil];</span><br><span class="line">[YANotificationCenter.defaultCenter <span class="string">postNotificationName:</span>@<span class="string">"Noti_11"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>@&#123;@<span class="string">"key"</span>: @<span class="string">"value"</span>&#125;];</span><br></pre></td></tr></table></figure>
<h1 id="实现文件"><a href="#实现文件" class="headerlink" title="实现文件"></a>实现文件</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">"YANotificationCenter.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, YANotificationSenderType) &#123;</span><br><span class="line">    YANotificationSenderTypeObject   = <span class="number">0</span>, <span class="comment">// 指定对象</span></span><br><span class="line">    YANotificationSenderTypeObserver = <span class="number">1</span>, <span class="comment">// 观察者</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YANotificationCenter</span>()</span></span><br><span class="line"><span class="comment">// Recorder observer.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *observerMap;</span><br><span class="line"><span class="comment">// Recorder all the selector.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableDictionary</span> *selectorMap;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YANotificationCenter</span></span></span><br><span class="line">- (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</span><br><span class="line">        _observerMap = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">        _selectorMap = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (YANotificationCenter *)defaultCenter &#123;</span><br><span class="line">    <span class="keyword">static</span> YANotificationCenter *center = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        center = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)addObserver:(<span class="keyword">id</span>)observer selector:(SEL)aSelector name:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    <span class="keyword">if</span> (!observer) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (!aName) aName = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="keyword">if</span> (!map) map = [<span class="built_in">NSMapTable</span> weakToStrongObjectsMapTable];</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="built_in">NSHashTable</span> *set = [map objectForKey:observer];</span><br><span class="line">        <span class="keyword">if</span> (!set || ![set isKindOfClass:[<span class="built_in">NSHashTable</span> <span class="keyword">class</span>]]) set = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</span><br><span class="line">        [set addObject:anObject];</span><br><span class="line">        [map setObject:set forKey:observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [map setObject:(<span class="keyword">id</span>)kCFNull forKey:observer];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="keyword">self</span>.observerMap setObject:map forKey:aName];</span><br><span class="line">    <span class="built_in">NSString</span> *key = generateKey(observer, anObject, aName);</span><br><span class="line">    [<span class="keyword">self</span>.selectorMap setObject:<span class="built_in">NSStringFromSelector</span>(aSelector) forKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(<span class="built_in">NSNotificationName</span>)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    [<span class="keyword">self</span> postNotificationName:aName object:anObject userInfo:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)postNotificationName:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject userInfo:(<span class="built_in">NSDictionary</span> *)aUserInfo &#123;</span><br><span class="line">    <span class="comment">// When the notification name is nil.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:(<span class="keyword">id</span>)kCFNull];</span><br><span class="line">        <span class="keyword">id</span> key = <span class="literal">nil</span>;</span><br><span class="line">        <span class="built_in">NSEnumerator</span> *enumerator = map.keyEnumerator;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSHashTable</span> *set = [map objectForKey:key];</span><br><span class="line">            <span class="built_in">NSArray</span> *selectorList = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">if</span> (set == (<span class="keyword">id</span>)kCFNull) &#123;</span><br><span class="line">                selectorList = <span class="keyword">self</span>.selectorMap.allValues;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ([set containsObject:anObject]) &#123;</span><br><span class="line">                selectorList = selectorListForSender(<span class="keyword">self</span>, anObject, YANotificationSenderTypeObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!selectorList) <span class="keyword">break</span>;</span><br><span class="line">            [selectorList enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *selector, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">                SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">                ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">            &#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Normal process.</span></span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="keyword">id</span> key = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSEnumerator</span> *enumerator = map.keyEnumerator;</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSHashTable</span> *set = [map objectForKey:key];</span><br><span class="line">            <span class="keyword">if</span> (set == (<span class="keyword">id</span>)kCFNull || [set containsObject:anObject]) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *selector = [<span class="keyword">self</span>.selectorMap objectForKey:generateKey(key, anObject, aName)];</span><br><span class="line">                <span class="keyword">if</span> (!selector) <span class="keyword">return</span>;</span><br><span class="line">                SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">                ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (key = [enumerator nextObject]) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *selector = [<span class="keyword">self</span>.selectorMap objectForKey:generateKey(key, anObject, aName)];</span><br><span class="line">            <span class="keyword">if</span> (!selector) <span class="keyword">return</span>;</span><br><span class="line">            SEL sel = <span class="built_in">NSSelectorFromString</span>(selector);</span><br><span class="line">            ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))[key methodForSelector:sel])(<span class="keyword">self</span>, sel, aUserInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer &#123;</span><br><span class="line">    [<span class="keyword">self</span>.observerMap.allValues enumerateObjectsUsingBlock:^(<span class="built_in">NSMapTable</span> *map, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        [map removeObjectForKey:observer];</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span>.selectorMap removeObjectsForKeys:selectorListForSender(<span class="keyword">self</span>, observer, YANotificationSenderTypeObserver)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObserver:(<span class="keyword">id</span>)observer name:(YANotificationName)aName object:(<span class="keyword">id</span>)anObject &#123;</span><br><span class="line">    <span class="built_in">NSMapTable</span> *map = [<span class="keyword">self</span>.observerMap objectForKey:aName];</span><br><span class="line">    <span class="comment">// Remove selector.</span></span><br><span class="line">    [<span class="keyword">self</span>.selectorMap removeObjectForKey:generateKey(observer, anObject, aName)];</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        <span class="built_in">NSHashTable</span> *set = [map objectForKey:observer];</span><br><span class="line">        [set removeObject:anObject];</span><br><span class="line">        <span class="keyword">if</span> (set.count == <span class="number">0</span>) [map removeObjectForKey:observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [map removeObjectForKey:observer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (map.count == <span class="number">0</span>) [<span class="keyword">self</span>.observerMap removeObjectForKey:aName];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSString</span> *generateKey(<span class="keyword">id</span> observer, <span class="keyword">id</span> anObject, YANotificationName name) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *key = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (anObject) &#123;</span><br><span class="line">        key = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p_%@_%p"</span> ,anObject, name, observer];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        key = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@_%p"</span>, name, observer];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="built_in">NSArray</span> *selectorListForSender(YANotificationCenter *<span class="keyword">self</span>, <span class="keyword">id</span> object, YANotificationSenderType type) &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *p = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p"</span>, object];</span><br><span class="line">    <span class="built_in">NSPredicate</span> *predicate = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (type == YANotificationSenderTypeObject) &#123;</span><br><span class="line">        predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF BEGINSWITH %@"</span>, p];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        predicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"SELF ENDSWITH %@"</span>, p];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSArray</span> *keys = [<span class="keyword">self</span>.selectorMap.allKeys filteredArrayUsingPredicate:predicate];</span><br><span class="line">    <span class="built_in">NSArray</span> *result = [<span class="keyword">self</span>.selectorMap objectsForKeys:keys notFoundMarker:(<span class="keyword">id</span>)kCFNull];</span><br><span class="line">    <span class="keyword">return</span> result.count == <span class="number">0</span> ? <span class="literal">nil</span> : result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考资料：<br><a href="http://southpeak.github.io/2015/03/20/cocoa-foundation-nsnotificationcenter/" target="_blank" rel="noopener">http://southpeak.github.io/2015/03/20/cocoa-foundation-nsnotificationcenter/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weak Associated Object]]></title>
      <url>http://blog.chenyalun.com/2019/01/20/Weak%20Associated%20Object/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 给分类添加weak属性的几种方法。 </p><br><a id="more"></a><p></p>
<p>众所周知，通过Runtime的关联属性来给分类添加“属性”，这里的属性缺少了严格意义上的成员变量，而且是自己手动实现了getter方法和setter方法。几种关联策略中并没有与weak效果相媲美的选项，<code>OBJC_ASSOCIATION_ASSIGN</code>策略与weak效果的主要区别在于weak自动能将指向已销毁对象的指针指为nil。</p>
<h1 id="危险的ASSIGN"><a href="#危险的ASSIGN" class="headerlink" title="危险的ASSIGN"></a>危险的ASSIGN</h1><p>单纯使用ASSIGN容易诱发换内存访问，原因无需多言。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">Default</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> strongObj;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">Default</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setStrongObj:(<span class="keyword">id</span>)strongObj &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(strongObj), strongObj, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)strongObj &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(strongObj));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例如下</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</span><br><span class="line">    <span class="built_in">NSObject</span> *main = [<span class="built_in">NSObject</span> new];</span><br><span class="line">    main.strongObj = obj;</span><br><span class="line">    obj = <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, main.strongObj); <span class="comment">// Crash</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="极简方案"><a href="#极简方案" class="headerlink" title="极简方案"></a>极简方案</h1><p>这是一种极好的给分类添加<code>weak</code>属性的实现方式。看到这种实现方式后极为兴奋，实在太简洁、巧妙了。<code>__weak</code>本身就会把指针指向nil，那直接利用就是了。使用<code>OBJC_ASSOCIATION_COPY</code>关联策略将block copy到堆上，利用block把持有的<code>weak</code>对象返回，如果对象不存在了，返回的便是空值。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">Weak</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> object;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">Weak</span>)</span></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">id</span> __<span class="keyword">weak</span> weakObject = object;</span><br><span class="line">    <span class="keyword">id</span> (^block)(<span class="keyword">void</span>) = ^&#123; <span class="keyword">return</span> weakObject; &#125;;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(object), block, OBJC_ASSOCIATION_COPY);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)object &#123;</span><br><span class="line">    <span class="keyword">id</span> (^block)(<span class="keyword">void</span>) = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(object));</span><br><span class="line">    <span class="keyword">return</span> (block ? block() : <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h1 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h1><p>这种方式是通过包装一个对象实现的。要求设置的关联对象是<code>YAWeakObject</code>类型。当这个对象销毁的时候调用<code>deallocBlock</code>，而在这个block中把关联的对象重新设置为<code>nil</code>(不可使用<code>objc_removeAssociatedObjects</code>直接移除关联对象)，这样访问这个关联对象的时候得到的就是nil值了。</p>
<p>这种方式会污染<code>weak</code>属性，要求被设置为<code>weak</code>属性的对象必须是某种类型，不是太好。当然根据这种思路，还可以进一步封装，最终的落脚点无非是提供新的方法接口替代原生的运行时方法(见参考文章)。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">WeakClass</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) YAWeakObject *weakObject;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">WeakClass</span>)</span></span><br><span class="line">- (YAWeakObject *)weakObject &#123;</span><br><span class="line">    <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setWeakObject:(YAWeakObject *)weakObject &#123;</span><br><span class="line">    objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject), weakObject, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    <span class="keyword">typeof</span>(<span class="keyword">self</span>) slf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;</span><br><span class="line">        <span class="keyword">typeof</span>(slf) <span class="keyword">self</span> = slf;</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObject), <span class="literal">nil</span>, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    &#125;;</span><br><span class="line">    [weakObject setDeallocBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<h1 id="使用容器"><a href="#使用容器" class="headerlink" title="使用容器"></a>使用容器</h1><p>实际上使用支持弱引用的容器如<code>NSHashTable</code>、<code>NSMapTable</code>、<code>NSPointerArray</code>都是可以实现的。原理很简单，使用容器持有关联的对象，当该对象不存在时，容器自身便有自动移除已销毁对象的特性，这样就实现了<code>weak</code>属性。</p>
<blockquote>
<p>NSMapTable 可以持有键和值的弱引用，当键或者值当中的一个被释放时，整个这一项就会被移除掉。<br>NSHashTable 可以持有成员的弱引用。<br>NSPointerArray 可以持有成员的弱引用，当成员不存在时自动把所在index置为NULL。</p>
</blockquote>
<p>这种做法需要创建一个容器，相对比较麻烦。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span>(<span class="title">WeakContainer</span>)</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="keyword">id</span> weakObj;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span>(<span class="title">WeakContainer</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSPointerArray</span> *gPointerArray = <span class="literal">nil</span>;</span><br><span class="line">- (<span class="keyword">id</span>)weakObj &#123;</span><br><span class="line">    <span class="keyword">if</span> (!gPointerArray) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// Removes NULL values from the receiver.(sometimes doesn't work as documented)</span></span><br><span class="line">    [gPointerArray compact];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> gPointerArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> objc_getAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObj));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    gPointerArray = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setWeakObj:(<span class="keyword">id</span>)weakObj &#123;</span><br><span class="line">    <span class="keyword">if</span> (weakObj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!gPointerArray) gPointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</span><br><span class="line">        [gPointerArray addPointer:(__bridge <span class="keyword">void</span> *)weakObj];</span><br><span class="line">        objc_setAssociatedObject(<span class="keyword">self</span>, <span class="keyword">@selector</span>(weakObj), weakObj, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h1 id="多说一句"><a href="#多说一句" class="headerlink" title="多说一句"></a>多说一句</h1><p>有一个东西在作者的文章里看到，比较有意思。</p>
<h2 id="Weak-Singleton"><a href="#Weak-Singleton" class="headerlink" title="Weak Singleton"></a>Weak Singleton</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">instancetype</span>)sharedWeakInstance &#123;</span><br><span class="line">    <span class="keyword">static</span> __<span class="keyword">weak</span> <span class="keyword">id</span> weakObj = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> strongObj = weakObj;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!strongObj) &#123;</span><br><span class="line">            strongObj = [[<span class="keyword">self</span> <span class="keyword">class</span>] new];</span><br><span class="line">            weakObj = strongObj;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strongObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>应用场景:不需要保存公共的信息、用户状态等，符合”用完就走”。如果类似LoginManager管理登录状态，继承自 AFHttpSessionManager的NetworkManager单例，App单例ClientManager等则不适用这种方式。</p>
<p>参考资料：</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/ed65d71554d8" target="_blank" rel="noopener">https://www.jianshu.com/p/ed65d71554d8</a><br><a href="https://blog.csdn.net/yan_1564335/article/details/53996538" target="_blank" rel="noopener">https://blog.csdn.net/yan_1564335/article/details/53996538</a><br><a href="http://mrpeak.cn/blog/ios-weak/" target="_blank" rel="noopener">http://mrpeak.cn/blog/ios-weak/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「KVOController」的封装]]></title>
      <url>http://blog.chenyalun.com/2019/01/12/%E3%80%8CKVOController%E3%80%8D%E7%9A%84%E5%B0%81%E8%A3%85/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 学习KVO的封装。 </p><br><a id="more"></a><p></p>
<p>KVOController源码只有700行左右，读一遍下来还是比较通畅的。这里做一个记录。</p>
<h1 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h1><p>使用起来极其简便。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置所观察的对象及其keyPath</span></span><br><span class="line">[<span class="keyword">self</span>.KVOController observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change[<span class="built_in">NSKeyValueChangeNewKey</span>]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>这里的<code>self.KVOController</code>可以自己创建，也可以使用默认，因为<code>KVOController</code>是懒加载的。</p>
<p>一般情况下是像上面这样使用的，还有一种情况，不需要强持有被观察者的时候：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.KVOControllerNonRetaining observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, change[<span class="built_in">NSKeyValueChangeNewKey</span>]);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>只需使用<code>self.KVOControllerNonRetaining</code>即可不增加被观察者<code>self.myButton</code>的引用计数。</p>
<h1 id="二、分类"><a href="#二、分类" class="headerlink" title="二、分类"></a>二、分类</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> NSObject (FBKVOController)</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) FBKVOController *KVOController;</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) FBKVOController *KVOControllerNonRetaining;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure>
<p>要实现以上使用的方式，是给 <code>NSObject</code> 分类添加两个属性:<code>KVOController</code>和<code>KVOControllerNonRetaining</code>。这个比较简单，使用<code>Runtime</code> 的关联属性即可。值得一提的是作者在 <code>getter</code> 方法里使用了懒加载，只有当使用到<code>KVOController</code>或者<code>KVOControllerNonRetaining</code>的时候，才会创建。当然，也可以选择自行创建。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (FBKVOController *)KVOController &#123;</span><br><span class="line">  <span class="keyword">id</span> controller = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="built_in">NSObjectKVOControllerKey</span>);</span><br><span class="line">  <span class="comment">// 懒加载KVOController, 用到时才会创建</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == controller) &#123;</span><br><span class="line">    controller = [FBKVOController controllerWithObserver:<span class="keyword">self</span>];</span><br><span class="line">    <span class="keyword">self</span>.KVOController = controller;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (FBKVOController *)KVOControllerNonRetaining &#123;</span><br><span class="line">  <span class="keyword">id</span> controller = objc_getAssociatedObject(<span class="keyword">self</span>, <span class="built_in">NSObjectKVOControllerNonRetainingKey</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == controller) &#123;</span><br><span class="line">    controller = [[FBKVOController alloc] initWithObserver:<span class="keyword">self</span> retainObserved:<span class="literal">NO</span>];</span><br><span class="line">    <span class="keyword">self</span>.KVOControllerNonRetaining = controller;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> controller;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上两个 <code>getter</code> 方法分别对应强引用被观察者和弱引用被观察者。</p>
<h1 id="三、接口"><a href="#三、接口" class="headerlink" title="三、接口"></a>三、接口</h1><p>由此可以看到，核心功能的实现依赖于<code>FBKVOController</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强引用</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)controllerWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer;</span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定构造器</span></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer retainObserved:(<span class="built_in">BOOL</span>)retainObserved <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init <span class="built_in">NS_UNAVAILABLE</span>;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)new <span class="built_in">NS_UNAVAILABLE</span>;</span><br></pre></td></tr></table></figure>
<p>构造方法里主要暴露了两种初始化方式，其中通过<code>initWithObserver</code>这个方法可以设置参数<code>retainObserved</code>以表明是否需要强引用被观察者。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nullable</span>, <span class="keyword">nonatomic</span>, <span class="keyword">weak</span>, <span class="keyword">readonly</span>) <span class="keyword">id</span> observer;</span><br></pre></td></tr></table></figure>
<p>只有一个只读属性，给出被观察者对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options block:(FBKVONotificationBlock)block;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options action:(SEL)action;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure>
<p>作者给出了回调的三个选项：block回调，选择子回调以及 KVO 默认方法回调。可以在添加被观察者的时候自行选择。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options block:(FBKVONotificationBlock)block;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options action:(SEL)action;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPaths:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)keyPaths options:(<span class="built_in">NSKeyValueObservingOptions</span>)options context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context;</span><br></pre></td></tr></table></figure>
<p>考虑到不一定只观察一个对象的一个成员变量，因此作者提供了<code>keyPaths</code>选项，可以同时观察一个对象的多个keyPath：传入一个字符串数组即可。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object keyPath:(<span class="built_in">NSString</span> *)keyPath;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object;</span><br><span class="line">- (<span class="keyword">void</span>)unobserveAll;</span><br></pre></td></tr></table></figure>
<p>移除监听提供三种接口：移除某个对象某个keyPath 的监听，移除对某个对象的监听，取消观察者对所有对象的所有监听。</p>
<h1 id="四、FBKVOController实现"><a href="#四、FBKVOController实现" class="headerlink" title="四、FBKVOController实现"></a>四、FBKVOController实现</h1><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">FBKVOController</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSMapTable</span>&lt;<span class="keyword">id</span>, <span class="built_in">NSMutableSet</span>&lt;_FBKVOInfo *&gt; *&gt; *_objectInfosMap;</span><br><span class="line">  pthread_mutex_t _lock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>FBKVOController</code>主要维护了一个<code>NSMapTable</code>。<code>key</code> 是所观察的对象，<code>value</code> 是<code>NSMutableSet</code>类型的集合(内部元素是<code>_FBKVOInfo</code>类型)。维护一个<code>NSMapTable</code>的原因是：便于观察一个对象的多个<code>keyPath</code>，这个对象作为 <code>key</code>，这许多个<code>keyPath</code>封装成一个个<code>_FBKVOInfo</code>存入<code>NSMutableSet</code>中。另外一个成员变量<code>_lock</code>主要是保证线程安全。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithObserver:(<span class="keyword">nullable</span> <span class="keyword">id</span>)observer retainObserved:(<span class="built_in">BOOL</span>)retainObserved &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123;</span><br><span class="line">    _observer = observer;</span><br><span class="line">    <span class="comment">// 根据是否retainObserved，选择NSMapTable的"强-强"或者"弱-强"</span></span><br><span class="line">    <span class="built_in">NSPointerFunctionsOptions</span> keyOptions = retainObserved ? <span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> : <span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>;</span><br><span class="line">    _objectInfosMap = [[<span class="built_in">NSMapTable</span> alloc] initWithKeyOptions:keyOptions valueOptions:<span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPersonality</span> capacity:<span class="number">0</span>];</span><br><span class="line">    pthread_mutex_init(&amp;_lock, <span class="literal">NULL</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>FBKVOController</code>所有暴露的构造方法接口都指向了上面的那个实现。这个方法只做了三件事: 1，初始化线程锁<code>_lock</code>，2，根据<code>retainObserved</code>参数创建不同类型的<code>NSMapTable</code>，是选择”强-强”还是选择”弱-强”。3，属性<code>observer</code>赋值。</p>
<p>由此可见，<code>FBKVOController</code>本身对被观察者<code>observer</code>是弱引用的(有一个 <code>weak</code> 属性的<code>observer</code>成员变量)，通过维护一个<code>NSMapTable</code>来最终确定对被观察者的强弱引用关系。</p>
<h2 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">observe:</span>(nullable id)object <span class="string">keyPath:</span>(NSString *)keyPath <span class="string">options:</span>(NSKeyValueObservingOptions)options <span class="string">block:</span>(FBKVONotificationBlock)block &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == object || <span class="number">0</span> == keyPath.length || NULL == block) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建数据结构_FBKVOInfo</span></span><br><span class="line">  _FBKVOInfo *info = [[_FBKVOInfo alloc] <span class="string">initWithController:</span>self <span class="string">keyPath:</span>keyPath <span class="string">options:</span>options <span class="string">block:</span>block];</span><br><span class="line">  <span class="comment">// 添加对object的观察, 并传入info</span></span><br><span class="line">  [self <span class="string">_observe:</span>object <span class="string">info:</span>info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以添加一个被观察者并且回调是 block 为例。在这个方法里首先是对参数的合理性判断，要求<code>object</code>、<code>keyPath</code>以及<code>block</code>均是合理值。<br> 接着把<code>keyPath</code>、<code>options</code>、<code>block</code>包装成一个数据结构<code>_FBKVOInfo</code>。<br> 最后调用自己的<code>_observe:info:</code>方法，传入<code>object</code>和<code>info</code>。</p>
<h3 id="FBKVOInfo数据结构"><a href="#FBKVOInfo数据结构" class="headerlink" title="_FBKVOInfo数据结构"></a>_FBKVOInfo数据结构</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">_FBKVOInfo </span>: NSObject</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> _FBKVOInfo &#123;</span><br><span class="line"><span class="variable">@public</span></span><br><span class="line">  __weak FBKVOController *_controller;</span><br><span class="line">  <span class="selector-tag">NSString</span> *<span class="selector-tag">_keyPath</span>;</span><br><span class="line">  <span class="selector-tag">NSKeyValueObservingOptions</span> <span class="selector-tag">_options</span>;</span><br><span class="line">  <span class="selector-tag">SEL</span> <span class="selector-tag">_action</span>;</span><br><span class="line">  <span class="selector-tag">void</span> *<span class="selector-tag">_context</span>;</span><br><span class="line">  <span class="selector-tag">FBKVONotificationBlock</span> <span class="selector-tag">_block</span>;</span><br><span class="line">  <span class="selector-tag">_FBKVOInfoState</span> <span class="selector-tag">_state</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_FBKVOInfo</code>是一个数据结构，包含了监听的<code>keyPath</code>、<code>block</code>、选择子、<code>context</code>等等元素。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">instancetype</span>)initWithController:(FBKVOController *)controller</span><br><span class="line">                           keyPath:(<span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                           options:(<span class="built_in">NSKeyValueObservingOptions</span>)options</span><br><span class="line">                             block:(<span class="keyword">nullable</span> FBKVONotificationBlock)block</span><br><span class="line">                            action:(<span class="keyword">nullable</span> SEL)action</span><br><span class="line">                           context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context &#123;</span><br><span class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != <span class="keyword">self</span>) &#123;</span><br><span class="line">    _controller = controller;</span><br><span class="line">    _block = [block <span class="keyword">copy</span>];</span><br><span class="line">    _keyPath = [keyPath <span class="keyword">copy</span>];</span><br><span class="line">    _options = options;</span><br><span class="line">    _action = action;</span><br><span class="line">    _context = context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造方法的实现就是这样，不过有两个关键点:<code>block</code>和<code>keyPath</code>调用一下 <code>copy</code> 方法。<br><code>keyPath</code>调用一下 <code>copy</code>的原因是，这里的<code>_keyPath</code>是使用<code>__strong</code>修饰的，如果外面传进来的是不可变字符串，自然没有啥问题，可是一旦传进来一个可变字符串，如果直接赋值<code>_keyPath = keyPath;</code>，当这个可变字符串改变就会造成<code>_keyPath</code>也改变，比较容易产生不可控事件，所以调用 <code>copy</code>方法，也即是深复制浅复制的问题。</p>
<p>没有深复制的示例如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"key"</span>];</span><br><span class="line">   <span class="comment">// 假定是_keyPath = keyPath;而不是_keyPath = [keyPath copy];</span></span><br><span class="line">   _FBKVOInfo *info = [[_FBKVOInfo alloc] initWithController:<span class="keyword">self</span> keyPath:str options:<span class="built_in">NSKeyValueObservingOptionNew</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">       </span><br><span class="line">   &#125; action:<span class="keyword">@selector</span>(push) context:<span class="literal">nil</span>];</span><br><span class="line">   [str appendString:<span class="string">@"new"</span>];</span><br><span class="line">   <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, info-&gt;_keyPath); <span class="comment">//info-&gt;_keyPath不符合预期的改变了</span></span><br></pre></td></tr></table></figure>
<p>同样，<code>block</code> 的<code>copy</code>是把<code>block</code>从栈拷贝到堆中，防止被释放。因为<code>block</code>作为参数传入函数不会被 <code>copy</code>，依然在栈上，方法执行完立即释放的。</p>
<blockquote>
<p>在ARC下：大部分情况下系统会把Block自动copy到堆上。</p>
<p>Block作为变量：<br>方法中声明一个 block 的时候是在栈上；<br>引用了外部局部变量或成员变量, 并且有赋值操作（有名字），会被 copy 到堆上；<br>赋值给附有__strong修饰符的id类型的类或者Blcok类型成员变量时；<br>赋值给一个 weak 变量不会被 copy；</p>
<p>Block作为属性：<br>用 copy 修饰会被 copy；</p>
<p>Block作为函数参数：<br>作为参数传入函数不会被 copy，依然在栈上，方法执行完即释放；<br>作为函数的返回值会被 copy 到堆；</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">- (NSUInteger)hash &#123;</span><br><span class="line">  <span class="keyword">return</span> [_keyPath hash];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (BOOL)isEqual:(id)<span class="keyword">object</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == <span class="keyword">object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> NO;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (self == <span class="keyword">object</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> YES;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (![<span class="keyword">object</span> isKindOfClass:[self <span class="class"><span class="keyword">class</span>]]) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> NO;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> [_keyPath isEqualToString:((_FBKVOInfo *)<span class="keyword">object</span>)-&gt;_keyPath];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_FBKVOInfo</code>还做了一点其他的事：<br>1.重写了<code>- (NSUInteger)hash;</code>方法，使用<code>_keyPath</code>的 <code>hash</code> 值来作为<code>_FBKVOInfo</code>的 <code>hash</code> 值。分配的这个<code>hash</code>值(即用于查找集合中成员的位置标识)，就是通过<code>hash</code>方法计算得来的，且<code>hash</code>方法返回的<code>hash</code>值最好唯一。<br>2.重写了<code>- (BOOL)isEqual:(id)object;</code>方法，满足<code>Equal</code>的条件有两个: 首先是类对象一致，再者是<code>_keyPath</code>匹配。换句话说，<code>_keyPath</code>决定了<code>_FBKVOInfo</code>是否是同一个。为了优化判等的效率，基于<code>hash</code>的<code>NSSet</code>和<code>NSDictionary</code>在判断成员是否相等时， 会这样做Step1: 成员的<code>hash</code>值是否和目标<code>hash</code>值相等，如果相同进入Step 2，如果不等，直接判断不相等<br>Step 2: <code>hash</code>值相同(即Step 1)的情况下，再进行对象判等， 作为判等的结果。</p>
<blockquote>
<p>hash值是对象判等的必要非充分条件</p>
</blockquote>
<p><code>NSPointerFunctionsObjectPointerPersonality</code>对于 <code>isEqual:</code> 和 <code>hash</code> 使用直接的指针比较。使用移位指针(shifted pointer)来做hash检测及确定两个对象是否相等；同时使用description方法来做描述字符串。</p>
<blockquote>
<p>Personalities determine hashing and equality. NSPointerFunctionsObjectPersonality provides the standard Foundation behavior of using hash and isEqual:. You can also use NSPointerFunctionsObjectPointerPersonality, which treats the contents as objects, but uses direct pointer value comparison; this is useful if you need a collection to work with object identity rather than value.<br>NSPointerFunctionsObjectPointerPersonality 使用 <code>==</code>判断相等<br>NSPointerFunctionsObjectPersonality 使用<code>hash</code>和<code>isEqual:</code>判断相等 </p>
</blockquote>
<h3 id="observe-info-方法"><a href="#observe-info-方法" class="headerlink" title="_observe:info:方法"></a>_observe:info:方法</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)<span class="variable">_observe</span>:(id)object info:(<span class="variable">_FBKVOInfo</span> *)info &#123;</span><br><span class="line">  <span class="comment">// lock</span></span><br><span class="line">  pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">  NSMutableSet *infos = [<span class="variable">_objectInfosMap</span> objectForKey:object];</span><br><span class="line">  <span class="comment">// 检查infos是否存在于_objectInfosMap中</span></span><br><span class="line">  <span class="variable">_FBKVOInfo</span> *existingInfo = [infos member:info];</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != existingInfo) &#123;</span><br><span class="line">    <span class="comment">// 已经存在了，return</span></span><br><span class="line">    pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不存在，创建infos并保存于_objectInfosMap中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == infos) &#123;</span><br><span class="line">    infos = [NSMutableSet <span class="built_in">set</span>];</span><br><span class="line">    [<span class="variable">_objectInfosMap</span> setObject:infos forKey:object];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 把info添加到infos中</span></span><br><span class="line">  [infos addObject:info];</span><br><span class="line">  pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">  <span class="comment">// _FBKVOSharedController添加观察</span></span><br><span class="line">  [[<span class="variable">_FBKVOSharedController</span> sharedController] observe:object info:info];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>首先加锁。把被观察的对象<code>object</code>作为<code>key</code>从自己的<code>_objectInfosMap</code>获取其对应的<code>NSMutableSet</code>类型的集合，如果这个集合包含了已经封装好的<code>info</code>对象，说明已经对这个<code>info</code>添加过监听了，解锁直接 return 就是了。<br>如果这个<code>infos</code>集合不存在，创建。把<code>info</code>元素添加到这个<code>infos</code>集合中。解锁。调用<code>[[_FBKVOSharedController sharedController] observe:object info:info];</code>方法。</p>
<p>可见这个方法主要是使用<code>_objectInfosMap</code>保存了封装好的<code>info</code>对象，具体监听调用逻辑依赖于<code>_FBKVOSharedController</code>。</p>
<h1 id="五、-FBKVOSharedController实现"><a href="#五、-FBKVOSharedController实现" class="headerlink" title="五、_FBKVOSharedController实现"></a>五、_FBKVOSharedController实现</h1><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_FBKVOSharedController</span> : <span class="title">NSObject</span></span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)sharedController;</span><br><span class="line">- (<span class="keyword">void</span>)observe:(<span class="keyword">id</span>)object info:(<span class="keyword">nullable</span> _FBKVOInfo *)info;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">id</span>)object info:(<span class="keyword">nullable</span> _FBKVOInfo *)info;</span><br><span class="line">- (<span class="keyword">void</span>)unobserve:(<span class="keyword">id</span>)object infos:(<span class="keyword">nullable</span> <span class="built_in">NSSet</span> *)infos;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">_FBKVOSharedController</span> </span>&#123;</span><br><span class="line">  <span class="built_in">NSHashTable</span>&lt;_FBKVOInfo *&gt; *_infos;</span><br><span class="line">  pthread_mutex_t _mutex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_FBKVOSharedController</code>是一个单例。作用是观察 <code>_FBKVOInfo</code> 中的 <code>keyPath</code>，并给予回调(回调的类型可以是 <code>block</code>、<code>selector</code>、系统回调方法)。</p>
<p> 暴露出两个方法:</p>
<ol>
<li>添加监听，参数为<code>_infos</code></li>
<li><p>移除监听，参数为<code>_FBKVOInfo</code>或者<code>NSSet</code>类型的<code>infos</code>(容器内的元素仍然是<code>_FBKVOInfo</code>)</p>
<p>内部维护了一个哈希表(NSHashTable)<code>_infos</code>，用于保存这些<code>_FBKVOInfo</code>。除此之外还有一个锁:<code>_mutex</code>，用于实现线程安全。</p>
<p>哈希表的创建:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSHashTable</span> *infos = [<span class="built_in">NSHashTable</span> alloc];</span><br><span class="line">_infos = [infos initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> capacity:<span class="number">0</span>];</span><br><span class="line"><span class="built_in">NSPointerFunctionsWeakMemory</span>: 持弱指针引用着_FBKVOInfo对象。</span><br><span class="line"><span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> 使用==判定相等。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>可见<code>_FBKVOSharedController</code>只是单纯地掌管<code>_FBKVOInfo</code>集合，它只需要解析<code>_FBKVOInfo</code>并给observer回调即可，其他的一切都不关心。</p>
<h2 id="添加监听"><a href="#添加监听" class="headerlink" title="添加监听"></a>添加监听</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">observe:</span>(id)object <span class="string">info:</span>(nullable _FBKVOInfo *)info &#123;</span><br><span class="line">  <span class="keyword">if</span> (nil == info) <span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// _infos添加对象</span></span><br><span class="line">  pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">  [_infos <span class="string">addObject:</span>info];</span><br><span class="line">  pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">  <span class="comment">// 添加观察，传入的context是info</span></span><br><span class="line">  [object <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>info-&gt;_keyPath <span class="string">options:</span>info-&gt;_options <span class="string">context:</span>(<span class="keyword">void</span> *)info];</span><br><span class="line">  <span class="keyword">if</span> (info-&gt;_state == _FBKVOInfoStateInitial) &#123;</span><br><span class="line">    info-&gt;_state = _FBKVOInfoStateObserving; <span class="comment">// 初始状态转监听状态</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info-&gt;_state == _FBKVOInfoStateNotObserving) &#123; <span class="comment">// 未监听状态便移除</span></span><br><span class="line">    <span class="comment">// this could happen when `NSKeyValueObservingOptionInitial` is one of the NSKeyValueObservingOptions,</span></span><br><span class="line">    <span class="comment">// and the observer is unregistered within the callback block.</span></span><br><span class="line">    <span class="comment">// at this time the object has been registered as an observer (in Foundation KVO),</span></span><br><span class="line">    <span class="comment">// so we can safely unobserve it.</span></span><br><span class="line">    <span class="comment">// NSKeyValueObservingOptionInitial：添加观察者时就触发回调，并且在后面赋值时也会触发回调，但是都只返回NSKeyValueChangeKindKey。观察者在callback block中取消观察，所以在这里removeObserver</span></span><br><span class="line">    [object <span class="string">removeObserver:</span>self <span class="string">forKeyPath:</span>info-&gt;_keyPath <span class="string">context:</span>(<span class="keyword">void</span> *)info];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容器中添加 info 元素，添加监听。</p>
<h2 id="移除监听"><a href="#移除监听" class="headerlink" title="移除监听"></a>移除监听</h2><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)unobserve:(id)object info:(nullable <span class="variable">_FBKVOInfo</span> *)info &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> == info) return;</span><br><span class="line">  <span class="comment">// 哈希表中移除info</span></span><br><span class="line">  pthread_mutex_lock(&amp;<span class="variable">_mutex</span>);</span><br><span class="line">  [<span class="variable">_infos</span> removeObject:info];</span><br><span class="line">  pthread_mutex_unlock(&amp;<span class="variable">_mutex</span>);</span><br><span class="line">  <span class="comment">// 移除监听</span></span><br><span class="line">  <span class="keyword">if</span> (info-&gt;<span class="variable">_state</span> == <span class="variable">_FBKVOInfoStateObserving</span>) &#123;</span><br><span class="line">    [object removeObserver:self forKeyPath:info-&gt;<span class="variable">_keyPath</span> context:(void *)info];</span><br><span class="line">  &#125;</span><br><span class="line">  info-&gt;<span class="variable">_state</span> = <span class="variable">_FBKVOInfoStateNotObserving</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>容器中移除 info 元素，移除监听。</p>
<h2 id="系统KVO调用"><a href="#系统KVO调用" class="headerlink" title="系统KVO调用"></a>系统KVO调用</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)keyPath</span><br><span class="line">                      ofObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object</span><br><span class="line">                        change:(<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *)change</span><br><span class="line">                       context:(<span class="keyword">nullable</span> <span class="keyword">void</span> *)context &#123;</span><br><span class="line">  _FBKVOInfo *info;</span><br><span class="line">  &#123;</span><br><span class="line">    pthread_mutex_lock(&amp;_mutex);</span><br><span class="line">    <span class="comment">// 看看info是否存在于_infos中，如果存在，返回info</span></span><br><span class="line">    info = [_infos member:(__bridge <span class="keyword">id</span>)context];</span><br><span class="line">    pthread_mutex_unlock(&amp;_mutex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">nil</span> != info) &#123;</span><br><span class="line">    <span class="comment">// 局部变量强引用controller</span></span><br><span class="line">    FBKVOController *controller = info-&gt;_controller;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != controller) &#123;</span><br><span class="line">      <span class="comment">// 局部变量强引用observer</span></span><br><span class="line">      <span class="keyword">id</span> observer = controller.observer;</span><br><span class="line">      <span class="keyword">if</span> (<span class="literal">nil</span> != observer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (info-&gt;_block) &#123;  <span class="comment">// 回调 block</span></span><br><span class="line">          <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>, <span class="keyword">id</span>&gt; *changeWithKeyPath = change;</span><br><span class="line">          <span class="keyword">if</span> (keyPath) &#123;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *mChange = [<span class="built_in">NSMutableDictionary</span> dictionaryWithObject:keyPath forKey:FBKVONotificationKeyPathKey];</span><br><span class="line">            [mChange addEntriesFromDictionary:change];</span><br><span class="line">            changeWithKeyPath = [mChange <span class="keyword">copy</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          info-&gt;_block(observer, object, changeWithKeyPath);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (info-&gt;_action) &#123; <span class="comment">// 回调 selector</span></span><br><span class="line">          [observer performSelector:info-&gt;_action withObject:change withObject:object];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 调用KVO 系统方法</span></span><br><span class="line">          [observer observeValueForKeyPath:keyPath ofObject:object change:change context:info-&gt;_context];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终在系统方法中给予不同类型的回调。</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">typedef NS_ENUM(uint8_t, <span class="variable">_FBKVOInfoState</span>) &#123;</span><br><span class="line">  <span class="variable">_FBKVOInfoStateInitial</span> = <span class="number">0</span>,</span><br><span class="line">  <span class="variable">_FBKVOInfoStateObserving</span>,</span><br><span class="line">  <span class="variable">_FBKVOInfoStateNotObserving</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>作者使用了三个枚举值来记录监听状态。会不会是多此一举呢？不会。作用主要体现在添加监听的方法里有个移除监听操作：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 添加观察，传入的context是info</span></span><br><span class="line">[<span class="function"><span class="title">object</span> addObserver:self forKeyPath:info-&gt;</span>_<span class="function"><span class="title">keyPath</span> options:info-&gt;</span>_options context:(void *)info];</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="title">if</span> (info-&gt;</span>_state == _FBKVOInfoStateInitial) &#123;</span><br><span class="line">    <span class="function"><span class="title">info</span>-&gt;</span>_state = _FBKVOInfoStateObserving; <span class="comment">// 初始状态转监听状态</span></span><br><span class="line">  &#125; <span class="function"><span class="title">else</span> <span class="keyword">if</span> (info-&gt;</span>_state == _FBKVOInfoStateNotObserving) &#123; <span class="comment">// 未监听状态便移除</span></span><br><span class="line">    [<span class="function"><span class="title">object</span> removeObserver:self forKeyPath:info-&gt;</span>_keyPath context:(void *)info];</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>“未监听状态便移除“是怎么出现的？示例如下：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="keyword">self</span>.KVOController observe:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span> options:<span class="built_in">NSKeyValueObservingOptionInitial</span> block:^(<span class="keyword">id</span>  _Nullable observer, <span class="keyword">id</span>  _Nonnull object, <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>,<span class="keyword">id</span>&gt; * _Nonnull change) &#123;</span><br><span class="line">     [<span class="keyword">self</span>.KVOController unobserve:<span class="keyword">self</span>.myButton keyPath:<span class="string">@"backgroundColor"</span>];</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure>
<p>包含了<code>NSKeyValueObservingOptionInitial</code>选项且在回调中移除了监听就会出现这种情况。因为如果有<code>NSKeyValueObservingOptionInitial</code>选项，在添加监听的时候就会有回调。调用栈如下：<br><img src="https://image.chenyalun.com/2019/01/07/001.png" alt></p>
<p>执行到<code>[object addObserver:self forKeyPath:info-&gt;_keyPath options:info-&gt;_options context:(void *)info];</code>这行代码的时候，首先添加监听，接着调用回调，而回调中又移除了观察，这时info的状态被设置为<code>_FBKVOInfoStateNotObserving</code>。接着进入了下面的 if-else 判断中，才有了移除监听的操作。可见逻辑非常严谨。</p>
<p>NSKeyValueObservingOption参考：</p>
<blockquote>
<p>NSKeyValueObservingOptionNew：接收方法中使用change参数传入变化后的新值，键为：&gt;NSKeyValueChangeNewKey；<br>NSKeyValueObservingOptionOld：接收方法中使用change参数传入变化前的旧值，键为：&gt;NSKeyValueChangeOldKey；<br>NSKeyValueObservingOptionInitial：注册之后立刻调用接收方法，如果配置了&gt;NSKeyValueObservingOptionNew，change参数内容会包含新值，键为：&gt;NSKeyValueChangeNewKey；<br>NSKeyValueObservingOptionPrior：如果加入这个参数，接收方法会在变化前后分别调用一次，共两&gt;次，变化前的通知change参数包含notificationIsPrior = 1。其他内容根据&gt;NSKeyValueObservingOptionNew和NSKeyValueObservingOptionOld的配置确定。</p>
</blockquote>
<h1 id="六、一个函数"><a href="#六、一个函数" class="headerlink" title="六、一个函数"></a>六、一个函数</h1><p>其实不是一个函数，不过是为了实现一个功能，核心还是一个函数。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.枚举字符串化</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *describe_option(<span class="built_in">NSKeyValueObservingOptions</span> option) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (option) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionNew</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionNew"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionOld</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionOld"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionInitial</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionInitial"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">NSKeyValueObservingOptionPrior</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">@"NSKeyValueObservingOptionPrior"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">NSCAssert</span>(<span class="literal">NO</span>, <span class="string">@"unexpected option %tu"</span>, option);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.拼接option</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> append_option_description(<span class="built_in">NSMutableString</span> *s, <span class="built_in">NSUInteger</span> option) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> == s.length) &#123;</span><br><span class="line">        [s appendString:describe_option(option)];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [s appendString:<span class="string">@"|"</span>];</span><br><span class="line">        [s appendString:describe_option(option)];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.NSKeyValueObservingOptions类型值遍历</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSUInteger</span> enumerate_flags(<span class="built_in">NSUInteger</span> *ptrFlags) &#123;</span><br><span class="line">    <span class="built_in">NSCAssert</span>(ptrFlags, <span class="string">@"expected ptrFlags"</span>);</span><br><span class="line">    <span class="keyword">if</span> (!ptrFlags) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> flags = *ptrFlags;</span><br><span class="line">    <span class="keyword">if</span> (!flags)  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">NSUInteger</span> flag = <span class="number">1</span> &lt;&lt; __builtin_ctzl(flags);</span><br><span class="line">    flags &amp;= ~flag;</span><br><span class="line">    *ptrFlags = flags;</span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.把options所有值都拼出来</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *describe_options(<span class="built_in">NSKeyValueObservingOptions</span> options) &#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *s = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="built_in">NSUInteger</span> option;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">0</span> != (option = enumerate_flags(&amp;options))) &#123;</span><br><span class="line">        append_option_description(s, option);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不使用 switch-case 把位移枚举的值遍历出来了。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Similar to __builtin_ctz, except the argument type is unsigned long.</span></span><br><span class="line"><span class="comment">// __builtin_ctz(x)：x末尾0的个数</span></span><br><span class="line"><span class="comment">// 左移__builtin_ctz(x)位得到原先的枚举值</span></span><br><span class="line">NSUInteger flag = <span class="number">1</span> &lt;&lt; __builtin_ctzl(<span class="keyword">flags</span>);</span><br><span class="line"><span class="comment">// flags 去除已经取到的值</span></span><br><span class="line"><span class="keyword">flags</span> &amp;= ~flag;</span><br><span class="line"><span class="comment">// 把更新后的flags赋予指向ptrFlags的指针</span></span><br><span class="line">*ptrFlags = <span class="keyword">flags</span>;</span><br></pre></td></tr></table></figure>
<p>不失为一个好办法。</p>
<h1 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h1><blockquote>
<p>使用 KVOController 进行键值观测可以说完美地解决了在使用原生 KVO 时遇到的各种问题。</p>
<p>1.不需要手动移除观察者；<br>2.实现 KVO 与事件发生处的代码上下文相同，不需要跨方法传参数；<br>3.使用 block 来替代方法能够减少使用的复杂度，提升使用 KVO 的体验；<br>4.每一个 keyPath 会对应一个属性，不需要在 block 中使用 if 判断 keyPath；</p>
</blockquote>
<p>以上引自draveness。解释如下：<br>1.NSMapTable 可以持有键和值的弱引用，当键或者值当中的一个被释放时，整个这一项就会被移除掉。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里使用被观察者observer作为强引用或者弱引用的key，使用_FBKVOInfo作为强引用的value</span></span><br><span class="line"><span class="built_in">NSPointerFunctionsOptions</span> keyOptions = retainObserved ? <span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span> : <span class="built_in">NSPointerFunctionsWeakMemory</span>|<span class="built_in">NSPointerFunctionsObjectPointerPersonality</span>;</span><br><span class="line">_objectInfosMap = [[<span class="built_in">NSMapTable</span> alloc] initWithKeyOptions:keyOptions valueOptions:<span class="built_in">NSPointerFunctionsStrongMemory</span>|<span class="built_in">NSPointerFunctionsObjectPersonality</span> capacity:<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>2.因为是在@selector(observeValueForKeyPath:ofObject:change:context:)中处理的回调。<br>3.使用FBKVONotificationBlock。<br>4._FBKVOInfo封装。</p>
<p>纵观全部代码，作者首先给分类添加了两个属性，用于接口调用。这些属性都指向了FBKVOController，FBKVOController主要维护了一个NSMapTable。key 是所观察的对象，value 是NSMutableSet类型的集合，其内部元素是_FBKVOInfo类型对象。一个_FBKVOInfo对象对应一个信息封装。之所以使用NSMapTable集合是便于对同一个对象的多个keyPath进行观察，同时处理被观察者的强弱引用。另外_FBKVOInfo对象是对FBKVOController、keyPath、context、回调block等信息的封装。最后，各个FBKVOController把所有对观察的处理交给单例_FBKVOSharedController，这个单例调用系统KVO方法回调、处理包含所有_FBKVOInfo对象的NSHashTable集合。</p>
<blockquote>
<p>参考资料<br><a href="https://github.com/draveness/analyze/blob/master/contents/KVOController/KVOController.md" target="_blank" rel="noopener">https://github.com/draveness/analyze/blob/master/contents/KVOController/KVOController.md</a><br><a href="https://blog.csdn.net/DonnyDN/article/details/77750751" target="_blank" rel="noopener">https://blog.csdn.net/DonnyDN/article/details/77750751</a><br><a href="https://www.jianshu.com/p/915356e280fc" target="_blank" rel="noopener">https://www.jianshu.com/p/915356e280fc</a><br><a href="https://blog.kyleduo.com/2014/10/20/ios_learning-kvo/" target="_blank" rel="noopener">https://blog.kyleduo.com/2014/10/20/ios_learning-kvo/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「YYCache」]]></title>
      <url>http://blog.chenyalun.com/2019/01/02/%E8%AF%BB%E3%80%8CYYCache%E3%80%8D/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 关于YYCache的简单总结。 </p><br><a id="more"></a><p></p>
<p>阅读YYCache源码有3遍了，自我感觉“需要理解”的部分掌握的差不多了，做个记录。</p>
<h1 id="一、使用"><a href="#一、使用" class="headerlink" title="一、使用"></a>一、使用</h1><p>API 类似字典，比较容易理解。</p>
<h3 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1.初始化"></a>1.初始化</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">copy</span>, <span class="keyword">readonly</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) YYMemoryCache *memoryCache;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">strong</span>, <span class="keyword">readonly</span>) YYDiskCache *diskCache;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)initWithPath:(<span class="built_in">NSString</span> *)path <span class="built_in">NS_DESIGNATED_INITIALIZER</span>;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)cacheWithName:(<span class="built_in">NSString</span> *)name;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)cacheWithPath:(<span class="built_in">NSString</span> *)path;</span><br><span class="line">- (<span class="keyword">instancetype</span>)init UNAVAILABLE_ATTRIBUTE;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)new UNAVAILABLE_ATTRIBUTE;</span><br></pre></td></tr></table></figure>
<h3 id="2-是否存在"><a href="#2-是否存在" class="headerlink" title="2.是否存在"></a>2.是否存在</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key, <span class="built_in">BOOL</span> contains))block;</span><br></pre></td></tr></table></figure>
<h3 id="3-查询"><a href="#3-查询" class="headerlink" title="3.查询"></a>3.查询</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)objectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)objectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object))block;</span><br></pre></td></tr></table></figure>
<h3 id="4-设值"><a href="#4-设值" class="headerlink" title="4.设值"></a>4.设值</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="keyword">void</span>))block;</span><br></pre></td></tr></table></figure>
<h3 id="5-移除"><a href="#5-移除" class="headerlink" title="5.移除"></a>5.移除</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key;</span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">NSString</span> *key))block;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithBlock:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithProgressBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="keyword">int</span> removedCount, <span class="keyword">int</span> totalCount))progress endBlock:(<span class="keyword">nullable</span> <span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> error))end;</span><br></pre></td></tr></table></figure>
<h1 id="二、YYCache-实现"><a href="#二、YYCache-实现" class="headerlink" title="二、YYCache 实现"></a>二、YYCache 实现</h1><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YYCache</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>) init &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Use \"initWithName\" or \"initWithPath\" to create YYCache instance."</span>);</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithPath:<span class="string">@""</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">if</span> (name.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *cacheFolder = [<span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSCachesDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>) firstObject];</span><br><span class="line">    <span class="built_in">NSString</span> *path = [cacheFolder stringByAppendingPathComponent:name];</span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> initWithPath:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">instancetype</span>)initWithPath:(<span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    YYDiskCache *diskCache = [[YYDiskCache alloc] initWithPath:path];</span><br><span class="line">    <span class="keyword">if</span> (!diskCache) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *name = [path lastPathComponent];</span><br><span class="line">    YYMemoryCache *memoryCache = [YYMemoryCache new];</span><br><span class="line">    memoryCache.name = name;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    _name = name;</span><br><span class="line">    _diskCache = diskCache;</span><br><span class="line">    _memoryCache = memoryCache;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)cacheWithName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithName:name];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)cacheWithPath:(<span class="built_in">NSString</span> *)path &#123;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] initWithPath:path];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">return</span> [_memoryCache containsObjectForKey:key] || [_diskCache containsObjectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)containsObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key, <span class="built_in">BOOL</span> contains))block &#123;</span><br><span class="line">    <span class="keyword">if</span> (!block) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([_memoryCache containsObjectForKey:key]) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            block(key, <span class="literal">YES</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        [_diskCache containsObjectForKey:key withBlock:block];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)objectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object = [_memoryCache objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (!object) &#123;</span><br><span class="line">        object = [_diskCache objectForKey:key];</span><br><span class="line">        <span class="keyword">if</span> (object) &#123;</span><br><span class="line">            [_memoryCache setObject:object forKey:key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)objectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object))block &#123;</span><br><span class="line">    <span class="keyword">if</span> (!block) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object = [_memoryCache objectForKey:key];</span><br><span class="line">    <span class="keyword">if</span> (object) &#123;</span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            block(key, object);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        [_diskCache objectForKey:key withBlock:^(<span class="built_in">NSString</span> *key, <span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt; object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (object &amp;&amp; ![_memoryCache objectForKey:key]) &#123;</span><br><span class="line">                [_memoryCache setObject:object forKey:key];</span><br><span class="line">            &#125;</span><br><span class="line">            block(key, object);</span><br><span class="line">        &#125;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    [_memoryCache setObject:object forKey:key];</span><br><span class="line">    [_diskCache setObject:object forKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>&lt;<span class="built_in">NSCoding</span>&gt;)object forKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [_memoryCache setObject:object forKey:key];</span><br><span class="line">    [_diskCache setObject:object forKey:key withBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key &#123;</span><br><span class="line">    [_memoryCache removeObjectForKey:key];</span><br><span class="line">    [_diskCache removeObjectForKey:key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="built_in">NSString</span> *)key withBlock:(<span class="keyword">void</span> (^)(<span class="built_in">NSString</span> *key))block &#123;</span><br><span class="line">    [_memoryCache removeObjectForKey:key];</span><br><span class="line">    [_diskCache removeObjectForKey:key withBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjects];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithBlock:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))block &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjectsWithBlock:block];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjectsWithProgressBlock:(<span class="keyword">void</span>(^)(<span class="keyword">int</span> removedCount, <span class="keyword">int</span> totalCount))progress</span><br><span class="line">                                 endBlock:(<span class="keyword">void</span>(^)(<span class="built_in">BOOL</span> error))end &#123;</span><br><span class="line">    [_memoryCache removeAllObjects];</span><br><span class="line">    [_diskCache removeAllObjectsWithProgressBlock:progress endBlock:end];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line">    <span class="keyword">if</span> (_name) <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p&gt; (%@)"</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>, _name];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"&lt;%@: %p&gt;"</span>, <span class="keyword">self</span>.class, <span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>整体来看还是比较容易理解的，YYCache 整合了内存缓存和磁盘缓存，主要做了这些事：</p>
<ol>
<li>初始化YYCache实例，要求缓存路径要合理。</li>
<li>查询缓存对象先从内存缓存中查找，如果没有，再从磁盘缓存中查找。当磁盘缓存中有而内存缓存中没有的时候，把取得的缓存对象保存在内存缓存中。</li>
<li>缓存对象的存取和移除，内存缓存和磁盘缓存两者保持同步。</li>
</ol>
<h2 id="1-YYMemoryCache"><a href="#1-YYMemoryCache" class="headerlink" title="1.YYMemoryCache"></a>1.YYMemoryCache</h2><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) NSString *name;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(readonly) NSUInteger totalCount;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(readonly) NSUInteger totalCost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#pragma mark - Limit</span></span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSUInteger countLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSUInteger costLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSTimeInterval ageLimit;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>NSTimeInterval autoTrimInterval;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL shouldRemoveAllObjectsOnMemoryWarning;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL shouldRemoveAllObjectsWhenEnteringBackground;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) void(^didReceiveMemoryWarningBlock)(YYMemoryCache *cache);</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>(nullable, copy) void(^didEnterBackgroundBlock)(YYMemoryCache *cache);</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL releaseOnMainThread;</span><br><span class="line">@<span class="keyword">property</span><span class="title"> </span>BOOL releaseAsynchronously;</span><br></pre></td></tr></table></figure>
<p>类似于NSCache，提供包括缓存数量、缓存花费、缓存时间的管理。除此之外，当接收到内存警告时<code>(shouldRemoveAllObjectsOnMemoryWarning)</code>或者 App 进入到后台时<code>(shouldRemoveAllObjectsWhenEnteringBackground)</code>可以选择释放缓存对象。而对缓存对象释放也可以进行控制，比如可以选择在主线程释放<code>(releaseOnMainThread)</code>或者异步释放<code>(releaseAsynchronously)</code>。</p>
<h3 id="存取接口"><a href="#存取接口" class="headerlink" title="存取接口"></a>存取接口</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)objectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key withCost:(<span class="built_in">NSUInteger</span>)cost;</span><br><span class="line">- (<span class="keyword">void</span>)removeObjectForKey:(<span class="keyword">id</span>)key;</span><br><span class="line">- (<span class="keyword">void</span>)removeAllObjects;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)trimToCount:(<span class="built_in">NSUInteger</span>)count;</span><br><span class="line">- (<span class="keyword">void</span>)trimToCost:(<span class="built_in">NSUInteger</span>)cost;</span><br><span class="line">- (<span class="keyword">void</span>)trimToAge:(<span class="built_in">NSTimeInterval</span>)age;</span><br></pre></td></tr></table></figure>
<p> 除了基本的存取方法之外，YYMemoryCache 还暴露了三个移除缓存对象的方法。<br> trimToCount：根据限制的数量(countLimit)进行移除缓存对象操作，直到满足数量限制要求。<br> trimToCost：根据限制的花费(costLimit)进行移除缓存对象操作，直到满足花费限制要求。<br> trimToAge：根据缓存对象的过期时间(ageLimit)进行移除缓存对象操作，直到满足要求。</p>
<h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><p>在具体实现中，作者考虑了以下要求:</p>
<ol>
<li>缓存对象的存取。要保证效率就要求存取时间复杂度最好是O(1)。</li>
<li>缓存对象的移除。要保证能按照 <code>cost、age、count</code> 等条件对所有不符合要求的对象进行移除。</li>
<li>线程安全。需要加锁。<br>第一条：要求时间复杂度是 O(1)，那就可以采用哈希表、字典等。作者使用了字典，且是效率更高的<code>CFMutableDictionaryRef</code>。<br>第二条：记录 <code>cost、age、count</code>等属性，肯定需要对缓存对象进行包装。再者需要考虑LRU(Least Recently Used)，就需要保证顺序。而要使得字典中的对象(value)有顺序，必须有一个指向其他对象的指针(属性）。可以使用双向链表包装缓存对象。<br>第三条：存取的线程安全，使用GCD线程锁。</li>
</ol>
<h4 id="结点"><a href="#结点" class="headerlink" title="结点"></a>结点</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">@interface <span class="variable">_YYLinkedMapNode</span> : NSObject &#123;</span><br><span class="line">    @package</span><br><span class="line">    <span class="variable">__unsafe_unretained</span> <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_prev</span>; <span class="comment">// retained by dic</span></span><br><span class="line">    <span class="variable">__unsafe_unretained</span> <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_next</span>; <span class="comment">// retained by dic</span></span><br><span class="line">    id <span class="variable">_key</span>;</span><br><span class="line">    id <span class="variable">_value</span>;</span><br><span class="line">    NSUInteger <span class="variable">_cost</span>;</span><br><span class="line">    NSTimeInterval <span class="variable">_time</span>;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>链表的结点中保存着key 和 value，这是对缓存对象的包装。_cost和_time记录着缓存对象的花费和过期时间。而使用<strong>unsafe_unretained修饰的_prev和_next则分别指向前一个对象和后一个对象。由于这些结点已经被字典持有了，所以直接使用</strong>unsafe_unretained修饰，不必再增加它的引用计数，提高效率。</p>
<h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"> @interface <span class="variable">_YYLinkedMap</span> : NSObject &#123;</span><br><span class="line">    @package</span><br><span class="line">    CFMutableDictionaryRef <span class="variable">_dic</span>; <span class="comment">// do not set object directly</span></span><br><span class="line">    NSUInteger <span class="variable">_totalCost</span>;</span><br><span class="line">    NSUInteger <span class="variable">_totalCount</span>;</span><br><span class="line">    <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_head</span>; <span class="comment">// MRU, do not change it directly</span></span><br><span class="line">    <span class="variable">_YYLinkedMapNode</span> *<span class="variable">_tail</span>; <span class="comment">// LRU, do not change it directly</span></span><br><span class="line">    BOOL <span class="variable">_releaseOnMainThread</span>;</span><br><span class="line">    BOOL <span class="variable">_releaseAsynchronously</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (void)insertNodeAtHead:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (void)bringNodeToHead:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (void)removeNode:(<span class="variable">_YYLinkedMapNode</span> *)node;</span><br><span class="line">- (<span class="variable">_YYLinkedMapNode</span> *)removeTailNode;</span><br><span class="line">- (void)removeAll;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>
<p>一个 <code>YYMemoryCache</code> 对象有一个链表。这个链表使用<code>_dic</code>保存着所有包装好的缓存对象(<code>_YYLinkedMapNode</code>)，记录着总的花费(<code>_totalCost</code>)和总的数量(<code>_totalCount</code>)。当然，还使用<code>_head</code>指着链表的头指针，使用<code>_tail</code>指着链表的尾指针。<code>_releaseOnMainThread</code>和<code>_releaseAsynchronously</code>用于设置对缓存对象释放操作的选项:主线程释放或者异步释放。</p>
<p><code>_YYLinkedMap</code>暴露出的五个方法很清晰地表明它的作用：每次当缓存取到某个对象时，把它置在头结点的位置。这样随着时间的推移，很轻松地使得那些不经常使用的对象处在链表的后端，经常使用的对象处在链表的前端，这样就实现了 <code>LRU</code>。</p>
<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">- (void)insertNodeAtHead:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    CFDictionarySetValue</span>(_dic, (__bridge const void *)(<span class="keyword">node</span><span class="title">-&gt;_key</span>), (__bridge const void *)(<span class="keyword">node</span><span class="title">));</span></span><br><span class="line"><span class="title">    _totalCost</span> += <span class="keyword">node</span><span class="title">-&gt;_cost</span>;</span><br><span class="line">    _totalCount++;</span><br><span class="line">    if (_head) &#123;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_next</span> = _head;</span><br><span class="line">        _head-&gt;_prev = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">        _head</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125; else</span> &#123;</span><br><span class="line">        _head = _tail = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    &#125;</span></span><br><span class="line"><span class="title">&#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">- (void</span>)bringNodeToHead:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    if</span> (_head == <span class="keyword">node</span><span class="title">) return</span>;</span><br><span class="line">    </span><br><span class="line">    if (_tail == <span class="keyword">node</span><span class="title">) &#123;</span></span><br><span class="line"><span class="title">        _tail</span> = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">        _tail-&gt;_next = nil;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_next-</span>&gt;_prev = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">        <span class="keyword">node</span><span class="title">-&gt;_prev-</span>&gt;_next = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;_next</span> = _head;</span><br><span class="line">    <span class="keyword">node</span><span class="title">-&gt;_prev</span> = nil;</span><br><span class="line">    _head-&gt;_prev = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">    _head</span> = <span class="keyword">node</span><span class="title">;</span></span><br><span class="line"><span class="title">&#125;</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">- (void</span>)removeNode:(_YYLinkedMapNode *)<span class="keyword">node</span> <span class="title">&#123;</span></span><br><span class="line"><span class="title">    CFDictionaryRemoveValue</span>(_dic, (__bridge const void *)(<span class="keyword">node</span><span class="title">-&gt;_key</span>));</span><br><span class="line">    _totalCost -= <span class="keyword">node</span><span class="title">-&gt;_cost</span>;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    if (<span class="keyword">node</span><span class="title">-&gt;_next</span>) <span class="keyword">node</span><span class="title">-&gt;_next-</span>&gt;_prev = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">    if (<span class="keyword">node</span><span class="title">-&gt;_prev</span>) <span class="keyword">node</span><span class="title">-&gt;_prev-</span>&gt;_next = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    if (_head == <span class="keyword">node</span><span class="title">) _head</span> = <span class="keyword">node</span><span class="title">-&gt;_next</span>;</span><br><span class="line">    if (_tail == <span class="keyword">node</span><span class="title">) _tail</span> = <span class="keyword">node</span><span class="title">-&gt;_prev</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (_YYLinkedMapNode *)removeTailNode &#123;</span><br><span class="line">    if (!_tail) return nil;</span><br><span class="line">    _YYLinkedMapNode *tail = _tail;</span><br><span class="line">    CFDictionaryRemoveValue(_dic, (__bridge const void *)(_tail-&gt;_key));</span><br><span class="line">    _totalCost -= _tail-&gt;_cost;</span><br><span class="line">    _totalCount--;</span><br><span class="line">    if (_head == _tail) &#123;</span><br><span class="line">        _head = _tail = nil;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        _tail = _tail-&gt;_prev;</span><br><span class="line">        _tail-&gt;_next = nil;</span><br><span class="line">    &#125;</span><br><span class="line">    return tail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对结点的插入、移除、调整位置，是数据结构的基础操作。令人怀念！</p>
<p><code>_releaseOnMainThread</code>和<code>_releaseAsynchronously</code>这两个选项的实现也很简单。作者自己维护了一个队列:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> dispatch_queue_t <span class="title">YYMemoryCacheGetReleaseQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>移除的时候有所判断：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> <span class="built_in">CFMutableDictionaryRef</span> holder = _dic;</span><br><span class="line">      _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">      </span><br><span class="line"><span class="keyword">if</span> (_releaseAsynchronously) &#123;</span><br><span class="line">          <span class="built_in">dispatch_queue_t</span> queue = _releaseOnMainThread ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">          <span class="built_in">dispatch_async</span>(queue, ^&#123;</span><br><span class="line">              <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (_releaseOnMainThread &amp;&amp; !pthread_main_np()) &#123;</span><br><span class="line">          <span class="built_in">dispatch_async</span>(dispatch_get_main_queue(), ^&#123;</span><br><span class="line">              <span class="built_in">CFRelease</span>(holder); <span class="comment">// hold and release in specified queue</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">CFRelease</span>(holder);</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>
<p>要求异步要求主线程：那就在主线程异步释放holder。关于这里使用一个holder的原因，下文有解释。</p>
<h3 id="核心操作"><a href="#核心操作" class="headerlink" title="核心操作"></a>核心操作</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">@implementation YYMemoryCache &#123;</span><br><span class="line">    pthread_mutex_t _lock<span class="comment">;</span></span><br><span class="line">    _YYLinkedMap *_lru<span class="comment">;</span></span><br><span class="line">    <span class="keyword">dispatch_queue_t </span>_queue<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从这里可以看出<code>YYMemoryCache</code>使用<code>pthread_mutex_t</code>保证线程安全。</p>
<p>最关键的还是对无效缓存对象的释放，以 <code>count</code> 为例，当缓存的对象数量超过了 <code>count</code> 限制，就需要对链表后端不常使用的缓存对象进行移除操作，直到满足 <code>count</code> 限制。</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)<span class="variable">_trimToCount</span>:(NSUInteger)countLimit &#123;</span><br><span class="line">    BOOL finish = NO;</span><br><span class="line">    pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    <span class="keyword">if</span> (countLimit == <span class="number">0</span>) &#123;</span><br><span class="line">        [<span class="variable">_lru</span> removeAll];</span><br><span class="line">        finish = YES;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">_lru</span>-&gt;<span class="variable">_totalCount</span> &lt;= countLimit) &#123;</span><br><span class="line">        finish = YES;</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">    <span class="keyword">if</span> (finish) return;</span><br><span class="line">    </span><br><span class="line">    NSMutableArray *holder = [NSMutableArray new];</span><br><span class="line">    <span class="keyword">while</span> (!finish) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pthread_mutex_trylock(&amp;<span class="variable">_lock</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">_lru</span>-&gt;<span class="variable">_totalCount</span> &gt; countLimit) &#123;</span><br><span class="line">                <span class="variable">_YYLinkedMapNode</span> *node = [<span class="variable">_lru</span> removeTailNode];</span><br><span class="line">                <span class="keyword">if</span> (node) [holder addObject:node];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                finish = YES;</span><br><span class="line">            &#125;</span><br><span class="line">            pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (holder.<span class="built_in">count</span>) &#123;</span><br><span class="line">        dispatch_queue_t queue = <span class="variable">_lru</span>-&gt;<span class="variable">_releaseOnMainThread</span> ? dispatch_get_main_queue() : YYMemoryCacheGetReleaseQueue();</span><br><span class="line">        dispatch_async(queue, ^&#123;</span><br><span class="line">            [holder <span class="built_in">count</span>]; <span class="comment">// release in queue</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法做了什么？</p>
<ol>
<li>使用<code>pthread_mutex_lock(&amp;_lock);pthread_mutex_unlock(&amp;_lock);</code>对操作加锁解锁来保证线程安全。</li>
<li>对参数 countLimit 判断：<br>如果countLimit为0，也就是说缓存数量限制为0，那移除所有缓存对象就是了。如果当前所缓存的对象数量小于countLimit，那说明满足数量限制要求，就不需要移除操作了。</li>
<li>作者创建一个可变字典holder，当不满足countLimit限制要求的时候，对链表尾结点进行移除操作，并把这个尾结点添加到holder中持有。当然，这里有加锁操作。这个 while 循环结束，所有多余的缓存对象就在holder中了。<br>4.对holder中所有元素进行 release 操作。<br>其他的如:</li>
</ol>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>_trimToAge:<span class="params">(NSTimeInterval)</span>ageLimit; </span><br><span class="line">- <span class="params">(void)</span>_trimToCost:<span class="params">(NSUInteger)</span>costLimit</span><br></pre></td></tr></table></figure>
<p>操作同理。</p>
<h3 id="内存警告"><a href="#内存警告" class="headerlink" title="内存警告"></a>内存警告</h3><p>内存警告语 App 进入后台时释放缓存对象的操作，作者接受了系统通知，直接处理即可。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">addObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">selector</span>:@<span class="keyword">selector</span>(<span class="keyword">_appDidReceiveMemoryWarningNotification</span>) name:UIApplicationDidReceiveMemoryWarningNotification object:nil];</span><br><span class="line"><span class="selector-attr">[[NSNotificationCenter defaultCenter]</span> <span class="selector-tag">addObserver</span><span class="selector-pseudo">:self</span> <span class="selector-tag">selector</span>:@<span class="keyword">selector</span>(<span class="keyword">_appDidEnterBackgroundNotification</span>) name:UIApplicationDidEnterBackgroundNotification object:nil];</span><br></pre></td></tr></table></figure>
<h3 id="存取实现"><a href="#存取实现" class="headerlink" title="存取实现"></a>存取实现</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)containsObjectForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    <span class="built_in">BOOL</span> contains = <span class="built_in">CFDictionaryContainsKey</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> contains;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)objectForKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    pthread_mutex_lock(&amp;_lock);</span><br><span class="line">    _YYLinkedMapNode *node = <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        node-&gt;_time = <span class="built_in">CACurrentMediaTime</span>();</span><br><span class="line">        [_lru bringNodeToHead:node];</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_mutex_unlock(&amp;_lock);</span><br><span class="line">    <span class="keyword">return</span> node ? node-&gt;_value : <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setObject:(<span class="keyword">id</span>)object forKey:(<span class="keyword">id</span>)key &#123;</span><br><span class="line">    [<span class="keyword">self</span> setObject:object forKey:key withCost:<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对缓存对象的读取自然是根据 key 读取到字典中对应的 value，这个 value 是个结点(<code>_YYLinkedMapNode</code>)，再取出这个结点的value 属性，便是最原始的缓存对象了:<code>node-&gt;_value</code>。</p>
<h2 id="2-关键点"><a href="#2-关键点" class="headerlink" title="2.关键点"></a>2.关键点</h2><p>1.字典</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">声明: <span class="built_in">CFMutableDictionaryRef</span> _dic;</span><br><span class="line">创建: _dic = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">设值: <span class="built_in">CFDictionarySetValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node-&gt;_key), (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node));</span><br><span class="line">取值: <span class="built_in">CFDictionaryGetValue</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">移除: <span class="built_in">CFDictionaryRemoveValue</span>(_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(node-&gt;_key));</span><br><span class="line">获取数量: <span class="built_in">CFDictionaryGetCount</span>(_dic);</span><br><span class="line">是否存在: <span class="built_in">CFDictionaryContainsKey</span>(_lru-&gt;_dic, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">释放: <span class="built_in">CFRelease</span>(_dic);</span><br></pre></td></tr></table></figure>
<p>2.容器中对象销毁控制</p>
<blockquote>
<p>“对象的销毁虽然消耗资源不多，但累积起来也是不容忽视的。通常当容器类持有大量对象时，其销毁时的资源消耗就非常明显。同样的，如果对象可以放到后台线程去释放，那就挪到后台线程去…”</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)demo &#123;</span><br><span class="line"><span class="comment">// 对象销毁和移除容器中元素两件事隔离开</span></span><br><span class="line">&#123; <span class="comment">// 数组中的所有元素在子线程释放</span></span><br><span class="line">   <span class="built_in">NSArray</span> *holder = tmp;</span><br><span class="line">   tmp = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   <span class="keyword">if</span> (holder.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">           [holder count];</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#123; <span class="comment">// 数组中的某个元素在子线程释放</span></span><br><span class="line">   <span class="keyword">id</span> obj = tmp[<span class="number">2</span>];</span><br><span class="line">   <span class="built_in">NSMutableArray</span> *holder = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">   [holder addObject:obj];</span><br><span class="line">   [tmp removeObject:obj];</span><br><span class="line">   <span class="keyword">if</span> (holder.count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">           [holder count];</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.线程安全的实现</p>
<figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;  // 取值线程安全</span><br><span class="line">pthread_mutex_lock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">BOOL releaseAsynchronously = _lru-&gt;_releaseAsynchronously;</span><br><span class="line">pthread_mutex_unlock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">return releaseAsynchronously;</span><br><span class="line">&#125;</span><br><span class="line">&#123; // 设值线程安全</span><br><span class="line">pthread_mutex_lock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">_lru-&gt;_releaseAsynchronously = releaseAsynchronously;</span><br><span class="line">pthread_mutex_unlock(<span class="name">&amp;_lock</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>4.<code>pthread_mutex_lock</code>使用</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">声明锁: pthread_mutex_t <span class="variable">_lock</span>;</span><br><span class="line">创建锁: pthread_mutex_init(&amp;<span class="variable">_lock</span>, NULL);</span><br><span class="line">加锁: pthread_mutex_lock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">解锁: pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">尝试加锁:</span><br><span class="line"><span class="keyword">if</span> (pthread_mutex_trylock(&amp;<span class="variable">_lock</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">pthread_mutex_unlock(&amp;<span class="variable">_lock</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">usleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">//10 ms</span></span><br><span class="line">&#125;</span><br><span class="line">销毁锁: pthread_mutex_destroy(&amp;<span class="variable">_lock</span>);</span><br></pre></td></tr></table></figure>
<p>5.if-else 单句</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_name) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">nil</span>;</span><br></pre></td></tr></table></figure>
<h2 id="3-YYDiskCache-实现"><a href="#3-YYDiskCache-实现" class="headerlink" title="3.YYDiskCache 实现"></a>3.YYDiskCache 实现</h2><p>YYDiskCache主要调用了YYKVStorage的接口，并提供对外 API。</p>
<h4 id="五个函数"><a href="#五个函数" class="headerlink" title="五个函数"></a>五个函数</h4><figure class="highlight nimrod"><table><tr><td class="code"><pre><span class="line">/// <span class="type">Free</span> disk space <span class="keyword">in</span> bytes.</span><br><span class="line"><span class="keyword">static</span> int64_t _YYDiskSpaceFree() &#123;</span><br><span class="line">    <span class="type">NSError</span> *error = <span class="keyword">nil</span>;</span><br><span class="line">    <span class="type">NSDictionary</span> *attrs = [[<span class="type">NSFileManager</span> defaultManager] attributesOfFileSystemForPath:<span class="type">NSHomeDirectory</span>() error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    int64_t space =  [[attrs objectForKey:<span class="type">NSFileSystemFreeSize</span>] longLongValue];</span><br><span class="line">    <span class="keyword">if</span> (space &lt; <span class="number">0</span>) space = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> space;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/// <span class="type">String</span>'s md5 hash.</span><br><span class="line"><span class="keyword">static</span> <span class="type">NSString</span> *_YYNSStringMD5(<span class="type">NSString</span> *<span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">    <span class="type">NSData</span> *data = [<span class="built_in">string</span> dataUsingEncoding:<span class="type">NSUTF8StringEncoding</span>];</span><br><span class="line">    unsigned <span class="built_in">char</span> <span class="literal">result</span>[<span class="type">CC_MD5_DIGEST_LENGTH</span>];</span><br><span class="line">    <span class="type">CC_MD5</span>(data.bytes, (<span class="type">CC_LONG</span>)data.length, <span class="literal">result</span>);</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">NSString</span> stringWithFormat:</span><br><span class="line">                @<span class="string">"%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"</span>,</span><br><span class="line">                <span class="literal">result</span>[<span class="number">0</span>],  <span class="literal">result</span>[<span class="number">1</span>],  <span class="literal">result</span>[<span class="number">2</span>],  <span class="literal">result</span>[<span class="number">3</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">4</span>],  <span class="literal">result</span>[<span class="number">5</span>],  <span class="literal">result</span>[<span class="number">6</span>],  <span class="literal">result</span>[<span class="number">7</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">8</span>],  <span class="literal">result</span>[<span class="number">9</span>],  <span class="literal">result</span>[<span class="number">10</span>], <span class="literal">result</span>[<span class="number">11</span>],</span><br><span class="line">                <span class="literal">result</span>[<span class="number">12</span>], <span class="literal">result</span>[<span class="number">13</span>], <span class="literal">result</span>[<span class="number">14</span>], <span class="literal">result</span>[<span class="number">15</span>]</span><br><span class="line">            ];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">void</span> _YYDiskCacheInitGlobal() &#123;</span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t onceToken;</span><br><span class="line">    dispatch_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _globalInstancesLock = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">        _globalInstances = [[<span class="type">NSMapTable</span> alloc] initWithKeyOptions:<span class="type">NSPointerFunctionsStrongMemory</span> valueOptions:<span class="type">NSPointerFunctionsWeakMemory</span> capacity:<span class="number">0</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="type">YYDiskCache</span> *_YYDiskCacheGetGlobal(<span class="type">NSString</span> *path) &#123;</span><br><span class="line">    <span class="keyword">if</span> (path.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">    _YYDiskCacheInitGlobal();</span><br><span class="line">    dispatch_semaphore_wait(_globalInstancesLock, <span class="type">DISPATCH_TIME_FOREVER</span>);</span><br><span class="line">    id cache = [_globalInstances objectForKey:path];</span><br><span class="line">    dispatch_semaphore_signal(_globalInstancesLock);</span><br><span class="line">    <span class="keyword">return</span> cache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">void</span> _YYDiskCacheSetGlobal(<span class="type">YYDiskCache</span> *cache) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.path.length == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    _YYDiskCacheInitGlobal();</span><br><span class="line">    dispatch_semaphore_wait(_globalInstancesLock, <span class="type">DISPATCH_TIME_FOREVER</span>);</span><br><span class="line">    [_globalInstances setObject:cache forKey:cache.path];</span><br><span class="line">    dispatch_semaphore_signal(_globalInstancesLock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_YYDiskSpaceFree()</code>提供剩余磁盘空间的查询。<br><code>_YYNSStringMD5(NSString *string)</code>提供字符串转 md5。</p>
<p><code>_YYDiskCacheInitGlobal()</code>用于初始化一个强-弱的<code>NSMapTable</code>，保存<code>YYDiskCache</code>对象。<br><code>_YYDiskCacheGetGlobal(NSString *path)</code>用于根据路径 path 获取对应的<code>YYDiskCache</code>对象。<br><code>_YYDiskCacheSetGlobal(YYDiskCache *cache)</code>用于根据路径 path 在<code>NSMapTable</code>保存一个<code>YYDiskCache</code>对象。</p>
<h4 id="主要实现"><a href="#主要实现" class="headerlink" title="主要实现"></a>主要实现</h4><p>YYDiskCache的功能比如移除过期的对象、移除超过数量限制的对象等，主要通过YYKVStorage实现。<br>作者把保存类型分为三种：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSUInteger</span>, <span class="type">YYKVStorageType</span>) &#123;</span><br><span class="line">    /// file system.</span><br><span class="line">    <span class="type">YYKVStorageTypeFile</span> = 0,</span><br><span class="line">    ///  in sqlite.</span><br><span class="line">    <span class="type">YYKVStorageTypeSQLite</span> = 1,</span><br><span class="line">    ///  based on your choice.</span><br><span class="line">    <span class="type">YYKVStorageTypeMixed</span> = 2,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>作者指明了原因：Typically, write data to sqlite is faster than extern file, but<br> reading performance is dependent on data size. In my test (on iPhone 6 64G),<br> read data from extern file is faster than from sqlite when the data is larger<br> than 20KB.</p>
<ul>
<li>If you want to store large number of small datas (such as contacts cache),<br>use YYKVStorageTypeSQLite to get better performance.</li>
<li>If you want to store large files (such as image cache),<br>use YYKVStorageTypeFile to get better performance.</li>
<li><p>You can use YYKVStorageTypeMixed and choice your storage type for each item.</p>
<p>20kb 以下的持久化，放到文件中。 20kb 以上的持久化，放到数据库sqlite中。也可以选择混合存储。</p>
</li>
</ul>
<h2 id="三-关键点"><a href="#三-关键点" class="headerlink" title="三.关键点"></a>三.关键点</h2><p>1.弱引用+强引用</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) _<span class="keyword">self</span> = <span class="keyword">self</span>;</span><br><span class="line"><span class="built_in">dispatch_async</span>(_queue, ^&#123;</span><br><span class="line">    __<span class="keyword">strong</span> <span class="keyword">typeof</span>(_<span class="keyword">self</span>) <span class="keyword">self</span> = _<span class="keyword">self</span>;</span><br><span class="line">    <span class="built_in">BOOL</span> contains = [<span class="keyword">self</span> containsObjectForKey:key];<span class="comment">// self 应该是局部变量</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>2, 快速生成时间戳(10位数)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> timestamp = time(<span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure>
<p>3.init构造<br><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">self</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol start="4">
<li>抛出异常</li>
</ol>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@throw</span> [NSException <span class="attribute">exceptionWithName</span>:@<span class="string">"name"</span> <span class="attribute">reason</span>:@<span class="string">"YYDiskCache must be initialized with a path. Use 'initWithPath:' or 'initWithPath:inlineThreshold:' instead."</span> <span class="attribute">userInfo</span>:nil];</span><br></pre></td></tr></table></figure>
<p>5.尝试捕获异常<br><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="meta">@try</span> &#123;</span><br><span class="line">    <span class="keyword">object</span> = [NSKeyedUnarchiver unarchiveObjectWithData:item.<span class="keyword">value</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@catch</span> (NSException *exception) &#123;</span><br><span class="line">    <span class="comment">// nothing to do...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="四-YYKVStorage"><a href="#四-YYKVStorage" class="headerlink" title="四.YYKVStorage"></a>四.YYKVStorage</h2><p>YYKVStorage没有阅读。乍一看是许多琐碎的 SQL 操作和文件操作，没有纳入阅读计划。</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读「YYModel」]]></title>
      <url>http://blog.chenyalun.com/2018/12/20/%E8%AF%BB%E3%80%8CYYModel%E3%80%8D/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 关于YYModel的简单总结。 </p><br><a id="more"></a><p></p>
<p>尝试阅读YYModel源码，发现有一些细节并不能十分透彻地理解清楚，只能略微窥探到其中主要原理。这里就当做第一遍阅读笔记😂😂😂。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">YYModel</span>)</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)yy_modelWithJSON:(<span class="keyword">id</span>)json;</span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="keyword">instancetype</span>)yy_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dictionary;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelSetWithJSON:(<span class="keyword">id</span>)json;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelSetWithDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)yy_modelToJSONObject;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSData</span> *)yy_modelToJSONData;</span><br><span class="line">- (<span class="keyword">nullable</span> <span class="built_in">NSString</span> *)yy_modelToJSONString;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span>)yy_modelCopy;</span><br><span class="line">- (<span class="keyword">void</span>)yy_modelEncodeWithCoder:(<span class="built_in">NSCoder</span> *)aCoder;</span><br><span class="line">- (<span class="keyword">id</span>)yy_modelInitWithCoder:(<span class="built_in">NSCoder</span> *)aDecoder;</span><br><span class="line">- (<span class="built_in">NSUInteger</span>)yy_modelHash;</span><br><span class="line">- (<span class="built_in">BOOL</span>)yy_modelIsEqual:(<span class="keyword">id</span>)model;</span><br><span class="line">- (<span class="built_in">NSString</span> *)yy_modelDescription;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">YYModel</span>)</span></span><br><span class="line"><span class="comment">// json到模型数组</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span> *)yy_modelArrayWithClass:(Class)cls json:(<span class="keyword">id</span>)json;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSDictionary</span> (<span class="title">YYModel</span>)</span></span><br><span class="line"><span class="comment">// json到字典</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span> *)yy_modelDictionaryWithClass:(Class)cls json:(<span class="keyword">id</span>)json;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">YYModel</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line"><span class="comment">// 自定义模型属性与json's key的映射</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)modelCustomPropertyMapper;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)modelCustomPropertyMapper &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123; <span class="string">@"name"</span> : <span class="string">@"n"</span>,</span><br><span class="line">              <span class="string">@"count"</span> : <span class="string">@"ext.c"</span>,</span><br><span class="line">              <span class="string">@"desc1"</span> : <span class="string">@"ext.d"</span>,</span><br><span class="line">              <span class="string">@"desc4"</span> : <span class="string">@".ext"</span>,</span><br><span class="line">              <span class="string">@"modelID"</span> : @[<span class="string">@"ID"</span>, <span class="string">@"Id"</span>, <span class="string">@"id"</span>, <span class="string">@"ext.id"</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 黑名单, 若实现该方法, 黑名单之内的key均不作处理</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)modelPropertyBlacklist;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)modelPropertyBlacklist &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>, <span class="string">@"age"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 白名单, 若实现该方法, 白名单之外的key均不作处理</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)modelPropertyWhitelist;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)modelPropertyWhitelist &#123;</span><br><span class="line">    <span class="keyword">return</span> @[<span class="string">@"name"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.要在JSON转Model的过程中根据情况创建不同类型的实例</span></span><br><span class="line">+ (<span class="keyword">nullable</span> Class)modelCustomClassForDictionary:(<span class="built_in">NSDictionary</span> *)dictionary;</span><br><span class="line">+ (Class)modelCustomClassForDictionary:(<span class="built_in">NSDictionary</span>*)dictionary &#123;</span><br><span class="line">    <span class="keyword">if</span> (dictionary[<span class="string">@"localName"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [YYLocalUser <span class="keyword">class</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dictionary[<span class="string">@"remoteName"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [YYRemoteUser <span class="keyword">class</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [YYBaseUser <span class="keyword">class</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.该方法发生在字典转模型之前, 最后对字典做一次处理</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)modelCustomWillTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line"><span class="comment">//- (NSDictionary *)modelCustomWillTransformFromDictionary:(NSDictionary *)dic&#123;</span></span><br><span class="line">    <span class="keyword">if</span> ([dic[<span class="string">@"sex"</span>] isEqualToString:<span class="string">@"Man"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dic;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.JSON转为Model后, 进行数据校验</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic;</span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformFromDictionary:(<span class="built_in">NSDictionary</span> *)dic &#123;</span><br><span class="line">    <span class="built_in">NSNumber</span> *timestamp = dic[<span class="string">@"timestamp"</span>];</span><br><span class="line">    <span class="keyword">if</span> (![timestamp isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    _createdAt = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:timestamp.floatValue];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模型容器属性中的所需要存放的数据类型</span></span><br><span class="line">+ (<span class="keyword">nullable</span> <span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSString</span> *, <span class="keyword">id</span>&gt; *)modelContainerPropertyGenericClass;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> *)modelContainerPropertyGenericClass &#123;</span><br><span class="line">    <span class="keyword">return</span> @&#123;<span class="string">@"shadows"</span> : [Shadow <span class="keyword">class</span>],</span><br><span class="line">             <span class="string">@"borders"</span> : Border.class,</span><br><span class="line">             <span class="string">@"attachments"</span> : <span class="string">@"Attachment"</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Model转为JSON后, 进行数据校验</span></span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformToDictionary:(<span class="built_in">NSMutableDictionary</span> *)dic;</span><br><span class="line">- (<span class="built_in">BOOL</span>)modelCustomTransformToDictionary:(<span class="built_in">NSMutableDictionary</span> *)dic &#123;</span><br><span class="line">    <span class="keyword">if</span> (!_createdAt) <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    dic[<span class="string">@"timestamp"</span>] = @(_createdAt.timeIntervalSince1970);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 函数1: 根据class信息获取其对应的类型</span></span><br><span class="line"><span class="keyword">static</span> force_inline YYEncodingNSType YYClassGetNSType(Class cls) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> YYEncodingTypeNSUnknown;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableString;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSString;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDecimalNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDecimalNumber;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSNumber;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSValue</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSValue;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableData;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSData;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDate</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDate;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSURL</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSURL;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableArray</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableArray;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSArray;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableDictionary;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSDictionary;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSMutableSet</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSMutableSet;</span><br><span class="line">    <span class="keyword">if</span> ([cls isSubclassOfClass:[<span class="built_in">NSSet</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> YYEncodingTypeNSSet;</span><br><span class="line">    <span class="keyword">return</span> YYEncodingTypeNSUnknown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数2: 判断YYEncodingType是不是一个数字(整形\长整型\浮点型等)</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">BOOL</span> YYEncodingTypeIsCNumber(YYEncodingType type) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt8:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt8:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt16:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt16:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt32:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt32:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeInt64:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeUInt64:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeFloat:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeDouble:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeLongDouble: <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数3: 根据一个id类型的对象创建一个NSNumber类型的对象</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSNumber</span> *YYNSNumberCreateFromID(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> value) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSCharacterSet</span> *dot;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDictionary</span> *dic;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        dot = [<span class="built_in">NSCharacterSet</span> characterSetWithRange:<span class="built_in">NSMakeRange</span>(<span class="string">'.'</span>, <span class="number">1</span>)];</span><br><span class="line">        dic = @&#123;<span class="string">@"TRUE"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"True"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"true"</span> :   @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"FALSE"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"False"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"false"</span> :  @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"YES"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"Yes"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"yes"</span> :    @(<span class="literal">YES</span>),</span><br><span class="line">                <span class="string">@"NO"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"No"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"no"</span> :     @(<span class="literal">NO</span>),</span><br><span class="line">                <span class="string">@"NIL"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"Nil"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"nil"</span> :    (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"NULL"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"Null"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"null"</span> :   (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(NULL)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(Null)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"(null)"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;NULL&gt;"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;Null&gt;"</span> : (<span class="keyword">id</span>)kCFNull,</span><br><span class="line">                <span class="string">@"&lt;null&gt;"</span> : (<span class="keyword">id</span>)kCFNull&#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// kCFNull单例</span></span><br><span class="line">    <span class="keyword">if</span> (!value || value == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="comment">// NSNumber直接返回</span></span><br><span class="line">    <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> value;</span><br><span class="line">    <span class="comment">// NSString, 取出dic中对应的值</span></span><br><span class="line">    <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSNumber</span> *num = dic[value];</span><br><span class="line">        <span class="keyword">if</span> (num) &#123;</span><br><span class="line">            <span class="keyword">if</span> (num == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这个字符串中含有 ".", 例如 @"12.344"</span></span><br><span class="line">        <span class="keyword">if</span> ([(<span class="built_in">NSString</span> *)value rangeOfCharacterFromSet:dot].location != <span class="built_in">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *cstring = ((<span class="built_in">NSString</span> *)value).UTF8String;</span><br><span class="line">            <span class="keyword">if</span> (!cstring) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">double</span> num = atof(cstring);</span><br><span class="line">            <span class="comment">// isfinite()测试某个浮点数是不是有限的数</span></span><br><span class="line">            <span class="comment">// isinf()测试某个浮点数是否是无限大</span></span><br><span class="line">            <span class="comment">// isnan()测试某个浮点数是否是 非数字</span></span><br><span class="line">            <span class="keyword">if</span> (isnan(num) || isinf(num)) <span class="keyword">return</span> <span class="literal">nil</span>; <span class="comment">// num是否是无限大或者是否是非数字</span></span><br><span class="line">            <span class="keyword">return</span> @(num); <span class="comment">// return @(12.344);</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 字符串中没有".", 例如 @"1323"</span></span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *cstring = ((<span class="built_in">NSString</span> *)value).UTF8String;<span class="comment">// 转化为C字符串"1323"</span></span><br><span class="line">            <span class="keyword">if</span> (!cstring) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            <span class="comment">// atoi函数：将字符串转化为int类型变量. atol函数：将字符串转化为long类型变量.</span></span><br><span class="line">            <span class="comment">// atoll函数：将字符串转化为long long类型变量.atof函数：将字符串转化为double类型变量</span></span><br><span class="line">            <span class="keyword">return</span> @(atoll(cstring)); <span class="comment">// 转换为long long类型变量</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数4: 将字符串转化为日期NSDate</span></span><br><span class="line"><span class="comment">// 根据string的length判断需要调用哪一个block, 为了避免效率较低的if-else, 采用block数组的形式, string的length正好对应blocks数组的索引, 即查表法, 效率得到提升.</span></span><br><span class="line"><span class="comment">// YYNSDateParseBlock parser = blocks[string.length];</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSDate</span> *YYNSDateFromString(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^YYNSDateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line">    <span class="meta">#define kParserNum 34</span></span><br><span class="line">    <span class="comment">// 定义一个block数组, 数组是C数组</span></span><br><span class="line">    <span class="keyword">static</span> YYNSDateParseBlock blocks[kParserNum + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20  // Google , 10个字符, 对应blocks[10]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"yyyy-MM-dd"</span>;</span><br><span class="line">            blocks[<span class="number">10</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20 12:24:48 // 19个字符, 对应blocks[19]</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48   // Google, 19个字符, 对应blocks[19]</span></span><br><span class="line"><span class="comment">             2014-01-20 12:24:48.000 // 23个字符, 对应blocks[23]</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000 // 23个字符, 对应blocks[23]</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter1 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter1.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter1.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter1.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss"</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter3 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter3.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter3.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter3.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss.SSS"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter4 = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">            formatter4.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter4.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">            formatter4.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss.SSS"</span>;</span><br><span class="line">            </span><br><span class="line">            blocks[<span class="number">19</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([string characterAtIndex:<span class="number">10</span>] == <span class="string">'T'</span>) &#123;<span class="comment">// 2014-01-20T12:24:48</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter1 dateFromString:string];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2014-01-20 12:24:48</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter2 dateFromString:string];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">23</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">                <span class="keyword">if</span> ([string characterAtIndex:<span class="number">10</span>] == <span class="string">'T'</span>) &#123;<span class="comment">// 2014-01-20T12:24:48.000</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter3 dateFromString:string];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 2014-01-20 12:24:48.000</span></span><br><span class="line">                    <span class="keyword">return</span> [formatter4 dateFromString:string];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48Z        // Github, Apple</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48+0800    // Facebook</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48+12:00   // Google</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000Z</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000+0800</span></span><br><span class="line"><span class="comment">             2014-01-20T12:24:48.000+12:00</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ssZ"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ss.SSSZ"</span>;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">20</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">24</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]?: [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">25</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">28</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">29</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             Fri Sep 04 00:12:21 +0800 2015 // Weibo, Twitter</span></span><br><span class="line"><span class="comment">             Fri Sep 04 00:12:21.000 +0800 2015</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter.dateFormat = <span class="string">@"EEE MMM dd HH:mm:ss Z yyyy"</span>;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">NSDateFormatter</span> *formatter2 = [<span class="built_in">NSDateFormatter</span> new];</span><br><span class="line">            formatter2.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">            formatter2.dateFormat = <span class="string">@"EEE MMM dd HH:mm:ss.SSS Z yyyy"</span>;</span><br><span class="line"></span><br><span class="line">            blocks[<span class="number">30</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter dateFromString:string]; &#125;;</span><br><span class="line">            blocks[<span class="number">34</span>] = ^(<span class="built_in">NSString</span> *string) &#123; <span class="keyword">return</span> [formatter2 dateFromString:string]; &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!string) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> (string.length &gt; kParserNum) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    YYNSDateParseBlock parser = blocks[string.length];</span><br><span class="line">    <span class="keyword">if</span> (!parser) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> parser(string);</span><br><span class="line">    <span class="meta">#undef kParserNum</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数5: 获取NSBlock类</span></span><br><span class="line"><span class="keyword">static</span> force_inline Class YYNSBlockClass() &#123;</span><br><span class="line">    <span class="keyword">static</span> Class cls;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;&#125;;</span><br><span class="line">        cls = ((<span class="built_in">NSObject</span> *)block).class;</span><br><span class="line">        <span class="keyword">while</span> (class_getSuperclass(cls) != [<span class="built_in">NSObject</span> <span class="keyword">class</span>]) &#123;</span><br><span class="line">            cls = class_getSuperclass(cls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> cls; <span class="comment">// current is "NSBlock"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数6: 获取ISO NSDateFormatter</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> example:</span></span><br><span class="line"><span class="comment"> 2010-07-09T16:13:30+12:00</span></span><br><span class="line"><span class="comment"> 2011-01-11T11:11:11+0000</span></span><br><span class="line"><span class="comment"> 2011-01-26T19:06:43Z</span></span><br><span class="line"><span class="comment"> length: 20/24/25</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSDateFormatter</span> *YYISODateFormatter() &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *formatter = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">        formatter.dateFormat = <span class="string">@"yyyy-MM-dd'T'HH:mm:ssZ"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> formatter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    "version": "1.1",</span></span><br><span class="line"><span class="comment">    "object": &#123;</span></span><br><span class="line"><span class="comment">        "data": &#123;</span></span><br><span class="line"><span class="comment">            "phone": "12332123"</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数7: 根据keypath从字典中获取对应的值(这个值是id类型)</span></span><br><span class="line"><span class="comment">// keyPaths: @[@"object", @"data", @"phone"] 对应的值是 @"12332123"</span></span><br><span class="line"><span class="comment">// keyPaths: @[@"object", @"data"] 对应的值是 @&#123;@"phone": @"12332123"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">id</span> YYValueForKeyPath(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dic, __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSArray</span> *keyPaths) &#123;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = keyPaths.count; i &lt; max; i++) &#123;</span><br><span class="line">        value = dic[keyPaths[i]];</span><br><span class="line">        <span class="keyword">if</span> (i + <span class="number">1</span> &lt; max) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([value isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                dic = value;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数8: 根据可变的keypath从字典中获取对应的值(这个值是id类型)</span></span><br><span class="line"><span class="comment">// multiKeys: @[ @[@"object", @"data"], @"phone"] 对应的值是 @&#123;@"phone": @"12332123"&#125;</span></span><br><span class="line"><span class="comment">// multiKeys: @[@"object", @"data"] 对应的值是 @&#123;@"data": @&#123;@"phone": @"12332123"&#125;&#125;</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">id</span> YYValueForMultiKeys(__<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dic, __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSArray</span> *multiKeys) &#123;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> *key <span class="keyword">in</span> multiKeys) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([key isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">            value = dic[key];</span><br><span class="line">            <span class="keyword">if</span> (value) <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = YYValueForKeyPath(dic, (<span class="built_in">NSArray</span> *)key);</span><br><span class="line">            <span class="keyword">if</span> (value) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数9: 从模型中的属性(_YYModelPropertyMeta类型)中获取NSNumber</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="built_in">NSNumber</span> *ModelCreateNumberFromProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                                            __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (meta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool: &#123;</span><br><span class="line">            <span class="keyword">return</span> @(((<span class="keyword">bool</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, meta-&gt;_<span class="keyword">getter</span>));&#125;</span><br><span class="line">      <span class="comment">//......</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数10: 对模型中的属性(_YYModelPropertyMeta类型)设值. 和函数9类似</span></span><br><span class="line"><span class="keyword">static</span> force_inline <span class="keyword">void</span> ModelSetNumberToProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                                  __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSNumber</span> *num,</span><br><span class="line">                                                  __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (meta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeBool: &#123;</span><br><span class="line">            ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">bool</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, meta-&gt;_<span class="keyword">setter</span>, num.boolValue);</span><br><span class="line">        &#125; <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数11: 对模型中的属性(_YYModelPropertyMeta类型)设值</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetValueForProperty(__<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model,</span><br><span class="line">                                     __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> value,</span><br><span class="line">                                     __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *meta) &#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> *modelMeta;  <span class="comment">///&lt; _YYModelMeta</span></span><br><span class="line">    <span class="keyword">void</span> *model;      <span class="comment">///&lt; id (self)</span></span><br><span class="line">    <span class="keyword">void</span> *dictionary; <span class="comment">///&lt; NSDictionary (json)</span></span><br><span class="line">&#125; ModelSetContext;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数12: 对模型(_context.modelMeta and _context.model)设置 key-value键值对</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetWithDictionaryFunction(<span class="keyword">const</span> <span class="keyword">void</span> *_key, <span class="keyword">const</span> <span class="keyword">void</span> *_value, <span class="keyword">void</span> *_context) &#123;</span><br><span class="line">    ModelSetContext *context = _context;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelMeta *meta = (__bridge _YYModelMeta *)(context-&gt;modelMeta);</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *propertyMeta = [meta-&gt;_mapper objectForKey:(__bridge <span class="keyword">id</span>)(_key)];</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model = (__bridge <span class="keyword">id</span>)(context-&gt;model);</span><br><span class="line">    <span class="keyword">while</span> (propertyMeta) &#123;</span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_<span class="keyword">setter</span>) &#123;</span><br><span class="line">            ModelSetValueForProperty(model, (__bridge __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span>)_value, propertyMeta);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 有多个属性映射到同一个 key 则指向下一个模型属性元</span></span><br><span class="line">        propertyMeta = propertyMeta-&gt;_next;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Apply function for model property meta, to set dictionary to model.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param _propertyMeta should not be nil, _YYModelPropertyMeta.</span></span><br><span class="line"><span class="comment"> @param _context      _context.model and _context.dictionary should not be nil.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数13:</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ModelSetWithPropertyMetaArrayFunction(<span class="keyword">const</span> <span class="keyword">void</span> *_propertyMeta, <span class="keyword">void</span> *_context) &#123;</span><br><span class="line">    ModelSetContext *context = _context;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSDictionary</span> *dictionary = (__bridge <span class="built_in">NSDictionary</span> *)(context-&gt;dictionary);</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> _YYModelPropertyMeta *propertyMeta = (__bridge _YYModelPropertyMeta *)(_propertyMeta);</span><br><span class="line">    <span class="keyword">if</span> (!propertyMeta-&gt;_<span class="keyword">setter</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyArray) &#123;</span><br><span class="line">        value = YYValueForMultiKeys(dictionary, propertyMeta-&gt;_mappedToKeyArray);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyPath) &#123;</span><br><span class="line">        value = YYValueForKeyPath(dictionary, propertyMeta-&gt;_mappedToKeyPath);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        value = [dictionary objectForKey:propertyMeta-&gt;_mappedToKey];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (value) &#123;</span><br><span class="line">        __<span class="keyword">unsafe_unretained</span> <span class="keyword">id</span> model = (__bridge <span class="keyword">id</span>)(context-&gt;model);</span><br><span class="line">        ModelSetValueForProperty(model, value, propertyMeta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Returns a valid JSON object (NSArray/NSDictionary/NSString/NSNumber/NSNull),</span></span><br><span class="line"><span class="comment"> or nil if an error occurs.</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param model Model, can be nil.</span></span><br><span class="line"><span class="comment"> @return JSON object, nil if an error occurs.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 函数14: 模型转 json</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> ModelToJSONObjectRecursive(<span class="built_in">NSObject</span> *model) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!model || model == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> model;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:model]) <span class="keyword">return</span> model;</span><br><span class="line">        <span class="built_in">NSMutableDictionary</span> *newDic = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">        [((<span class="built_in">NSDictionary</span> *)model) enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> *key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *stringKey = [key isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] ? key : key.description;</span><br><span class="line">            <span class="keyword">if</span> (!stringKey) <span class="keyword">return</span>;</span><br><span class="line">            <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">            <span class="keyword">if</span> (!jsonObj) jsonObj = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line">            newDic[stringKey] = jsonObj;</span><br><span class="line">        &#125;];</span><br><span class="line">        <span class="keyword">return</span> newDic;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSSet</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="built_in">NSArray</span> *array = ((<span class="built_in">NSSet</span> *)model).allObjects;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:array]) <span class="keyword">return</span> array;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *newArray = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> array) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] || [obj isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [newArray addObject:obj];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">                <span class="keyword">if</span> (jsonObj &amp;&amp; jsonObj != (<span class="keyword">id</span>)kCFNull) [newArray addObject:jsonObj];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSArray</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([<span class="built_in">NSJSONSerialization</span> isValidJSONObject:model]) <span class="keyword">return</span> model;</span><br><span class="line">        <span class="built_in">NSMutableArray</span> *newArray = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">id</span> obj <span class="keyword">in</span> (<span class="built_in">NSArray</span> *)model) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([obj isKindOfClass:[<span class="built_in">NSString</span> <span class="keyword">class</span>]] || [obj isKindOfClass:[<span class="built_in">NSNumber</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                [newArray addObject:obj];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">id</span> jsonObj = ModelToJSONObjectRecursive(obj);</span><br><span class="line">                <span class="keyword">if</span> (jsonObj &amp;&amp; jsonObj != (<span class="keyword">id</span>)kCFNull) [newArray addObject:jsonObj];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newArray;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSURL</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> ((<span class="built_in">NSURL</span> *)model).absoluteString;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSAttributedString</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> ((<span class="built_in">NSAttributedString</span> *)model).string;</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSDate</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> [YYISODateFormatter() stringFromDate:(<span class="keyword">id</span>)model];</span><br><span class="line">    <span class="keyword">if</span> ([model isKindOfClass:[<span class="built_in">NSData</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _YYModelMeta *modelMeta = [_YYModelMeta metaWithClass:[model <span class="keyword">class</span>]];</span><br><span class="line">    <span class="keyword">if</span> (!modelMeta || modelMeta-&gt;_keyMappedCount == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *result = [[<span class="built_in">NSMutableDictionary</span> alloc] initWithCapacity:<span class="number">64</span>];</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> <span class="built_in">NSMutableDictionary</span> *dic = result; <span class="comment">// avoid retain and release in block</span></span><br><span class="line">    [modelMeta-&gt;_mapper enumerateKeysAndObjectsUsingBlock:^(<span class="built_in">NSString</span> *propertyMappedKey, _YYModelPropertyMeta *propertyMeta, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!propertyMeta-&gt;_<span class="keyword">getter</span>) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_isCNumber) &#123;</span><br><span class="line">            value = ModelCreateNumberFromProperty(model, propertyMeta);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyMeta-&gt;_nsType) &#123;</span><br><span class="line">            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">            value = ModelToJSONObjectRecursive(v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (propertyMeta-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeObject: &#123;</span><br><span class="line">                    <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = ModelToJSONObjectRecursive(v);</span><br><span class="line">                    <span class="keyword">if</span> (value == (<span class="keyword">id</span>)kCFNull) value = <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeClass: &#123;</span><br><span class="line">                    Class v = ((Class (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = v ? <span class="built_in">NSStringFromClass</span>(v) : <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YYEncodingTypeSEL: &#123;</span><br><span class="line">                    SEL v = ((SEL (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, propertyMeta-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                    value = v ? <span class="built_in">NSStringFromSelector</span>(v) : <span class="literal">nil</span>;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!value) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (propertyMeta-&gt;_mappedToKeyPath) &#123;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span> *superDic = dic;</span><br><span class="line">            <span class="built_in">NSMutableDictionary</span> *subDic = <span class="literal">nil</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = propertyMeta-&gt;_mappedToKeyPath.count; i &lt; max; i++) &#123;</span><br><span class="line">                <span class="built_in">NSString</span> *key = propertyMeta-&gt;_mappedToKeyPath[i];</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> == max) &#123; <span class="comment">// end</span></span><br><span class="line">                    <span class="keyword">if</span> (!superDic[key]) superDic[key] = value;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                subDic = superDic[key];</span><br><span class="line">                <span class="keyword">if</span> (subDic) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([subDic isKindOfClass:[<span class="built_in">NSDictionary</span> <span class="keyword">class</span>]]) &#123;</span><br><span class="line">                        subDic = subDic.mutableCopy;</span><br><span class="line">                        superDic[key] = subDic;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    subDic = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">                    superDic[key] = subDic;</span><br><span class="line">                &#125;</span><br><span class="line">                superDic = subDic;</span><br><span class="line">                subDic = <span class="literal">nil</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dic[propertyMeta-&gt;_mappedToKey]) &#123;</span><br><span class="line">                dic[propertyMeta-&gt;_mappedToKey] = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (modelMeta-&gt;_hasCustomTransformToDictionary) &#123;</span><br><span class="line">        <span class="comment">// 当 Model 转为 JSON 完成后，该方法会被调用。</span></span><br><span class="line">        <span class="comment">// 你可以在这里对数据进行校验，如果校验不通过，可以返回 NO，则该 Model 会被忽略。</span></span><br><span class="line">        <span class="comment">// 你也可以在这里做一些自动转换不能完成的工作。</span></span><br><span class="line">        <span class="built_in">BOOL</span> suc = [((<span class="keyword">id</span>&lt;YYModel&gt;)model) modelCustomTransformToDictionary:dic];</span><br><span class="line">        <span class="keyword">if</span> (!suc) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 函数15: Add indent to string (exclude first line)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableString</span> *ModelDescriptionAddIndent(<span class="built_in">NSMutableString</span> *desc, <span class="built_in">NSUInteger</span> indent) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = desc.length; i &lt; max; i++) &#123;</span><br><span class="line">        <span class="keyword">unichar</span> c = [desc characterAtIndex:i];</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">'\n'</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> j = <span class="number">0</span>; j &lt; indent; j++) &#123;</span><br><span class="line">                [desc insertString:<span class="string">@"    "</span> atIndex:i + <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            i += indent * <span class="number">4</span>;</span><br><span class="line">            max += indent * <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// 函数16: 根据model生成一个描述字符串</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *ModelDescription(<span class="built_in">NSObject</span> *model) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kDescMaxLength = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">if</span> (!model) <span class="keyword">return</span> <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span> (model == (<span class="keyword">id</span>)kCFNull) <span class="keyword">return</span> <span class="string">@"&lt;null&gt;"</span>;</span><br><span class="line">    <span class="keyword">if</span> (![model isKindOfClass:[<span class="built_in">NSObject</span> <span class="keyword">class</span>]]) <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,model];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _YYModelMeta *modelMeta = [_YYModelMeta metaWithClass:model.class];</span><br><span class="line">    <span class="keyword">switch</span> (modelMeta-&gt;_nsType) &#123;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSString: <span class="keyword">case</span> YYEncodingTypeNSMutableString: &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\"%@\""</span>,model];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSValue:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSData: <span class="keyword">case</span> YYEncodingTypeNSMutableData: &#123;</span><br><span class="line">            <span class="built_in">NSString</span> *tmp = model.description;</span><br><span class="line">            <span class="keyword">if</span> (tmp.length &gt; kDescMaxLength) &#123;</span><br><span class="line">                tmp = [tmp substringToIndex:kDescMaxLength];</span><br><span class="line">                tmp = [tmp stringByAppendingString:<span class="string">@"..."</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSNumber:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDecimalNumber:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDate:</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSURL: &#123;</span><br><span class="line">            <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>,model];</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSSet: <span class="keyword">case</span> YYEncodingTypeNSMutableSet: &#123;</span><br><span class="line">            model = ((<span class="built_in">NSSet</span> *)model).allObjects;</span><br><span class="line">        &#125; <span class="comment">// no break</span></span><br><span class="line">            </span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSArray: <span class="keyword">case</span> YYEncodingTypeNSMutableArray: &#123;</span><br><span class="line">            <span class="built_in">NSArray</span> *array = (<span class="keyword">id</span>)model;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            <span class="keyword">if</span> (array.count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [desc stringByAppendingString:<span class="string">@"[]"</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                [desc appendFormat:<span class="string">@"[\n"</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = array.count; i &lt; max; i++) &#123;</span><br><span class="line">                    <span class="built_in">NSObject</span> *obj = array[i];</span><br><span class="line">                    [desc appendString:<span class="string">@"    "</span>];</span><br><span class="line">                    [desc appendString:ModelDescriptionAddIndent(ModelDescription(obj).mutableCopy, <span class="number">1</span>)];</span><br><span class="line">                    [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [desc appendString:<span class="string">@"]"</span>];</span><br><span class="line">                <span class="keyword">return</span> desc;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> YYEncodingTypeNSDictionary: <span class="keyword">case</span> YYEncodingTypeNSMutableDictionary: &#123;</span><br><span class="line">            <span class="built_in">NSDictionary</span> *dic = (<span class="keyword">id</span>)model;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            <span class="keyword">if</span> (dic.count == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> [desc stringByAppendingString:<span class="string">@"&#123;&#125;"</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">NSArray</span> *keys = dic.allKeys;</span><br><span class="line">                </span><br><span class="line">                [desc appendFormat:<span class="string">@"&#123;\n"</span>];</span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = keys.count; i &lt; max; i++) &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *key = keys[i];</span><br><span class="line">                    <span class="built_in">NSObject</span> *value = dic[key];</span><br><span class="line">                    [desc appendString:<span class="string">@"    "</span>];</span><br><span class="line">                    [desc appendFormat:<span class="string">@"%@ = %@"</span>,key, ModelDescriptionAddIndent(ModelDescription(value).mutableCopy, <span class="number">1</span>)];</span><br><span class="line">                    [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                [desc appendString:<span class="string">@"&#125;"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">default</span>: &#123;</span><br><span class="line">            <span class="built_in">NSMutableString</span> *desc = [<span class="built_in">NSMutableString</span> new];</span><br><span class="line">            [desc appendFormat:<span class="string">@"&lt;%@: %p&gt;"</span>, model.class, model];</span><br><span class="line">            <span class="keyword">if</span> (modelMeta-&gt;_allPropertyMetas.count == <span class="number">0</span>) <span class="keyword">return</span> desc;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// sort property names</span></span><br><span class="line">            <span class="built_in">NSArray</span> *properties = [modelMeta-&gt;_allPropertyMetas</span><br><span class="line">                                   sortedArrayUsingComparator:^<span class="built_in">NSComparisonResult</span>(_YYModelPropertyMeta *p1, _YYModelPropertyMeta *p2) &#123;</span><br><span class="line">                                       <span class="keyword">return</span> [p1-&gt;_name compare:p2-&gt;_name];</span><br><span class="line">                                   &#125;];</span><br><span class="line">            </span><br><span class="line">            [desc appendFormat:<span class="string">@" &#123;\n"</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">NSUInteger</span> i = <span class="number">0</span>, max = properties.count; i &lt; max; i++) &#123;</span><br><span class="line">                _YYModelPropertyMeta *property = properties[i];</span><br><span class="line">                <span class="built_in">NSString</span> *propertyDesc;</span><br><span class="line">                <span class="keyword">if</span> (property-&gt;_isCNumber) &#123;</span><br><span class="line">                    <span class="built_in">NSNumber</span> *num = ModelCreateNumberFromProperty(model, property);</span><br><span class="line">                    propertyDesc = num.stringValue;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (property-&gt;_type &amp; YYEncodingTypeMask) &#123;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeObject: &#123;</span><br><span class="line">                            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = ModelDescription(v);</span><br><span class="line">                            <span class="keyword">if</span> (!propertyDesc) propertyDesc = <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeClass: &#123;</span><br><span class="line">                            <span class="keyword">id</span> v = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = ((<span class="built_in">NSObject</span> *)v).description;</span><br><span class="line">                            <span class="keyword">if</span> (!propertyDesc) propertyDesc = <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeSEL: &#123;</span><br><span class="line">                            SEL sel = ((SEL (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            <span class="keyword">if</span> (sel) propertyDesc = <span class="built_in">NSStringFromSelector</span>(sel);</span><br><span class="line">                            <span class="keyword">else</span> propertyDesc = <span class="string">@"&lt;NULL&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeBlock: &#123;</span><br><span class="line">                            <span class="keyword">id</span> block = ((<span class="keyword">id</span> (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = block ? ((<span class="built_in">NSObject</span> *)block).description : <span class="string">@"&lt;nil&gt;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeCArray: <span class="keyword">case</span> YYEncodingTypeCString: <span class="keyword">case</span> YYEncodingTypePointer: &#123;</span><br><span class="line">                            <span class="keyword">void</span> *pointer = ((<span class="keyword">void</span>* (*)(<span class="keyword">id</span>, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)model, property-&gt;_<span class="keyword">getter</span>);</span><br><span class="line">                            propertyDesc = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%p"</span>,pointer];</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> YYEncodingTypeStruct: <span class="keyword">case</span> YYEncodingTypeUnion: &#123;</span><br><span class="line">                            <span class="built_in">NSValue</span> *value = [model valueForKey:property-&gt;_name];</span><br><span class="line">                            propertyDesc = value ? value.description : <span class="string">@"&#123;unknown&#125;"</span>;</span><br><span class="line">                        &#125; <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>: propertyDesc = <span class="string">@"&lt;unknown&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                propertyDesc = ModelDescriptionAddIndent(propertyDesc.mutableCopy, <span class="number">1</span>);</span><br><span class="line">                [desc appendFormat:<span class="string">@"    %@ = %@"</span>,property-&gt;_name, propertyDesc];</span><br><span class="line">                [desc appendString:(i + <span class="number">1</span> == max) ? <span class="string">@"\n"</span> : <span class="string">@";\n"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            [desc appendFormat:<span class="string">@"&#125;"</span>];</span><br><span class="line">            <span class="keyword">return</span> desc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h2><p> 1.强制内联</p>
 <figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">#define force_inline __inline__ __attribute__((<span class="name">always_inline</span>))</span><br></pre></td></tr></table></figure>
<p>2.使用代码块, 节省许多变量名</p>
 <figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init]<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">    NSDateFormatter *formatter = [[NSDateFormatter alloc] init]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.使用block数组</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^YYNSDateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line"><span class="comment">// 定义一个block数组</span></span><br><span class="line"><span class="keyword">static</span> YYNSDateParseBlock blocks[<span class="number">35</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure>
<p>4.获取NSBlock类</p>
<figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> (^block)(<span class="keyword">void</span>) = ^&#123;&#125;;</span><br><span class="line">cls = ((NSObject *)block).<span class="keyword">class</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">class</span><span class="number">_</span>getSuperclass(cls) != [NSObject <span class="keyword">class</span>]) &#123;</span><br><span class="line">    cls = <span class="keyword">class</span><span class="number">_</span>getSuperclass(cls);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 5.函数参数使用<code>__unsafe_unretained</code><br> 在 ARC 条件下，默认声明的对象是 <code>__strong</code> 类型的，赋值时有可能会产生<code>retain/release</code>调用，如果一个变量在其生命周期内不会被释放，则使用<code>__unsafe_unretained `</code>会节省很大的开销。</p>
<p> 访问具有 <code>__weak</code>属性的变量时，实际上会调用 <code>objc_loadWeak()</code> 和 <code>objc_storeWeak()</code> 来完成，这也会带来很大的开销，所以要避免使用 <code>__weak</code>属性。</p>
<p> 创建和使用对象时，要尽量避免对象进入<code>autoreleasepool</code>，以避免额外的资源开销。</p>
<p> 6.for循环中定义变量, 使用unsigned</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>, <span class="built_in">max</span> = keyPaths.count; i &lt; <span class="built_in">max</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 7.可变量创建静态不变量, 静态常量配合dispatch_once使用</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">NSSet</span> *types = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line"><span class="built_in">NSMutableSet</span> *set = [<span class="built_in">NSMutableSet</span> new];</span><br><span class="line">    types = set;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p> 8.线程安全的缓存字典</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> cacheWithKey(<span class="built_in">NSString</span> *key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!key) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">CFMutableDictionaryRef</span> cache;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="keyword">static</span> dispatch_semaphore_t lock;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        cache = <span class="built_in">CFDictionaryCreateMutable</span>(<span class="built_in">CFAllocatorGetDefault</span>(), <span class="number">0</span>, &amp;kCFTypeDictionaryKeyCallBacks, &amp;kCFTypeDictionaryValueCallBacks);</span><br><span class="line">        lock = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</span><br><span class="line">    <span class="keyword">id</span> obj = <span class="built_in">CFDictionaryGetValue</span>(cache, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key));</span><br><span class="line">    dispatch_semaphore_signal(lock);</span><br><span class="line">    <span class="keyword">if</span> (!obj) &#123;</span><br><span class="line">        obj = [<span class="built_in">NSObject</span> new]; <span class="comment">// Other operation.</span></span><br><span class="line">        <span class="keyword">if</span> (obj) &#123;</span><br><span class="line">            dispatch_semaphore_wait(lock, DISPATCH_TIME_FOREVER);</span><br><span class="line">            <span class="built_in">CFDictionarySetValue</span>(cache, (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(key), (__bridge <span class="keyword">const</span> <span class="keyword">void</span> *)(obj));</span><br><span class="line">            dispatch_semaphore_signal(lock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9.消息发送调用格式</p>
<figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">int32_t</span> (<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))(<span class="name">void</span> *) objc_msgSend)((<span class="name"><span class="builtin-name">id</span></span>)model, meta-&gt;_getter)</span><br></pre></td></tr></table></figure>
<p>10.<code>NSNull</code>的单例<code>kCFNull</code>, 推荐使用, 而不是创建<code>[NSNull null]</code></p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSNull</span> *null1 = (<span class="keyword">id</span>)kCFNull;</span><br><span class="line"><span class="built_in">NSNull</span> *null2 = [<span class="built_in">NSNull</span> null];</span><br><span class="line"></span><br><span class="line">Class <span class="keyword">class</span> = Nil;</span><br><span class="line"><span class="built_in">NSDate</span> *date = <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">char</span> *p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>
<p>11.<code>YYClassIvarInfo</code>中的 <code>name</code> 和 <code>typeEncoding</code> 属性都用 <code>strong</code> 修饰。<br>NSString 这类属性在确定其不会在初始化之后被修改的情况下，使用 strong 做一次单纯的强引用在性能上讲比 copy 要高一些。</p>
<p>12.<code>NSString</code>转C字符串</p>
<p> <code>const char *cstring = ((NSString *)value).UTF8String;</code></p>
<h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><p> YYModel 最核心的便是通过遍历模型的所有属性，根据字典值来调用属性的 setter 方法。没有使用效率低下的 KVC（效率低下的原因可能是需要对方法进行搜索吧，有空深究）。鉴于此，用了300行代码简单写了一个字典转模型的玩具，权当做是读完 YYModel 的实践吧。试了一下，效果还可以😂。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">@protocol</span> <span class="title">YAModelProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span>;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> &lt;<span class="built_in">NSString</span> *, <span class="built_in">NSString</span> *&gt; *)customPropertyKey;</span><br><span class="line">+ (<span class="built_in">NSDictionary</span> &lt;<span class="built_in">NSString</span> *, Class&gt;*)classInArray;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> (<span class="title">YAModel</span>)</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dict;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithJSON:(<span class="built_in">NSData</span> *)data;</span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_modelArrayWithKeyValuesArray:(<span class="built_in">NSArray</span> &lt;<span class="built_in">NSDictionary</span> *&gt;*)dictArray;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编码类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_OPTIONS</span>(<span class="built_in">NSUInteger</span>, YAType) &#123;</span><br><span class="line">    YATypeMask              = <span class="number">0xFF</span>,</span><br><span class="line">    YATypeUnknown           = <span class="number">0</span>,</span><br><span class="line">    YATypeBOOL              = <span class="number">1</span>,</span><br><span class="line">    YATypeNSInteger         = <span class="number">2</span>,</span><br><span class="line">    YATypeNSUInteger        = <span class="number">3</span>,</span><br><span class="line">    YATypeCGFloat           = <span class="number">4</span>,</span><br><span class="line">    YATypeObject            = <span class="number">5</span>,</span><br><span class="line">    YATypeDate              = <span class="number">6</span>,</span><br><span class="line">    YATypeClass             = <span class="number">7</span>,</span><br><span class="line">    YATypeSEL               = <span class="number">8</span>,</span><br><span class="line">    YATypeArray             = <span class="number">9</span>,</span><br><span class="line">    YATypeMutableArray      = <span class="number">10</span>,</span><br><span class="line">    YATypeDictionary        = <span class="number">11</span>,</span><br><span class="line">    YATypeMutableDictionary = <span class="number">12</span>,</span><br><span class="line">    YATypeSet               = <span class="number">13</span>,</span><br><span class="line">    YATypeMutableSet        = <span class="number">14</span>,</span><br><span class="line">    YATypeString            = <span class="number">15</span>,</span><br><span class="line">    YATypeMutableString     = <span class="number">16</span>,</span><br><span class="line">    YATypeData              = <span class="number">17</span>,</span><br><span class="line">    YATypeNumber            = <span class="number">18</span>,</span><br><span class="line">    YATypeDecimalNumber     = <span class="number">19</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSObject</span> (<span class="title">YAModel</span>)</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDictionary</span> *classArrayDict = <span class="literal">nil</span>;</span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithDictionary:(<span class="built_in">NSDictionary</span> *)dict &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dict || ![dict isKindOfClass:<span class="built_in">NSDictionary</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSDictionary</span> *propertyList = PropertyList(<span class="keyword">self</span>);</span><br><span class="line">    <span class="keyword">id</span> obj = [<span class="keyword">self</span> new];</span><br><span class="line">    ObjSetWithKeyValueList(obj, propertyList, dict);</span><br><span class="line">    classArrayDict = <span class="literal">nil</span>; <span class="comment">// Clean memory.</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">instancetype</span>)ya_modelWithJSON:(<span class="built_in">NSData</span> *)data &#123;</span><br><span class="line">    <span class="keyword">if</span> (!data || ![data isKindOfClass:<span class="built_in">NSData</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">id</span> json = [<span class="built_in">NSJSONSerialization</span> JSONObjectWithData:data options:kNilOptions error:<span class="literal">nil</span>];</span><br><span class="line">    <span class="keyword">if</span> ([json isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">        <span class="keyword">return</span> [<span class="keyword">self</span> ya_modelWithDictionary:json];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_modelArrayWithKeyValuesArray:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSDictionary</span> *&gt; *)dictArray &#123;</span><br><span class="line">    <span class="keyword">if</span> (!dictArray || ![dictArray isKindOfClass:<span class="built_in">NSArray</span>.class]) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *tmp = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:dictArray.count];</span><br><span class="line">    [dictArray enumerateObjectsUsingBlock:^(<span class="built_in">NSDictionary</span> * _Nonnull obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([obj isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">            <span class="keyword">id</span> model = [[<span class="keyword">self</span> <span class="keyword">class</span>] ya_modelWithDictionary:obj];</span><br><span class="line">            [tmp addObject:model];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:tmp] ?: <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取属性列表 key:属性名 value: 属性类型</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDictionary</span> *PropertyList(Class cls) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count;</span><br><span class="line">    objc_property_t *properties = class_copyPropertyList(cls, &amp;count);</span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *tempDict = [<span class="built_in">NSMutableDictionary</span> new];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        objc_property_t property = properties[i];</span><br><span class="line">        <span class="built_in">NSString</span> *propertyName = [<span class="built_in">NSString</span> stringWithUTF8String:property_getName(property)];</span><br><span class="line">        <span class="built_in">NSString</span> *propertyAttr = [<span class="built_in">NSString</span> stringWithUTF8String:property_getAttributes(property)];</span><br><span class="line">        <span class="built_in">NSString</span> *type = [propertyAttr substringWithRange:<span class="built_in">NSMakeRange</span>(<span class="number">1</span>, <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">if</span> ([type isEqualToString:<span class="string">@"@"</span>]) &#123;</span><br><span class="line">            <span class="built_in">NSArray</span> *components = [propertyAttr componentsSeparatedByString:<span class="string">@"\""</span>];</span><br><span class="line">            <span class="keyword">if</span> (components.count &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                Class propCls = <span class="built_in">NSClassFromString</span>(components[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">if</span> (propCls == <span class="built_in">NSDate</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"1"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSArray</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"2"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableArray</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"3"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSDictionary</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"4"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableDictionary</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"5"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSSet</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"6"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableSet</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"7"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSString</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"8"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSMutableString</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"9"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSData</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"10"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSNumber</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"11"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSDecimalNumber</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"12"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propCls == <span class="built_in">NSObject</span>.class) &#123;</span><br><span class="line">                    type = <span class="string">@"@"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    type = components[<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">NSNumber</span> *myType = TypeForProperty(type);</span><br><span class="line">        [tempDict setObject:myType forKey:propertyName];</span><br><span class="line">        <span class="keyword">if</span> (myType.integerValue == <span class="number">0</span>) &#123;</span><br><span class="line">            [tempDict setObject:type forKey:propertyName];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(properties);</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:tempDict];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSNumber</span> *TypeForProperty(<span class="built_in">NSString</span> *type) &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSDictionary</span> *_SELDictionary = <span class="literal">nil</span>;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _SELDictionary = @&#123;</span><br><span class="line">                           <span class="string">@"B"</span>: @(YATypeBOOL),</span><br><span class="line">                           <span class="string">@"q"</span>: @(YATypeNSInteger),</span><br><span class="line">                           <span class="string">@"Q"</span>: @(YATypeNSUInteger),</span><br><span class="line">                           <span class="string">@"d"</span>: @(YATypeCGFloat),</span><br><span class="line">                           <span class="string">@"#"</span>: @(YATypeClass),</span><br><span class="line">                           <span class="string">@":"</span>: @(YATypeSEL),</span><br><span class="line">                           <span class="string">@"@"</span>: @(YATypeObject),</span><br><span class="line">                           <span class="string">@"1"</span>: @(YATypeDate),</span><br><span class="line">                           <span class="string">@"2"</span>: @(YATypeArray),</span><br><span class="line">                           <span class="string">@"3"</span>: @(YATypeMutableArray),</span><br><span class="line">                           <span class="string">@"4"</span>: @(YATypeDictionary),</span><br><span class="line">                           <span class="string">@"5"</span>: @(YATypeMutableDictionary),</span><br><span class="line">                           <span class="string">@"6"</span>: @(YATypeSet),</span><br><span class="line">                           <span class="string">@"7"</span>: @(YATypeMutableSet),</span><br><span class="line">                           <span class="string">@"8"</span>: @(YATypeString),</span><br><span class="line">                           <span class="string">@"9"</span>: @(YATypeMutableString),</span><br><span class="line">                           <span class="string">@"10"</span>: @(YATypeData),</span><br><span class="line">                           <span class="string">@"11"</span>: @(YATypeNumber),</span><br><span class="line">                           <span class="string">@"12"</span>: @(YATypeDecimalNumber),</span><br><span class="line">                           &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _SELDictionary[type] ?: @(YATypeUnknown);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ObjSetWithArray(Class cls, <span class="built_in">NSDictionary</span> *propertyDict, <span class="built_in">NSArray</span> **keyValueArray) &#123;</span><br><span class="line">    <span class="built_in">NSMutableArray</span> *tmpArray = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    [*keyValueArray enumerateObjectsUsingBlock:^(<span class="keyword">id</span> keyValue, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        <span class="keyword">if</span> ([keyValue isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">            <span class="keyword">id</span> obj = [cls new];</span><br><span class="line">            ObjSetWithKeyValueList(obj, PropertyList([obj <span class="keyword">class</span>]), keyValue);</span><br><span class="line">            [tmpArray addObject:obj];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">    *keyValueArray = [<span class="built_in">NSArray</span> arrayWithArray:tmpArray];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> ObjSetWithKeyValueList(<span class="keyword">id</span> obj, <span class="built_in">NSDictionary</span> *propertyDict, <span class="built_in">NSDictionary</span> *dict) &#123;</span><br><span class="line">    Class cls = [obj <span class="keyword">class</span>];</span><br><span class="line">    <span class="built_in">NSDictionary</span> *customPropertyKeyDict = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">if</span> ([cls respondsToSelector:<span class="keyword">@selector</span>(customPropertyKey)]) &#123;</span><br><span class="line">        customPropertyKeyDict = [cls customPropertyKey];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> ([cls respondsToSelector:<span class="keyword">@selector</span>(classInArray)] &amp;&amp; !classArrayDict) &#123;</span><br><span class="line">        classArrayDict = [cls classInArray];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [propertyDict.allKeys enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *name, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> * _Nonnull stop) &#123;</span><br><span class="line">        SEL <span class="keyword">setter</span> = SetterSelectorFromString(name);</span><br><span class="line">        <span class="keyword">id</span> value = <span class="literal">nil</span>;</span><br><span class="line">        <span class="keyword">if</span> (customPropertyKeyDict[name]) &#123;</span><br><span class="line">            value = customPropertyKeyDict[name];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            value = dict[name];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">id</span> propType = propertyDict[name];</span><br><span class="line">        YAType type = [propType integerValue];</span><br><span class="line">        <span class="keyword">if</span> (value) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (type &amp; YATypeMask) &#123;</span><br><span class="line">                <span class="keyword">case</span> YATypeBOOL: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">bool</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, [value boolValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeNSInteger: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, int64_t))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (int64_t)[value longLongValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeNSUInteger: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, uint64_t))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (uint64_t)[value unsignedLongLongValue]);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeCGFloat: &#123;</span><br><span class="line">                    <span class="keyword">long</span> <span class="keyword">double</span> d = [value doubleValue];</span><br><span class="line">                    <span class="keyword">if</span> (isnan(d) || isinf(d)) d = <span class="number">0</span>;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">long</span> <span class="keyword">double</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, (<span class="keyword">long</span> <span class="keyword">double</span>)d);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeDecimalNumber: &#123;</span><br><span class="line">                    <span class="keyword">if</span> ([value isKindOfClass:<span class="built_in">NSNumber</span>.class]) &#123;</span><br><span class="line">                        <span class="built_in">NSDecimalNumber</span> *decNum = [<span class="built_in">NSDecimalNumber</span> decimalNumberWithDecimal:[value decimalValue]];</span><br><span class="line">                        ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="built_in">NSDecimalNumber</span> *))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, decNum);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeClass: &#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, Class))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, <span class="built_in">NSClassFromString</span>(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeSEL:&#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, SEL))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, <span class="built_in">NSSelectorFromString</span>(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeDate:&#123;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, DateFromString(value));</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeArray: &#123;</span><br><span class="line">                    Class cls = classArrayDict[name];</span><br><span class="line">                    <span class="keyword">if</span> (cls) &#123;</span><br><span class="line">                        ObjSetWithArray(cls, PropertyList(cls), &amp;value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableArray: &#123;</span><br><span class="line">                    <span class="built_in">NSString</span> *clsStr = classArrayDict[name];</span><br><span class="line">                    <span class="keyword">if</span> (clsStr) &#123;</span><br><span class="line">                        Class cls = <span class="built_in">NSClassFromString</span>(clsStr);</span><br><span class="line">                        ObjSetWithArray(cls, PropertyList(cls), &amp;value);</span><br><span class="line">                    &#125;</span><br><span class="line">                    value = [<span class="built_in">NSMutableArray</span> arrayWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeSet: &#123;</span><br><span class="line">                    value = [<span class="built_in">NSSet</span> setWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableSet: &#123;</span><br><span class="line">                    value = [<span class="built_in">NSMutableSet</span> setWithArray:value];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableString:</span><br><span class="line">                <span class="keyword">case</span> YATypeMutableDictionary: &#123;</span><br><span class="line">                    value = [value mutableCopy];</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> YATypeString:</span><br><span class="line">                <span class="keyword">case</span> YATypeDictionary:</span><br><span class="line">                <span class="keyword">case</span> YATypeNumber:</span><br><span class="line">                <span class="keyword">case</span> YATypeUnknown:</span><br><span class="line">                <span class="keyword">case</span> YATypeObject: &#123;</span><br><span class="line">                    <span class="keyword">if</span> (type == YATypeUnknown &amp;&amp; [propType isKindOfClass:<span class="built_in">NSString</span>.class]) &#123; <span class="comment">// 嵌套模型</span></span><br><span class="line">                        Class cls = <span class="built_in">NSClassFromString</span>(propType);</span><br><span class="line">                        <span class="keyword">if</span> (cls &amp;&amp; [value isKindOfClass:<span class="built_in">NSDictionary</span>.class]) &#123;</span><br><span class="line">                            <span class="keyword">id</span> obj = [cls new];</span><br><span class="line">                            ObjSetWithKeyValueList(obj, PropertyList(cls), value);</span><br><span class="line">                            value = obj;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL, <span class="keyword">id</span>))(<span class="keyword">void</span> *) objc_msgSend)((<span class="keyword">id</span>)obj, <span class="keyword">setter</span>, value);</span><br><span class="line">                &#125; <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// name  ==&gt; setName:</span></span><br><span class="line"><span class="keyword">static</span> SEL SetterSelectorFromString(<span class="built_in">NSString</span> *str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || str.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="built_in">NSString</span> *result = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"set%@%@:"</span>, [str substringToIndex:<span class="number">1</span>].uppercaseString, [str substringFromIndex:<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSSelectorFromString</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// date string ==&gt; data // @"2016-7-16 09:33:22"</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSDate</span> *DateFromString(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">NSDate</span>* (^DateParseBlock)(<span class="built_in">NSString</span> *string);</span><br><span class="line">    <span class="keyword">static</span> DateParseBlock blocks[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        <span class="comment">// @"2016-07-16 09:33:22" // 19个字符, 对应blocks[19]</span></span><br><span class="line">        <span class="built_in">NSDateFormatter</span> *formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">        formatter.locale = [[<span class="built_in">NSLocale</span> alloc] initWithLocaleIdentifier:<span class="string">@"en_US_POSIX"</span>];</span><br><span class="line">        formatter.timeZone = [<span class="built_in">NSTimeZone</span> timeZoneForSecondsFromGMT:<span class="number">0</span>];</span><br><span class="line">        formatter.dateFormat = <span class="string">@"yyyy-MM-dd HH:mm:ss"</span>;</span><br><span class="line">        blocks[<span class="number">19</span>] = ^(<span class="built_in">NSString</span> *string) &#123;</span><br><span class="line">            <span class="keyword">return</span> [formatter dateFromString:string];</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (!string || string.length &gt; <span class="number">19</span>) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    DateParseBlock parser = blocks[string.length];</span><br><span class="line">    <span class="keyword">if</span> (!parser) <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">return</span> parser(string);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>具体源码放在了我的代码工具库里，YAKit：<a href="https://github.com/ChenYalun/YAKit/tree/master/Util/Model" target="_blank" rel="noopener">https://github.com/ChenYalun/YAKit/tree/master/Util/Model
</a></p>
<blockquote>
<p>参考资料<br> <a href="https://juejin.im/post/5a097435f265da431769a49c" target="_blank" rel="noopener">https://juejin.im/post/5a097435f265da431769a49c</a><br> <a href="https://juejin.im/post/5a1296e36fb9a044fb075d5e" target="_blank" rel="noopener">https://juejin.im/post/5a1296e36fb9a044fb075d5e</a><br> <a href="https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/" target="_blank" rel="noopener">https://blog.ibireme.com/2015/10/23/ios_model_framework_benchmark/</a><br> <a href="https://blog.csdn.net/game3108/article/details/52416868" target="_blank" rel="noopener">https://blog.csdn.net/game3108/article/details/52416868</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[详解performSelector]]></title>
      <url>http://blog.chenyalun.com/2018/09/30/%E8%AF%A6%E8%A7%A3performSelector/</url>
      <content type="html"><![CDATA[<p align="center"> performSelector相关知识。 </p>

<a id="more"></a>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector;</span><br><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>object;</span><br><span class="line">- <span class="params">(id)</span>performSelector:<span class="params">(SEL)</span>aSelector withObject:<span class="params">(id)</span>object1 withObject:<span class="params">(id)</span>object2;</span><br></pre></td></tr></table></figure>
<p>代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 无参</span></span><br><span class="line">- (<span class="keyword">id</span>)printString &#123;</span><br><span class="line">    <span class="built_in">NSString</span> *str = <span class="built_in">NSStringFromSelector</span>(_cmd);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个参数</span></span><br><span class="line">- (<span class="keyword">id</span>)printString:(<span class="built_in">NSString</span> *)str &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 两个参数</span></span><br><span class="line">- (<span class="keyword">id</span>)printString:(<span class="built_in">NSString</span> *)str1 str2:(<span class="keyword">id</span>)obj &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@, %@"</span>, str1, obj[<span class="string">@"key"</span>]);</span><br><span class="line">    <span class="keyword">return</span> str1;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">id</span> obj1 = [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(printString)];</span><br><span class="line"><span class="keyword">id</span> obj2 = [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(printString:) withObject:<span class="string">@"string"</span>];</span><br><span class="line"><span class="keyword">id</span> obj3 = [<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(printString:str2:) withObject:<span class="string">@"string"</span> withObject:@&#123;<span class="string">@"key"</span>: @(<span class="number">3</span>)&#125;];</span><br></pre></td></tr></table></figure>
<p>实现方式: </p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">id</span>) performSelector: (SEL)aSelector</span><br><span class="line">	    withObject: (<span class="keyword">id</span>) object1</span><br><span class="line">	    withObject: (<span class="keyword">id</span>) object2</span><br><span class="line">&#123;</span><br><span class="line">  IMP msg;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (aSelector == <span class="number">0</span>)</span><br><span class="line">    [<span class="built_in">NSException</span> raise: <span class="built_in">NSInvalidArgumentException</span></span><br><span class="line">		format: <span class="string">@"%@ null selector given"</span>, <span class="built_in">NSStringFromSelector</span>(_cmd)];</span><br><span class="line">  msg = objc_msg_lookup(<span class="keyword">self</span>, aSelector);</span><br><span class="line">  <span class="keyword">if</span> (!msg)</span><br><span class="line">    &#123;</span><br><span class="line">      [<span class="built_in">NSException</span> raise: <span class="built_in">NSGenericException</span></span><br><span class="line">		   format: <span class="string">@"invalid selector '%s' passed to %s"</span>,</span><br><span class="line">                   sel_getName(aSelector), sel_getName(_cmd)];</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (*msg)(<span class="keyword">self</span>, aSelector, object1, object2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Runtime中的API<code>objc_msg_lookup()</code>，根据方法名获取到函数指针IMP，进而进行间接调用。在这其中还包括了方法名和函数指针的容错处理。<br>主要就是这样:</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 获取函数指针</span></span><br><span class="line"><span class="type">IMP</span> imp = [<span class="keyword">self</span> methodForSelector:@selector(printString:)];</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line">void (*<span class="function"><span class="keyword">func</span>)<span class="params">(id, SEL, id)</span></span> = (void *)imp;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="function"><span class="keyword">func</span><span class="params">(<span class="keyword">self</span>, @selector<span class="params">(printString:)</span></span></span>, @<span class="string">"string"</span>);</span><br></pre></td></tr></table></figure>
<h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><ol>
<li>调用<code>alloc, copy, init, mutableCopy, new</code>等方法出现内存泄露。</li>
<li>调用以<code>alloc, new, copy, mutableCopy</code>开头的方法出现内存泄露。You create an object using a method whose name begins with “alloc”, “new”, “copy”, or “mutableCopy” (for example, alloc, newObject, or mutableCopy).</li>
</ol>
<ul>
<li>有内存泄露</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableString</span> *str = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"mutableString"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示调用出现Error: PerformSelector names a selector which retains the object</span></span><br><span class="line">[str performSelector:<span class="keyword">@selector</span>(<span class="keyword">copy</span>)];</span><br><span class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(newObject)];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 隐式调用无法分析出错误: 出现内存泄露</span></span><br><span class="line"><span class="keyword">id</span> obj4 = [str performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"copy"</span>)];</span><br><span class="line">[str performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"mutableCopy"</span>)];</span><br><span class="line"><span class="keyword">id</span> newObject = [[<span class="built_in">NSObject</span> <span class="keyword">class</span>] performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"new"</span>)];</span><br></pre></td></tr></table></figure>
<ul>
<li>没有内存泄露</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有内存泄露</span></span><br><span class="line">- (<span class="keyword">id</span>)createNewObject &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">@"string"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">id</span> newObject = [<span class="keyword">self</span> performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"createNewObject"</span>)];</span><br></pre></td></tr></table></figure>
<ul>
<li>有内存泄露</li>
</ul>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 有内存泄露</span></span><br><span class="line">- (id)<span class="keyword">new</span><span class="type">Object</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [NSObject <span class="keyword">new</span><span class="type"></span>];</span><br><span class="line">&#125;</span><br><span class="line">id <span class="keyword">new</span><span class="type">Object</span> = [self performSelector:<span class="type">NSSelectorFromString</span>(@<span class="string">"newObject"</span>)];</span><br></pre></td></tr></table></figure>
<p>There are really only 4 things that ARC would consider for the return value:4</p>
<ul>
<li>Ignore non-object types (void, int, etc)</li>
<li>Retain object value, then release when it is no longer used (standard assumption)</li>
<li>Release new object values when no longer used (methods in the init/ copy family or attributed with ns_returns_retained)</li>
<li>Do nothing &amp; assume returned object value will be valid in local scope (until inner most release pool is drained, attributed with ns_returns_autoreleased)</li>
</ul>
<p>The call to methodForSelector: assumes that the return value of the method it’s calling is an object, but does not retain/release it. So you could end up creating a leak if your object is supposed to be released as in #3 above (that is, the method you’re calling returns a new object).</p>
<p><img src="https://image.chenyalun.com/2018/09/30/002.png" alt></p>
<p>内存泄露的原因:</p>
<ol>
<li>调用<code>performSelector:</code>编译器会假设调用方法的返回值是一个对象，且不会对返回值进行retain/release。</li>
<li>如果调用的方法是<code>alloc, new, copy, mutableCopy</code>家族中的方法(包含以它们开头)，方法调用的结果是开辟了一块内存空间，但是系统仍然按照非retain/release处理，内存空间无法释放，故而产生内存泄露。</li>
</ol>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>下面的是为了消除警告而列出的方法。</p>
<h4 id="方式一-methodForSelector-没有解决内存泄露"><a href="#方式一-methodForSelector-没有解决内存泄露" class="headerlink" title="方式一: methodForSelector(没有解决内存泄露)"></a>方式一: methodForSelector(没有解决内存泄露)</h4><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!person) return;</span><br><span class="line"><span class="comment">// 获取函数指针</span></span><br><span class="line">IMP imp = [person methodForSelector:<span class="keyword">selector</span>];</span><br><span class="line"><span class="comment">// 类型转换</span></span><br><span class="line">void <span class="comment">(*func)(id, SEL) = (void *)</span>imp;</span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">func(person, <span class="keyword">selector</span>);</span><br></pre></td></tr></table></figure>
<h4 id="方式二-methodForSelector简化版-没有解决内存泄露"><a href="#方式二-methodForSelector简化版-没有解决内存泄露" class="headerlink" title="方式二: methodForSelector简化版(没有解决内存泄露)"></a>方式二: methodForSelector简化版(没有解决内存泄露)</h4><figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">void</span> (<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))[person methodForSelector:selector])(<span class="name">self</span>, selector)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="方式三-消除警告-没有解决内存泄露"><a href="#方式三-消除警告-没有解决内存泄露" class="headerlink" title="方式三: 消除警告(没有解决内存泄露)"></a>方式三: 消除警告(没有解决内存泄露)</h4><figure class="highlight leaf"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic push"</span>)</span></span></span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic ignored \"</span>-<span class="variable">Warc</span>-<span class="variable">performSelector</span>-<span class="variable">leaks</span>\<span class="string">""</span>)</span></span></span><br><span class="line">[person performSelector:selector]; // 插入需要消除警告的代码</span><br><span class="line"><span class="function"><span class="keyword">#</span><span class="title">pragma</span><span class="params">(<span class="string">"clang diagnostic pop"</span>)</span></span></span><br><span class="line">     </span><br><span class="line">// 使用<span class="function"><span class="keyword">#</span><span class="title">pragm</span><span class="params">(与以上无异)</span></span></span><br><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored "-Warc-performSelector-leaks"</span><br><span class="line">YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">[person performSelector:selector];</span><br><span class="line">#pragma clang diagnostic pop</span><br></pre></td></tr></table></figure>
<h4 id="方式四-使用objc-msgSend-没有解决内存泄露"><a href="#方式四-使用objc-msgSend-没有解决内存泄露" class="headerlink" title="方式四: 使用objc_msgSend(没有解决内存泄露)"></a>方式四: 使用objc_msgSend(没有解决内存泄露)</h4><figure class="highlight hy"><table><tr><td class="code"><pre><span class="line">((<span class="name">void</span> *(<span class="name"><span class="builtin-name">*</span></span>)(<span class="name"><span class="builtin-name">id</span></span>, SEL))objc_msgSend)((<span class="name"><span class="builtin-name">id</span></span>)self, NSSelectorFromString(@<span class="string">"newObject"</span>))<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="方式五-objc-msgSend手动释放内存-解决内存泄露"><a href="#方式五-objc-msgSend手动释放内存-解决内存泄露" class="headerlink" title="方式五: objc_msgSend手动释放内存(解决内存泄露)"></a>方式五: objc_msgSend手动释放内存(解决内存泄露)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 就是方式二, 只不过添加了Release Bridge</span></span><br><span class="line"><span class="keyword">id</span> obj = <span class="built_in">CFBridgingRelease</span>(((<span class="keyword">void</span> *(*)(<span class="keyword">id</span>, SEL))objc_msgSend)(<span class="keyword">self</span>, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)));</span><br></pre></td></tr></table></figure>
<h4 id="方式六-methodForSelector手动释放内存-解决内存泄露"><a href="#方式六-methodForSelector手动释放内存-解决内存泄露" class="headerlink" title="方式六: methodForSelector手动释放内存(解决内存泄露)"></a>方式六: methodForSelector手动释放内存(解决内存泄露)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> obj = <span class="built_in">CFBridgingRelease</span>(((<span class="keyword">void</span> *(*)(<span class="keyword">id</span>, SEL))[<span class="keyword">self</span> methodForSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)])(<span class="keyword">self</span>, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>)));</span><br></pre></td></tr></table></figure>
<h4 id="方式七-NSInvocation-没有解决内存泄露"><a href="#方式七-NSInvocation-没有解决内存泄露" class="headerlink" title="方式七: NSInvocation(没有解决内存泄露)"></a>方式七: NSInvocation(没有解决内存泄露)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>);</span><br><span class="line"><span class="built_in">NSMethodSignature</span> *methodSig = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodSignatureForSelector:selector];</span><br><span class="line"><span class="built_in">NSInvocation</span> *invocation = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:methodSig];</span><br><span class="line">[invocation setSelector:selector];</span><br><span class="line">[invocation setTarget:<span class="keyword">self</span>];</span><br><span class="line">[invocation invoke];</span><br></pre></td></tr></table></figure>
<h4 id="方式八-sendAction-没有解决内存泄露"><a href="#方式八-sendAction-没有解决内存泄露" class="headerlink" title="方式八: sendAction(没有解决内存泄露)"></a>方式八: sendAction(没有解决内存泄露)</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">[<span class="built_in">UIApplication</span>.sharedApplication sendAction:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"newObject"</span>) to:<span class="keyword">self</span> from:<span class="literal">nil</span> forEvent:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure>
<p>除此之外，还有许多许多，并没有全部列出来。尤其是一些看似<code>一顿操作猛如虎</code>却没有解决实质问题的方法。<br>总结以上方法，既能消除警告，又能避免内存泄露，还不会丢掉动态调用的便利，三全其美的便是方法五和方法六，尤其是方法五。当然，两者本质上是一样的，只不过一个看着顺眼些。核心还是<code>CFBridgingRelease</code>: 把遗漏的对象释放掉。<br>(注: 笔者目前没有在网上看到有人使用类似的方法，但是，亲自实验过后发现其确实可以解决内存泄露问题。若有不妥，请指正:<a href="mailto:iChenYalun@gmail.com" target="_blank" rel="noopener">iChenYalun@gmail.com</a>)</p>
<h2 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument afterDelay:(<span class="built_in">NSTimeInterval</span>)delay inModes:(<span class="built_in">NSArray</span>&lt;<span class="built_in">NSRunLoopMode</span>&gt; *)modes;</span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument afterDelay:(<span class="built_in">NSTimeInterval</span>)delay;</span><br><span class="line">+ (<span class="keyword">void</span>)cancelPreviousPerformRequestsWithTarget:(<span class="keyword">id</span>)aTarget selector:(SEL)aSelector object:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anArgument;</span><br><span class="line">+ (<span class="keyword">void</span>)cancelPreviousPerformRequestsWithTarget:(<span class="keyword">id</span>)aTarget;</span><br></pre></td></tr></table></figure>
<h3 id="performSelector-withObject-afterDelay"><a href="#performSelector-withObject-afterDelay" class="headerlink" title="performSelector:withObject:afterDelay:"></a>performSelector:withObject:afterDelay:</h3><p>源码实现:</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">- (void)performSelector: (<span class="keyword">SEL)aSelector</span></span><br><span class="line"><span class="keyword">	</span>      withObject: (id)argument</span><br><span class="line"><span class="symbol">	      afterDelay:</span> (NSTimeInterval)seconds &#123;</span><br><span class="line">  NSRunLoop		*loop = [NSRunLoop currentRunLoop]<span class="comment">;</span></span><br><span class="line">  GSTimedPerformer	*<span class="keyword">item;</span></span><br><span class="line"><span class="keyword"> </span> // <span class="keyword">item引用计数+1</span></span><br><span class="line"><span class="keyword"> </span> <span class="keyword">item </span>= [[GSTimedPerformer alloc] initWithSelector: aSelector</span><br><span class="line"><span class="symbol">					     target:</span> <span class="keyword">self</span></span><br><span class="line"><span class="keyword">	</span>				   argument: argument</span><br><span class="line"><span class="symbol">					      delay:</span> seconds]<span class="comment">;</span></span><br><span class="line">	// 持有<span class="keyword">item</span></span><br><span class="line"><span class="keyword"> </span> [[loop _timedPerformers] <span class="keyword">addObject: </span><span class="keyword">item];</span></span><br><span class="line"><span class="keyword"> </span> // <span class="keyword">item引用计数-1</span></span><br><span class="line"><span class="keyword"> </span> RELEASE(<span class="keyword">item);</span></span><br><span class="line"><span class="keyword"> </span> // 持有timer</span><br><span class="line">  [loop <span class="keyword">addTimer: </span><span class="keyword">item-&gt;timer </span>forMode: NSDefaultRunLoopMode]<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法主要做了这些事:</p>
<ol>
<li>获取当前线程的Runloop对象。</li>
<li>根据方法名、方法参数、方法调用者及延迟时间等信息创建一个GSTimedPerformer对象，把该对象添加到Runloop的_timedPerformers数组中保存。</li>
<li>把GSTimedPerformer中的定时器timer添加到Runloop中。</li>
</ol>
<p>如官方文档所说:This method sets up a timer to perform the aSelector message on the current thread’s run loop. The timer is configured to run in the default mode (NSDefaultRunLoopMode). When the timer fires, the thread attempts to dequeue the message from the run loop and perform the selector. It succeeds if the run loop is running and in the default mode; otherwise, the timer waits until the run loop is in the default mode.</p>
<p>看看GSTimedPerformer做了什么:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">GSTimedPerformer</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"><span class="keyword">@public</span></span><br><span class="line">  SEL		selector;</span><br><span class="line">  <span class="keyword">id</span>		target;</span><br><span class="line">  <span class="keyword">id</span>		argument;</span><br><span class="line">  <span class="built_in">NSTimer</span>	*timer;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)fire;</span><br><span class="line">- (<span class="keyword">id</span>)initWithSelector: (SEL)aSelector</span><br><span class="line">		 target: (<span class="keyword">id</span>)target</span><br><span class="line">	       argument: (<span class="keyword">id</span>)argument</span><br><span class="line">		  delay: (<span class="built_in">NSTimeInterval</span>)delay;</span><br><span class="line">- (<span class="keyword">void</span>)invalidate;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">GSTimedPerformer</span></span></span><br><span class="line">- (<span class="keyword">void</span>) dealloc &#123;</span><br><span class="line">  [<span class="keyword">self</span> finalize];</span><br><span class="line">  TEST_RELEASE(timer);</span><br><span class="line">  <span class="comment">// 释放target对象</span></span><br><span class="line">  RELEASE(target);</span><br><span class="line">  RELEASE(argument);</span><br><span class="line">  [<span class="keyword">super</span> dealloc];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) finalize &#123;</span><br><span class="line">  [<span class="keyword">self</span> invalidate];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>) fire &#123;</span><br><span class="line">   DESTROY(timer);</span><br><span class="line">   [target performSelector: selector withObject: argument];</span><br><span class="line">   [[[<span class="built_in">NSRunLoop</span> currentRunLoop] _timedPerformers]</span><br><span class="line">    removeObjectIdenticalTo: <span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)initWithSelector:(SEL)aSelector</span><br><span class="line">                target:(<span class="keyword">id</span>)aTarget</span><br><span class="line">              argument:(<span class="keyword">id</span>)anArgument</span><br><span class="line">                 delay:(<span class="built_in">NSTimeInterval</span>)delay &#123;</span><br><span class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">        selector = aSelector;</span><br><span class="line">        <span class="comment">// 持有target</span></span><br><span class="line">        target = RETAIN(aTarget);</span><br><span class="line">        argument = RETAIN(anArgument);</span><br><span class="line">        timer = [[<span class="built_in">NSTimer</span> allocWithZone: <span class="built_in">NSDefaultMallocZone</span>()]</span><br><span class="line">                 initWithFireDate: <span class="literal">nil</span></span><br><span class="line">                 interval: delay</span><br><span class="line">                 target: <span class="keyword">self</span></span><br><span class="line">                 selector: <span class="keyword">@selector</span>(fire)</span><br><span class="line">                 userInfo: <span class="literal">nil</span></span><br><span class="line">                 repeats: <span class="literal">NO</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)invalidate &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer != <span class="literal">nil</span>) &#123;</span><br><span class="line">        [timer invalidate];</span><br><span class="line">        DESTROY(timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>The GSTimedPerformer class is used to hold information about messages which are due to be sent to objects at a particular time.</p>
<p>由此可见，<code>GSTimedPerformer</code>作用就是保存关于消息的信息，具体方法的延迟和调用主要还是依靠其内部的定时器。<br>综上，Runloop的<code>_timedPerformers</code>数组持有了<code>GSTimedPerformer</code>，Runloop还持有<code>GSTimedPerformer</code>内部的定时器<code>timer</code>。<code>GSTimedPerformer</code>持有了<code>target(self)</code>。<code>GSTimedPerformer</code>销毁的时候释放掉<code>target(self)</code>。<code>GSTimedPerformer</code>什么时候销毁? Runloop运行在<code>NSDefaultRunLoopMode</code>模式下并顺利调用该方法。也即，<code>GSTimedPerformer</code>在定时器时间截止时调用<code>fire</code>方法，之后<code>GSTimedPerformer</code>不再持有timer，接着Runloop不再持有<code>GSTimedPerformer</code>，于是<code>GSTimedPerformer</code>销毁，它对target的强引用也不复存在。</p>
<p>如图:</p>
<p><img src="https://image.chenyalun.com/2018/09/30/001.png" alt></p>
<p>这也是网上许多文章所称的”Runloop强持有target对象(self)”。</p>
<p>当延迟方法因种种原因没有执行就可能出现内存泄露，网上有一篇文章是这样描述的:</p>
<blockquote>
<p>performSelector关于内存管理的执行原理是这样的执行 [self performSelector:@selector(method1:) withObject:self afterDelay:3]; 的时候，系统会将self的引用计数加1，执行完这个方法时，还会将self的引用计数减1，当方法还没有执行的时候，要返回父视图释放当前视图的时候，self的计数没有减少到0，而导致无法调用dealloc方法，出现了内存泄露。 </p>
</blockquote>
<p>最简单的例子: 从A控制器push到B控制器，B控制器此时执行一个方法:<code>[self performSelector:@selector(printInfo) withObject:nil afterDelay:100];</code>。此时从B控制器pop到A控制器，很明显B控制器并没有销毁，因为Runloop还强引用着它，可以理解为出现了内存泄露(尽管100s后<code>printInfo</code>方法得到执行，B控制器会销毁)。</p>
<p>比较好的做法是取消掉之前的延迟调用:<code>cancelPreviousPerformRequestsWithTarget: selector:object:</code>，那么<code>cancelPreviousPerformRequestsWithTarget: selector:object:</code>做了什么呢?</p>
<h3 id="cancelPreviousPerformRequestsWithTarget-selector-object"><a href="#cancelPreviousPerformRequestsWithTarget-selector-object" class="headerlink" title="cancelPreviousPerformRequestsWithTarget: selector:object:"></a>cancelPreviousPerformRequestsWithTarget: selector:object:</h3><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">NSObject</span> cancelPreviousPerformRequestsWithTarget:self]<span class="comment">;</span></span><br><span class="line">[<span class="name">NSObject</span> cancelPreviousPerformRequestsWithTarget:self selector:NSSelectorFromString(<span class="name">@</span><span class="string">"printString:"</span>) object:@<span class="string">"str"</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>这两个方法可以取消perform延迟调用，它们内部做了什么？</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">+ (void)cancelPreviousPerformRequestsWithTarget:(id)target</span><br><span class="line"><span class="symbol">                                        selector:</span>(SEL)aSelector</span><br><span class="line"><span class="symbol">                                          object:</span>(id)arg &#123;</span><br><span class="line">  </span><br><span class="line">    NSMutableArray *perf = [[NSRunLoop currentRunLoop] _timedPerformers]<span class="comment">;</span></span><br><span class="line">    unsigned	<span class="built_in">count</span> = [perf <span class="built_in">count</span>]<span class="comment">;</span></span><br><span class="line">    if (<span class="built_in">count</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      GSTimedPerformer	*array[<span class="built_in">count</span>]<span class="comment">;</span></span><br><span class="line">      IF_NO_GC(RETAIN(target))<span class="comment">;</span></span><br><span class="line">      IF_NO_GC(RETAIN(arg))<span class="comment">;</span></span><br><span class="line">      [perf getObjects: array]<span class="comment">;</span></span><br><span class="line">        while (<span class="built_in">count</span>-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            GSTimedPerformer	*p = array[<span class="built_in">count</span>]<span class="comment">;</span></span><br><span class="line">            if (p-&gt;target == target &amp;&amp; sel_isEqual(p-&gt;selector, aSelector)</span><br><span class="line">                &amp;&amp; (p-&gt;argument == arg <span class="title">||</span> [p-&gt;argument isEqual: arg])) &#123;</span><br><span class="line">                [p invalidate]<span class="comment">;</span></span><br><span class="line">                [perf removeObjectAtIndex: <span class="built_in">count</span>]<span class="comment">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(arg)<span class="comment">;</span></span><br><span class="line">        RELEASE(target)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>获取Runloop内部持有的_timedPerformers数组(数组中的是GSTimedPerformer对象)。</li>
<li>创建一个C语言数组，并把_timedPerformers数组中的内容copy到这个C语言数组array。</li>
<li>遍历该C语言数组array: 如果给定参数中的target、argument、selector均一一对应，那么销毁GSTimedPerformer对象中的定时器，并根据当前的索引移除_timedPerformers数组的GSTimedPerformer对象。</li>
</ol>
<p>换句话说，如果target、argument、selector中有一个参数没有对应，那么便不会执行销毁定时器操作和移除操作。那么，判定target、argument、selector均一一对应的标准是:Matching of the argument may be either by pointer equality or by use of the [NSObject-isEqual:] method.就是指针和isEqual方法。</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">if</span>(p-&gt;</span>target == target </span><br><span class="line">&amp;&amp; <span class="function"><span class="title">sel_isEqual</span>(p-&gt;</span>selector, aSelector)</span><br><span class="line">&amp;&amp; (<span class="function"><span class="title">p</span>-&gt;</span><span class="function"><span class="title">argument</span> == arg || [p-&gt;</span>argument isEqual: arg])) </span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>其实这里的<code>sel_isEqual</code>就等价于<code>==</code>，这样的话如果我们自己需要预先判断参数是否一一对应不妨就按照它这么写。</p>
<p>同理，<code>+ (void)cancelPreviousPerformRequestsWithTarget:(id)target</code>方法执行原理与上面的方法类似，只是不用比较参数，把所有定时器都销毁，并把所有GSTimedPerformer对象都从_timedPerformers数组中移除。</p>
<p>如上文所述:</p>
<blockquote>
<p>GSTimedPerformer在定时器时间截止时调用<code>fire</code>方法，之后GSTimedPerformer不再持有timer，接着Runloop不再持有GSTimedPerformer，于是GSTimedPerformer销毁，它对target的强引用也不复存在。</p>
</blockquote>
<p>当手动销毁定时器并把GSTimedPerformer从Runloop从移除时，GSTimedPerformer销毁，GSTimedPerformer对target的强引用不存在，这样，内存泄露问题解决了。这也是为什么使用<code>cancelPreviousPerformRequestsWithTarget</code>取消还没有执行的perform就可以解决<code>target</code>无法释放掉的原因。</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="performSelector-onThread-withObject-waitUntilDone-modes"><a href="#performSelector-onThread-withObject-waitUntilDone-modes" class="headerlink" title="performSelector:onThread:withObject:waitUntilDone:modes:"></a>performSelector:onThread:withObject:waitUntilDone:modes:</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait modes:(<span class="keyword">nullable</span> <span class="built_in">NSArray</span>&lt;<span class="built_in">NSString</span> *&gt; *)array;</span><br><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector onThread:(<span class="built_in">NSThread</span> *)thr withObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)arg waitUntilDone:(<span class="built_in">BOOL</span>)wait;</span><br></pre></td></tr></table></figure>
<p>要求perform在指定的线程执行。具体的实现如下所示:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector</span><br><span class="line">               onThread:(<span class="built_in">NSThread</span>*)aThread</span><br><span class="line">             withObject:(<span class="keyword">id</span>)anObject</span><br><span class="line">          waitUntilDone:(<span class="built_in">BOOL</span>)aFlag</span><br><span class="line">                  modes:(<span class="built_in">NSArray</span>*)anArray &#123;</span><br><span class="line">  </span><br><span class="line">    GSRunLoopThreadInfo  *info;</span><br><span class="line">    <span class="built_in">NSThread</span> *t;</span><br><span class="line">    <span class="keyword">if</span> ([anArray count] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    t = GSCurrentThread();</span><br><span class="line">    <span class="keyword">if</span> (aThread == <span class="literal">nil</span>) aThread = t;</span><br><span class="line">    info = GSRunLoopInfoForThread(aThread);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (t == aThread) &#123;</span><br><span class="line">        <span class="comment">// Perform in current thread.</span></span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span> || info-&gt;loop == <span class="literal">nil</span>) &#123;</span><br><span class="line">            <span class="comment">// Wait until done or no run loop.</span></span><br><span class="line">            [<span class="keyword">self</span> performSelector: aSelector withObject: anObject];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Don't wait ... schedule operation in run loop.</span></span><br><span class="line">            [info-&gt;loop performSelector: aSelector</span><br><span class="line">                                 target: <span class="keyword">self</span></span><br><span class="line">                               argument: anObject</span><br><span class="line">                                  order: <span class="number">0</span></span><br><span class="line">                                  modes: anArray];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        GSPerformHolder   *h;</span><br><span class="line">        <span class="built_in">NSConditionLock</span>	*l = <span class="literal">nil</span>;</span><br><span class="line">        <span class="comment">// 线程Finished判断</span></span><br><span class="line">        <span class="keyword">if</span> ([aThread isFinished] == <span class="literal">YES</span>) &#123;</span><br><span class="line">            [<span class="built_in">NSException</span> raise: <span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                      format: <span class="string">@"perform on finished thread"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 阻塞等待加锁</span></span><br><span class="line">        <span class="keyword">if</span> (aFlag == <span class="literal">YES</span>) &#123;</span><br><span class="line">            l = [[<span class="built_in">NSConditionLock</span> alloc] init];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h = [GSPerformHolder newForReceiver:<span class="keyword">self</span></span><br><span class="line">				                   argument:anObject</span><br><span class="line">				                   selector:aSelector</span><br><span class="line">                                      modes:anArray</span><br><span class="line">				                       lock:l];</span><br><span class="line">        [info addPerformer: h];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 条件锁创建成功(也即参数aFlag为YES)</span></span><br><span class="line">        <span class="keyword">if</span> (l != <span class="literal">nil</span>) &#123;</span><br><span class="line">            [l lockWhenCondition: <span class="number">1</span>]; <span class="comment">// 当条件为1时加锁</span></span><br><span class="line">            [l unlock];</span><br><span class="line">            RELEASE(l);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// holder已经失效则抛出异常</span></span><br><span class="line">            <span class="keyword">if</span> ([h isInvalidated] == <span class="literal">YES</span>) &#123;</span><br><span class="line">                RELEASE(h);</span><br><span class="line">                [<span class="built_in">NSException</span> raise: <span class="built_in">NSInternalInconsistencyException</span></span><br><span class="line">                          format: <span class="string">@"perform on finished thread"</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// holder自身就产生exception了, 那么再次抛出异常</span></span><br><span class="line">            <span class="comment">// If we have an exception passed back from the remote thread, re-raise it.</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">nil</span> != h-&gt;exception) &#123;</span><br><span class="line">              <span class="built_in">NSException</span>       *e = AUTORELEASE(RETAIN(h-&gt;exception));</span><br><span class="line">              RELEASE(h);</span><br><span class="line">              [e raise];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      RELEASE(h);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法主要做了这些什么?</p>
<ol>
<li>首先对传进来的modes(Runloop模式数组)个数进行判断，如果为0，则直接return。</li>
<li>获取该方法执行上下文中的线程: <code>t</code>，并把它与作为参数传进来的线程<code>aThread</code>进行比较，看是否一致。当然，如果传进来的<code>aThread</code>为空，那么执行<code>aThread = t;</code>，简单粗暴地假定传进来的线程和上下文中的线程一致。</li>
<li>当两个线程一致时，如果参数<code>aFlag</code>为YES或者线程对应的Runloop为空，说明需要等待，也即这个方法应该等到selector被执行完毕后再return。这就好办了，直接调用<code>[self performSelector: aSelector withObject: anObject];</code>方法，同步执行即可。如果不需要等待呢? 把<code>selector</code>、<code>argument</code>、<code>modes</code>等信息交给线程对应的Runloop再进一步处理。</li>
<li>当两个线程不一致时，首先判断<code>aThread</code>有没有finished，线程死了自然selector无法执行，抛出异常。再者判断是否需要阻塞等待，如果需要的话就创建一个条件锁。接着把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个GSPerformHolder对象，并把它交给封装线程信息的GSRunLoopThreadInfo对象。之后是一些收尾工作:设置条件锁的condition及以下异常判断。</li>
</ol>
<p>需要着重说明的是参数<code>aFlag</code>: 是否立即返回。如果参数<code>aFlag</code>为YES，则这个方法应该等到selector被执行完毕后再return。那么就有一个问题，这个方法本身并不会触发<code>aThread</code>对应的Runloop运行，换句话说，如果<code>aThread</code>对应的Runloop一直不运行那么这个方法也一直不会return，咦，如果<code>aThread</code>和当前线程一致，Runloop要是一直没运行，那整个程序不就锁在这段代码了吗。</p>
<p>所以，针对这个特殊情况:参数<code>aFlag</code>为YES且<code>aThread</code>和当前线程一致，那<code>modes</code>将会被忽略，这个selector会立刻执行(因此上面的方法实现中直接调用<code>performSelector:withObject</code>而不是走到条件锁那段代码)。这就巧妙地避免了由于当前线程的Runloop没运行而线程被一个永远无法执行的<code>perform</code>阻塞的问题。</p>
<h4 id="两个线程一致时"><a href="#两个线程一致时" class="headerlink" title="两个线程一致时"></a>两个线程一致时</h4><p>问题一: 两个线程一致时，”把<code>selector</code>、<code>argument</code>、<code>modes</code>等信息交给线程对应的Runloop再进一步处理。”，具体怎么做的呢?</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>performSelector:<span class="params">(SEL)</span>aSelector</span><br><span class="line">		            target:<span class="params">(id)</span>target</span><br><span class="line">		          argument:<span class="params">(id)</span>argument</span><br><span class="line">		           order:<span class="params">(NSUInteger)</span>order</span><br><span class="line">                   modes:<span class="params">(NSArray*)</span>modes;</span><br></pre></td></tr></table></figure>
<p>Sets up sending of aSelector to target with argument. The selector is sent before the next runloop iteration (unless cancelled before then) in any of the specified modes.The target and argument objects are retained.<br>The order value is used to determine the order in which messages are sent if multiple messages have been set up. Messages with a lower order value are sent first.If the modes array is empty, this method has no effect.<br>说的很明白了，就是在指定模式的Runloop下一次迭代之前把selector、argument等信息丢给target，以便调用。这里的<code>order</code>指定了这个调用的优先级。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)performSelector:(SEL)aSelector</span><br><span class="line">		          target:(<span class="keyword">id</span>)target</span><br><span class="line">		        argument:(<span class="keyword">id</span>)argument</span><br><span class="line">		           order:(<span class="built_in">NSUInteger</span>)order</span><br><span class="line">                   modes:(<span class="built_in">NSArray</span>*)modes &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">unsigned</span>		count = [modes count];</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">NSString</span>			*array[count];</span><br><span class="line">        GSRunLoopPerformer	*item;</span><br><span class="line">        item = [[GSRunLoopPerformer alloc] initWithSelector:aSelector</span><br><span class="line">                                                     target: target</span><br><span class="line">                                                   argument: argument</span><br><span class="line">                                                      order: order];</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 把modes中的内容copy到array</span></span><br><span class="line">        <span class="keyword">if</span> ([modes isProxy]) &#123;</span><br><span class="line">            <span class="keyword">unsigned</span> i;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                array[i] = [modes objectAtIndex: i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            [modes getObjects: array];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (count-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSString</span>	*mode = array[count];</span><br><span class="line">            <span class="keyword">unsigned</span>	end;</span><br><span class="line">            <span class="keyword">unsigned</span>	i;</span><br><span class="line">            GSRunLoopCtxt	*context;</span><br><span class="line">            GSIArray	performers;</span><br><span class="line"></span><br><span class="line">            context = <span class="built_in">NSMapGet</span>(_contextMap, mode);</span><br><span class="line">            <span class="keyword">if</span> (context == <span class="literal">nil</span>) &#123;</span><br><span class="line">                context = [[GSRunLoopCtxt alloc] initWithMode: mode extra: _extra];</span><br><span class="line">                <span class="built_in">NSMapInsert</span>(_contextMap, context-&gt;mode, context);</span><br><span class="line">                RELEASE(context);</span><br><span class="line">            &#125;</span><br><span class="line">	 </span><br><span class="line">            performers = context-&gt;performers;</span><br><span class="line">            end = GSIArrayCount(performers);</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; end; i++) &#123;</span><br><span class="line">                GSRunLoopPerformer	*p;</span><br><span class="line">                p = GSIArrayItemAtIndex(performers, i).obj;</span><br><span class="line">                <span class="keyword">if</span> (p-&gt;order &gt; order) &#123;</span><br><span class="line">                    GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">                GSIArrayInsertItem(performers, (GSIArrayItem)((<span class="keyword">id</span>)item), i);</span><br><span class="line">            &#125;</span><br><span class="line">	  </span><br><span class="line">            i = GSIArrayCount(performers);</span><br><span class="line">	  </span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">1000</span> == <span class="number">0</span> &amp;&amp; i &gt; context-&gt;maxPerformers) &#123;</span><br><span class="line">                context-&gt;maxPerformers = i;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"WARNING ... there are %u performers scheduled"</span></span><br><span class="line">                <span class="string">@" in mode %@ of %@\n(Latest: [%@ %@])"</span>,</span><br><span class="line">                i, mode, <span class="keyword">self</span>, <span class="built_in">NSStringFromClass</span>([target <span class="keyword">class</span>]),</span><br><span class="line">                <span class="built_in">NSStringFromSelector</span>(aSelector));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        RELEASE(item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据方法实现来看，这个方法做了这些事:</p>
<ol>
<li>如果数组modes中没有内容就直接return。</li>
<li>把<code>target</code>、<code>argument</code>、<code>selector</code>、<code>order</code>等信息包装成一个对象GSRunLoopPerformer。</li>
<li>创建一个字符串数组array，把modes中的内容copy到array。</li>
<li>遍历array。根据array中的模式mode(NSString类型)找到_contextMap(NSMapTable类型)表中对应的context(GSRunLoopCtxt类型)，获得context中需要执行的performers(GSIArray类型)。</li>
<li>把第2步中包装好的GSRunLoopPerformer对象放到performers中。遍历performers，根据order确定优先级，调整performers中的索引。</li>
</ol>
<p>总而言之，就是把<code>target</code>、<code>argument</code>、<code>selector</code>、<code>order</code>等信息包装成一个GSRunLoopPerformer对象，并把该对象交给Runloop(中的_contextMap中的performers)，供其在合适的时机调用。具体啥时候调用呢?官方文档说是Runloop的下一次迭代的时候。</p>
<h4 id="两个线程不一致时"><a href="#两个线程不一致时" class="headerlink" title="两个线程不一致时"></a>两个线程不一致时</h4><p>问题二: 两个线程不一致时，”把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个GSPerformHolder对象，并把它交给封装线程信息的GSRunLoopThreadInfo对象”又是怎么做的呢?</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">(GSPerformHolder</span> <span class="string">*)h</span> <span class="string">=</span> <span class="string">[GSPerformHolder</span> <span class="attr">newForReceiver:self</span></span><br><span class="line">		                   <span class="attr">argument:anObject</span></span><br><span class="line">		                   <span class="attr">selector:aSelector</span></span><br><span class="line"><span class="attr">                            modes:</span><span class="string">anArray</span></span><br><span class="line">		                       <span class="attr">lock:l];</span></span><br><span class="line"><span class="string">[(GSRunLoopThreadInfo</span> <span class="string">*)info</span> <span class="attr">addPerformer:</span> <span class="string">h];</span></span><br></pre></td></tr></table></figure>
<p><code>newForReceiver:argument:selector:modes:lock:</code> 这个方法就是做一些信息封装，无需多言。主要是这个<code>addPerformer</code>，删除<code>#if defined(_WIN32)</code>的代码后具体实现如下:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)addPerformer:(<span class="keyword">id</span>)performer &#123;</span><br><span class="line">    <span class="built_in">BOOL</span>  signalled = <span class="literal">NO</span>;</span><br><span class="line">    <span class="comment">// NSLock加锁</span></span><br><span class="line">    [lock lock];</span><br><span class="line">    <span class="built_in">NSTimeInterval</span> start = <span class="number">0.0</span>;</span><br><span class="line">    <span class="comment">// 使用write函数向 outputFd 中写入 1 字节数据，数据为: "0"。</span></span><br><span class="line">    <span class="keyword">while</span> (outputFd &gt;= <span class="number">0</span> &amp;&amp; <span class="literal">NO</span> == (signalled = (write(outputFd, <span class="string">"0"</span>, <span class="number">1</span>) == <span class="number">1</span>) ? <span class="literal">YES</span> : <span class="literal">NO</span>)) &#123;</span><br><span class="line">        <span class="built_in">NSTimeInterval</span>    now = [<span class="built_in">NSDate</span> timeIntervalSinceReferenceDate];</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0.0</span> == start) &#123;</span><br><span class="line">            start = now;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (now - start &gt;= <span class="number">1.0</span>) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Unable to signal %@ within a second; blocked?"</span>, <span class="keyword">self</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        [lock unlock];</span><br><span class="line">        [lock lock];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写入数据成功，把performer添加到GSRunLoopThreadInfo数组中</span></span><br><span class="line">    <span class="keyword">if</span> (signalled) [performers addObject: performer];</span><br><span class="line">    <span class="comment">// NSLock解锁</span></span><br><span class="line">    [lock unlock];</span><br><span class="line">    <span class="comment">// 写入数据失败，销毁performer</span></span><br><span class="line">    <span class="keyword">if</span> (!signalled) [performer invalidate];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>补充write函数知识点:</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line"> * <span class="built_in">write</span>函数</span><br><span class="line"> * ssize_t  <span class="built_in">write</span>(int __fd, const void * __buf, size_t __nbyte) __DARWIN_ALIAS_C(<span class="built_in">write</span>);</span><br><span class="line"> * <span class="built_in">write</span> 函数向 __fd 中写入 __nbyte 字节数据，数据来源为 __buf 。返回值一般总是等于 __nbyte</span><br><span class="line"> * 返回值如果不是等于__nbyte，就是出错了。常见的出错原因是磁盘空间满了或者超过了文件大小限制。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">/* The <span class="built_in">write</span> could concievably fail <span class="keyword">if</span> <span class="keyword">the</span> pipe <span class="keyword">is</span> full.</span><br><span class="line"> * In <span class="keyword">that</span> case we need <span class="keyword">to</span> release <span class="keyword">the</span> lock temporarily <span class="keyword">to</span> allow <span class="keyword">the</span> other</span><br><span class="line"> * thread <span class="keyword">to</span> consume data <span class="keyword">from</span> <span class="keyword">the</span> pipe.  It's possible <span class="keyword">that</span> <span class="keyword">the</span> thread</span><br><span class="line"> * <span class="keyword">and</span> <span class="keyword">its</span> runloop might stop during <span class="keyword">that</span> ... so we need <span class="keyword">to</span> check <span class="keyword">that</span></span><br><span class="line"> * outputFd <span class="keyword">is</span> still valid.</span><br><span class="line"> */</span><br></pre></td></tr></table></figure>
<p>不是十分理解write函数在这里的作用，根据一些异常信息<code>&quot;Failed to set non block flag for perform in thread&quot; &quot;Failed to create event to handle perform in thread&quot;</code>，可能是向文件中写入一些flag表示线程指定事件对象的信号状态吧。</p>
<p>如果信号状态设置成功，就把这个perform对象(GSPerformHolder类型)添加到GSRunLoopThreadInfo的performers数组中。</p>
<p>这个GSRunLoopThreadInfo对象把GSPerformHolder对象添加到自己数组中后，具体最原先的perform什么时候执行呢? 是在调用GSRunLoopThreadInfo对象的fire方法时逐个执行:</p>
<p>GSRunLoopThreadInfo对象的<code>fire</code>方法部分实现:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">for</span> <span class="string">(i</span> <span class="string">=</span> <span class="number">0</span><span class="string">;</span> <span class="string">i</span> <span class="string">&lt;</span> <span class="string">c;</span> <span class="string">i++)</span></span><br><span class="line">  <span class="string">&#123;</span></span><br><span class="line">    <span class="string">GSPerformHolder</span>	<span class="meta">*h</span> <span class="string">=</span> <span class="string">[toDo</span> <span class="attr">objectAtIndex:</span> <span class="string">i];</span></span><br><span class="line"></span><br><span class="line">    <span class="string">[loop</span> <span class="attr">performSelector:</span> <span class="string">@selector(fire)</span></span><br><span class="line"><span class="attr">     target:</span> <span class="string">h</span></span><br><span class="line"><span class="attr">   argument:</span> <span class="string">nil</span></span><br><span class="line"><span class="attr">      order:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">      modes:</span> <span class="string">[h</span> <span class="string">modes]];</span></span><br><span class="line">  <span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>可见是逐个取出数组中的<code>GSPerformHolder</code>对象，一个接一个地调用<code>GSPerformHolder</code>的<code>fire</code>方法，这也是个<code>fire</code>方法，它内部做了什么?就是<code>[receiver performSelector: selector withObject: argument];</code>。</p>
<p>捋一捋: 两个线程不一致时，把<code>selector</code>、<code>argument</code>、<code>modes</code>及条件锁等信息封装成一个<code>GSPerformHolder</code>对象，并把它添加到<code>GSRunLoopThreadInfo</code>对象的performers数组中。当调用<code>GSRunLoopThreadInfo</code>对象的<code>fair</code>方法时会遍历performers数组，然后逐个调用数组中每一个元素的<code>fair</code>方法，而这个<code>fair</code>方法内部就是调用<code>performSelector:withObject</code>方法。</p>
<p>最最关键的一个问题: 什么时候调用<code>GSRunLoopThreadInfo</code>对象的<code>fair</code>方法? 官方文档说: May only be called from the runloop when the event/descriptor is triggered.<br>我在Runloop的<code>+(BOOL)awakenedBefore:</code>和 <code>-(BOOL)pollUntil:within:</code>方法中找到了调用痕迹。</p>
<h3 id="相关方法"><a href="#相关方法" class="headerlink" title="相关方法"></a>相关方法</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">(void)</span> <span class="attr">performSelector:(SEL)aSelector</span></span><br><span class="line"><span class="attr">                onThread:</span><span class="string">(NSThread*)aThread</span></span><br><span class="line"><span class="attr">              withObject:</span><span class="string">(id)anObject</span></span><br><span class="line"><span class="attr">           waitUntilDone:</span><span class="string">(BOOL)aFlag</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">[self</span> <span class="attr">performSelector:aSelector</span></span><br><span class="line"><span class="attr">               onThread:</span><span class="string">aThread</span></span><br><span class="line"><span class="attr">             withObject:</span><span class="string">anObject</span></span><br><span class="line"><span class="attr">          waitUntilDone:</span><span class="string">aFlag</span></span><br><span class="line"><span class="attr">                  modes:</span><span class="string">commonModes()];</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Runloop的五种mode分别是:<code>NSDefaultRunLoopMode，NSConnectionReplyMode，NSModalPanelRunLoopMode，NSEventTrackingRunLoopMode，NSRunLoopCommonModes</code>。<br>这个方法省略了modes参数，内部使用common mode，也即<code>NSDefaultRunLoopMode</code>和<code>NSConnectionReplyMode</code>(不是<code>NSEventTrackingRunLoopMode</code>)。所以如果有鼠标或者手势事件需要处理，省略modes参数可能不是个好做法。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">(void)</span> <span class="attr">performSelectorOnMainThread:(SEL)aSelector</span></span><br><span class="line">			  <span class="attr">withObject:(id)anObject</span></span><br><span class="line">		       <span class="attr">waitUntilDone:(BOOL)aFlag</span></span><br><span class="line">			       <span class="attr">modes:(NSArray*)anArray</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">if</span> <span class="string">(defaultThread</span> <span class="string">==</span> <span class="string">nil)</span> <span class="string">[NSThread</span> <span class="string">mainThread];</span></span><br><span class="line">  <span class="string">[self</span> <span class="attr">performSelector:aSelector</span></span><br><span class="line"><span class="attr">               onThread:</span><span class="string">defaultThread</span></span><br><span class="line"><span class="attr">             withObject:</span><span class="string">anObject</span></span><br><span class="line"><span class="attr">          waitUntilDone:</span><span class="string">aFlag</span></span><br><span class="line"><span class="attr">                  modes:</span><span class="string">anArray];</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="string">(void)performSelectorOnMainThread:(SEL)aSelector</span></span><br><span class="line">			  <span class="attr">withObject:(id)anObject</span></span><br><span class="line">		       <span class="attr">waitUntilDone:(BOOL)aFlag</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">[self</span> <span class="attr">performSelectorOnMainThread:aSelector</span></span><br><span class="line">			 <span class="attr">withObject:anObject</span></span><br><span class="line">		      <span class="attr">waitUntilDone:aFlag</span></span><br><span class="line">			      <span class="attr">modes:commonModes()];</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>这两个方法指定了主线程。一: 如果参数aFlag是YES且方法调用的当前线程就是主线程，那么modes参数会被忽略。与上文所说的”参数<code>aFlag</code>为YES且<code>aThread</code>和当前线程一致，那<code>modes</code>将会被忽略，这个selector会立刻执行”一致。</p>
<p>后台执行:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">(void)</span> <span class="attr">performSelectorInBackground:(SEL)aSelector</span></span><br><span class="line"><span class="attr">                          withObject:</span><span class="string">(id)anObject</span> <span class="string">&#123;</span></span><br><span class="line">  <span class="string">[NSThread</span> <span class="attr">detachNewThreadSelector:aSelector</span></span><br><span class="line"><span class="attr">                           toTarget:</span><span class="string">self</span></span><br><span class="line"><span class="attr">                         withObject:</span><span class="string">anObject];</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<p>就是随意创建一个线程执行selector方法。</p>
<h2 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h2><h3 id="printInfo方法会执行吗"><a href="#printInfo方法会执行吗" class="headerlink" title="printInfo方法会执行吗"></a>printInfo方法会执行吗</h3><h4 id="GCD调用"><a href="#GCD调用" class="headerlink" title="GCD调用"></a>GCD调用</h4><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dispatch_async(<span class="name">dispatch_get_global_queue</span>(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">     [self performSelector:@selector(<span class="name">printInfo</span>) withObject<span class="symbol">:nil</span> afterDelay:<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line"> &#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>很明显是不会的。因为performSelector具体实现中并没有主动触发线程对应Runloop运行。子线程对应的Runloop没有run。怎么让它执行?启动Runloop:</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">dispatch_async(<span class="name">dispatch_get_global_queue</span>(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</span><br><span class="line">    [self performSelector:@selector(<span class="name">printInfo</span>) withObject<span class="symbol">:nil</span> afterDelay:<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">    [[NSRunLoop currentRunLoop] run]<span class="comment">;</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="NSThread调用"><a href="#NSThread调用" class="headerlink" title="NSThread调用"></a>NSThread调用</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSThread *thread = [[NSThread alloc] <span class="string">initWithBlock:</span>^&#123;</span><br><span class="line">    [self <span class="string">performSelector:</span><span class="meta">@selector</span>(printInfo) <span class="string">withObject:</span>nil <span class="string">afterDelay:</span><span class="number">1</span>];</span><br><span class="line">&#125;];</span><br><span class="line">[thread start];</span><br></pre></td></tr></table></figure>
<p>同理:</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">NSThread *thread = <span class="comment">[<span class="comment">[NSThread alloc]</span> initWithBlock:^&#123;</span></span><br><span class="line"><span class="comment">    <span class="comment">[self performSelector:@selector(printInfo) withObject:nil afterDelay:1]</span>;</span></span><br><span class="line"><span class="comment">    <span class="comment">[<span class="comment">[NSRunLoop currentRunLoop]</span> run]</span>;</span></span><br><span class="line"><span class="comment">&#125;]</span>;</span><br><span class="line"><span class="comment">[thread start]</span>;</span><br></pre></td></tr></table></figure>
<p>这就有一个问题了。在GCD中<code>[[NSRunLoop currentRunLoop] run];</code>放在<code>performSelector</code>前面或者后面貌似都是可以的，但是在NSThread中<code>[[NSRunLoop currentRunLoop] run];</code>只能放在<code>performSelector</code>的后面。</p>
<p>在NSThread方法中:</p>
<blockquote>
<p>因为run方法只是尝试想要开启当前线程中的runloop，但是如果该线程中并没有任何事件(source、timer、observer)的话，并不会成功的开启。</p>
</blockquote>
<p>为什么GCD中即使<code>[[NSRunLoop currentRunLoop] run];</code>放在前面<code>printInfo</code>方法还是调用了呢? 代码实际测试，延迟效果没有了，并且有时方法执行，有时方法没有执行。</p>
<p>综上，在子线程中使用performSelector的延迟方法是，需要加上<code>[[NSRunLoop currentRunLoop] run];</code>使得Runloop能够运行，并且该方法要放在<code>performSelector</code>的后面来保证正确成功地开启。</p>
<h4 id="NSThread无效"><a href="#NSThread无效" class="headerlink" title="NSThread无效"></a>NSThread无效</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">NSThread *thread = [[NSThread alloc] <span class="string">initWithBlock:</span>^&#123;&#125;];</span><br><span class="line">[thread start];</span><br><span class="line">[self <span class="string">performSelector:</span><span class="meta">@selector</span>(printMainInfo) <span class="string">onThread:</span>thread <span class="string">withObject:</span>nil <span class="string">waitUntilDone:</span>NO];</span><br></pre></td></tr></table></figure>
<p>上面这段代码为什么没有执行printMainInfo方法?</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSThread</span> *thread = [[<span class="built_in">NSThread</span> alloc] initWithBlock:^&#123;</span><br><span class="line">    <span class="comment">// 执行一次而已</span></span><br><span class="line">    <span class="built_in">NSRunLoop</span> *currentRunLoop = [<span class="built_in">NSRunLoop</span> currentRunLoop];</span><br><span class="line">    [currentRunLoop runMode:<span class="built_in">NSDefaultRunLoopMode</span> beforeDate:[<span class="built_in">NSDate</span> distantFuture]];</span><br><span class="line">&#125;];</span><br><span class="line">[thread start];</span><br><span class="line">[<span class="keyword">self</span> performSelector:<span class="keyword">@selector</span>(printMainInfo) onThread:thread withObject:<span class="literal">nil</span> waitUntilDone:<span class="literal">NO</span>];</span><br></pre></td></tr></table></figure>
<p>子线程执行完操作之后就会立即释放，即使我们使用强引用引用子线程使子线程不被释放，也不能给子线程再次添加操作，或者再次开启。这里可以使用Runloop。子线程获取其对应的Runloop对象并使之运行。一般使用常驻子线程。</p>
<hr>
<blockquote>
<p>参考资料<br><a href="https://zhongwuzw.github.io/2017/01/19/Objective-C之performSelector编译器内存泄露警告/" target="_blank" rel="noopener">https://zhongwuzw.github.io/2017/01/19/Objective-C之performSelector编译器内存泄露警告/</a><br> <a href="https://blog.csdn.net/dean19900504/article/details/8067679" target="_blank" rel="noopener">https://blog.csdn.net/dean19900504/article/details/8067679</a><br><a href="https://www.jianshu.com/p/4f5566125148" target="_blank" rel="noopener">https://www.jianshu.com/p/4f5566125148</a><br> <a href="https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown" target="_blank" rel="noopener">https://stackoverflow.com/questions/7017281/performselector-may-cause-a-leak-because-its-selector-is-unknown</a><br> <a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html" target="_blank" rel="noopener">https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html</a><br> <a href="https://blog.csdn.net/wei371522/article/details/81216853" target="_blank" rel="noopener">https://blog.csdn.net/wei371522/article/details/81216853</a><br> <a href="https://blog.csdn.net/king16304/article/details/52192259" target="_blank" rel="noopener">https://blog.csdn.net/king16304/article/details/52192259</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Runtime基础]]></title>
      <url>http://blog.chenyalun.com/2018/07/10/Runtime%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2018.8.26 更新Class定义<br>2019.3.25 更新设置weak关联属性</p>
</blockquote>
<p></p><p align="center"> 关于Runtime的简单总结。 </p><br><a id="more"></a><p></p>
<p>代码中省略<code>OBJC2_UNAVAILABLE</code>,也即不可直接访问结构体中的成员.</p>
<h2 id="一、Runtime"><a href="#一、Runtime" class="headerlink" title="一、Runtime"></a>一、Runtime</h2><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Objective-C2<span class="number">.0</span>之前Class的定义</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> &#123;</span></span><br><span class="line">    Class isa  OBJC_ISA_AVAILABILITY;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> !__OBJC2__</span></span><br><span class="line">    <span class="comment">// 父类</span></span><br><span class="line">    Class super_class;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">long</span> version;</span><br><span class="line">    <span class="keyword">long</span> info;</span><br><span class="line">    <span class="keyword">long</span> instance_size;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_ivar_list</span> *<span class="title">ivars</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_method_list</span> **<span class="title">methodLists</span>;</span></span><br><span class="line">    <span class="comment">// 方法缓存</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> *<span class="title">cache</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">objc_protocol_list</span> *<span class="title">protocols</span>;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_cache</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> mask <span class="comment">/* total = mask + 1 */</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> occupied;</span><br><span class="line">    Method buckets[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">根据源码，最新定义大致如下:</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">objc_class</span> :</span> objc_object &#123;</span><br><span class="line">    <span class="comment">// Class ISA;</span></span><br><span class="line">    Class isa;</span><br><span class="line">    Class superclass;</span><br><span class="line">    <span class="keyword">cache_t</span> cache;<span class="comment">// 方法缓存</span></span><br><span class="line">    <span class="keyword">class_data_bits_t</span> bits; <span class="comment">// 用于获取具体的类信息</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"> YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    Class cls = [person class];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例对象对应的Class</span></span><br><span class="line">    Class class1 = object_getClass(person);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指定名称的类对象</span></span><br><span class="line">    Class class3 = objc_getClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">    Class class2 = objc_getRequiredClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指定名称的元类对象</span></span><br><span class="line">    Class class4 = objc_getMetaClass(<span class="string">"YAPerson"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 找到指定名称的类对象</span></span><br><span class="line">    Class class5 = objc_lookUpClass(<span class="string">"NSObject"</span>);</span><br><span class="line">    NSLog(@<span class="string">"%@%@%@%@%@"</span>,class1,class2,class3,class4,class5);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置对象对应的Class,返回原先的class</span></span><br><span class="line">    Class oriClass = object_setClass(person, [NSObject class]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否是类对象或元类对象</span></span><br><span class="line">    BOOL isClass = object_isClass(person);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 是否是元类对象</span></span><br><span class="line">    BOOL isMetaClass = class_isMetaClass(class4);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取父类</span></span><br><span class="line">    Class superClass = class_getSuperclass(cls);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取类的版本</span></span><br><span class="line">    <span class="keyword">int</span> version = class_getVersion(cls);</span><br><span class="line">    <span class="comment">// 设置类的版本</span></span><br><span class="line">    class_setVersion(cls, <span class="number">88</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取实例大小</span></span><br><span class="line">    <span class="keyword">typedef</span> __SIZE_TYPE__ <span class="keyword">size_t</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">size_t</span> size = class_getInstanceSize(cls);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    int objc_getClassList(Class *buffer, int bufferCount)</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line"><span class="comment">//    Class *objc_copyClassList(unsigned int *outCount)</span></span><br><span class="line"><span class="comment">//    </span></span><br><span class="line">    <span class="comment">// 获取类的名称</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = class_getName(cls);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态创建类</span></span><br><span class="line">    <span class="comment">//Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)</span></span><br><span class="line">    <span class="comment">//void objc_registerClassPair(Class cls)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态废弃类</span></span><br><span class="line">    <span class="comment">//Class objc_duplicateClass(Class original, const char *name, size_t extraBytes)</span></span><br><span class="line">    <span class="comment">//void objc_disposeClassPair(Class cls)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//id o = objc_storeWeak(&amp;weakObject, weakObject);</span></span><br><span class="line">    <span class="comment">//id result = objc_loadWeak(&amp;weakObject);</span></span><br></pre></td></tr></table></figure>
<h3 id="Block"><a href="#Block" class="headerlink" title="Block"></a>Block</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">给<span class="keyword">block创建一个关联的函数指针</span></span><br><span class="line"><span class="keyword">IMP </span>imp_implementationWithBlock(id <span class="keyword">block)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">获取函数指针关联的block</span></span><br><span class="line"><span class="keyword">id </span>imp_getBlock(IMP anImp)</span><br><span class="line"></span><br><span class="line">移除函数指针对应的<span class="keyword">block</span></span><br><span class="line"><span class="keyword">BOOL </span>imp_removeBlock(IMP anImp)</span><br></pre></td></tr></table></figure>
<p>实例演练</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 声明block</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^Block) ();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义block</span></span><br><span class="line">Block block = ^() &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"哈哈哈"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给block创建一个关联的函数指针</span></span><br><span class="line">IMP imp = imp_implementationWithBlock(block);</span><br><span class="line"><span class="comment">// 调用block</span></span><br><span class="line">(*imp)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取函数指针关联的block</span></span><br><span class="line"><span class="keyword">id</span> blockObject = imp_getBlock(imp);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,blockObject);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 移除函数指针对应的block</span></span><br><span class="line"><span class="built_in">BOOL</span> isRemoveBlock = imp_removeBlock(imp);</span><br><span class="line"><span class="keyword">if</span> (isRemoveBlock) &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"成功移除"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h3><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">获取<span class="keyword">SEL的名称(char </span>*类型)</span><br><span class="line"><span class="symbol">const</span> char *<span class="keyword">sel_getName(SEL </span><span class="keyword">sel)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">注册SEL</span></span><br><span class="line"><span class="keyword">SEL </span><span class="keyword">sel_registerName(const </span>char *<span class="keyword">str)</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">比较SEL</span></span><br><span class="line"><span class="keyword">BOOL </span><span class="keyword">sel_isEqual(SEL </span>lhs, <span class="keyword">SEL </span>rhs)</span><br></pre></td></tr></table></figure>
<p>实例演练</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SEL的名称(char *类型)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *selName = sel_getName(<span class="keyword">@selector</span>(viewWillAppear:));</span><br><span class="line">printf(<span class="string">"%s"</span>,selName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册SEL</span></span><br><span class="line">SEL newSel = sel_registerName(<span class="string">"haha"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较SEL</span></span><br><span class="line"><span class="built_in">BOOL</span> isEqual = sel_isEqual(<span class="keyword">@selector</span>(viewWillAppear:), newSel);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%d"</span>,isEqual);</span><br></pre></td></tr></table></figure>
<h3 id="Ivar"><a href="#Ivar" class="headerlink" title="Ivar"></a>Ivar</h3><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">定义一个objc_ivar结构体指针Ivar</span><br><span class="line"><span class="keyword">typedef</span> struct objc_ivar *Ivar;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct objc_ivar &#123;</span><br><span class="line">    成员变量名称</span><br><span class="line">    <span class="keyword">char</span> *ivar_name;</span><br><span class="line">    成员变量类型                                         </span><br><span class="line">    <span class="keyword">char</span> *ivar_type;                                          </span><br><span class="line">    偏移量</span><br><span class="line">    <span class="keyword">int</span> ivar_offset;                                          </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">int</span> space;                                                </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">关于偏移量的定义(就是整型)</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(__PTRDIFF_TYPE__)</span></span><br><span class="line">    <span class="keyword">typedef</span> __PTRDIFF_TYPE__	__darwin_ptrdiff_t;	<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">elif</span> defined(__LP64__)</span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">long</span>			__darwin_ptrdiff_t;	<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">typedef</span> <span class="keyword">int</span>			__darwin_ptrdiff_t;	<span class="comment">/* ptr1 - ptr2 */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* __GNUC__ */</span></span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _PTRDIFF_T</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PTRDIFF_T</span></span><br><span class="line">    <span class="keyword">typedef</span> __darwin_ptrdiff_t ptrdiff_t;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* _PTRDIFF_T */</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">成员变量列表</span><br><span class="line">struct objc_ivar_list &#123;</span><br><span class="line">    成员变量数量</span><br><span class="line">    <span class="keyword">int</span> ivar_count;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __LP64__</span></span><br><span class="line">    <span class="keyword">int</span> space;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="comment">/* variable length structure */</span></span><br><span class="line">    struct objc_ivar ivar_list[<span class="number">1</span>];</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取实例变量</span><br><span class="line">Ivar class_getInstanceVariable(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取类变量</span></span><br><span class="line"><span class="comment">//Ivar class_getClassVariable(Class cls, const char *name)</span></span><br><span class="line">    </span><br><span class="line">获取成员变量列表</span><br><span class="line">Ivar *class_copyIvarList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line">   </span><br><span class="line">获取Ivar变量的名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ivar_getName(Ivar v)</span><br><span class="line">    </span><br><span class="line">获取Ivar变量的偏移量</span><br><span class="line">ptrdiff_t ivar_getOffset(Ivar v)</span><br><span class="line">    </span><br><span class="line">获取Ivar变量的编码</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *ivar_getTypeEncoding(Ivar v)</span><br><span class="line">    </span><br><span class="line">设置成员变量的值</span><br><span class="line"><span class="keyword">void</span> object_setIvarWithStrongDefault(id obj, Ivar ivar, id value)</span><br><span class="line"></span><br><span class="line">设置成员变量的值</span><br><span class="line"><span class="keyword">void</span> object_setIvar(id obj, Ivar ivar, id value)</span><br><span class="line"></span><br><span class="line">获取Ivar对应的成员变量对象</span><br><span class="line">id object_getIvar(id obj, Ivar ivar)</span><br><span class="line"></span><br><span class="line">IvarLayout相关</span><br><span class="line"><span class="keyword">const</span> uint8_t *class_getIvarLayout(Class cls)</span><br><span class="line"><span class="keyword">const</span> uint8_t *class_getWeakIvarLayout(Class cls)</span><br><span class="line"><span class="keyword">void</span> class_setIvarLayout(Class cls, <span class="keyword">const</span> uint8_t *layout)</span><br><span class="line"><span class="keyword">void</span> class_setWeakIvarLayout(Class cls, <span class="keyword">const</span> uint8_t *layout)</span><br><span class="line">    </span><br><span class="line">添加成员变量</span><br><span class="line">BOOL class_addIvar(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, size_t <span class="built_in">size</span>,</span><br><span class="line">                  uint8_t alignment, <span class="keyword">const</span> <span class="keyword">char</span> *types)</span><br></pre></td></tr></table></figure>
<p>实例演示</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">    YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    Class cls = [person <span class="keyword">class</span>];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取实例变量</span></span><br><span class="line">    Ivar ivar_num = class_getInstanceVariable(cls, <span class="string">"num"</span>);</span><br><span class="line">    </span><br><span class="line">    Ivar ivar_name = class_getInstanceVariable(cls, <span class="string">"name"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取类变量</span></span><br><span class="line">    <span class="comment">//Ivar class_getClassVariable(Class cls, const char *name)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的名称</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name = ivar_getName(ivar_name);</span><br><span class="line">    printf(<span class="string">"%s\n"</span>,name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的偏移量</span></span><br><span class="line">    ptrdiff_t p = ivar_getOffset(ivar_num);</span><br><span class="line">    printf(<span class="string">"%td"</span>,p); <span class="comment">// 打印16</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Ivar变量的编码</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *typeEncoding = ivar_getTypeEncoding(ivar_name);</span><br><span class="line">    printf(<span class="string">"%s\n"</span>,typeEncoding); <span class="comment">// 打印 @"NSString"</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置成员变量的值</span></span><br><span class="line">    object_setIvarWithStrongDefault(person, ivar_name, <span class="string">@"haha"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,person-&gt;name);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置成员变量对应的值</span></span><br><span class="line">    object_setIvar(person, ivar_name, <span class="string">@"hahaaaaaa"</span>);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,person-&gt;name);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取Ivar对应的成员变量对象</span></span><br><span class="line">    <span class="keyword">id</span> object = object_getIvar(person, ivar_name);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,object);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 动态添加成员变量</span></span><br><span class="line">    <span class="comment">// 必须在 objc_allocateClassPair 之后 和 在objc_registerClassPair之前调用</span></span><br><span class="line">    <span class="comment">// 不能给一个已经存在的类添加成员变量</span></span><br><span class="line">    Class peopleClass = objc_allocateClassPair(cls, <span class="string">"YAPeople"</span>, <span class="number">0</span>);</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_gayFriend"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_girlFriend"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    class_addIvar(peopleClass, <span class="string">"_company"</span>, <span class="keyword">sizeof</span>(<span class="keyword">id</span>), log2(<span class="keyword">sizeof</span>(<span class="keyword">id</span>)), <span class="keyword">@encode</span>(<span class="keyword">id</span>));</span><br><span class="line">    objc_registerClassPair(peopleClass);</span><br><span class="line">    <span class="comment">// 打印成员变量列表</span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, [<span class="keyword">self</span> ya_getIvarList:peopleClass]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// IvarLayout相关</span></span><br><span class="line">    <span class="comment">// ivarLayout 和 weakIvarLayout 分别记录了哪些 ivar 是 strong 或是 weak，都未记录的就是基本类型和 __unsafe_unretained 的对象类型</span></span><br><span class="line">    <span class="keyword">const</span> uint8_t *ivarLayoutArray= class_getIvarLayout(cls);</span><br><span class="line">    <span class="keyword">const</span> uint8_t *weakIvarLayoutArray = class_getWeakIvarLayout(cls);</span><br><span class="line">    <span class="keyword">if</span> (ivarLayoutArray) &#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        uint8_t value_s = ivarLayoutArray[i];</span><br><span class="line">        <span class="keyword">while</span> (value_s != <span class="number">0x0</span>) &#123;</span><br><span class="line">            printf(<span class="string">"\\x%02x\n"</span>, value_s);</span><br><span class="line">            value_s = ivarLayoutArray[++i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//void class_setIvarLayout(Class cls, const uint8_t *layout)</span></span><br><span class="line">    <span class="comment">//void class_setWeakIvarLayout(Class cls, const uint8_t *layout)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取成员变量列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 成员变量字典(名称:类型)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">- (<span class="built_in">NSDictionary</span> *)ya_getIvarList:(Class)<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取成员变量列表</span></span><br><span class="line">    Ivar *ivarList = class_copyIvarList(<span class="keyword">class</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储成员变量</span></span><br><span class="line">    <span class="built_in">NSMutableDictionary</span> *dict = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取成员变量类型与成员变量名称</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 成员变量类型</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_ivarType = ivar_getTypeEncoding(ivarList[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 成员变量名称</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_ivarName = ivar_getName(ivarList[i]);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 利用字典存储,格式为 成员变量名称:对应的成员变量类型</span></span><br><span class="line">        <span class="built_in">NSString</span> *ivarName = [<span class="built_in">NSString</span> stringWithUTF8String:c_ivarName];</span><br><span class="line">        dict[ivarName] = [<span class="built_in">NSString</span> stringWithUTF8String:c_ivarType];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 需要手动free</span></span><br><span class="line">    free(ivarList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSDictionary</span> dictionaryWithDictionary:dict];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h3><p>值得一提的是方法编码和类型编码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ID       <span class="meta-string">'@'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CLASS    <span class="meta-string">'#'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_SEL      <span class="meta-string">':'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CHR      <span class="meta-string">'c'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UCHR     <span class="meta-string">'C'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_SHT      <span class="meta-string">'s'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_USHT     <span class="meta-string">'S'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_INT      <span class="meta-string">'i'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UINT     <span class="meta-string">'I'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_LNG      <span class="meta-string">'l'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ULNG     <span class="meta-string">'L'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_LNG_LNG  <span class="meta-string">'q'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ULNG_LNG <span class="meta-string">'Q'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_FLT      <span class="meta-string">'f'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_DBL      <span class="meta-string">'d'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_BFLD     <span class="meta-string">'b'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_BOOL     <span class="meta-string">'B'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_VOID     <span class="meta-string">'v'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNDEF    <span class="meta-string">'?'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_PTR      <span class="meta-string">'^'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CHARPTR  <span class="meta-string">'*'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ATOM     <span class="meta-string">'%'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ARY_B    <span class="meta-string">'['</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_ARY_E    <span class="meta-string">']'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNION_B  <span class="meta-string">'('</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_UNION_E  <span class="meta-string">')'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_STRUCT_B <span class="meta-string">'&#123;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_STRUCT_E <span class="meta-string">'&#125;'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_VECTOR   <span class="meta-string">'!'</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _C_CONST    <span class="meta-string">'r'</span></span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Code</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>const</td>
</tr>
<tr>
<td>n</td>
<td>in</td>
</tr>
<tr>
<td>N</td>
<td>inout</td>
</tr>
<tr>
<td>o</td>
<td>out</td>
</tr>
<tr>
<td>O</td>
<td>bycopy</td>
</tr>
<tr>
<td>R</td>
<td>byref</td>
</tr>
<tr>
<td>V</td>
<td>oneway</td>
</tr>
</tbody>
</table>
<p>以上信息在具体应用时,可以自定义一个枚举获取.</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">typedef struct objc_method *<span class="function"><span class="keyword">Method</span>;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">struct objc_method <span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    // 方法的名称</span></span><br><span class="line"><span class="comment">    SEL method_name;                                          </span></span><br><span class="line"><span class="comment">    // 方法的参数类型</span></span><br><span class="line"><span class="comment">    char *method_types;                                       </span></span><br><span class="line"><span class="comment">    // 方法的实现(函数指针)</span></span><br><span class="line"><span class="comment">    IMP method_imp;                                           </span></span><br><span class="line"><span class="comment">&#125;</span>                                                            </span><br><span class="line"></span><br><span class="line">根据方法名称获取<span class="function"><span class="keyword">Method</span></span></span><br><span class="line"><span class="function"><span class="title">Method</span> <span class="title">class_getInstanceMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span></span></span><br><span class="line"><span class="function"><span class="title">Method</span> <span class="title">class_getClassMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的方法名称</span></span><br><span class="line"><span class="function"><span class="title">SEL</span> <span class="title">method_getName</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的方法实现</span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">method_getImplementation</span><span class="params">(<span class="keyword">Method</span> m)</span> </span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">class_getMethodImplementation</span><span class="params">(<span class="keyword">Class</span> cls, SEL name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的返回值类型<span class="params">(需手动释放)</span></span></span><br><span class="line"><span class="function"><span class="title">char</span> *<span class="title">method_copyReturnType</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function">//<span class="title">void</span> <span class="title">method_getReturnType</span><span class="params">(<span class="keyword">Method</span> m, char *dst, size_t dst_len)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取指定<span class="title">Method</span>的类型</span></span><br><span class="line"><span class="function"><span class="title">const</span> <span class="title">char</span> *<span class="title">method_getTypeEncoding</span><span class="params">(<span class="keyword">Method</span> m)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>的参数数量</span></span><br><span class="line"><span class="function"><span class="title">unsigned</span> <span class="title">int</span> <span class="title">method_getNumberOfArguments</span><span class="params">(<span class="keyword">Method</span> m)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取<span class="title">Method</span>中第<span class="title">i</span>个参数的类型<span class="params">(Char *类型)</span><span class="params">(需手动释放)</span></span></span><br><span class="line"><span class="function"><span class="title">char</span> *<span class="title">method_copyArgumentType</span><span class="params">(<span class="keyword">Method</span> m, unsigned int <span class="keyword">index</span>)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">获取方法列表</span></span><br><span class="line"><span class="function"><span class="title">Method</span> *<span class="title">class_copyMethodList</span><span class="params">(<span class="keyword">Class</span> cls, unsigned int *outCount)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">设置<span class="title">IMP</span></span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">method_setImplementation</span><span class="params">(<span class="keyword">Method</span> m, IMP imp)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">交换方法实现</span></span><br><span class="line"><span class="function"><span class="title">void</span> <span class="title">method_exchangeImplementations</span><span class="params">(<span class="keyword">Method</span> m1, <span class="keyword">Method</span> m2)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">添加方法</span></span><br><span class="line"><span class="function"><span class="title">BOOL</span> <span class="title">class_addMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name, IMP imp, </span></span></span><br><span class="line"><span class="function"><span class="params">                                 <span class="keyword">const</span> char *types)</span> </span></span><br><span class="line"><span class="function">替换方法                                 </span></span><br><span class="line"><span class="function"><span class="title">IMP</span> <span class="title">class_replaceMethod</span><span class="params">(<span class="keyword">Class</span> cls, SEL name, IMP imp, </span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">const</span> char *types)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">标明需要手动释放的动态内存<span class="params">(如返回值类型/参数类型)</span></span></span><br><span class="line"><span class="function">// 及时释放</span></span><br><span class="line"><span class="function"><span class="title">if</span> <span class="params">(argumentType)</span> <span class="title">free</span><span class="params">(argumentType)</span>;</span></span><br></pre></td></tr></table></figure>
<p>实例演示</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"></span><br><span class="line">    YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Method</span></span><br><span class="line">    Method method = class_getInstanceMethod([person <span class="keyword">class</span>] , <span class="built_in">NSSelectorFromString</span>(<span class="string">@"nameWithArg:arg:arg:arg:arg:"</span>));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Method的方法名称</span></span><br><span class="line">    SEL sel = method_getName(method);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="built_in">NSStringFromSelector</span>(sel));</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取Method的方法实现</span></span><br><span class="line">    IMP imp1 = method_getImplementation(method);</span><br><span class="line">    IMP imp2 = class_getMethodImplementation([person <span class="keyword">class</span>],sel);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Method的返回值类型(需手动释放)</span></span><br><span class="line">    <span class="keyword">char</span> *returnType = method_copyReturnType(method);</span><br><span class="line">    <span class="keyword">if</span> (returnType) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:returnType]);</span><br><span class="line">        free(returnType);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取指定Method的类型</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *typeEncoding = method_getTypeEncoding(method);</span><br><span class="line">    <span class="keyword">if</span> (typeEncoding) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:typeEncoding]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Method的参数数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> arguementCount = method_getNumberOfArguments(method);</span><br><span class="line">    <span class="keyword">if</span> (arguementCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arguementCount; i++) &#123;</span><br><span class="line">            <span class="comment">//获取Method中第i个参数的类型(Char *类型)(需手动释放)</span></span><br><span class="line">            <span class="keyword">char</span> *arguementType = method_copyArgumentType(method, i);</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[<span class="built_in">NSString</span> stringWithUTF8String:arguementType]);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 手动释放</span></span><br><span class="line">            <span class="keyword">if</span> (arguementType) &#123;</span><br><span class="line">                free(arguementType);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置新的方法实现IMP,并返回原先的IMP</span></span><br><span class="line">    IMP imp3 = method_setImplementation(method, imp2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> Method Swizzling</span></span><br><span class="line"><span class="comment"> 一般放在load方法中,并且使用dispatch_once,需要调用 class_addMethod 方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        Class cls = [<span class="keyword">self</span> <span class="keyword">class</span>];</span><br><span class="line">        </span><br><span class="line">        SEL oldSelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"XXXX"</span>);</span><br><span class="line">        SEL newSelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"XXXXXXXX"</span>);</span><br><span class="line">        </span><br><span class="line">        Method oldMethod = class_getInstanceMethod(cls, oldSelector);</span><br><span class="line">        Method newMethod = class_getInstanceMethod(cls, newSelector);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 尝试给旧的方法oldSelector添加新的方法newSelectot的实现,如果已经存在方法实现,则添加失败</span></span><br><span class="line">        <span class="built_in">BOOL</span> isSuccess = class_addMethod(cls, oldSelector, method_getImplementation(newMethod), method_getTypeEncoding(newMethod));</span><br><span class="line">        <span class="keyword">if</span> (isSuccess) &#123; <span class="comment">// 添加成功,那么用旧的方法实现替换新的方法实现</span></span><br><span class="line">            class_replaceMethod(cls, newSelector, method_getImplementation(oldMethod), method_getTypeEncoding(oldMethod));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 旧的方法已经有了实现,直接交换即可</span></span><br><span class="line">            method_exchangeImplementations(newMethod, oldMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">/*    </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">使用 Method Swizzling 的目的通常都是为了给程序增加功能，而不是完全地替换某个功能，所以我们一般都需要在自定义的实现中调用原始的实现。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Swizzling应该总是在+load中执行</span></span><br><span class="line"><span class="comment">在Objective-C中，运行时会自动调用每个类的两个方法。+load会在类初始加载时调用，+initialize会在第一次调用类的类方法或实例方法之前被调用。这两个方法是可选的，且只有在实现了它们时才会被调用。由于method swizzling会影响到类的全局状态，因此要尽量避免在并发处理中出现竞争的情况。+load能保证在类的初始化过程中被加载，并保证这种改变应用级别的行为的一致性。相比之下，+initialize在其执行时不提供这种保证–事实上，如果在应用中没为给这个类发送消息，则它可能永远不会被调用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Swizzling应该总是在dispatch_once中执行</span></span><br><span class="line"><span class="comment">与上面相同，因为swizzling会改变全局状态，所以我们需要在运行时采取一些预防措施。原子性就是这样一种措施，它确保代码只被执行一次，不管有多少个线程。GCD的dispatch_once可以确保这种行为，我们应该将其作为method swizzling的最佳实践。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取方法列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 方法名称数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_getMethodList:(Class)<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 方法列表数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> methodCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 获取方法列表</span></span><br><span class="line">    Method *methodList = class_copyMethodList(<span class="keyword">class</span>, &amp;methodCount);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储方法名称</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    <span class="keyword">if</span> (methodList) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methodCount; i ++) &#123;</span><br><span class="line">            <span class="comment">// 获取方法</span></span><br><span class="line">            Method method = methodList[i];</span><br><span class="line">            <span class="comment">// 获取方法名称</span></span><br><span class="line">            SEL sel = method_getName(method);</span><br><span class="line">            </span><br><span class="line">            [array addObject:<span class="built_in">NSStringFromSelector</span>(sel)];</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 手动释放</span></span><br><span class="line">        free(methodList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:array];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 交换实例方法实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @param aSEL 方法一的名称</span></span><br><span class="line"><span class="comment"> @param bSEL 方法二的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)ya_exchangeInstanceMethod:(Class)<span class="keyword">class</span> firstMethod:(SEL)aSEL secondMethod:(SEL)bSEL &#123;</span><br><span class="line">    Method aMethad = class_getInstanceMethod(<span class="keyword">class</span>, aSEL);</span><br><span class="line">    Method bMethod = class_getInstanceMethod(<span class="keyword">class</span>, bSEL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换方法实现</span></span><br><span class="line">    method_exchangeImplementations(aMethad, bMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 交换类方法实现</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @param aSEL 方法一的名称</span></span><br><span class="line"><span class="comment"> @param bSEL 方法二的名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="keyword">void</span>)ya_exchangeClassMethod:(Class)<span class="keyword">class</span> firstMethod:(SEL)aSEL secondMethod:(SEL)bSEL &#123;</span><br><span class="line">    Method aMethad = class_getClassMethod(<span class="keyword">class</span>, aSEL);</span><br><span class="line">    Method bMethod = class_getClassMethod(<span class="keyword">class</span>, bSEL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 交换方法实现</span></span><br><span class="line">    method_exchangeImplementations(aMethad, bMethod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 为类添加名为newSEL的(实例)方法</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @param aSEL 新的方法名称</span></span><br><span class="line"><span class="comment"> @param bSEL 已经存在的方法名称</span></span><br><span class="line"><span class="comment"> @return 是否添加成功</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">BOOL</span>)ya_addMethod:(Class)<span class="keyword">class</span> newSEL:(SEL)aSEL existSEL:(SEL)bSEL &#123;</span><br><span class="line">    <span class="comment">// 获取已经存在的方法</span></span><br><span class="line">    Method method = class_getInstanceMethod(<span class="keyword">class</span>, bSEL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取已经存在的方法的实现</span></span><br><span class="line">    IMP imp = class_getMethodImplementation(<span class="keyword">class</span>, bSEL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取type</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *type = method_getTypeEncoding(method);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 给class添加名称为aSEL的方法实现</span></span><br><span class="line">    <span class="keyword">return</span> class_addMethod(<span class="keyword">class</span>, aSEL, imp, type);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    如果父类中已经有该名称的方法,那么调用后将重写该方法</span></span><br><span class="line"><span class="comment">    如果本类中已经有了该名称的方法实现,那么将添加失败</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Property"><a href="#Property" class="headerlink" title="Property"></a>Property</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</span><br><span class="line"></span><br><span class="line">属性相关信息</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;         </span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *value;          </span><br><span class="line">&#125; objc_property_attribute_t;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">获取属性</span><br><span class="line">objc_property_t class_getProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"></span><br><span class="line">获取属性列表</span><br><span class="line">objc_property_t *class_copyPropertyList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">获取属性信息列表</span><br><span class="line">objc_property_attribute_t *property_copyAttributeList(objc_property_t property, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">获取属性信息中某个Value</span><br><span class="line"><span class="keyword">char</span> *property_copyAttributeValue(objc_property_t property, <span class="keyword">const</span> <span class="keyword">char</span> *attributeName)</span><br><span class="line"></span><br><span class="line">添加属性</span><br><span class="line"><span class="built_in">BOOL</span> class_addProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount)</span><br><span class="line"></span><br><span class="line">替换属性</span><br><span class="line"><span class="keyword">void</span> class_replaceProperty(Class cls, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount)</span><br><span class="line"></span><br><span class="line">获取属性名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *property_getName(objc_property_t property) </span><br><span class="line"></span><br><span class="line">获取属性相关信息</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *property_getAttributes(objc_property_t property)</span><br></pre></td></tr></table></figure>
<p>实例演示</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line"></span><br><span class="line">YAPerson *person = [[YAPerson alloc] init];</span><br><span class="line">    Class cls = [person class];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性</span></span><br><span class="line">    <span class="keyword">objc_property_t</span> property = class_getProperty(cls, <span class="string">"school"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性名称</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *propertyName = property_getName(property);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性信息列表</span></span><br><span class="line">    <span class="comment">// objc_property_attribute_t *property_copyAttributeList(objc_property_t property, unsigned int *outCount)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性相关信息</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *propertyAttributes = property_getAttributes(property);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyAttributes); <span class="comment">// 打印 T@"NSObject",W,N,V_school</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据获取属性信息中的name获取对应的Value</span></span><br><span class="line">    <span class="keyword">char</span> *propertyValue = property_copyAttributeValue(property, <span class="string">"T"</span>); <span class="comment">// 类型</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,propertyValue);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     T 类型 例如:NSObject</span></span><br><span class="line"><span class="comment">     V 值(成员变量) 例如 _school</span></span><br><span class="line"><span class="comment">     C copy</span></span><br><span class="line"><span class="comment">     N nonatommic</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加属性</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> type = &#123; <span class="string">"T"</span>, [[NSString stringWithFormat:@<span class="string">"@\"%@\""</span>,NSStringFromClass([NSString class])] UTF8String] &#125;; <span class="comment">//type</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> ownership0 = &#123; <span class="string">"C"</span>, <span class="string">""</span> &#125;; <span class="comment">// C = copy</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> ownership = &#123; <span class="string">"N"</span>, <span class="string">""</span> &#125;; <span class="comment">//N = nonatomic</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> backingivar  = &#123; <span class="string">"V"</span>, [[NSString stringWithFormat:@<span class="string">"_%s"</span>, <span class="string">"propertyName"</span>] UTF8String] &#125;;  <span class="comment">//variable name</span></span><br><span class="line">    <span class="keyword">objc_property_attribute_t</span> attrs[] = &#123; type, ownership0, ownership, backingivar &#125;;</span><br><span class="line">    <span class="keyword">if</span> (class_addProperty(cls, <span class="string">"propertyName"</span>, attrs, <span class="number">4</span>)) &#123;</span><br><span class="line">        NSLog(@<span class="string">"添加成功"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 替换属性</span></span><br><span class="line">    <span class="comment">//void class_replaceProperty(Class cls, const char *name, const objc_property_attribute_t *attributes, unsigned int attributeCount)</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取类的属性列表</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 属性列表数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (NSArray *)ya_getPropertyList:(Class)<span class="class"><span class="keyword">class</span> &#123;</span></span><br><span class="line">    <span class="comment">// 私有/公有/类扩展中的所有属性数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取属性列表</span></span><br><span class="line">    <span class="keyword">objc_property_t</span> *propertyList = class_copyPropertyList(class, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储属性名称</span></span><br><span class="line">    NSMutableArray *<span class="built_in">array</span> = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span>* c_propertyName = property_getName(propertyList[i]);</span><br><span class="line">        [<span class="built_in">array</span> addObject:[NSString stringWithUTF8String:c_propertyName]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动释放</span></span><br><span class="line">    <span class="built_in">free</span>(propertyList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [NSArray arrayWithArray:<span class="built_in">array</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Protocol"><a href="#Protocol" class="headerlink" title="Protocol"></a>Protocol</h3><p>本部分应用较少,未做详细实践.</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> objc_protocol_list &#123;</span><br><span class="line">    <span class="keyword">struct</span> objc_protocol_list *next;</span><br><span class="line">    <span class="keyword">long</span> count;</span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Protocol *list[<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">是否遵循协议</span><br><span class="line"><span class="built_in">BOOL</span> class_conformsToProtocol(Class cls, Protocol *protocol)</span><br><span class="line"></span><br><span class="line">协议列表</span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *class_copyProtocolList(Class cls, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *objc_copyProtocolList(<span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">Protocol * __<span class="keyword">unsafe_unretained</span> *protocol_copyProtocolList(Protocol *proto, <span class="keyword">unsigned</span> <span class="keyword">int</span> *outCount)</span><br><span class="line"></span><br><span class="line">动态添加协议</span><br><span class="line"><span class="built_in">BOOL</span> class_addProtocol(Class cls, Protocol *protocol) </span><br><span class="line"></span><br><span class="line">获取指定名称的协议</span><br><span class="line">Protocol *objc_getProtocol(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"></span><br><span class="line">协议A是否遵循协议B</span><br><span class="line"><span class="built_in">BOOL</span> protocol_conformsToProtocol(Protocol *proto, Protocol *other)</span><br><span class="line"></span><br><span class="line">两个协议是否相等</span><br><span class="line"><span class="built_in">BOOL</span> protocol_isEqual(Protocol *proto, Protocol *other)</span><br><span class="line"></span><br><span class="line">获取某个协议的名称</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *protocol_getName(Protocol *p)</span><br><span class="line"></span><br><span class="line">动态生成协议</span><br><span class="line">Protocol *objc_allocateProtocol(<span class="keyword">const</span> <span class="keyword">char</span> *name)</span><br><span class="line"><span class="keyword">void</span> objc_registerProtocol(Protocol *proto) </span><br><span class="line"></span><br><span class="line">给协议添加方法</span><br><span class="line"><span class="keyword">void</span> protocol_addMethodDescription(Protocol *proto, SEL name, <span class="keyword">const</span> <span class="keyword">char</span> *types, <span class="built_in">BOOL</span> isRequiredMethod, <span class="built_in">BOOL</span> isInstanceMethod) </span><br><span class="line"></span><br><span class="line">给协议添加协议</span><br><span class="line"><span class="keyword">void</span> protocol_addProtocol(Protocol *proto, Protocol *addition) </span><br><span class="line"></span><br><span class="line">给协议添加属性</span><br><span class="line"><span class="keyword">void</span> protocol_addProperty(Protocol *proto, <span class="keyword">const</span> <span class="keyword">char</span> *name, <span class="keyword">const</span> objc_property_attribute_t *attributes, <span class="keyword">unsigned</span> <span class="keyword">int</span> attributeCount, <span class="built_in">BOOL</span> isRequiredProperty, <span class="built_in">BOOL</span> isInstanceProperty)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 根据class获取遵循的协议列表</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> @param class 类</span></span><br><span class="line"><span class="comment"> @return 协议名称列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">+ (<span class="built_in">NSArray</span> *)ya_getProtocolList:(Class)<span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="comment">// 协议列表数量</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取协议列表</span></span><br><span class="line">    __<span class="keyword">unsafe_unretained</span> Protocol **protocolList = class_copyProtocolList(<span class="keyword">class</span>, &amp;count);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储协议</span></span><br><span class="line">    <span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>; i &lt; count; i ++) &#123;</span><br><span class="line">        <span class="comment">// 获取协议</span></span><br><span class="line">        Protocol *protocol = protocolList[i];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取协议名称</span></span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *c_protocolName = protocol_getName(protocol);</span><br><span class="line">        </span><br><span class="line">        [array addObject:[<span class="built_in">NSString</span> stringWithUTF8String:c_protocolName]];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 手动释放</span></span><br><span class="line">    free(protocolList);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSArray</span> arrayWithArray:array];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、技能"><a href="#二、技能" class="headerlink" title="二、技能"></a>二、技能</h2><h3 id="消息转发"><a href="#消息转发" class="headerlink" title="消息转发"></a>消息转发</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sel_isEqual(sel, <span class="built_in">NSSelectorFromString</span>(<span class="string">@"ss"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 要求参数要匹配</span></span><br><span class="line">        [YARuntime ya_addMethod:[<span class="keyword">self</span> <span class="keyword">class</span>] newSEL:sel existSEL:<span class="keyword">@selector</span>(printPersonalInfo)];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (id)<span class="string">forwardingTargetForSelector:</span>(SEL)aSelector &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel_isEqual(aSelector, NSSelectorFromString(@<span class="string">"ss"</span>))) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转发给已经存在的对象</span></span><br><span class="line">        <span class="keyword">return</span> [[YAPerson alloc] init];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> <span class="string">forwardingTargetForSelector:</span>aSelector];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (NSMethodSignature *)<span class="string">methodSignatureForSelector:</span>(SEL)aSelector &#123;</span><br><span class="line">    NSMethodSignature *signature = [<span class="keyword">super</span> <span class="string">methodSignatureForSelector:</span>aSelector];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 没有找到signature(方法签名),只能手动提供</span></span><br><span class="line">    <span class="keyword">if</span> (signature == nil) &#123;</span><br><span class="line">        signature = [NSMethodSignature <span class="string">signatureWithObjCTypes:</span><span class="string">"@@:"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> signature;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)anInvocation &#123;</span><br><span class="line">    YAPerson *personClass = [[YAPerson alloc] init];</span><br><span class="line">    SEL sel = anInvocation.selector;</span><br><span class="line">    <span class="keyword">if</span> ([personClass <span class="string">respondsToSelector:</span>sel]) &#123;</span><br><span class="line">        <span class="comment">// 最后一次机会</span></span><br><span class="line">        [anInvocation <span class="string">invokeWithTarget:</span>personClass];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 回天乏力</span></span><br><span class="line">        [self <span class="string">doesNotRecognizeSelector:</span>sel];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><blockquote>
<p>不会做菜的程序员不是好男人。</p>
</blockquote>
<p>YADeveloper 继承自 YAMan,想让YADeveloper实例对象同时具备响应 YAMan方法和 YACook方法的能力。</p>
<p>YAMan:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAMan </span>: NSObject</span><br><span class="line">- (void)printMan;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YAMan</span><br><span class="line">- (void)printMan &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是一个男人"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure>
<p>YACook:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YACook </span>: NSObject </span><br><span class="line">- (void)printCook;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> YACook</span><br><span class="line">- (void)printCook &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是个会做菜的人"</span>);</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure>
<p>YADeveloper:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@class</span> YACook;</span><br><span class="line"></span><br><span class="line"><span class="variable">@interface</span> <span class="attribute">YADeveloper </span>: YAMan</span><br><span class="line"><span class="variable">@property</span> (nonatomic,strong) YACook *cook;</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printDev</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明YACook的方法,使编译通过</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printCook</span>;</span><br><span class="line">@<span class="selector-tag">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">implementation</span> <span class="selector-tag">YADeveloper</span></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">printDev</span> &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"我是个会写程序的人"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (id)<span class="selector-tag">forwardingTargetForSelector</span><span class="selector-pseudo">:(SEL)aSelector</span> &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (sel_isEqual(aSelector, NSSelectorFromString(@<span class="string">"printCook"</span>))) &#123;</span><br><span class="line">        <span class="comment">// 需要预先对self.cook初始化</span></span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">self</span><span class="selector-class">.cook</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 或者直接创建</span></span><br><span class="line">        <span class="comment">// return [[YACook alloc] init];</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-attr">[super forwardingTargetForSelector:aSelector]</span>;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure>
<h3 id="关联引用"><a href="#关联引用" class="headerlink" title="关联引用"></a>关联引用</h3><p>注意点:</p>
<ol>
<li>objc_removeAssociatedObjects 函数一般不可手动调用，因为这个函数会移除一个对象的所有关联对象，将该对象恢复成“原始”状态。这样做就很有可能把别人添加的关联对象也一并移除，这并不是我们所希望的。所以一般的做法是通过给 objc_setAssociatedObject 函数传入 nil 来移除某个已有的关联对象。</li>
<li>关联对象与被关联对象本身的存储并没有直接的关系，它是存储在单独的哈希表中的。<h4 id="给分类添加weak属性"><a href="#给分类添加weak属性" class="headerlink" title="给分类添加weak属性"></a>给分类添加weak属性</h4><blockquote>
<p>给任意对象A 添加 weak属性 B</p>
</blockquote>
</li>
</ol>
<p>问题关键点:在属性销毁的时候，将其置为空(或者说在关联对象销毁的时候，使objc_getAssociatedObject得到的是nil)。</p>
<h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>通过继承关联对象B ，重写其dealloc方法即可适时把A中的关联对象返回值设置为nil，达到自动置空的目的，这也是最本能的方法。</p>
<p>给NSObject添加分类，也即任何继承自NSObject的对象都可以有weak属性。</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> NSObject (YAWeakProperty)</span><br><span class="line"><span class="variable">@property</span> (nonatomic, weak) YAProperty *property;</span><br><span class="line"><span class="variable">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">@implementation</span> NSObject (YAWeakProperty)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const static char *key = "key";</span></span><br><span class="line"></span><br><span class="line">- (id)property &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">objc_getAssociatedObject</span>(self, <span class="variable">@selector</span>(property));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">setProperty</span><span class="selector-pseudo">:(YAProperty</span> *)<span class="selector-tag">property</span> &#123;</span><br><span class="line">    <span class="selector-tag">objc_setAssociatedObject</span>(self, <span class="variable">@selector</span>(property), property, OBJC_ASSOCIATION_ASSIGN);</span><br><span class="line">    <span class="selector-attr">[property setAssociate:self selector:@selector(setProperty:)]</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure>
<p>关联引用的key一般使用getter方法的selector，此时get方法中的key也可使用_cmd，二者等效。</p>
<p>属性的实现:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAProperty</span> : <span class="title">NSObject</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setAssociate:(<span class="built_in">NSObject</span> *)associatedObject selector:(SEL)sel;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类扩展</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAProperty</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">   __<span class="keyword">weak</span> <span class="keyword">id</span> _associatedObject;</span><br><span class="line">   SEL _sel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAProperty</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setAssociate:(<span class="built_in">NSObject</span> *)associatedObject selector:(SEL)sel &#123;</span><br><span class="line">    _associatedObject = associatedObject;</span><br><span class="line">    _sel = sel;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">id</span>, SEL,<span class="keyword">id</span>)) objc_msgSend)(_associatedObject, _sel, <span class="literal">nil</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>然而有个问题:添加的属性继承自NSObject时非常完美，但是实际项目中不可能给任意对象添加的属性都是NSObject，有可能是NSString/NSArray/NSDictionary/NSSet等等。那么就只能继承自NSString/NSArray/NSDictionary/NSSet等系统类，这样会出现一系列一系列一系列问题，苹果并不建议我们使用NSString/NSArray/NSDictionary/NSSet等的派生类(这些类已经足够好了，不需要画蛇添足)。</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><blockquote>
<p>用一个NSPointerArray（弱引用类型的数组）包一层就可以了。虽然关联属性的policy不支持weak，但是你可以把要关联的对象放入一个弱引用数组里面，然后把这个弱引用数组设置为关联对象，每次取值的时候，只需要从这个弱引用数组里面取就可以了。一样可以达到关联弱引用对象的效果。</p>
</blockquote>
<h5 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h5><p>A 关联 C<br>B 关联 C<br>C 销毁 通知B<br>B 再告诉 A</p>
<h5 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h5><p>阅读大神博客发现的新方法，见2019年新写的文章： <a href="https://blog.chenyalun.com/2019/01/20/Weak%20Associated%20Object/">Weak Associated Object</a></p>
<h2 id="三、要点"><a href="#三、要点" class="headerlink" title="三、要点"></a>三、要点</h2><h3 id="free"><a href="#free" class="headerlink" title="free()"></a>free()</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>() 函数用来释放动态分配的内存空间，其原型为：</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">free</span> <span class="params">(<span class="keyword">void</span>* ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>() 可以释放由 <span class="built_in">malloc</span>()、<span class="built_in">calloc</span>()、<span class="built_in">realloc</span>() 分配的内存空间，以便其他程序再次使用。</span><br><span class="line"></span><br><span class="line"><span class="comment">// 及时释放字符串常量</span></span><br><span class="line"><span class="keyword">if</span> (argumentType) <span class="built_in">free</span>(argumentType);</span><br></pre></td></tr></table></figure>
<h3 id="NONNULL"><a href="#NONNULL" class="headerlink" title="NONNULL"></a>NONNULL</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NS_ASSUME_NONNULL_BEGIN</span>和<span class="built_in">NS_ASSUME_NONNULL_END</span>。</span><br><span class="line">在这两个宏之间的代码，所有简单指针对象都被假定为 <span class="keyword">nonnull</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define NS_ASSUME_NONNULL_BEGIN _Pragma(<span class="meta-string">"clang assume_nonnull begin"</span>)</span></span><br><span class="line"><span class="meta">#define NS_ASSUME_NONNULL_END   _Pragma(<span class="meta-string">"clang assume_nonnull end"</span>)</span></span><br></pre></td></tr></table></figure>
<h3 id="covariant"><a href="#covariant" class="headerlink" title="__covariant"></a>__covariant</h3><figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__covariant</span> - 协变性，子类型可以强转到父类型（里氏替换原则）</span><br><span class="line"><span class="variable">__contravariant</span> - 逆变性，父类型可以强转到子类型（WTF）</span><br></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"><span class="variable">__kindof</span></span><br></pre></td></tr></table></figure>
<h3 id="内联"><a href="#内联" class="headerlink" title="内联"></a>内联</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="strong">__attribute__</span>((always_inline)) 的意思是强制内联</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考并感谢<br><a href="http://www.cnblogs.com/ludashi/p/6294112.html" target="_blank" rel="noopener">青玉伏案</a><br><a href="http://southpeak.github.io/2014/11/06/objective-c-runtime-4/" target="_blank" rel="noopener">南峰子</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[开源项目：YAScrollPlaceView]]></title>
      <url>http://blog.chenyalun.com/2017/10/01/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%EF%BC%9AYAScrollPlaceView/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2019.8.4 补充内容</p>
</blockquote>
<p></p><p align="center"> 可以给UIScrollView、UITableView添加头尾视图。 </p><br><a id="more"></a><p></p>
<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>百度畅听是我工作后的第一个项目，大概就是手百里面的“喜马拉雅”。</p>
<p>某一天UE提了个需求，大意就是在<code>UITableView</code>底部加个logo图片，要求这张图片能随着<code>UITableViewCell</code>的滑动而跟着滑动。乍一想，可以使用直接使用<code>UITableView</code>的<code>tableFooterView</code>，赋值个<code>UIImageView</code>即可，可是还有一个要求：当数据很少的时候，这个logo图片必须紧挨着屏幕最下方。很显然，<code>tableFooterView</code>自己会跑到顶部，满足不了需求。</p>
<p>关键是，那一阵子刚读了<code>MJRefresh</code>的源码，又痴迷于<code>Runtime</code>的各种魔法，走火入魔的厉害，还特别想写一个开源项目逞能，于是这个能给<code>UIScrollView</code>添加头部、尾部视图的框架产生了。</p>
<p>项目地址:<a href="https://github.com/ChenYalun/YAScrollPlaceView" target="_blank" rel="noopener">https://github.com/ChenYalun/YAScrollPlaceView</a></p>
<h1 id="二、思路"><a href="#二、思路" class="headerlink" title="二、思路"></a>二、思路</h1><p>思路很简单。</p>
<ol>
<li>使用KVO监听<code>UIScrollView</code>的<code>contentSize</code>和<code>contentOffset</code>。</li>
<li><p>根据<code>contentSize</code>确定FooterView的位置。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line">HeaderView<span class="selector-class">.y</span> = -size.<span class="attribute">height</span>;</span><br><span class="line">FooterView<span class="selector-class">.y</span> = contentSize.<span class="attribute">height</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置<code>UIScrollView</code>的<code>contentInset</code>，给占位视图腾出空间。</p>
</li>
<li>根据<code>contentOffset.y</code>确定当前占位视图是否可以跟着滑动。<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="built_in">if</span> (contentOffset.y + scrollView.<span class="built_in">height</span> - scrollView.contentInset.bottom - scrollView.contentSize.<span class="built_in">height</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    FooterView.y = contentOffset.y + scrollView.<span class="built_in">height</span> - scrollView.contentInset.bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>大致就是这样，剩下的就是时机和接口了。</p>
<ol>
<li><p>在<code>didMoveToSuperview</code>中添加KVO，在<code>willMoveToSuperview</code>中移除KVO。</p>
<p> 这两个成双成对，之所以不放在<code>dealloc</code>里面移除，是考虑到有同一个视图被<code>didMoveToSuperview</code>多次的情况。当然，视图<code>dealloc</code>的时候是会调用<code>willMoveToSuperview</code>方法的，只不过这个<code>newSuperview</code>为空。</p>
</li>
<li><p>给<code>UIScrollView</code>添加关联属性。<br>无需多言，没有侵入性。</p>
 <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (YAScrollHeaderView *)<span class="selector-tag">scrollHeaderView</span> &#123;</span><br><span class="line">    <span class="selector-tag">return</span> <span class="selector-tag">objc_getAssociatedObject</span>(self, <span class="variable">@selector</span>(scrollHeaderView));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">setScrollHeaderView</span><span class="selector-pseudo">:(YAScrollHeaderView</span> *)<span class="selector-tag">scrollHeaderView</span> &#123;</span><br><span class="line">    <span class="selector-tag">if</span> (scrollHeaderView == self.scrollHeaderView) <span class="selector-tag">return</span> ;</span><br><span class="line">    <span class="selector-attr">[self.scrollHeaderView removeFromSuperview]</span>;</span><br><span class="line">    <span class="selector-attr">[self addSubview:scrollHeaderView]</span>;</span><br><span class="line">    <span class="selector-tag">objc_setAssociatedObject</span>(self, <span class="variable">@selector</span>(scrollHeaderView), scrollHeaderView, OBJC_ASSOCIATION_RETAIN_NONATOMIC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>结构设计</p>
</li>
</ol>
<ul>
<li><code>YAScrollHeaderView</code>和<code>YAScrollFooterView</code>均继承自<code>YAScrollPlaceView</code>。（这是模仿了<code>MJRefresh</code>）。核心逻辑统一在上层实现。</li>
<li><code>YAScrollHeaderView</code>在初始化的时候设置自己<code>scrollPlaceViewType</code>为<code>YAScrollPlaceViewTypeHeader</code>。</li>
<li><code>YAScrollFooterView</code>在初始化的时候设置自己<code>scrollPlaceViewType</code>为<code>YAScrollPlaceViewTypeFooter</code>。<br>这样，<code>YAScrollPlaceView</code>就可以根据子类来确定占位视图的逻辑。</li>
</ul>
<h1 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h1><p>暴露出来的接口很清晰。<code>isFixed</code>用于设置占位视图是否在offset超出可见区域（过大或者过小）时跟随着滑动。这个占位视图可以动态显示或者隐藏，<code>canAnimate</code>设置其动画效果，<code>showAnimationDuration</code>和<code>dismissAnimationDuration</code>不必多说，是动画时间。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> isFixed; <span class="comment">///&lt; default NO.Fix the place view to the top or bottom.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> canAnimate; <span class="comment">///&lt; default YES.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">CGFloat</span> height; <span class="comment">///&lt; default 0</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>, <span class="keyword">readonly</span>) <span class="built_in">BOOL</span> isVisible;; <span class="comment">///&lt; default NO.</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSTimeInterval</span> showAnimationDuration;    <span class="comment">///&lt; default 0.15</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">NSTimeInterval</span> dismissAnimationDuration;   <span class="comment">///&lt; default 0.15</span></span><br><span class="line">- (<span class="keyword">void</span>)showWithCompletion:(YAScrollPlaceViewShowCompletion)completion;</span><br><span class="line">- (<span class="keyword">void</span>)dismissWithCompletion:(YAScrollPlaceViewDismissCompletion)completion;</span><br></pre></td></tr></table></figure>
<h3 id="给ScrollView设置占位图片"><a href="#给ScrollView设置占位图片" class="headerlink" title="给ScrollView设置占位图片"></a>给ScrollView设置占位图片</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">UIImage *headerImage = [UIImage imageNamed:@<span class="string">"header"</span>]<span class="comment">;</span></span><br><span class="line">YAScrollHeaderView *headerView = [YAScrollHeaderView <span class="keyword">scrollHeaderViewWithSize:CGSizeMake(self.view.bounds.size.width, </span><span class="number">100</span>) <span class="keyword">backgroundImage:headerImage];</span></span><br><span class="line"><span class="keyword">self.scrollView.scrollHeaderView </span>= headerView<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>左图：数据较多时，视图固定（也可以配置不固定）；<br>右图：数据极少时，视图不固定、跟着滑动（也可以配置为固定）。</p>
<p><img src="https://image.chenyalun.com/2017/10/01/003.gif" style="zoom:40%"><img src="https://image.chenyalun.com/2017/10/01/005.gif" style="zoom:40%"></p>
<h3 id="给tableView设置空白占位"><a href="#给tableView设置空白占位" class="headerlink" title="给tableView设置空白占位"></a>给tableView设置空白占位</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">YAScrollFooterView *footerView = [YAScrollFooterView new]<span class="comment">;</span></span><br><span class="line">footerView.height = <span class="number">100</span><span class="comment">;</span></span><br><span class="line">footerView.isFixed = YES<span class="comment">;</span></span><br><span class="line">self.tableView.<span class="keyword">scrollFooterView </span>= footerView<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态地显示或者隐藏"><a href="#动态地显示或者隐藏" class="headerlink" title="动态地显示或者隐藏"></a>动态地显示或者隐藏</h3><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">self</span>.tableView.scrollHeaderView = <span class="built_in">self</span>.<span class="keyword">header</span>;</span><br><span class="line"><span class="built_in">self</span>.<span class="keyword">header</span>.showAnimationDuration = <span class="number">0.8</span>f;</span><br><span class="line"><span class="built_in">self</span>.<span class="keyword">header</span>.dismissAnimationDuration = <span class="number">0.8</span>f;</span><br><span class="line"><span class="meta">[</span><span class="built_in">self</span>.<span class="keyword">header</span> show<span class="meta">]</span>;</span><br><span class="line">// <span class="meta">[</span><span class="built_in">self</span>.<span class="keyword">header</span> dismissWithCompletion:nil<span class="meta">]</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://image.chenyalun.com/2017/10/01/001.gif" style="zoom:40%"><img src="https://image.chenyalun.com/2017/10/01/002.gif" style="zoom:40%"></p>
<h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>整体而言，比较简单，没有啥复杂的逻辑。不过作为我的第一个开源框架，还挺有纪念意义的。有一方有二，二生三，三生万物。</p>
<blockquote>
<p>后记<br>2017年10月，离开北京，去渡劫。<br>2018年秋，存在两年的百度畅听正式下线。喜马拉雅、懒人听书，还活着。<br>2019年8月，整理博客时，完善文章内容并修复框架的bug。</p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 开源项目 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查找算法总结]]></title>
      <url>http://blog.chenyalun.com/2017/04/21/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p align="center"> 关于查找算法。 </p>

<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本文”完全二叉树”的定义采用国内定义<br>B-树 即 B树,两者是相同概念,而非指二叉搜索树(百度百科)</p>
</blockquote>
<h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>1.国内早期教材中，满二叉树一般指 perfect binary tree，所以会有满二叉树是完全二叉树的一个特例的说法.</p>
<p>2.树的深度的定义，有的根结点从0开始计数，有的从1开始计数.</p>
<p>3.结点 与 节点 是对Node的翻译,可以看做等同.</p>
<h2 id="维基百科定义"><a href="#维基百科定义" class="headerlink" title="维基百科定义"></a>维基百科定义</h2><p>1.根二叉树(Rooted Binary Tree)：<br>有一个根结点，每个结点至多有两个孩子。</p>
<p>2.满二叉树(Full Binary Tree)：<br>要么是叶子结点(结点的度为0)，要么结点同时具有左右子树(结点的度为2)。</p>
<p>3.完全二叉树(Complete Binary Tree)：<br>每层结点都完全填满，在最后一层上如果不是满的，则只缺少右边的若干结点。</p>
<p>4.完美二叉树(Perfect Binary Tree)<br>所有的非叶子结点都有两个孩子，所有的叶子结点都在同一层。即每层结点都完全填满。</p>
<p>5.无限完全二叉树(Infinite Complete Binary Tree)：    每个结点都有两个孩子，结点的层数是无限的。</p>
<p>6.平衡二叉树(Balanced Binary Tree)：<br>也称为AVL树，它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<p><strong>满二叉树(Full Binary Tree)</strong><br>如果一棵二叉树的结点要么是叶子要么有两个孩子结点,则为满二叉树</p>
<p>性质:<br>1.总结点个数呈现个数为:0 1 3 7 15…满足2^(n) -1,其中n为树的深度(最大层)</p>
<p>2.第k层(k不为0)结点个数:1 2 4 8…满足2^(k - 1)</p>
<p>3.满二叉树是完全二叉树</p>
<p><strong>完全二叉树(Complete Binary Tree)</strong><br>若设二叉树的深度为h，除第 h 层外，其它各层 (1～h-1) 的结点数都达到最大个数，第 h 层所有的结点都连续集中在最左边，这就是完全二叉树。</p>
<p>性质:完全二叉树中度为1的结点数只有两种可能0或1,那么:<br>总结点数为n,有  <strong>n0=n/2</strong> 或 <strong>n0=(n+1)/2</strong></p>
<h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><p>顺序存储的排序数组<br><img src="http://static.chenyalun.com/2017/04/21/170421004.jpg" alt><br>插入和删除的时候时间复杂度达到O(n),顺序存储结构不适于动态的情况</p>
<p>链式存储<br><img src="http://static.chenyalun.com/2017/04/21/170421005.jpg" alt><br>链表的查找需要O(n)</p>
<h1 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h1><p>查找表:由同一类型的数据元素构成的集合.<br>关键字:数据元素中某个数据项的值.<br>主关键字:可以唯一地标识一个记录.<br>次关键字:可以识别多个数据元素.<br>查找:根据给定的某个值,在查找表中确定一个其关键字等于给定值的数据元素(或记录).<br>静态查找表:只作查找操作的查找表.<br>动态查找表:在查找过程中同时插入查找表中不存在的数据元素,或者从查找表中删除已经存在的某个数据元素.</p>
<h2 id="顺序表查找"><a href="#顺序表查找" class="headerlink" title="顺序表查找"></a>顺序表查找</h2><p>顺序查找(线性查找):从表中第一个记录开始,逐个进行记录的关键字和给定值的比较.</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 顺序查找的实现</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sequentialSearch</span><span class="params">(key, numbers)</span></span><span class="symbol">:</span></span><br><span class="line">    length = len(numbers)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(length)<span class="symbol">:</span></span><br><span class="line">        <span class="comment"># 查找成功返回索引</span></span><br><span class="line">        <span class="keyword">if</span> key == numbers[i]<span class="symbol">:</span></span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line">    <span class="comment"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>最好情况:在第一个位置找到,时间复杂度为O(1)<br>最坏情况:在最后一个位置找到,时间复杂度O(n)<br>查找不成功:时间复杂度O(n)<br>平均查找次数:(n+1)/2<br>平均时间复杂度:O(n)</p>
<h2 id="有序表查找"><a href="#有序表查找" class="headerlink" title="有序表查找"></a>有序表查找</h2><h3 id="1-二分查找"><a href="#1-二分查找" class="headerlink" title="1.二分查找"></a>1.二分查找</h3><p> 折半查找(二分查找):在线性表中的记录有序的前提下进行查找.取中间元素作为比较对象,若给定值与中间元素相等,则查找成功,若给定值小于中间元素,则在中间元素的左半区继续查找,若给定值大于中间元素,则在中间元素的右半区继续查找,不断重复查找过程,直到查找成功,或查找失败.</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 二分查找的实现</span></span><br><span class="line">def binarySearch(<span class="keyword">key</span>, numbers):</span><br><span class="line">    <span class="meta"># 左边界</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    <span class="meta"># 右边界</span></span><br><span class="line">    high = len(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="meta"># 中间元素索引</span></span><br><span class="line">        <span class="keyword">mid</span> = (low + high) / <span class="number">2</span></span><br><span class="line">        <span class="meta"># 查找成功</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] == <span class="keyword">key</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">mid</span></span><br><span class="line">        <span class="meta"># 在左区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &gt; <span class="keyword">key</span>:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">        <span class="meta"># 在右区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &lt; <span class="keyword">key</span>:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">    <span class="meta"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p>最好情况:是中间元素,一次即可找到,时间复杂度O(1)<br>最坏情况:完全二叉树的深度加1,即floor(logn) + 1次,时间复杂度O(logn).(注意:logn这里指以2为底,floor表示向下取整)</p>
<h3 id="2-插值查找"><a href="#2-插值查找" class="headerlink" title="2.插值查找"></a>2.插值查找</h3><p>二分查找的优化版,核心是插值公式:<br>(key - numbers[low]) / (numbers[high] - numbers[low])</p>
<p>核心代码:</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 插值</span></span><br><span class="line">mid = low + <span class="comment">(high - low)</span> * <span class="comment">(key - numbers[low])</span> / <span class="comment">(numbers[high] - numbers[low])</span></span><br></pre></td></tr></table></figure>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 插值查找的实现</span></span><br><span class="line">def interpolationSearch(<span class="keyword">key</span>, numbers):</span><br><span class="line">    <span class="meta"># 左边界</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    <span class="meta"># 右边界</span></span><br><span class="line">    high = len(numbers) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="meta"># 核心代码</span></span><br><span class="line">        <span class="keyword">mid</span> = low + (high - low) * (<span class="keyword">key</span> - numbers[low]) / (numbers[high] - numbers[low])</span><br><span class="line">        <span class="meta"># 查找成功</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] == <span class="keyword">key</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">mid</span></span><br><span class="line">        <span class="meta"># 在左区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &gt; <span class="keyword">key</span>:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">        <span class="meta"># 在右区间</span></span><br><span class="line">        <span class="keyword">if</span> numbers[<span class="keyword">mid</span>] &lt; <span class="keyword">key</span>:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">    <span class="meta"># 查找失败返回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<p>从时间复杂度上,依然是O(logn),但是对于表长较大,关键字分布比较均匀的查找表,性能相对二分查找更好.<br>但是,分布极不均匀的数据,不是很合适,比如[1,2,4,3000,3003…9988899,8988998]</p>
<p>插值查找在实际使用时，一般要满足两个假设条件：</p>
<p>(1)每一次对数据的访问与通常的指令相比，费用都是相当昂贵的。例如，待查找的表一定是在磁盘而非内存中，因而每一次比较都要进行磁盘访问。</p>
<p>(2)数据不仅是已被排好序的，而且呈现均匀分布特征。</p>
<h3 id="3-斐波那契查找"><a href="#3-斐波那契查找" class="headerlink" title="3.斐波那契查找"></a>3.斐波那契查找</h3><p>利用黄金分割原理实现,折半查找算法来进行修改和改进.<br>对于斐波那契数列,前后两个数字的比值随着数列的增加,越来越接近黄金比值:0.618</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">0<span class="selector-class">.0</span></span><br><span class="line">1<span class="selector-class">.0</span></span><br><span class="line">0<span class="selector-class">.5</span></span><br><span class="line">0<span class="selector-class">.666666666667</span></span><br><span class="line">0<span class="selector-class">.6</span></span><br><span class="line">0<span class="selector-class">.625</span></span><br><span class="line">0<span class="selector-class">.615384615385</span></span><br><span class="line">0<span class="selector-class">.619047619048</span></span><br><span class="line">0<span class="selector-class">.617647058824</span></span><br><span class="line">0<span class="selector-class">.618181818182</span></span><br><span class="line">0<span class="selector-class">.61797752809</span></span><br><span class="line">0<span class="selector-class">.618055555556</span></span><br><span class="line">0<span class="selector-class">.618025751073</span></span><br><span class="line">0<span class="selector-class">.618037135279</span></span><br><span class="line">0<span class="selector-class">.618032786885</span></span><br><span class="line">0<span class="selector-class">.618034447822</span></span><br><span class="line">0<span class="selector-class">.6180338134</span></span><br><span class="line">0<span class="selector-class">.618034055728</span></span><br><span class="line">0<span class="selector-class">.618033963167</span></span><br><span class="line">0<span class="selector-class">.618033998522</span></span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>对于斐波那契数列:<br>0 1 1 2 3 5 8 13 21 34 55 89 …</p>
<p><strong>原理:</strong><br>比如这里的89，假定它是整个有序表的元素个数，而89是由前面的两个数34和55相加之后的和，也即把元素个数为89的有序表分成由前55个数据元素组成的前半段和由后34个数据元素组成的后半段，那么前半段元素个数和整个有序表长度的比值就接近黄金比值0.618，假如要查找的元素在前半段，那么继续按照斐波那契数列来看，55 = 34 + 21，所以继续把前半段分成前34个数据元素的前半段和后21个元素的后半段，继续查找，如此反复，直到查找成功或失败.</p>
<p>当有序表的元素个数不是斐波那契数列中的某个数字时，需要把有序表的元素个数长度补齐，让它成为斐波那契数列中的一个数值,也即<strong>把需要补齐的的元素都赋值为有序表的最大值</strong>。</p>
<p><strong>核心:</strong><br>(1)当key == numbers[mid],查找成功<br>(2)当key &lt; numbers[mid],新范围是第low个到第mid-1个,范围个数是F(k-1) - 1个,即有序列表左边的长度<br>(3)当key &gt; numbers[mid]时,新范围是第mid+1到第high个,范围个数是F(k-2) - 1个,即有序列表右边的长度</p>
<p>k 表示列表的长度<br>k-1表示索引<br>F(k-1)表示列表最后一个元素</p>
<p>元素总个数 = 左区间个数 + 右区间个数 + 中间的一个元素,即:</p>
<pre><code>F(k)-1 = F(k-1)-1  +   F(k-2)-1    +     1
</code></pre><p>斐波那契查找算法如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 斐波那契查找</span></span><br><span class="line">def Fbonacci(index):</span><br><span class="line">    <span class="keyword">if</span> index &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="literal">return</span> </span><br><span class="line">    <span class="keyword">a</span>, b = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(index):</span><br><span class="line">        <span class="keyword">a</span>, b = b, <span class="keyword">a</span> + b</span><br><span class="line">    <span class="literal">return</span> <span class="keyword">a</span></span><br><span class="line">    </span><br><span class="line">def FbonacciSearch(key, numbers):</span><br><span class="line">    <span class="comment"># 确定该序列在斐波那契数列中的位置</span></span><br><span class="line">    n, <span class="built_in">length</span> = <span class="number">0</span>, <span class="built_in">len</span>(numbers)</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">length</span> &gt; Fbonacci(n) - <span class="number">1</span>:</span><br><span class="line">        n += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 填满元素</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n,Fbonacci(n)):</span><br><span class="line">        numbers.append(numbers[<span class="number">-1</span>])</span><br><span class="line">    </span><br><span class="line">    low, high = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        <span class="comment"># 获取黄金分割下标</span></span><br><span class="line">        <span class="keyword">mid</span> = low + Fbonacci(n - <span class="number">1</span>) - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 左区间</span></span><br><span class="line">        <span class="comment">#若key比这个元素小,则key值应该在low至mid-1之间，剩下的范围个数为F(k-1)-1</span></span><br><span class="line">        <span class="keyword">if</span> key &lt; numbers[<span class="keyword">mid</span>]:</span><br><span class="line">            high = <span class="keyword">mid</span> - <span class="number">1</span></span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 右区间</span></span><br><span class="line">        <span class="comment">#若key比这个元素小,则key值应该在low至mid-1之间，剩下的范围个数为F(k-1)-1</span></span><br><span class="line">        <span class="keyword">if</span> key &gt; numbers[<span class="keyword">mid</span>]:</span><br><span class="line">            low = <span class="keyword">mid</span> + <span class="number">1</span></span><br><span class="line">            n -= <span class="number">2</span></span><br><span class="line">        <span class="comment"># 相等</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 成功找到</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">mid</span> &lt;= n:</span><br><span class="line">                <span class="literal">return</span> <span class="keyword">mid</span></span><br><span class="line">            <span class="comment"># 补全的数,返回n</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="literal">return</span> n</span><br><span class="line">    <span class="literal">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure>
<h3 id="4-比较"><a href="#4-比较" class="headerlink" title="4.比较"></a>4.比较</h3><p>二分查找是加法与除法运算<br>插值查找是复杂的四则运算<br>斐波那契查找是加减法运算</p>
<h2 id="线性索引查找"><a href="#线性索引查找" class="headerlink" title="线性索引查找"></a>线性索引查找</h2><p>索引:把一个关键字与它对应的记录相关联的过程.<br>线性索引:把索引项集合组织为线性结构,也即索引表</p>
<h3 id="1-稠密索引"><a href="#1-稠密索引" class="headerlink" title="1.稠密索引"></a>1.稠密索引</h3><p>稠密索引:将数据集的每个记录对应一个索引项,且索引项一定按照关键码有序排列.</p>
<h3 id="2-分块索引"><a href="#2-分块索引" class="headerlink" title="2.分块索引"></a>2.分块索引</h3><p>对数据集进行分块,使分块有序,然后对每一块建立一个索引项,从而减少索引项的个数.</p>
<p>块需要满足的条件:<br>(1)块内无序:每一块的记录不要求有序.<br>(2)块间有序:比如,要求第二块所有记录的关键字均要大于第一块所有记录的关键字.第三块大于第二块…</p>
<p>分块索引的索引项结构:</p>
<ul>
<li>最大关键码:存储每一块中点最大关键字</li>
<li>存储块中记录的个数,便于循环</li>
<li>用于指向块首数据元素的指针,便于遍历</li>
</ul>
<p>查找分两步:<br>(1)在分块索引表中查找关键字所在的块.<br>(2)根据块首指针找到相应的块,并在块中顺序查找关键码.</p>
<p>设n个记录被平均分成m块,每个块t条记录,则n=mt<br>查找索引表的平均查找长度:(1+m)/2<br>查找记录的平均查找长度:(t+1)/2</p>
<p>则块中查找记录的平均查找长度:</p>
<pre><code>  (1+m)/2 + (t+1)/2 
= (m+t)/2+1 
= (n/t+t)/2+1
</code></pre><p>最佳情况:m与t相等,也即n = t^2 = m^2 ,则原式为:</p>
<pre><code>= (t*t/t+t)/2+1
= t+1
= n^0.5 + 1 (^ 表示次方)
</code></pre><p>由此分块索引比顺序查找O(n)提高不少.</p>
<h3 id="3-倒排索引"><a href="#3-倒排索引" class="headerlink" title="3.倒排索引"></a>3.倒排索引</h3><p>索引项的结构:次关键码与记录号表<br>根据属性(次关键码,字段)的值查找记录.<br>该索引表中的每一项包括一个属性值和具有该属性值的各记录的地址.<br>由于不是由记录确定属性值而是由属性值确定记录,因而称为倒排索引.</p>
<p>优点:生成索引表后不用读取记录就可知道结果,查找非常快<br>缺点:记录号不定长</p>
<h2 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h2><p>如果查找的数据集是有序线性表,并且是顺序存储的,可以使用二分查找/插值查找/斐波那契查找,但是在插入删除操作上耗费大量时间,由此引出既可以使得插入删除效率不错又可以高效率查找的算法====&gt;使用二叉树数据结构:在创建集合时就考虑使用二叉树结果,而且是排好序的二叉树.构造二叉搜索树的目的不是为了排序,而是为了提高插入/删除的效率.</p>
<p>二叉查找树,也称(二叉搜索树,有序二叉树,排序二叉树,二叉排序树）,是指<strong>一棵空树</strong>或者具有下列性质的<strong>二叉树</strong>：</p>
<ul>
<li>若任意节点的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</li>
<li>若任意节点的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</li>
<li>任意节点的左、右子树也分别为二叉查找树；</li>
<li>没有键值相等的节点。</li>
</ul>
<p>性质:<br>1.左小于根小于右<br>2.值不重复<br>3.”中序遍历“可以让结点有序<br>4.二叉搜索树有两种结点删除方式:取被删除结点的右子树中的最小元素替代或者取被删除结点的左子树中的最大元素替代</p>
<p>优势:<br>查找、插入的时间复杂度较低。为O(log n)<br>二叉查找树的最坏效率是O(n),此时退化为线性结构</p>
<p><img src="http://static.chenyalun.com/2017/04/21/170421006.jpg" alt></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTreeNode</span>():</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(<span class="keyword">self</span>,val = <span class="number">0</span>)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="keyword">self</span>.val = val</span><br><span class="line">		<span class="keyword">self</span>.left = None</span><br><span class="line">		<span class="keyword">self</span>.right = None</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 寻找结点</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">find</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.val == <span class="symbol">data:</span></span><br><span class="line">			<span class="keyword">return</span> True</span><br><span class="line">		elif data &lt; <span class="keyword">self</span>.val <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.left.find(data)</span><br><span class="line">		elif data &gt; <span class="keyword">self</span>.val <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.right.find(data)</span><br><span class="line">		<span class="symbol">else:</span></span><br><span class="line">			<span class="keyword">return</span> False</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 寻找最小结点</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">findMinData</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.left.findMinData()</span><br><span class="line">		<span class="symbol">else:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment"># 寻找最大结点</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">findMaxData</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.right.findMaxData()</span><br><span class="line">		<span class="symbol">else:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span>.val</span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 插入结点</span></span><br><span class="line">	<span class="comment"># 当data与二叉搜索树中某结点val相等时不作处理</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">insertNode</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="comment"># 在右子树上</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.val &lt; <span class="symbol">data:</span></span><br><span class="line">			<span class="keyword">if</span>  <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line">				<span class="keyword">self</span>.right.insertNode(data)</span><br><span class="line">			<span class="symbol">else:</span></span><br><span class="line">				<span class="keyword">self</span>.right = BinarySearchTreeNode(data)</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 在左子树上</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.val &gt; <span class="symbol">data:</span></span><br><span class="line">			<span class="keyword">if</span>  <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line">				<span class="keyword">self</span>.left.insertNode(data)</span><br><span class="line">			<span class="symbol">else:</span></span><br><span class="line">				<span class="keyword">self</span>.left = BinarySearchTreeNode(data)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 打印二叉搜索树</span></span><br><span class="line">	<span class="comment"># 左根右遍历</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">printTree</span><span class="params">(<span class="keyword">self</span>)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line">			<span class="keyword">self</span>.left.printTree()</span><br><span class="line">		print <span class="keyword">self</span>.val,</span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line">			<span class="keyword">self</span>.right.printTree()</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 结点的删除</span></span><br><span class="line">	<span class="comment"># 当删除一个叶子结点时,直接删除即可</span></span><br><span class="line">	<span class="comment"># 当删除的结点只有一个孩子时,用该孩子替换</span></span><br><span class="line">	<span class="comment"># 当删除的结点有两个孩子时,寻找该结点右子树中的最小数据代替子节点</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">daleteNode</span><span class="params">(<span class="keyword">self</span>, data)</span></span><span class="symbol">:</span></span><br><span class="line">		<span class="comment"># 前提是该结点在二叉搜索树中能找到</span></span><br><span class="line">		<span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">self</span>.find(data)<span class="symbol">:</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">		<span class="keyword">if</span> data &lt; <span class="keyword">self</span>.<span class="symbol">val:</span></span><br><span class="line">			<span class="keyword">self</span>.left = <span class="keyword">self</span>.left.daleteNode(data)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">		elif data &gt; <span class="keyword">self</span>.<span class="symbol">val:</span></span><br><span class="line">			<span class="keyword">self</span>.right = <span class="keyword">self</span>.right.daleteNode(data)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">		elif <span class="keyword">self</span>.left <span class="keyword">and</span> <span class="keyword">self</span>.<span class="symbol">right:</span></span><br><span class="line">			<span class="comment"># 找到右子树最小的结点,获取值</span></span><br><span class="line">			val = <span class="keyword">self</span>.right.findMinData()</span><br><span class="line">			<span class="comment"># 把最小结点的值给自己</span></span><br><span class="line">			<span class="keyword">self</span>.val = val</span><br><span class="line">			<span class="comment"># 删除右子树中的最小结点,使self.right指向右子树的根节点</span></span><br><span class="line">			<span class="comment"># self.right.daleteNode(val)最终返回右子树的根节点</span></span><br><span class="line">			<span class="keyword">self</span>.right = <span class="keyword">self</span>.right.daleteNode(val)</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">self</span></span><br><span class="line">		<span class="symbol">else:</span></span><br><span class="line">			<span class="comment"># 左结点存在</span></span><br><span class="line">			<span class="keyword">if</span> <span class="keyword">self</span>.<span class="symbol">left:</span></span><br><span class="line">				<span class="comment"># 直接指向左结点</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">self</span>.left</span><br><span class="line">			<span class="comment"># 右结点存在,或不存在结点</span></span><br><span class="line">			<span class="symbol">else:</span></span><br><span class="line">				<span class="comment"># 直接指向右结点</span></span><br><span class="line">				<span class="keyword">return</span> <span class="keyword">self</span>.right</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = BinarySearchTreeNode(<span class="number">10</span>)</span><br><span class="line">a.insertNode(<span class="number">8</span>)</span><br><span class="line">a.insertNode(<span class="number">12</span>)</span><br><span class="line">a.insertNode(<span class="number">6</span>)</span><br><span class="line">a.insertNode(<span class="number">9</span>)</span><br><span class="line">a.insertNode(<span class="number">11</span>)</span><br><span class="line">a.insertNode(<span class="number">14</span>)</span><br><span class="line">a.insertNode(<span class="number">7</span>)</span><br><span class="line">a.insertNode(<span class="number">13</span>)</span><br><span class="line">a.insertNode(<span class="number">5</span>)</span><br><span class="line">a.insertNode(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">a.printTree()</span><br><span class="line">print <span class="string">"\n"</span></span><br><span class="line">print a.find(<span class="number">11</span>)</span><br><span class="line">print a.find(<span class="number">100000</span>)</span><br><span class="line">print a.findMaxData()</span><br><span class="line">print a.findMinData()</span><br><span class="line"></span><br><span class="line">a.daleteNode(<span class="number">1000000</span>)</span><br><span class="line">a.daleteNode(<span class="number">10</span>)</span><br><span class="line">a.daleteNode(<span class="number">14</span>)</span><br><span class="line">a.daleteNode(<span class="number">2</span>)</span><br><span class="line">a.printTree()</span><br></pre></td></tr></table></figure>
<p>二叉搜索树以链接的方式存储,保持了链接存储结构在执行插入或删除时的优越性.</p>
<p><img src="http://static.chenyalun.com/2017/04/21/170421002.png" alt></p>
<p>对于二叉搜索树的查找,比较次数等于给定值的结点在二叉搜索树的层数.最少为1次(为根节点),最多不超过树的深度(最差是极端的右斜树或左斜树).</p>
<p><img src="http://static.chenyalun.com/2017/04/21/170421001.png" alt></p>
<p>二叉排序树倘若是平衡的,其深度与完全二叉树相同,均为<code>floor(logn) + 1</code>,查找的时间复杂度为O(logn),近似与折半查找,若不是平衡的,甚至演化为极端的右斜树或左斜树,查找的时间复杂度为O(n),等同于顺序查找.</p>
<p>因此,平衡至关重要.</p>
<h2 id="平衡二叉树-AVL树"><a href="#平衡二叉树-AVL树" class="headerlink" title="平衡二叉树(AVL树)"></a>平衡二叉树(AVL树)</h2><p>平衡二叉搜索树是改进的二叉搜索树,也是二叉搜索树。</p>
<p>一般的二叉搜索树的查询复杂度是跟深度有关，因此当结点的深度普遍较大时，查询的均摊复杂度会上升，为了更高效的查询，平衡树应运而生了。</p>
<p>可以使查找树的高度为 O (log(n)) </p>
<p>定义:它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p>
<p>AVL树中的每个结点都有一个平衡因子（balance factor，BF），它表示这个结点的左、右子树的深度差，也就是左子树的深度减去右子树的深度的结果值。AVL树上所有结点的BF值只能是-1、0、1。反之，只要二叉树上一个结点的BF的绝对值大于1，则该二叉树就不是平衡二叉树。在进行插入和删除的时候找出失去平衡的节点，进行必要的旋转操作保证树的平衡。</p>
<p>查找、插入和删除在平均和最坏情况下都是O（log n）</p>
<h3 id="最少结点"><a href="#最少结点" class="headerlink" title="最少结点"></a>最少结点</h3><p>设n(h)是高度为h的AVL树，则结点数最少时有:<br>n(h) = n(h-1) + n(h-2) + 1</p>
<table>
<thead>
<tr>
<th>h(VAL树的高度)</th>
<th>最少结点数</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>1</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
</tr>
<tr>
<td>3</td>
<td>7</td>
</tr>
<tr>
<td>4</td>
<td>12</td>
</tr>
<tr>
<td>5</td>
<td>20</td>
</tr>
<tr>
<td>…</td>
<td>…</td>
</tr>
</tbody>
</table>
<p>显而易见，满足的关系为:<br>高度为h的AVL树，其最少结点数量为<code>F(h+2) - 1</code>，其中F(x)为斐波那契数列逗号且规定从1开始，即F(0) = 1，F(1) = 2</p>
<h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>RR(右单旋):麻烦结点在发现结点的右子树的右子树上</p>
<p>RL():麻烦结点在发现结点的右子树的左子树上</p>
<p>LL(左单旋):麻烦结点在发现结点的左子树的左子树上</p>
<p>LR():麻烦结点在发现结点的左子树的右子树上</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>堆:用数组表示的完全二叉树<br>有序性:任一结点的关键字是其子树所有结点的最大值(或者最小值)，从根结点到任意结点路径上结点序列的有序性。<br>最大堆,也称为大顶堆:最大值<br>最小堆,也称为小顶堆:最小值</p>
<p>最大堆的建立:<br>方法一:自底向上调整堆，首先将n个节点按输入顺序存入，使其满足完全二叉树的结构特性，然后调整各节点的位置。</p>
<p>方法二:通过插入操作，将n个元素一个个地相继插入到一个初始为空的堆中，其时间代价最大为O(nlogn)。</p>
<p>堆顶元素的删除<br>元素的插入</p>
<h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p>带权路径长度:设二叉树有n个叶子节点，每个叶子节点带有权值W，从根节点到每个叶子节点的长度为L，则每个叶子节点的带权路径长度之和为WPL=∑WL。<br>哈夫曼树即是最优二叉树:WPL最小的二叉树。</p>
<p>性质:</p>
<ol>
<li>没有度为1的结点(按照构造哈夫曼树的规则，显而易见)。</li>
<li>n个叶子节点的哈夫曼树共有 <code>2 * n - 1</code>个结点。</li>
<li>哈夫曼树的任意非叶子结点的左右子树交换后仍是哈夫曼树。</li>
<li>对同一组权值的，可能存在不同结构的几棵哈夫曼树，但是它们的WPL是相同的。</li>
</ol>
<p>性质2推导:根据哈夫曼树没有度为1的结点，则 n1 = 0，又根据 n0 = n2 + 1，sum = n0 + n1 + n2，则有:</p>
<pre><code>sum = n0 + n1 + n2
    = n0 + n2
    = n0 + n0 - 1
    = 2 * n0 - 1
    = 2 * n - 1 // n即n0
</code></pre><p>图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片图片<br><img src alt></p>
<p>图a的WPL为 5 <em> 2 + 7 </em> 2 + 2 <em> 2 + 13 </em> 2 = 54<br>图b的WPL为 13 <em> 1 + 7 </em> 2 + 2 <em> 3 + 5 </em> 3 = 48<br>PL的计算方式为:该节点的权值 * 从根节点到该节点的树枝数量</p>
<p>哈夫曼树的构造:每次把权值最小的两个二叉树合并，参照最大堆的调整。</p>
<h2 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h2><p>红黑树是每个节点都带有颜色属性的二叉查找树，颜色为红色或黑色。在二叉查找树强制一般要求以外，对于任何有效的红黑树我们增加了如下的额外要求：</p>
<p>（1）每个节点或者是黑色，或者是红色。<br>（2）根节点是黑色。<br>（3）每个叶子节点（NIL）是黑色。 [注意：这里叶子节点，是指为空(NIL或NULL)的叶子节点！]<br>（4）每个红色节点必须有两个黑色的子节点。<br>（5）对于任一结点而言，其到叶结点树尾端NIL指针的每一条路径都包含相同数目的黑结点。  </p>
<p>一棵n个结点是红黑树始终保持了logn的高度,所以红黑树的查找、插入、删除的时间复杂度最坏为O(log n)</p>
<p>红黑树之所以是平衡的二叉查找树，是因为每个节点都有表示其颜色的域值：红或黑，在插入和删除操作的时候依据节点的颜色向平衡的方向调整。</p>
<p><img src="http://static.chenyalun.com/2017/04/21/170421007.png" alt></p>
<p>“叶结点” 或”NULL结点”，它不包含数据而只充当树在此结束的指示，这些结点以及它们的父结点，在绘图中都会经常被省略。</p>
<p>当我们在对红黑树进行插入和删除等操作时，对树做了修改，那么可能会违背红黑树的性质。 为了继续保持红黑树的性质，我们可以通过对结点进行重新着色，以及对树进行相关的旋转操作</p>
<p>左旋:左右左<br>右旋:右左右</p>
<h2 id="多路查找树-B树"><a href="#多路查找树-B树" class="headerlink" title="多路查找树(B树)"></a>多路查找树(B树)</h2><p>B树即为B-树、B_树,又叫平衡多路查找树.<br>多路查找树:其每一个结点的孩子数可以多于两个,每一个结点处可以存储多个元素.</p>
<p>一个节点只能存储一个元素,在元素非常多的时候,就使得要么树的度非常大,要么树的高度非常大,甚至两者都必须足够大才可以,这使得内存存取外村次数非常多,造成了时间效率上的瓶颈,于是引入多路查找树.</p>
<p>树的高度越高，查找文件所需要的磁盘IO读写次数越多，所以为了减少磁盘的IO读写，要想办法进一步降低树的高度。 因此，具有多个孩子的B树便应运而生，因为B树每一个结点可以有几个到几千个孩子，使得在结点数目一定的情况下，树的高度会大大降低，从而有效减少磁盘IO读写消耗。</p>
<p>B+树、B树等的根结点和部分顶层数据存在内存中，大部分下层数据存在磁盘上。</p>
<h3 id="2-3树"><a href="#2-3树" class="headerlink" title="2-3树"></a>2-3树</h3><p>2-3树是这样一棵多路查找树:其中的每一个结点都具有两个孩子或三个孩子.</p>
<ol>
<li><p>一个2结点包含一个元素和两个孩子(或没有孩子),与二叉排序树类似,左子树包含的元素小于该元素,右子树包含的元素大于该元素,与二叉排序树不同的是,这个2结点要么没有孩子,要么就有两个,不能只有一个孩子.</p>
</li>
<li><p>一个3结点包含一小一大两个元素和三个孩子(或没有孩子),一个3结点要么没有孩子,要么具有3个孩子.如果具有3个孩子的话,左子树包含的元素小于较小元素的元素,右子树包含的元素大于较大元素的元素,中间子树包含介于两元素之间的元素.</p>
</li>
<li><p>并且2-3树中所有叶子都在同一层次上.</p>
</li>
</ol>
<p>2-3树的插入</p>
<p>2-3树的删除</p>
<h3 id="2-3-4树"><a href="#2-3-4树" class="headerlink" title="2-3-4树"></a>2-3-4树</h3><p>2-3树的概念扩展,包括了4结点的使用.一个4结点包含小中大三个元素和四个孩子(或者没有孩子).</p>
<h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>B树是一种平衡的多路查找树,2-3树和2-3-4树都是B树的特例.<br>结点最大的孩子数目称为B树的阶.<br>2-3树是3阶B树,2-3-4树是4阶B树.</p>
<p>A B-tree of order m is a tree which satisfies the following properties:</p>
<pre><code>Every node has at most m children.
Every non-leaf node (except root) has at least ⌈m/2⌉ children.
The root has at least two children if it is not a leaf node.
A non-leaf node with k children contains k−1 keys.
All leaves appear in the same level
</code></pre><p>一棵m阶的B树满足以下条件<br>1.每个结点至多有m棵子树<br>2.除根结点外,其他分支结点至少有ceil(m/2)棵子树(ceil()函数向上取整<br>3.根结点至少有两棵子树,除非树只包含一个结点<br>4.有k个孩子的非叶结点有k-1个关键码,关键码按递增次序排列<br>5.所有叶子结点在同一层</p>
<h4 id="B树如何做到减少访问外存次数"><a href="#B树如何做到减少访问外存次数" class="headerlink" title="B树如何做到减少访问外存次数"></a>B树如何做到减少访问外存次数</h4><p>硬盘将信息分割成相等大小的页面,每次硬盘读写都是一个或者多个完整的页面,对一个硬盘来说,一页的长度可能是211到214字节.</p>
<p>在一个典型的B树应用中,要处理的硬盘数据量很大,因此无法一次全部装入内存,因此需要对B树进行调整,使得B树的阶树与硬盘存储的页面大小相匹配.在有限内存的情况下,每一次磁盘的访问我们都可以获得最大量的数据,由于B树每节点可以具有比二叉树多得多的元素,所以减少了必须访问结点和数据块的数量,提高了性能.<br>B树的数据结构就是为内外存的数据交互准备的.</p>
<h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>B+ 树是一种树数据结构，通常用于数据库和操作系统的文件系统中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和BFS等文件系统都在使用B+树作为元数据索引。</p>
<p>B+ 树的特点是能够保持数据稳定有序，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入，这与二叉树恰好相反。</p>
<p>一棵m阶的B+树与B树的区别在于:</p>
<ol>
<li>有n棵子树的结点包含有n个关键字</li>
<li>所有的叶子节点包含全部的关键字信息,以及指向含这些关键字记录的指针,叶子节点本身依关键字的大小自小而大顺序链接</li>
<li>所有分支结点可以看成是索引,结点中仅含有其子树的最大(最小)关键字.</li>
</ol>
<p>好处:<br>如果要随机查找,就从根节点出发,与B树的查找方式相同,只不过即使在分支结点找到了待查找的关键字,它也只是用来索引的,不能提供实际记录的访问,还是需要到达包含此关键字的终端结点.</p>
<p>如果需要从最小关键字进行自小而大的顺序查找,可以从最左端的叶子结点出发,不经过分支结点,而是沿着指向下一叶子的指针就可遍历所有的关键字.</p>
<p>B+树适合有范围的查找(比如年龄18–22),从根节点出发找到18,再在叶子结点中按顺序找到符合要求的记录.</p>
<p>B+树的插入/删除与B树类似,只不过插入删除的元素都是在叶子结点上进行.</p>
<h2 id="散列表查找"><a href="#散列表查找" class="headerlink" title="散列表查找"></a>散列表查找</h2><p>存储位置 = f(关键字)</p>
<p>记录的存储位置和它的关键字之间建立的一个确定的对应关系.每个关键字key对应一个存储位置f(key),查找时根据这个确定的对应关系找到给定key的映射f(key).</p>
<p>f称为散列函数,又称哈希函数,采用散列技术将记录存储在一块连续的存储空间中,这块连续的存储空间称为散列表或哈希表,关键字对应的记录存储位置称为散列地址.</p>
<p>冲突:key1不等于key2,但是f(key1)=f(key2),key1和key2称为散列函数的同义词.</p>
<h3 id="常用的散列函数"><a href="#常用的散列函数" class="headerlink" title="常用的散列函数"></a>常用的散列函数</h3><h4 id="1-直接定址法"><a href="#1-直接定址法" class="headerlink" title="1.直接定址法"></a>1.直接定址法</h4><pre><code>f(key) = a * key + b  (a,b为常数)
</code></pre><ul>
<li>优点:简单均匀,不会产生冲突,但需要事先知道关键字的分布情况,适合查找表较小且连续的情况.</li>
</ul>
<h4 id="2-数字分析法"><a href="#2-数字分析法" class="headerlink" title="2.数字分析法"></a>2.数字分析法</h4><p>手机号码等,对数字进行抽取,反转,左环位移,右环位移等方式合理地将关键字分配到散列表的各位置.</p>
<ul>
<li>适合处理关键字位数比较大的情况,如果事先知道关键字的分布且关键字的若干位分布均匀,可以使用.</li>
</ul>
<h4 id="3-平方取中法"><a href="#3-平方取中法" class="headerlink" title="3.平方取中法"></a>3.平方取中法</h4><p>关键字1234—-&gt;平方后:1522756—–&gt;抽取中间的3位——&gt;227,用作散列地址.</p>
<ul>
<li>适合不知道关键字的分布,而位数又不是很大的情况</li>
</ul>
<h4 id="4-折叠法"><a href="#4-折叠法" class="headerlink" title="4.折叠法"></a>4.折叠法</h4><p>从左到右分割成位数相等的几部分,叠加求和,按照散列表长,取后几位作为散列地址.</p>
<p>9876543210—–&gt;987  654  321 0—–&gt;求和987+654+321+0=1962,求后三位:962</p>
<ul>
<li>适合不需要事先知道关键字的分布.适合关键字位数较多的情况.</li>
</ul>
<h4 id="5-除留余数法"><a href="#5-除留余数法" class="headerlink" title="5.除留余数法"></a>5.除留余数法</h4><p>最常用,散列表长为m的公式:</p>
<pre><code>f(key) = key mod p (p&lt;=m)
</code></pre><ul>
<li>若散列表表长m,通常p为小于或者等于表长的最小质数或不包含小于20质因子的合数.</li>
</ul>
<h4 id="6-随机数法"><a href="#6-随机数法" class="headerlink" title="6.随机数法"></a>6.随机数法</h4><pre><code>f(key) = random(key)
</code></pre><ul>
<li>当关键字的长度不等时,采用这个方法.</li>
</ul>
<h3 id="常用的处理冲突方法"><a href="#常用的处理冲突方法" class="headerlink" title="常用的处理冲突方法"></a>常用的处理冲突方法</h3><h4 id="1-开放定址法"><a href="#1-开放定址法" class="headerlink" title="1.开放定址法"></a>1.开放定址法</h4><p>线性探测法</p>
<pre><code>f(key) = (f(key) + d) mod m  (d = 1,2,3...)
</code></pre><p>二次探测法</p>
<pre><code>f(key) = (f(key) + d) mod m  (d = 1^2,-1^2,2^2,-2^2,3^2,-3^2...q^2,-q^2,其中q&lt;=m/2)
</code></pre><p>随机探测法</p>
<pre><code>f(key) = (f(key) + d) mod m  (d 是一个随机数列)
</code></pre><h4 id="2-再散列函数法"><a href="#2-再散列函数法" class="headerlink" title="2.再散列函数法"></a>2.再散列函数法</h4><pre><code>f(key) = RH(key)
</code></pre><p>每次发生散列冲突时,就换一个散列函数计算.</p>
<h4 id="3-链地址法"><a href="#3-链地址法" class="headerlink" title="3.链地址法"></a>3.链地址法</h4><p>提供绝不会找不到地址的保障,但是带来查找时需要遍历单链表的性能损耗.</p>
<h4 id="4-公共溢出区法"><a href="#4-公共溢出区法" class="headerlink" title="4.公共溢出区法"></a>4.公共溢出区法</h4><p>增添溢出表.<br>对给定值通过散列函数计算出散列地址后,先与基本表的相应位置进行比对,如果相等,成功,否则,到溢出表中进行<strong>顺序查找</strong>.    </p>
<blockquote>
<p>参考并致谢<br><a href="https://www.zhihu.com/question/19809666/answer/88158084" target="_blank" rel="noopener">知乎 灰杉树</a><br><a href="http://haiyangxu.github.io/posts/2014/2014-05-05-binary_search_tree.html" target="_blank" rel="noopener">HAIYANG XU</a><br><a href="http://blog.csdn.net/v_JULY_v/article/details/6530142/" target="_blank" rel="noopener">v_JULY_v</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《Objective-C高级编程》]]></title>
      <url>http://blog.chenyalun.com/2017/04/13/%E8%AF%BB%E3%80%8AObjective-C%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B%E3%80%8B/</url>
      <content type="html"><![CDATA[<p align="center"> 关于ARC/Block/GCD。 </p>

<a id="more"></a>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>寒假里就大致看了一遍，但是吸收的不完全，尤其是block部分。这两三天又赶紧从图书馆借来翻一翻，还是收获满满。不过C++不够扎实，很多源码还是看不明白(摊手)。这里把一些重点问题整理出来，以问答的形式进行总结，所有代码都尝试验证一下，没毛病。</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="一-为什么苹果主要采用散列表管理引用计数"><a href="#一-为什么苹果主要采用散列表管理引用计数" class="headerlink" title="一.为什么苹果主要采用散列表管理引用计数"></a>一.为什么苹果主要采用散列表管理引用计数</h2><p><strong>GNUstep将引用计数保存在对象占用内存块头部的变量中。</strong><br>优点：</p>
<ol>
<li>只需少量代码。</li>
<li>能统一管理引用计数用内存块与对象用内存块。</li>
</ol>
<p><strong>苹果采用散列表（引用计数表，DenseMap 类实现）管理引用计数。</strong><br>优点：</p>
<ol>
<li>对象用内存块的分配无需考虑内存块头部。</li>
<li>引用计数表记录中存有内存块地址，可追溯各对象的内存块。有助于检测对象的持有者是否存在，可检测内存泄漏。</li>
</ol>
<p>注:如果设备是 64 位环境并且使用 Objective-C 2.0，那么“一些”对象会使用其 isa 指针的一部分空间来存储它的引用计数。</p>
<p><strong>苹果为什么不采用垃圾回收（GC）？</strong></p>
<p>苹果曾在OS X 10.5 尝试使用，不过在 10.7 的时候把 GC 换成了 ARC。GC 有个问题让苹果不能忍：垃圾回收的时候，整个程序需要暂停，英文把这个过程叫做：Stop the World。所有的对象都需要一起回收时，造成用户体验不好。</p>
<p><strong>ARC相对于GC所具有的优点：</strong></p>
<ol>
<li><p>ARC工作在编译期，在运行时没有额外开销。</p>
</li>
<li><p>ARC的内存回收是平稳进行的，对象不被使用时会立即被回收。而GC的内存回收是一阵一阵的，回收时需要暂停程序，会有一定的卡顿。</p>
</li>
</ol>
<p><strong>简单介绍GC的原理</strong><br>基于事实：大部分的对象的生命期都很短。</p>
<p>GC 将内存中的对象主要分成两个区域：Young 区和 Old 区。<br>对象先在 Young 区被创建，然后如果经过一段时间还存活着，则被移动到Old 区。（其实还有一个Perm区，但是内存回收算法通常不涉及这个区域）</p>
<p>Young区的对象因为大部分生命期都很短，每次回收之后只有少部分能够存活，所以采用的算法叫Copying算法，简单说来就是直接把活着的对象复制到另一个地方。Young 区内部又分成了三块区域：Eden区 ,From区 ,To区。每次执行 Copying 算法时，即将存活的对象从 Eden 区和 From 区复制到To区，然后交换 From 区和To区的名字（即From 区变成 To 区，To区变成From区）。</p>
<p>Old区的回收算法叫 Mark-Sweep 算法。简单来说，就是只是把不用的对象先标记（Mark）出来，然后回收（Sweep），活着的对象就不动它了。因为大部分对象都活着，所以回收下来的对象并不多。但是这个算法会有一个问题：它会产生内存碎片，所以它一般还会带有整理内存碎片的逻辑，在算法中叫做 Compact。</p>
<h2 id="二-如何提高Objective-C方法的速度"><a href="#二-如何提高Objective-C方法的速度" class="headerlink" title="二.如何提高Objective-C方法的速度"></a>二.如何提高Objective-C方法的速度</h2><p>采用IMP Caching。一般而言速度是其他方法的两倍。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> autorelease_class = [<span class="built_in">NSAutoreleasePool</span> <span class="keyword">class</span>];</span><br><span class="line">SEL autorelease_sel = <span class="keyword">@selector</span>(addObject:);</span><br><span class="line">IMP autorelease_imp = [autorelease_class methodForSelector:autorelease_sel];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>) autorelease</span><br><span class="line">&#123;</span><br><span class="line">    (* autorelease_imp)(autorelease_class,autorelease_sel,<span class="keyword">self</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)autorelease</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="built_in">NSAutoreleasePool</span> addObject:<span class="keyword">self</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>IMP的使用:实例方法+有参数+有返回值</strong></p>
<p>IMP默认是无参数，无返回值类型，且自带_cmd和selector。如果要使用带参数或者带返回值的IMP有两种方法。<br>方式一：关闭Xcode中的编译选项。<br><img src="http://static.chenyalun.com/2017/04/13/20170413001.png" alt></p>
<p>方式二：重新定义一个“IMP”，但不能同名，否则会报错，显示</p>
<p><code>Typedef redefinition with different types (&#39;id (*)(__strong id, SEL, ...)&#39; vs &#39;void (*)(void)&#39;)</code></p>
<p>这里统一采取第二种方式，即重新定义函数指针_IMP。</p>
<p><code>typedef id (*_IMP)(id, SEL,...);</code></p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// .h文件</span></span><br><span class="line"><span class="selector-tag">-</span> (NSString *)<span class="selector-tag">print</span><span class="selector-pseudo">:(NSString</span> *)<span class="selector-tag">name</span>;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// .m文件</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)print:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,name);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"因为我刚好遇见你"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">YAUser *user = [[YAUser alloc] init];</span><br><span class="line">user.<span class="built_in">name</span> = @<span class="string">"张无忌"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SEL</span></span><br><span class="line">SEL sel = @selector(print:);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取函数指针</span></span><br><span class="line"><span class="variable">_IMP</span> instanceIMP1 = (<span class="variable">_IMP</span>)[YAUser instanceMethodForSelector:sel];</span><br><span class="line"><span class="variable">_IMP</span> instanceIMP2 = (<span class="variable">_IMP</span>)[user methodForSelector:sel];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法并返回字符串</span></span><br><span class="line">NSString *name1 = (*instanceIMP1)(user, sel, user.<span class="built_in">name</span>);</span><br><span class="line">NSString *name2 = (*instanceIMP2)(user, sel, user.<span class="built_in">name</span>);</span><br><span class="line">NSLog(@<span class="string">"%@--%@"</span>,name1, name2);</span><br></pre></td></tr></table></figure>
<p><strong>IMP的使用:类方法+有参数+有返回值</strong></p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">+ (NSString *)printClassName:(<span class="class"><span class="keyword">Class</span>)<span class="title">className</span>;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ (<span class="built_in">NSString</span> *)printClassName:(Class)className &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,className);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"原谅我这一生不羁放纵爱自由"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">NSStringFromClass</span>(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 调用</span></span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">YAUser *user = [[YAUser alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取SEL</span></span><br><span class="line">SEL sel = <span class="meta">@selector(printClassName:)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取函数指针</span></span><br><span class="line">_IMP classIMP = (_IMP)[[YAUser <span class="class"><span class="keyword">class</span>] <span class="title">methodForSelector</span>:<span class="type">sel];</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法并返回字符串</span></span><br><span class="line">NSString *name = (*classIMP)(user, sel, [user <span class="class"><span class="keyword">class</span>]);</span></span><br><span class="line">NSLog(@<span class="string">"%@"</span>,name);</span><br></pre></td></tr></table></figure>
<p><strong>实例方法/类方法+无参数+无返回值</strong></p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">- (<span class="name">void</span>)print<span class="comment">;</span></span><br><span class="line">+ (<span class="name">void</span>)printName<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>print&#123;</span><br><span class="line">    </span><br><span class="line">    NSLog<span class="params">(@<span class="string">"留下足迹才美丽"</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ <span class="params">(void)</span>printName &#123;</span><br><span class="line">    NSLog<span class="params">(@<span class="string">"风吹花落美如玉"</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取SEL</span></span><br><span class="line">SEL sel1 = <span class="meta">@selector(print)</span>;</span><br><span class="line">SEL sel2 = <span class="meta">@selector(printName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取函数指针</span></span><br><span class="line">IMP instanceIMP = [[YAUser <span class="class"><span class="keyword">class</span>] <span class="title">instanceMethodForSelector</span>:<span class="type">sel1];</span></span></span><br><span class="line">IMP classIMP = [YAUser methodForSelector:sel2];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">(*instanceIMP)();</span><br><span class="line">(*classIMP)();</span><br></pre></td></tr></table></figure>
<h2 id="三-非显式使用-autoreleasing的场景有哪些"><a href="#三-非显式使用-autoreleasing的场景有哪些" class="headerlink" title="三.非显式使用__autoreleasing的场景有哪些"></a>三.非显式使用__autoreleasing的场景有哪些</h2><p><strong>场景一:@autoreleasepool。</strong></p>
<p>编译器会检查@autoreleasepool块中的方法,如果<strong>不是</strong>以alloc/new/copy/mutableCopy开头，则自动把方法返回值的对象注册到autoreleasepool中。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="built_in">NSObject</span>  *object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="comment">// ==&gt;NSObject __strong *object = [[NSObject alloc] init];</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> array];</span><br><span class="line">    <span class="comment">// ==&gt;NSArray __autoreleasing  *array = [NSArray array];</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>场景二:方法的返回值。</strong></p>
<p>没有显式指定所有权修饰符，所以默认为__strong。由于return使得变量array超出作用域，强引用对应持有的对象会释放。但是该对象作为方法的返回值，编译器自动将其注册到自动释放池中，延缓释放(否则如果立即释放，那返回值就没有意义了)。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">array</span> &#123;</span><br><span class="line">    NSArray *<span class="keyword">array</span> = [NSArray <span class="keyword">array</span>];</span><br><span class="line">    // ==&gt;NSArray __strong *<span class="keyword">array</span> = [NSArray <span class="keyword">array</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">array</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>场景三:<code>__weak</code>修饰的变量。</strong><br><code>__weak</code>修饰的变量会被自动注册到自动释放池中。由于<code>__weak</code>不持有对象的强引用，在访问该对象的时候，该对象有可能已经释放，但是要保证能访问到该对象，所以把它注册到自动释放池中，确保@autoreleasepool块结束之前该对象存在。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> object;</span><br></pre></td></tr></table></figure>
<p><strong>场景四:指向对象的指针的指针。</strong><br>指向对象的指针默认<strong>strong修饰。<br>指向对象的指针的指针默认</strong>autoreleasing修饰。</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">NSObject *o<span class="comment">;</span></span><br><span class="line">// ==&gt;NSObject __strong *o<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">NSObject **o<span class="comment">;</span></span><br><span class="line">// ==&gt;NSObject* __autoreleasing *o<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><strong>为什么要使用指向对象的指针的指针?</strong><br>通常是回传值。<br>在C函数中，无法返回多个值，借助指针可以回传值。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 求两个数的和 积</span></span><br><span class="line"><span class="built_in">NSInteger</span> sum(<span class="built_in">NSInteger</span> a, <span class="built_in">NSInteger</span> b, <span class="built_in">NSInteger</span> *product) &#123;</span><br><span class="line">    <span class="comment">// 计算乘积</span></span><br><span class="line">    *product = a * b;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回求和</span></span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">    <span class="built_in">NSInteger</span> a = <span class="number">3</span>, b = <span class="number">32</span>, summation, product;</span><br><span class="line">    summation = sum(a,b,&amp;product);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld--%ld"</span>,summation,product);</span><br></pre></td></tr></table></figure>
<p>在Objective-C中常用于NSError对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSError</span> *error = <span class="literal">nil</span>;</span><br><span class="line"><span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"这里是URL"</span>];</span><br><span class="line">[<span class="built_in">NSString</span> stringWithContentsOfURL:url encoding:<span class="built_in">NSUTF8StringEncoding</span> error:&amp;error];</span><br></pre></td></tr></table></figure>
<p><code>stringWithContentsOfURL:encoding:error:</code>方法返回字符串，但是在获取字符串的时候可能发生错误，于是传入指向NSError对象的指针的指针，用于回传值(error是指向对象的指针，*error是该对象，&amp;error是指向对象的指针的指针)。</p>
<p>赋给对象指针时，变量所有权修饰符必须保持一致，否则会出错。修饰error的是<strong>strong，而这里要求传入的指针的类型是</strong>autoreleasing:<code>(NSError * _Nullable __autoreleasing * _Nullable)</code>，修饰符不一致，不符合规则，但是编译器做了转换。</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">// 转换所有权修饰符</span><br><span class="line">NSError *error = nil;</span><br><span class="line">NSError __autoreleasing *tmp = error;</span><br><span class="line">BOOL result = [obj performOperationWithError:&amp;tmp];</span><br><span class="line"><span class="keyword">error </span>= tmp;</span><br></pre></td></tr></table></figure>
<p><strong>可是为什么要使用__autoreleasing呢?</strong></p>
<p>实际上不注册到自动释放池也能传(返回)值，就像C函数中的回传乘积值一样。但是这样做不符合内存管理原则，只有作为alloc/new/copy/mutableCopy 开头的方法，能够自己生成并持有。也即其他方法的返回值取得对象(就像场景二中的返回值取得对象一样)需要注册到自动释放池，这便是原则。</p>
<p>如这种不符合内存管理原则的代码:</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="type">CFGetRetainCount</span>(<span class="class"><span class="keyword">object</span>) <span class="title">!=</span> 1) </span>&#123;</span><br><span class="line">   <span class="type">CFRelease</span>(<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (_objc_rootRetainCount(<span class="class"><span class="keyword">object</span>) <span class="title">!=</span> 1) </span>&#123;</span><br><span class="line">   _objc_rootRelease(<span class="class"><span class="keyword">object</span>)</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h2 id="四-内存泄漏的场景有哪些"><a href="#四-内存泄漏的场景有哪些" class="headerlink" title="四.内存泄漏的场景有哪些"></a>四.内存泄漏的场景有哪些</h2><h4 id="1-Core-Fundation的类型转换"><a href="#1-Core-Fundation的类型转换" class="headerlink" title="1. Core Fundation的类型转换"></a>1. Core Fundation的类型转换</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CFMutableArrayRef <span class="built_in">array</span> = CFArrayCreateMutable(kCFAllocatorDefault, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line">id obj = (__bridge id)<span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要使用_objc_rootRetainCount(),很不准很不准很不准</span></span><br><span class="line"><span class="comment">//NSLog(@"%d",_objc_rootRetainCount(fontRef));</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用CFRelease()就会造成内存泄漏</span></span><br><span class="line">CFRelease(<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure>
<p>主要原因是获取到CF对象后没有对其引用计数做出合适的处理。</p>
<h4 id="2-使用calloc函数创建动态数组"><a href="#2-使用calloc函数创建动态数组" class="headerlink" title="2. 使用calloc函数创建动态数组"></a>2. 使用calloc函数创建动态数组</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明动态数组</span></span><br><span class="line"><span class="comment">// 默认为__autoreleasing修饰,需显式指明为__strong</span></span><br><span class="line">id __strong *<span class="built_in">array</span> = nil;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用calloc分配内存</span></span><br><span class="line"><span class="built_in">array</span> = (id __strong *)<span class="built_in">calloc</span>(<span class="number">10</span>, <span class="keyword">sizeof</span>(id));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="built_in">array</span>[<span class="number">0</span>] = @<span class="string">"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单释放内存,造成内存泄漏</span></span><br><span class="line"><span class="comment">// 实际上对象array[0]还存在</span></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">array</span>);</span><br></pre></td></tr></table></figure>
<p>正确做法:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明动态数组</span></span><br><span class="line"><span class="comment">// 默认为__autoreleasing修饰,需显式指明为__strong</span></span><br><span class="line"><span class="keyword">id</span> __<span class="keyword">strong</span> *array = <span class="literal">nil</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明容量</span></span><br><span class="line"><span class="built_in">NSInteger</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用calloc分配内存</span></span><br><span class="line">array = (<span class="keyword">id</span> __<span class="keyword">strong</span> *)calloc(num, <span class="keyword">sizeof</span>(<span class="keyword">id</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">array[<span class="number">0</span>] = <span class="string">@"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">NSInteger</span> i = <span class="number">0</span>;i &lt; num; i ++)&#123;</span><br><span class="line">    array[i] = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line">free(array);</span><br></pre></td></tr></table></figure>
<p>注意:<br>1.不要使用malloc函数分配内存，malloc函数分配内存区域没有被初始化为0，可能产生随机访问导致错误，所以还需要使用memset()函数将内存填充为0。</p>
<p>2.对于NSMutableSet/NSMutableArray/NSMutableDictionary等容器，不需要人为手动管理。</p>
<h4 id="3-MRC下的匿名对象"><a href="#3-MRC下的匿名对象" class="headerlink" title="3. MRC下的匿名对象"></a>3. MRC下的匿名对象</h4><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[[<span class="name">NSObject</span> alloc] init]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>匿名对象在MRC下会造成内存泄漏(C++中的匿名对象创建完毕后立即调用析构函数做销毁处理)。</p>
<p>但是在ARC环境下，不会造成内存泄漏。</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">id temp = objc_msgSend(<span class="name">NSObject</span>, @selector(<span class="name">alloc</span>))<span class="comment">;</span></span><br><span class="line">objc_msgSend(<span class="name">temp</span>,@selector(<span class="name">init</span>))<span class="comment">;</span></span><br><span class="line">objc_release(<span class="name">temp</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>创建完毕立即销毁，这也解释了为什么使用__weak修饰将要创建的对象会有警告。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSObject</span> * __<span class="keyword">weak</span> object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">id</span> __<span class="keyword">weak</span> object = [[<span class="built_in">NSObject</span> alloc] init];</span><br></pre></td></tr></table></figure>
<p>警告:Assigning retained object to weak variable; object will be released after assignment</p>
<h4 id="4-block的循环引用"><a href="#4-block的循环引用" class="headerlink" title="4. block的循环引用"></a>4. block的循环引用</h4><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAUser</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    block _block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,<span class="keyword">self</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="五-weak如何实现"><a href="#五-weak如何实现" class="headerlink" title="五.__weak如何实现"></a>五.__weak如何实现</h2><p>weak 表的作用是在对象执行 dealloc 的时候将所有指向该对象的 weak 指针的值设为 nil，避免悬空指针。苹果使用一个全局的 weak 表来保存所有的 weak 引用。并将对象作为键，weak_entry_t 作为值。weak_entry_t 中保存了所有指向该对象的 weak 指针。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">weak_table_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">weak_entry_t</span> *weak_entries;</span><br><span class="line">    <span class="keyword">size_t</span>    num_entries;</span><br><span class="line">    <span class="keyword">uintptr_t</span> mask;</span><br><span class="line">    <span class="keyword">uintptr_t</span> max_hash_displacement;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="六-Core-Fundation-与-Foundation如何转换"><a href="#六-Core-Fundation-与-Foundation如何转换" class="headerlink" title="六.Core Fundation 与 Foundation如何转换"></a>六.Core Fundation 与 Foundation如何转换</h2><p>1.<strong>__bridge</strong><br>只做类型转换，不修改相关对象的引用计数，原来的 Core Foundation 对象在不用时，需要调用 CFRelease 方法。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">CFMutableArrayRef <span class="built_in">array</span> = CFArrayCreateMutable(kCFAllocatorDefault, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为1</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj强引用该对象(默认为__strong)</span></span><br><span class="line">id obj = (__bridge id)<span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为2</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不使用CFRelease()就会造成内存泄漏</span></span><br><span class="line">CFRelease(<span class="built_in">array</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%ld\n"</span>,CFGetRetainCount(<span class="built_in">array</span>));</span><br></pre></td></tr></table></figure>
<p><img src="http://static.chenyalun.com/2017/04/13/20170413002.png" alt></p>
<p>2.<strong>__bridge_transfer</strong><br>常用在CF对象转化成OC对象时，将CF对象的所有权交给OC对象，此时ARC就能自动管理该内存,作用同CFBridgingRelease()</p>
<figure class="highlight smali"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">CFMutableArrayRef<span class="built_in"> array </span>= CFArrayCreateMutable(kCFAllocatorDefault, 0, NU<span class="class">LL);</span></span><br><span class="line"></span><br><span class="line">// 引用计数为1</span><br><span class="line">printf(<span class="string">"%ld\n"</span>,CFGetRetainCount(array));</span><br><span class="line"></span><br><span class="line">// obj持有对象 array放弃持有对象,相当于做了CFRelease()    </span><br><span class="line">id obj = (__bridge_transfer  id)array;</span><br></pre></td></tr></table></figure>
<p>3.<strong>bridge_retained</strong><br>与bridge_transfer 相反，常用在将OC对象转化成CF对象，且OC对象的所有权也交给CF对象来管理，即OC对象转化成CF对象时，涉及到对象类型和对象所有权的转化，作用同CFBridgingRetain()</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSMutableArray</span> *obj = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMutableArrayRef</span> array2 = (__bridge_retained <span class="built_in">CFMutableArrayRef</span>)obj;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用计数为2,obj持有对象,array2也持有对象</span></span><br><span class="line">printf(<span class="string">"%ld\n"</span>,<span class="built_in">CFGetRetainCount</span>(array2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用完毕,手动release,否则内存泄漏</span></span><br><span class="line"><span class="built_in">CFRelease</span>((array2));</span><br></pre></td></tr></table></figure>
<h2 id="七-简单介绍block"><a href="#七-简单介绍block" class="headerlink" title="七.简单介绍block"></a>七.简单介绍block</h2><p>block是能持有作用域变量的匿名函数，本质上是Objective-C对象。<br>语法格式:<code>^ 返回值类型 参数列表 表达式</code>,其中返回值类型可省略，无参数时参数列表可省略。<br>声明block与声明函数指针类似，执行block与调用函数类似。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回值类型 (*f) 参数类型</span></span><br><span class="line"><span class="keyword">int</span> (*f)(<span class="keyword">int</span>) = &amp;<span class="function"><span class="keyword">func</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 声明<span class="title">block</span></span></span><br><span class="line"><span class="function"><span class="title">int</span> <span class="params">(^blk)</span><span class="params">(<span class="keyword">int</span>)</span>;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// 赋值</span></span><br><span class="line"><span class="function"><span class="title">int</span> <span class="params">(^blk2)</span><span class="params">(<span class="keyword">int</span>)</span> = ^<span class="params">(<span class="keyword">int</span> a)</span></span>&#123; <span class="keyword">return</span> <span class="number">0</span>;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起别名</span></span><br><span class="line">typedef <span class="keyword">int</span> (^block) (<span class="keyword">int</span>);</span><br></pre></td></tr></table></figure>
<h3 id="block的三种类型"><a href="#block的三种类型" class="headerlink" title="block的三种类型"></a>block的三种类型</h3><ol>
<li>如果block没有访问外部的局部变量，或者访问的局部变量被static修饰，block存储在静态区，是NSConcreteGlobalBlock。</li>
<li>其他情况下，语法生成的block存放在栈中，是NSConcreteStackBlock。</li>
<li>当把栈中的block复制到堆上时，是NSConcreteMallocBlock。</li>
</ol>
<h3 id="block复制到堆上的情况"><a href="#block复制到堆上的情况" class="headerlink" title="block复制到堆上的情况"></a>block复制到堆上的情况</h3><p>大部分情况下编译器通常会将创建在栈上的 block 自动拷贝到堆上，只有当 block 作为方法或函数的参数传递时，编译器不会自动调用 copy 方法；</p>
<p>编译器或者方法内部已经实现copy代码的情况:</p>
<ol>
<li>block作为函数返回值</li>
<li>赋值给 __strong id 类型的对象或 block 的成员变量</li>
<li>Cocoa框架方法名含有usingBlock</li>
<li>GCD中的API</li>
</ol>
<p>其他情况需要手动复制:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// 程序异常:栈上的block被废弃 </span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">typedef</span> <span class="keyword">void</span>(^block) (<span class="keyword">void</span>);</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">id</span>)getBlockArray</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects:</span><br><span class="line">            ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125;,</span><br><span class="line">            ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125;, <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    block b = [<span class="keyword">self</span> getBlockArray][<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    b();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>手动将block 复制到堆上:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span>(^block) (<span class="keyword">void</span>);</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">id</span>)getBlockArray</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects:</span><br><span class="line">            [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">            [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125; <span class="keyword">copy</span>], <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    block b = [<span class="keyword">self</span> getBlockArray][<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    b();</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="block捕获变量"><a href="#block捕获变量" class="headerlink" title="block捕获变量"></a>block捕获变量</h3><p><strong>1.对于实例变量、静态全局变量、静态局部变量，全局变量，无论其为基本类型还是对象类型，在block中可读可写。</strong></p>
<p>定义在函数内部的变量称为局部变量（Local Variable）。<br>在所有函数外部定义的变量称为全局变量（Global Variable），它的作用域默认是整个程序，也就是所有的源文件。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 静态全局变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSInteger</span> globalAge = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *globalName = <span class="string">@"Aaren"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">    <span class="built_in">NSInteger</span> age = <span class="number">12</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态局部变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSInteger</span> staticAge = <span class="number">17</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSString</span> *staticName = <span class="string">@"Bob"</span>;</span><br><span class="line"></span><br><span class="line">    YAUser *user = [[YAUser alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">void</span> (^func)() = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改实例变量</span></span><br><span class="line">        user.age = <span class="number">18</span>;</span><br><span class="line">        user.name = <span class="string">@"Jack"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,user.age);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,user.name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改静态局部变量</span></span><br><span class="line">        staticAge = <span class="number">22</span>;</span><br><span class="line">        staticName = <span class="string">@"Lucy"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,staticAge);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,staticName);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改静态全局变量</span></span><br><span class="line">        globalAge = <span class="number">14</span>;</span><br><span class="line">        globalName = <span class="string">@"Allen"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,globalAge);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,globalName);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,user.age);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,user.name);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,staticAge);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,staticName);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,globalAge);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,globalName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p><strong>2.对于局部变量，无论其是基本类型还是对象类型，在block中为只读，当使用<strong>block修饰时，变量可读可写。</strong>block修饰的对象类型变量，在ARC环境下，block对其强引用。在非ARC环境下，block不会对其retain。</strong></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 局部变量</span></span><br><span class="line">     __block <span class="built_in">NSInteger</span> age = <span class="number">17</span>;</span><br><span class="line">     __block <span class="built_in">NSString</span> *name = <span class="string">@"Bob"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> (^func)() = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修改局部变量</span></span><br><span class="line">        age = <span class="number">18</span>;</span><br><span class="line">        name = <span class="string">@"Jack"</span>;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,age);</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,name);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    func();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 修改局部变量</span></span><br><span class="line">    age = <span class="number">22</span>;</span><br><span class="line">    name = <span class="string">@"Aaren"</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%ld"</span>,age);</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="block的循环引用"><a href="#block的循环引用" class="headerlink" title="block的循环引用"></a>block的循环引用</h3><p>Capturing ‘self’ strongly in this block is likely to lead to a retain cycle.</p>
<p>.h文件</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">YAUser </span>: NSObject</span><br><span class="line"><span class="variable">@property</span> (nonatomic, strong) NSObject *object;</span><br><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">func</span>;</span><br><span class="line">@<span class="selector-tag">end</span></span><br></pre></td></tr></table></figure>
<p>.m文件</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (^block) ();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAUser</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    block _block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAUser</span></span></span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="keyword">self</span>.object);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>由于block语法赋值给了成员变量，所以在栈上生成的block被复制到堆上。而block强引用了self的成员变量object，实际上是持有了self，self持有block的同时block持有self，于是self和block循环引用。</p>
<p><img src="http://static.chenyalun.com/2017/04/13/20170413003.png" alt><br>解决方案一:采用__weak修饰。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"Aaren"</span>;</span><br><span class="line">    __<span class="keyword">weak</span> <span class="built_in">NSString</span> *weakName = <span class="keyword">self</span>.name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---此时weakName和self.name是同一个变量</span></span><br><span class="line"></span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakName);</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    _block();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ---此时weakName和self.name是同一个变量</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"Jack"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ---此时weakName和self.name不是同一个变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 结果依然是@"Aaren"</span></span><br><span class="line">    _block();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明了一个self类型的weak指针，名字叫做weakSelf.</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line"></span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakSelf.object);</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更改一方的强引用为弱引用打破了循环引用。但是有瑕疵:block内部可能捕获到空值。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 现在立即使用weakSelf.object</span></span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakSelf.object);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 需要异步执行,但是却无法保证weakSelf.object一定存在</span></span><br><span class="line">        <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakSelf.object);</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 调用block</span></span><br><span class="line">    _block();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自以为block调用完毕,不再需要self.object的值了,大胆地将self.object改为其他值</span></span><br><span class="line">    <span class="keyword">self</span>.object = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况就造成block内部正在使用持有变量的时候，变量的值却意外地改变了，甚至为nil，极易引发问题。<br>最佳方案:弱引用加强引用:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// __weak解决循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    </span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// __strong可以不加,默认为__strong,但最好加上,更醒目</span></span><br><span class="line">        __<span class="keyword">strong</span> <span class="built_in">NSObject</span> *strongObject = weakSelf.object;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 最好加上判断,保证strongObject不为空</span></span><br><span class="line">        <span class="keyword">if</span> (strongObject) &#123;</span><br><span class="line">            <span class="comment">// 现在立即使用weakSelf.object</span></span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strongObject);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 需要异步执行,可以保证weakSelf.object的值不改变</span></span><br><span class="line">            <span class="built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>), ^&#123;</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,strongObject);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用block</span></span><br><span class="line">    _block();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放心地将self.object改为其他值</span></span><br><span class="line">    <span class="keyword">self</span>.object = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这么做可以保证在block执行期间持有的变量不改变。但如果在block执行之前该变量已经为nil，那回天乏力。</p>
<p><strong>评价:</strong><br>这种方式不会造成循环引用:block弱引用的方式持有self.object，即不会影响self.object的释放。在block中是通过<strong>局部变量</strong>强引用self.object，作用域结束，局部变量销毁，不再强引用，从此你我是路人。</p>
<p><strong>注意事项:</strong><br>1.除了使用typeof()之外，还可以直接声明与self相同类型的变量，但依然需要使用__weak修饰。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">__<span class="keyword">weak</span> YAUser *weakSelf = <span class="keyword">self</span>;</span><br></pre></td></tr></table></figure>
<p>2.循环引用的本质是block强引用了self。但是如果以 以上代码为例:block持有了self的成员变量，完全可以通过以下方式解决。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    <span class="built_in">NSObject</span> *weakObject = <span class="keyword">self</span>.object;</span><br><span class="line">    </span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,weakObject);</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3.如果可以放宽要求，那么不把block设置为成员变量、把block中调用的代码抽取出来等都可以解决循环引用。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 循环引用</span></span><br><span class="line">    <span class="keyword">self</span>.object = [[<span class="built_in">NSObject</span> alloc] init];</span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    </span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        [weakSelf log];</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把方法抽取出来</span></span><br><span class="line">- (<span class="keyword">void</span>)log &#123;</span><br><span class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,<span class="keyword">self</span>.object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>使用场景:</strong><br>不需要对block中持有的变量进行写入操作，也即仅仅读取变量。<br>当block异步使用持有的变量时，注意弱引用+强引用配合使用。<br>建议统一采用 <code>typeof(self) + 弱引用 + 强引用的形式</code>。</p>
<p>解决方案二:采用__block修饰。</p>
<p>产生循环引用的代码:</p>
<figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">- <span class="params">(void)</span>func &#123;</span><br><span class="line"></span><br><span class="line">    // 循环引用</span><br><span class="line">    _block = ^<span class="params">()</span> &#123;</span><br><span class="line">        NSLog<span class="params">(@<span class="string">"%p"</span>,self)</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- <span class="params">(void)</span>execBlock &#123;</span><br><span class="line">    _block<span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>解决循环引用:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决循环引用</span></span><br><span class="line">    __block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,tmp);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 关键所在</span></span><br><span class="line">        tmp = <span class="literal">nil</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">    _block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>评价:</strong><br><strong>block本身不能解决循环引用，关键在于 在block中将</strong>block修饰的变量置为空。<br>当需要对持有的变量进行写入操作时可以使用。</p>
<p><strong>注意事项:</strong><br><strong>block必须执行</strong>，否则仍然不会解决循环引用。如下面代码:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)func &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解决循环引用</span></span><br><span class="line">    __block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">    _block = ^() &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%p"</span>,tmp);</span><br><span class="line">        tmp = <span class="literal">nil</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">    <span class="comment">// block没有执行,扔不能解决循环引用</span></span><br><span class="line">    <span class="comment">// _block();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>为什么block没有执行就无法解决循环引用呢?</strong><br>在block中出现tmp的那刻起，block就已经持有了self，即产生了循环引用，如:</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">_block</span> = ^() &#123;tmp;&#125;;</span><br></pre></td></tr></table></figure>
<p>而只有通过执行block才能把nil赋给tmp，才能打破循环引用。因此，执行block的目的是把nil赋予tmp，而把nil赋予tmp便能解决循环引用的原因是打破了self对block的强引用(self已经不存在了)。</p>
<h2 id="八-简要介绍GCD常用API"><a href="#八-简要介绍GCD常用API" class="headerlink" title="八.简要介绍GCD常用API"></a>八.简要介绍GCD常用API</h2><h3 id="1-dispatch-async与dispatch-sync"><a href="#1-dispatch-async与dispatch-sync" class="headerlink" title="1.dispatch_async与dispatch_sync"></a>1.dispatch_async与dispatch_sync</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="selector-tag">dispatch_async</span>(dispatch_get_main_queue(), ^&#123; &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步执行dispatch_sync(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123; &#125;);</span></span><br></pre></td></tr></table></figure>
<h3 id="2-dispatch-queue-t"><a href="#2-dispatch-queue-t" class="headerlink" title="2.dispatch_queue_t"></a>2.dispatch_queue_t</h3><p>使用系统提供的queue</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 主队列:串行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> mainQueue = dispatch_get_main_queue();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue1 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue2 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue3 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_LOW, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue4 = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>自己创建queue</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一般指定这两种类型</span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_SERIAL</span></span><br><span class="line"><span class="comment">// DISPATCH_QUEUE_CONCURRENT</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> createQueue = dispatch_queue_create(<span class="string">"com.chenyalun.gcd.createQueue"</span>, DISPATCH_QUEUE_SERIAL);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(createQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"  "</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// If your deployment target is iOS 6.0 or Mac OS X 10.8 or later</span></span><br><span class="line"><span class="comment">//dispatch_release(createQueue);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定创建的队列与globalQueue享有同一优先级</span></span><br><span class="line"><span class="comment">// 不可指定系统的队列</span></span><br><span class="line">dispatch_set_target_queue(createQueue, globalQueue);</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ol>
<li>现在适配的版本一般大于iOS6,因此不必也不能对自己创建的queue进行dispatch_release，不会造成内存泄漏。</li>
<li>自己创建的队列严格按照格式来，尤其是作为第一个参数的queue的名称:”com.chenyalun.gcd.createQueue”</li>
<li>第二个参数设置为NULL，则为串行队列。specify DISPATCH_QUEUE_SERIAL (or NULL) to create a serial queue or specify DISPATCH_QUEUE_CONCURRENT to create a concurrent queue. In earlier versions, you must specify NULL for this parameter.</li>
</ol>
<h3 id="3-dispatch-resume-dispatch-suspend"><a href="#3-dispatch-resume-dispatch-suspend" class="headerlink" title="3.dispatch_resume/dispatch_suspend"></a>3.dispatch_resume/dispatch_suspend</h3><p>队列的挂起与恢复</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="built_in">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"你在何方 眼看天亮"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂起</span></span><br><span class="line">dispatch_suspend(globalQueue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"都怪这夜色 撩人的疯狂"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 恢复执行</span></span><br><span class="line">dispatch_resume(globalQueue);</span><br></pre></td></tr></table></figure>
<h3 id="4-dispatch-apply"><a href="#4-dispatch-apply" class="headerlink" title="4.dispatch_apply"></a>4.dispatch_apply</h3><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 指定迭代的次数</span><br><span class="line">NSArray <span class="symbol">*</span>array = <span class="meta">@[</span><span class="meta">@1,</span> <span class="meta">@2,</span> <span class="meta">@3,</span> <span class="meta">@4,</span> <span class="meta">@5,</span> <span class="meta">@6,</span> <span class="meta">@7];</span></span><br><span class="line">dispatch_apply(array.count, globalQueue, ^(size_t index) &#123;</span><br><span class="line">    NSLog(<span class="meta">@"%</span><span class="meta">@",</span> [array objectAtIndex:index]);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-dispatch-group"><a href="#5-dispatch-group" class="headerlink" title="5.dispatch_group"></a>5.dispatch_group</h3><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dispatch_group_t <span class="keyword">group</span> = dispatch_group_create();</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"这夜的风儿吹"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"我要 美丽的衣裳"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"为你 对镜贴花黄"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 保证以上三个任务执行完毕再执行下面的任务</span><br><span class="line">dispatch_group_notify(<span class="keyword">group</span>, dispatch_get_main_queue(), ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"这夜色太紧张"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">dispatch_group_t <span class="keyword">group</span> = dispatch_group_create();</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"这夜的风儿吹"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"我要 美丽的衣裳"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">dispatch_group_async(<span class="keyword">group</span>, globalQueue, ^&#123;</span><br><span class="line">    NSLog(@<span class="string">"为你 对镜贴花黄"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 保证以上三个任务执行完毕再执行下面的任务</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_NOW 不等待</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_FOREVER 永久等待</span></span><br><span class="line">NSInteger result = dispatch_group_wait(<span class="keyword">group</span>, DISPATCH_TIME_FOREVER);</span><br><span class="line"><span class="keyword">if</span> (result == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// group中的任务全部执行完毕</span></span><br><span class="line">    NSLog(@<span class="string">"这夜色太紧张"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 任务没有执行完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-dispatch-barrier"><a href="#6-dispatch-barrier" class="headerlink" title="6.dispatch_barrier"></a>6.dispatch_barrier</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第一个任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第二个任务"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 栅栏函数</span></span><br><span class="line">dispatch_barrier_async(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"英雄之所以被称为英雄，可能只是第一枪打中了而已。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第四个任务。"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">dispatch_async</span>(globalQueue, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"第五个任务"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="7-dispatch-once"><a href="#7-dispatch-once" class="headerlink" title="7.dispatch_once"></a>7.dispatch_once</h3><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// typedef long dispatch_once_t;</span></span><br><span class="line"><span class="comment">// static long onceToken;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"仅仅执行一次"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="8-dispatch-after"><a href="#8-dispatch-after" class="headerlink" title="8.dispatch_after"></a>8.dispatch_after</h3><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, </span>(int64_t)(<span class="number">3</span>.<span class="number">0</span> * NSEC_PER_SEC)), <span class="keyword">dispatch_get_main_queue(), </span>^&#123;</span><br><span class="line">        NSLog(@<span class="string">"你在何方 眼看天亮"</span>)<span class="comment">;</span></span><br><span class="line">    &#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>指定3秒之后把要执行的任务追加到主队列中。最早3.0秒后执行，最迟3+1/60秒后执行，若主线程有延迟，时间会更长。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// DISPATCH_TIME_NOW</span></span><br><span class="line"><span class="comment">// DISPATCH_TIME_FOREVER</span></span><br><span class="line"><span class="comment">// 时间的单位为毫微秒</span></span><br><span class="line"><span class="keyword">dispatch_time_t</span> time = dispatch_time(DISPATCH_TIME_FOREVER, <span class="number">3000000</span>);</span><br></pre></td></tr></table></figure>
<h3 id="7-dispatch-semaphore"><a href="#7-dispatch-semaphore" class="headerlink" title="7.dispatch_semaphore"></a>7.dispatch_semaphore</h3><p>更细粒度的排他控制<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局队列:并行队列</span></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> globalQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置信号量为1,也即保证同时访问的数量为1</span></span><br><span class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line">NSMutableArray *<span class="built_in">array</span> = [NSMutableArray <span class="built_in">array</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迭代添加对象</span></span><br><span class="line">dispatch_apply(<span class="number">100</span>, globalQueue, ^(<span class="keyword">size_t</span> index) &#123;</span><br><span class="line">    <span class="comment">// 将要添加元素前一直等待信号量为1</span></span><br><span class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 放心地给数组添加元素</span></span><br><span class="line">    [<span class="built_in">array</span> addObject:[NSNumber numberWithInt:(<span class="keyword">int</span>)index]];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 添加完成后释放信号量</span></span><br><span class="line">    dispatch_semaphore_signal(semaphore);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《SQL必知必会》]]></title>
      <url>http://blog.chenyalun.com/2017/04/09/%E8%AF%BB%E3%80%8ASQL%E5%BF%85%E7%9F%A5%E5%BF%85%E4%BC%9A%E3%80%8B/</url>
      <content type="html"><![CDATA[<p align="center"> 关于SQLite数据库。 </p>

<a id="more"></a>
<p>采用 SQLite 数据库<br>所有命令都敲了一遍，没毛病。</p>
<h1 id="一、提要"><a href="#一、提要" class="headerlink" title="一、提要"></a>一、提要</h1><h2 id="1-语言"><a href="#1-语言" class="headerlink" title="1.语言"></a>1.语言</h2><ol>
<li><p>数据定义语言<br>CREATE 创建表/视图/其他对象<br>ALTER 修改对象<br>DROP 删除表/视图/其他对象</p>
</li>
<li><p>数据操纵语言<br>SELECT 检索数据<br>INSERT 创建记录<br>UPDATE 修改记录<br>DELETE 删除记录</p>
</li>
<li><p>数据控制语言<br>GRANT 赋予用户特权<br>REVOKE 收回用户特权</p>
</li>
</ol>
<h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h2><p>表:某种特定类型数据的结构化清单<br>字段:限定数据中的列(名)<br>记录:水平排列的数据的实体<br>列:表中的一个字段<br>模式:数据库和表的布局及特性<br>NULL值:表中以空白形式出现的值，表示没有设值<br>主键值:不重复，不为空，不能修改，不能重用</p>
<h2 id="3-类型"><a href="#3-类型" class="headerlink" title="3.类型"></a>3.类型</h2><p>SQLite无类型，在表声明中明确了字段类型，仍然可以在该字段中存储其它类型的数据。</p>
<p>NULL: 表示该值为NULL值。<br>INTEGER: 无符号整型值。<br>REAL: 浮点值。<br>TEXT: 文本字符串，存储使用的编码方式为UTF-8、UTF-16BE、UTF-16LE。<br>BLOB: 存储Blob数据，该类型数据和输入数据完全相同。<br>布尔数据类型：SQLite并没有提供专门的布尔存储类型，取而代之的是存储整型1表示true，0表示false。<br>日期和时间数据类型：以TEXT、REAL和INTEGER类型分别不同的格式表示该类型，如：</p>
<pre><code>TEXT: &quot;YYYY-MM-DD HH:MM:SS.SSS&quot;
REAL: 以Julian日期格式存储
INTEGER: 以Unix时间形式保存数据值，
即从1970-01-01 00:00:00到当前时间所流经的秒数。
</code></pre><h2 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h2><ol>
<li>正行注释 <code># 注释内容</code></li>
<li>多行注释 <code>/* 注释内容  */</code></li>
<li>行尾注释 <code>--注释内容</code></li>
</ol>
<h2 id="5-提示"><a href="#5-提示" class="headerlink" title="5.提示"></a>5.提示</h2><ol>
<li>多条语句必须以分号分隔。</li>
<li>SQL语句不区分大小写。</li>
<li>空格会被忽略，可以写成多行。</li>
</ol>
<h2 id="6-约束"><a href="#6-约束" class="headerlink" title="6.约束"></a>6.约束</h2><ol>
<li><p>NOT NULL:非空约束，不能有NULL值。</p>
<pre><code>ID INTEGER NOT NULL
</code></pre></li>
<li><p>DEFAULT:默认值，数据未指定的默认值，如默认时间:<code>date(&#39;now&#39;)</code>。</p>
<pre><code>SALARY REAL DEFAULT 5000.0
</code></pre> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除默认约束</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> SALARY <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>UNIQUE:唯一,列中所有数据各不相同。</p>
<pre><code>AGE INTEGER UNIQUE
</code></pre></li>
<li><p>主键:唯一标识数据表中的记录，不为空。</p>
<pre><code>PRIMARY KEY(ID,name)
</code></pre> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加主键(前提列已经声明为非空)</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">ADD</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">DROP</span> PRIMARY <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>外键:唯一标识其他表中的一条记录。</p>
<pre><code>FOREIGN KEY(name) REFERENCES q(name)
</code></pre> <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 增加外键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t</span><br><span class="line"><span class="keyword">ADD</span> FOREIGN <span class="keyword">KEY</span> (C_ID) <span class="keyword">REFERENCES</span> <span class="keyword">USER</span> (<span class="keyword">ID</span>)</span><br><span class="line"><span class="comment">-- 删除外键</span></span><br><span class="line"><span class="comment">-- 在SQLite中不可用</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> t <span class="keyword">DROP</span> FOREIGN <span class="keyword">KEY</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>CHECK:保证列中所有值满足某一条件。</p>
<pre><code>AGE INT NOT NULL CHECK(AGE&lt;=18)
</code></pre><pre><code>增加CHECK
-- 在SQLite中不可用

ALTER TABLE t
MODIFY AGE INT NOT NULL CHECK(AGE&gt;=18)
或者
ALTER TABLE t
ADD CONSTRAINT checkConstraint CHECK(AGE&gt;=18)

-- 删除CHECK
-- 在SQLite中不可用
ALTER TABLE t
DROP CONSTRAINT checkConstraint

</code></pre></li>
</ol>
<h2 id="7-范式"><a href="#7-范式" class="headerlink" title="7.范式"></a>7.范式</h2><p>第一范式（1NF）：强调的是列的原子性，即列不能够再分成其他几列,如”地址”可以细分为:”省,市”。</p>
<p>第二范式（2NF）：首先是 1NF，其次一是表必须有一个主键；二是没有包含在主键中的列必须完全依赖于主键，而不能只依赖于主键的一部分。</p>
<p>第三范式（3NF）：首先是 2NF，其次非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。</p>
<h2 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h2><blockquote>
<p>传送门：<br><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/15/2322027.html" target="_blank" rel="noopener">http://www.cnblogs.com/stephen-liu74/archive/2012/02/15/2322027.html</a></p>
</blockquote>
<h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理:"></a>字符串处理:</h3><p>UPPER() 大写转换<br>LENGTH() 字符串长度<br>LOWER() 小写转换<br>LTRIM() 去掉字符串左边的空格<br>RTRIM() 去掉字符串右边的空格</p>
<h3 id="日期时间处理"><a href="#日期时间处理" class="headerlink" title="日期时间处理"></a>日期时间处理</h3><p>date(‘now’) 返回当前日期。</p>
<p><code>date(&#39;now&#39;,&#39;start of month&#39;,&#39;1 month&#39;,&#39;-1 day&#39;)</code>返回当前月的最后一天。</p>
<h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p>ABS() 绝对值<br>COS() 角度的余弦<br>EXP() 数的指数值<br>PI() 返回圆周率<br>SIN() 角度的正弦值<br>SQRT() 平方根<br>TAN() 角度的正切</p>
<h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>AVG() 平均值,忽略NULL值</p>
<p>COUNT() 某列的行数,若指定列名则会忽略NULL值,而<code>COUNT(*)</code>对表中行的数目进行计数,无论是否为NULL都计数,DISTINCT不能用于<code>COUNT(*)</code>,如COUNT(DISTINCT *)为错误写法</p>
<p>MAX() 某列的最大值,忽略NULL值<br>MIN() 某列的最小值,忽略NULL值<br>SUM() 某列值的和,忽略NULL值</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>查看版本</p>
<pre><code>select sqlite_version();
</code></pre><h2 id="9-视图"><a href="#9-视图" class="headerlink" title="9.视图"></a>9.视图</h2><p>视图只不过是通过相关的名称存储在数据库中的一个 SQLite 语句。视图实际上是一个以预定义的 SQLite 查询形式存在的表的组合。</p>
<p>SQLite仅支持只读视图，所以视图可以创建，可以读，但其内容不能更改。</p>
<p>视图的作用:<br>视图是一种虚表，允许用户实现以下几点：</p>
<ul>
<li><p>用户或用户组查找结构数据的方式更自然或直观。</p>
</li>
<li><p>限制数据访问，用户只能看到有限的数据，而不是完整的表。</p>
</li>
<li><p>汇总各种表中的数据，用于生成报告。</p>
</li>
</ul>
<h2 id="10-事务"><a href="#10-事务" class="headerlink" title="10.事务"></a>10.事务</h2><p>事务是一个对数据库执行工作单元,是以逻辑顺序完成的工作单位或序列。</p>
<p>事务是指一个或多个更改数据库的扩展。例如，如果正在创建一个记录或者更新一个记录或者从表中删除一个记录，那么正在该表上执行事务。重要的是要控制事务以确保数据的完整性和处理数据库错误。</p>
<p>可以把许多的 SQLite 查询联合成一组，把所有这些放在一起作为事务的一部分进行执行。</p>
<p>事务具有以下四个标准属性，通常根据首字母缩写为 ACID：</p>
<ul>
<li><p>Atomicity（原子性）原子性是指事务是一个不可再分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p>
</li>
<li><p>Consistency（一致性）一致性是指在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏。这是说数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。 </p>
</li>
<li><p>Isolation（隔离性）多个事务并发访问时，事务之间是隔离的，一个事务不应该影响其它事务运行效果。</p>
</li>
<li><p>Durability（持久性）持久性，意味着在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚。</p>
</li>
</ul>
<p>撤销<br>ROLLBACK 命令是用于撤消尚未保存到数据库的事务的事务命令。<br>ROLLBACK 命令只能用于撤销自上次发出 COMMIT 或 ROLLBACK 命令以来的事务。</p>
<pre><code>BEGIN TRANSACTION;

DELETE FROM t WHERE ID = 6;

ROLLBACK;
</code></pre><p>提交</p>
<pre><code>BEGIN TRANSACTION;

DELETE FROM t WHERE ID = 5;
-- 要做的事
END TRANSACTION;

-- 或者使用以下语法
BEGIN;
DELETE FROM t WHERE ID = 6;
COMMIt;
</code></pre><p><strong>注意:保存点在 SQLite (≥ 3.6.8)支持</strong><br>保留点,保留点越多越好</p>
<pre><code>SAVEPOINT delRow;  

ROLLBACK TO delRow;  
</code></pre><h2 id="11-索引"><a href="#11-索引" class="headerlink" title="11.索引"></a>11.索引</h2><p>索引是一种特殊的查找表，数据库搜索引擎用来加快数据检索，简单地说，索引是一个指向表中数据的指针。</p>
<pre><code>创建索引
CREATE INDEX in_name_age ON t(name, age);

删除索引
DROP INDEX in_name;
</code></pre><h2 id="12-顺序"><a href="#12-顺序" class="headerlink" title="12.顺序"></a>12.顺序</h2><table>
<thead>
<tr>
<th>子句</th>
<th>说明</th>
<th>是否必须使用</th>
</tr>
</thead>
<tbody>
<tr>
<td>SELECT</td>
<td>返回列</td>
<td>是</td>
</tr>
<tr>
<td>FROM</td>
<td>检索的表</td>
<td>从表中选择数据时使用</td>
</tr>
<tr>
<td>WHERE</td>
<td>行级过滤</td>
<td>否</td>
</tr>
<tr>
<td>GROUP BY</td>
<td>分组</td>
<td>按组计算聚集时使用</td>
</tr>
<tr>
<td>HAVING</td>
<td>组级过滤</td>
<td>否</td>
</tr>
<tr>
<td>ORDER BY</td>
<td>输出排序</td>
<td>否</td>
</tr>
</tbody>
</table>
<p>妙记:</p>
<pre><code>SELECT kindID, COUNT(*)
FROM table
WHERE PRICE &gt; 10
GROUP BY kindID
HAVING COUNT(*) &gt;=2
ORDER BY kindID;
</code></pre><h1 id="二、命令"><a href="#二、命令" class="headerlink" title="二、命令"></a>二、命令</h1><h2 id="1-SELECT"><a href="#1-SELECT" class="headerlink" title="1.SELECT"></a>1.SELECT</h2><p>检索单个列</p>
<pre><code>-- SELECT 列名 FROM 表名
SELECT age FROM t;
</code></pre><p>检索多个列</p>
<pre><code>SELECT name, age, groupID FROM t;
</code></pre><p>检索所有列</p>
<pre><code>SELECT * FROM t;
-- 检索不必要的列会降低检索和应用程序的性能
</code></pre><p>检索并返回不同的值</p>
<pre><code>SELECT DISTINCT name, age FROM t;

-- DISTINCT作用于所有的列,如
SELECT DISTINCT groupID, age FROM t;
-- 作用于groupID, age两列
-- 当groupID, age双双重复,只会返回一个结果
</code></pre><p>限制结果</p>
<pre><code>-- 不超过5行
SELECT  name, age FROM t LIMIT 5;

-- 从第10行开始检索,不超过7行
SELECT  name, age FROM t LIMIT 5 OFFSET 3;
</code></pre><p>1.LIMIT限制返回的行数，OFFSET指定从哪开始。<br>2.行数指的是索引行，即从第0行开始。</p>
<h2 id="2-ORDEY-BY"><a href="#2-ORDEY-BY" class="headerlink" title="2.ORDEY BY"></a>2.ORDEY BY</h2><p>ORDEY BY子句要保证放到最后</p>
<p>单个列排序</p>
<pre><code>-- 以age值的字母顺序/大小排列
SELECT  name FROM t ORDER BY age;
</code></pre><p>多个列排序</p>
<pre><code>-- 首先按照age,在age中按照name
SELECT  name, age FROM t ORDER BY age, name;
</code></pre><p>按列位置排序</p>
<pre><code>-- 首先按照age,在age中按照name
-- 3对应age, 1对应ID
SELECT ID, name, age FROM t ORDER BY 3, 1;
</code></pre><p>按降序排序</p>
<pre><code>-- DESC 只作用在它前面的列
SELECT ID, name, age FROM t ORDER BY 3 DESC;
SELECT ID, name, age FROM t ORDER BY 1 DESC,3 DESC;
</code></pre><h2 id="3-WHERE"><a href="#3-WHERE" class="headerlink" title="3.WHERE"></a>3.WHERE</h2><p>常用操作符:<br>一般:=  !  =  &lt;  &gt;   &gt;=  &lt;=<br>介于之间:BETWEEN AND<br>为空值:IS NULL</p>
<p>一般使用</p>
<pre><code>SELECT age, name FROM table WHERE age &lt; 10;
-- 单引号用来限定字符串
-- 将值与字符串类型的列比较需要限定引号
-- 将值与数值列进行比较不用引号
SELECT ID, name, age FROM t WHERE age = 18;
SELECT ID, name, age FROM t WHERE name = &apos;张无忌&apos;;
</code></pre><p>范围筛选</p>
<pre><code>SELECT ID, name, age FROM t WHERE age BETWEEN 18 AND 22;
</code></pre><p>空值检查</p>
<pre><code>SELECT ID, name, age FROM t WHERE sex IS NULL;
</code></pre><h2 id="4-AND-OR"><a href="#4-AND-OR" class="headerlink" title="4.AND OR"></a>4.AND OR</h2><p>AND 优先级大于OR<br>组合使用注意加括号</p>
<pre><code>SELECT ID, name, age FROM t WHERE age = 18 AND name = &apos;唐僧&apos;;
SELECT ID, name, age FROM t WHERE age = 18 OR groupID = 1;
</code></pre><p>组合使用</p>
<pre><code>SELECT ID, name, age FROM t WHERE (age = 18 OR ID &lt; 12) AND groupID = 1;
</code></pre><h2 id="5-IN"><a href="#5-IN" class="headerlink" title="5.IN"></a>5.IN</h2><p>关键字匹配</p>
<pre><code>-- 18,19岁
SELECT ID, name, age FROM t WHERE age IN (18, 19);
</code></pre><h2 id="6-NOT"><a href="#6-NOT" class="headerlink" title="6.NOT"></a>6.NOT</h2><p>否定其后的限定条件</p>
<pre><code>SELECT ID, name, age FROM t WHERE age NOT IN (18, 19);
SELECT ID, name, age FROM t WHERE NOT age &lt; 22;
</code></pre><h2 id="7-LIKE"><a href="#7-LIKE" class="headerlink" title="7.LIKE"></a>7.LIKE</h2><p>% 通配符<br>表示任何字符出现任意次数,不会匹配NULL</p>
<pre><code>SELECT ID, name, age FROM t WHERE name LIKE &apos;张%&apos;;
SELECT ID, name, age FROM t WHERE name LIKE &apos;%六&apos;;
</code></pre><p>_ 通配符<br>匹配单个字符,注意LIKE后的值使用字符串</p>
<pre><code>SELECT ID, name, age FROM t WHERE age LIKE &apos;2_&apos;;
</code></pre><p><strong>注意:SQLite 不支持[] 通配符</strong><br><del>[] 通配符<br>指定一系列的字符,只要满足这些字符其中之一,且位置出现在“[]”通配符的位置的字符串就满足查询条件</del></p>
<pre><code>SELECT ID, name, age FROM t WHERE name LIKE &apos;[牛]%&apos;;
-- 否定
SELECT ID, name, age FROM t WHERE name LIKE &apos;[^牛]%&apos;;
</code></pre><p>注意:少使用通配符,尽量不要把通配符置于开始处</p>
<h2 id="8-拼接"><a href="#8-拼接" class="headerlink" title="8.拼接"></a>8.拼接</h2><p>使用 || 拼接多个列</p>
<pre><code>SELECT age || &apos;(&apos; || name || &apos;)&apos; FROM t;
-- 结果: 23(牛魔王)
</code></pre><p>使用RTRIM去除填充列宽的文本值</p>
<pre><code>SELECT age || &apos;(&apos; || RTRIM(name) || &apos;)&apos; FROM t;

RTRIM() 去掉字符串右边的空格
LTRIM() 去掉字符串左边的空格
TRIM() 去掉字符串左右两边的空格
</code></pre><p>使用别名AS<br>  要求得到的是一列</p>
<pre><code>SELECT age || &apos;(&apos; || RTRIM(name) || &apos;)&apos;  AS Results FROM t;
</code></pre><p>执行计算</p>
<pre><code>SELECT age + 3, name  FROM t;
</code></pre><h2 id="9-GROUP-BY"><a href="#9-GROUP-BY" class="headerlink" title="9.GROUP BY"></a>9.GROUP BY</h2><p>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前</p>
<pre><code>SELECT groupID, COUNT(*)  FROM t GROUP BY groupID;
/* 
含有COUNT(*)的分组的结果不该包含每列独有的字段,如name,ID等,
 而应该是共性的字段,如分组ID等,因为目的是得知某组的COUNT
 */

SELECT name FROM t GROUP BY name;
</code></pre><h2 id="10-HAVING"><a href="#10-HAVING" class="headerlink" title="10.HAVING"></a>10.HAVING</h2><p>1.WHERE过滤行，而HAVING过滤分组,HAVING支持所有WHERE操作符<br>2.WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤</p>
<pre><code>SELECT groupID, COUNT(*)  FROM t GROUP BY groupID HAVING COUNT(*) &gt; 5;
-- 筛选每组数量大于5
</code></pre><h2 id="11-ORDER-BY"><a href="#11-ORDER-BY" class="headerlink" title="11.ORDER BY"></a>11.ORDER BY</h2><p>排序<br>HAVING常与GROUP BY连用</p>
<pre><code>SELECT groupID, COUNT(*)  
FROM t 
WHERE age &gt; 18  
GROUP BY groupID 
HAVING COUNT(*) &gt; 2
ORDER BY groupID DESC;
</code></pre><h2 id="12-子查询"><a href="#12-子查询" class="headerlink" title="12.子查询"></a>12.子查询</h2><p>在SELECT语句中，子查询总是从内向外处理。<br>作为子查询的SELECT语句只能查询单个列。企图检索多个列将返回错误。</p>
<pre><code>SELECT name, age 
FROM t 
WHERE age IN 
(SELECT age FROM t WHERE age &gt; 10 AND sex IS NULL);
</code></pre><h2 id="13-连接"><a href="#13-连接" class="headerlink" title="13.连接"></a>13.连接</h2><p>内连接是据根据每个表共有的列的值匹配两个表中的行</p>
<pre><code>SELECT t.name, age 
FROM t 
INNER JOIN q 
ON t.ID = q.ID;


SELECT t.name, t.age 
FROM t, q 
WHERE t.name = q.name; 
-- 注意表的名称要匹配
</code></pre><p>自连接,查询中需要的两个表实际上是相同的表</p>
<pre><code>SELECT a.name, a.age 
FROM t AS a, t AS b 
WHERE a.name = b.name 
AND b.ID = 10;
</code></pre><p>外连接<br>1.外连接可以是左向外连接、右向外连接或完整外部连接<br>2.在使用OUTER JOIN语法时，必须使用RIGHT或LEFT关键字指定包括其所有行的表(RIGHT指出的是OUTER JOIN右边的表，而LEFT指出的是OUTER JOIN左边的表)。<br>3.左向外连接的结果集包括LEFT  OUTER子句中指定的左表的所有行，而不仅仅是连接列所匹配的行。<br>4.右向外连接是左向外连接的反向连接。将返回右表的所有行。如果右表的某行在左表中没有匹配行，则将为左表返回空值。   </p>
<p>SQLite支持左外连接LEFT OUTER JOIN，但不支持RIGHT OUTER JOIN 和 FULL OUTER JOIN语法。</p>
<pre><code>SELECT t.*, q.*  
FROM t 
LEFt JOIN q 
ON t.ID = q.ID;   
</code></pre><p>交叉连接。交叉连接返回左表中的所有行，左表中的每一行与右表中的所有行组合。交叉连接也称作笛卡尔积。 </p>
<p>总结:<br>左外连接显示左表所有行+匹配行<br>右外连接显示右表所有行+匹配行<br>完整外部连接显示左表和右表中的所有行<br>内连接显示根据比较运算符匹配两个表中的行<br>自连接需要的两个表实际上是相同的表<br>交叉连接显示左表所有行+左表每一行与右表所有行的组合<br>连接不匹配时显示空值</p>
<h2 id="14-UNION"><a href="#14-UNION" class="headerlink" title="14.UNION"></a>14.UNION</h2><p>将结果组合成一个结果集<br>1.UNION中的每个查询必须包含相同的列、表达式或聚集函数<br>2.UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔<br>3.列数据类型必须兼容</p>
<pre><code>SELECT name, age 
FROM t 
WHERE name LIKE &apos;张%&apos; 
UNION 
SELECT name, age 
FROM t 
WHERE age &gt; 22;
-- 相当于 &quot;并&quot;在一起
</code></pre><h2 id="15-INSERT"><a href="#15-INSERT" class="headerlink" title="15.INSERT"></a>15.INSERT</h2><p>插入记录</p>
<pre><code>INSERT INTO t 
VALUES(13, 
     &apos;白骨精&apos;, 
     &apos;1543&apos;, 
     1, 
     NULL, 
     19, 
     1.68);


INSERT INTO
t(ID, name, phone, groupID, sex, age, height) 
VALUES(14, &apos;白龙马&apos;, &apos;1323&apos;, 0, NULL, 20, 1.69);
</code></pre><p>VALUES必须以其指定的次序匹配指定的列名,更推荐这种方式<br>省略列:允许NULL或者有默认值</p>
<h2 id="16-CREATE-AS"><a href="#16-CREATE-AS" class="headerlink" title="16.CREATE AS"></a>16.CREATE AS</h2><p>复制表</p>
<pre><code>CREATE TABLE c AS SELECT * FROM t;
</code></pre><h2 id="17-UPDATE"><a href="#17-UPDATE" class="headerlink" title="17.UPDATE"></a>17.UPDATE</h2><p>更新行</p>
<pre><code>UPDATE t 
SET height = 1.66 
WHERE name = &apos;白龙马&apos;;

-- 删除某列的值
UPDATE t 
SET height = NULL  
WHERE name = &apos;韦小宝&apos;;    
</code></pre><p>更新多列,注意逗号</p>
<pre><code>UPDATE t 
SET height = 1.55, 
phone = &apos;1888&apos;, 
groupID = 0  
WHERE name = &apos;唐僧&apos;;
</code></pre><h2 id="18-DELETE"><a href="#18-DELETE" class="headerlink" title="18.DELETE"></a>18.DELETE</h2><p>删除行</p>
<pre><code>DELETE FROM t 
WHERE name = &apos;白龙马&apos;;
</code></pre><h2 id="19-CREATE"><a href="#19-CREATE" class="headerlink" title="19.CREATE"></a>19.CREATE</h2><p>创建表</p>
<pre><code>CREATE TABLE d
(
ID INTEGER NOT NULL UNIQUE,
name TEXT NOT NULL,
sex INTEGER DEFAULT 0,
height REAL CHECK(height &gt; 0),

PRIMARY KEY(&apos;ID&apos;)
FOREIGN KEY(name) REFERENCES q(name)
);
</code></pre><p>主键单独标明。</p>
<h2 id="20-ALTER"><a href="#20-ALTER" class="headerlink" title="20.ALTER"></a>20.ALTER</h2><p>给表增加一列</p>
<pre><code>ALTER TABLE b
ADD place TEXT;    
</code></pre><p>重命名表</p>
<pre><code>ALTER TABLE b
RENAME TO bbb;
</code></pre><p>在 SQLite 中，除了重命名表和在已有的表中添加列，ALTER TABLE 命令不支持其他操作,包括删除列,定义主键和外键等.</p>
<p>SQLite不支持删除列</p>
<pre><code>ALTER TABLE t 
DROP COLUMN vend_phone;
</code></pre><h2 id="21-DROP"><a href="#21-DROP" class="headerlink" title="21.DROP"></a>21.DROP</h2><p>删除表</p>
<pre><code>DROP TABLE t;
</code></pre><h2 id="22-视图"><a href="#22-视图" class="headerlink" title="22.视图"></a>22.视图</h2><p>创建视图</p>
<pre><code>CREATE VIEW view_b 
AS 
SELECT name, age FROM t;
</code></pre><p>查看视图</p>
<pre><code>SELECT * FROM view_b;
</code></pre><p>删除视图</p>
<pre><code>DROP VIEW view_b;
</code></pre><blockquote>
<p>参考感谢：<br><a href="http://zhiwei.li/text/2010/08/23/sqlite%E5%A4%96%E9%94%AE/" target="_blank" rel="noopener">http://zhiwei.li/text/2010/08/23/sqlite%E5%A4%96%E9%94%AE/</a><br><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/02/22/2325258.html" target="_blank" rel="noopener">http://www.cnblogs.com/stephen-liu74/archive/2012/02/22/2325258.html</a><br><a href="http://www.runoob.com/sqlite/sqlite-syntax.html" target="_blank" rel="noopener">http://www.runoob.com/sqlite/sqlite-syntax.html</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> 阅读 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[读《Effective Objective-C 2.0》]]></title>
      <url>http://blog.chenyalun.com/2017/04/05/%E8%AF%BB%E3%80%8AEffective%20Objective-C%202.0%E3%80%8B/</url>
      <content type="html"><![CDATA[<p align="center"> 许多小技巧。 </p>

<a id="more"></a>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>一晚上加一早上时间读了一遍,很多技巧都屡有耳闻,不过还是收获许多.</p>
<h1 id="钩玄"><a href="#钩玄" class="headerlink" title="钩玄"></a>钩玄</h1><ol>
<li>.h文件中使用@class声明类,.m文件中使用import导入其他头文件,而不是只在.h文件中import头文件</li>
<li>常量使用static const,其他情况(如[NSNotificationCenter defaultCenter])使用宏</li>
<li>不需要位或运算的枚举使用NS_ENUM,需要使用位或运算的枚举使用NS_OPTIONS,避免C语言中的enum</li>
<li>switch状态机下避免default分支(确保switch正确处理已知情况,往后增加新的的枚举值会有警告)</li>
</ol>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="1-属性声明为-dynamic后该怎么做"><a href="#1-属性声明为-dynamic后该怎么做" class="headerlink" title="1.属性声明为@dynamic后该怎么做"></a>1.属性声明为@dynamic后该怎么做</h2><p>.h文件暴露属性</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br></pre></td></tr></table></figure>
<p>.m文件动态添加方法</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAHeader</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSString</span> *_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAHeader</span></span></span><br><span class="line"><span class="keyword">@dynamic</span> name;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加set方法,要传入参数</span></span><br><span class="line"><span class="keyword">void</span> dynamicSetMethodIMP(YAHeader *<span class="keyword">self</span>, SEL _cmd, <span class="built_in">NSString</span> *prame) &#123;</span><br><span class="line">    <span class="keyword">self</span>-&gt;_name = prame;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加get方法,要返回NSString *类型</span></span><br><span class="line"><span class="built_in">NSString</span> *dynamicGetMethodIMP(YAHeader *<span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>-&gt;_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(setName:)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)dynamicSetMethodIMP, <span class="string">"v@:@"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(name)) &#123;</span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, (IMP)dynamicGetMethodIMP, <span class="string">"v@:"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>注意:<br>1.按照本书所说,使用@dynamic将仅仅生成get/set方法的声明,不会生成get/set方法的实现,也不会合成成员变量</p>
<p>2.由于没有合成成员变量,所以手动添加</p>
<p>3.使用@property但是却没有合成成员变量的情景有:<br>(1):同时使用@property和@dynamic<br>(2):set和get方法均手动实现<br>(3):分类中@property<br>值得一提的是,当使用<code>@synthesize num;</code>时,将不会生成成员变量<code>_num</code>,而是生成成员变量<code>num</code></p>
<h2 id="2-关联对象中为什么使用static修饰的指针"><a href="#2-关联对象中为什么使用static修饰的指针" class="headerlink" title="2.关联对象中为什么使用static修饰的指针"></a>2.关联对象中为什么使用static修饰的指针</h2><p>static的作用之一便是使变量在内存中只有一份拷贝,由于需要objc_setAssociatedObject和objc_getAssociatedObject中的两个键(void *key)需要匹配同一个值(关联的对象),所以需要两者是完全相同的指针,故而使用静态全局变量做键</p>
<h2 id="3-简述Objective-C在发送消息时的动态性"><a href="#3-简述Objective-C在发送消息时的动态性" class="headerlink" title="3.简述Objective-C在发送消息时的动态性"></a>3.简述Objective-C在发送消息时的动态性</h2><p>静态绑定:将在运行期间调用的函数在编译期间已经确定<br>动态绑定:发送的消息部分转化为objc_msgSend函数,传入将要调用函数的对象、将要调用的函数以及将要调用的函数的参数,具体调用哪个函数,通过快速映射表、方法列表亦或是消息转发确定<br>objc_msgSend_stret:消息返回结构体调用<br>objc_msgSend_fpret:消息返回浮点数调用<br>objc_msgSendSuper:给超类发送消息调用</p>
<h2 id="4-如何解决unrecognized-selector-send-to-instance"><a href="#4-如何解决unrecognized-selector-send-to-instance" class="headerlink" title="4.如何解决unrecognized selector send to instance"></a>4.如何解决unrecognized selector send to instance</h2><p>消息转发的三个流程<br>1.对象收到无法识别的消息,根据使类方法还是对象方法调用<br><code>+ (BOOL)resolveInstanceMethod:(SEL)selector</code><br><code>+ (BOOL)resolveClassMethod:(SEL)selector</code><br>前提:相关方法的实现代码已经写好<br>使用:根据类方法还是对象方法,在resolveMethod中为无法响应的selector动态添加方法实现(提供函数指针IMP)<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">class_addMethod(<span class="name">self</span>, selector, (<span class="name">IMP</span>)methodImplemention,<span class="string">"v@:@"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>若没有做出处理,返回NO</p>
<p>2.倘若没有相关方法实现,进入<br><code>- (id)forwardingTargetForSelector:(SEL)selector</code><br>将消息转发给其他对象,若找不到,返回nil</p>
<p>3.完整的消息转发,调用对象方法<br><code>- (void)forwardInvocation:(NSInvocation *)invocation</code><br>首先发送-methodSignatureForSelector:获取函数的参数和返回值类型,若返回nil,直接挂掉,否则Runtime创建一个NSIn<br>vocation对象,发送forwardInvocation消息给目标对象</p>
<h2 id="5-如何实现多重继承"><a href="#5-如何实现多重继承" class="headerlink" title="5.如何实现多重继承"></a>5.如何实现多重继承</h2><p>C类 继承自 A类,想让C类对象同时具备A类方法和 B类方法的能力<br>使C类对象中拥有B类对象(组合),在C类对象中实现对象方法forwardingTargetForSelect:方法,将发送来的B类方法转发给所拥有的B类对象处理</p>
<h2 id="6-怎么实现方法实现的交换"><a href="#6-怎么实现方法实现的交换" class="headerlink" title="6.怎么实现方法实现的交换"></a>6.怎么实现方法实现的交换</h2><figure class="highlight ceylon"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取通过SEL获取一个方法</span></span><br><span class="line"><span class="keyword">class</span><span class="number">_</span>getInstanceMethod</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个方法的实现</span></span><br><span class="line">method<span class="number">_</span>getImplementation</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取一个OC实现的编码类型</span></span><br><span class="line">method<span class="number">_</span>getTypeEncoding</span><br><span class="line"></span><br><span class="line"><span class="comment">// 給方法添加实现</span></span><br><span class="line"><span class="keyword">class</span><span class="number">_</span>addMethod</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用一个方法的实现替换另一个方法的实现</span></span><br><span class="line"><span class="keyword">class</span><span class="number">_</span>replaceMethod</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换两个方法的实现</span></span><br><span class="line">method<span class="number">_</span>exchangeImplementations</span><br></pre></td></tr></table></figure>
<p>获取Method<br><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">+ (void)load &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">lowercaseString</span> =</span> class_getInstanceMethod([NSString <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">lowercaseString</span>));</span></span><br><span class="line">    <span class="function"><span class="keyword">Method</span> <span class="title">uppercaseString</span> =</span> class_getInstanceMethod([NSString <span class="class"><span class="keyword">class</span>], @<span class="title">selector</span>(<span class="title">uppercaseString</span>));</span></span><br><span class="line">    method_exchangeImplementations(lowercaseString, uppercaseString);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>表面上看是死循环:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)lowercaseString &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.lowercaseString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)uppercaseString &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">self</span>.uppercaseString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-简述为代码加锁的方式"><a href="#7-简述为代码加锁的方式" class="headerlink" title="7.简述为代码加锁的方式"></a>7.简述为代码加锁的方式</h2><p>同步块:</p>
<pre><code>@synchronized(self) {//...}
</code></pre><p>滥用@synchronized(self)很危险,所有的块都会彼此抢夺同一个锁.</p>
<p>锁对象:<br><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line"><span class="symbol">_lock</span> = [[<span class="symbol">NSLock</span> alloc] init];</span><br><span class="line"></span><br><span class="line">[<span class="symbol">_lock</span> lock];</span><br><span class="line">// ...</span><br><span class="line">[<span class="symbol">_lock</span> unlock];</span><br></pre></td></tr></table></figure></p>
<h2 id="8-原子性一定安全吗-如何确保属性的线程安全"><a href="#8-原子性一定安全吗-如何确保属性的线程安全" class="headerlink" title="8.原子性一定安全吗,如何确保属性的线程安全"></a>8.原子性一定安全吗,如何确保属性的线程安全</h2><p>不一定.<br>原子性能保证存取方法的线程安全,也即读写操作是原子性的,在读或者写发生的时候,其他读或者写操作必须等待.<br>然而同一个线程上多次调用get方法,每一次获取到的值未必相同,多次访问期间,其他线程可能会写入新的值.比如当A线程的写操作结束后，B线程进行写操作，然后当A线程需要读操作时，却获得了在B线程中的值，这就破坏了线程安全.</p>
<p>线程安全:不会出现数据不一致或者数据污染。</p>
<p>使用串行同步队列,将读取以及写入操作都安排在同一个队列中,即可保证数据同步.</p>
<p>方式一:同步派发(在set方法简单的时候使用)</p>
<p>.h文件<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br></pre></td></tr></table></figure></p>
<p>.m文件<br>1.创建串行队列<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAHeader</span> ()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">dispatch_queue_t</span> _serialQueue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> * <span class="keyword">const</span> label = <span class="string">"label"</span>;</span><br><span class="line"> _serialQueue = dispatch_queue_create(label, <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure></p>
<p>2.合成属性(由于需要重写get/set方法,编译器已取消自动合成)<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAHeader</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> name = _name;</span><br><span class="line"><span class="keyword">char</span> * <span class="keyword">const</span> label = <span class="string">"label"</span>;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)setName:(<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(_serialQueue, ^&#123;</span><br><span class="line">        _name = name;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span> *)name &#123;</span><br><span class="line">   </span><br><span class="line">    __block <span class="built_in">NSString</span> *localName;</span><br><span class="line">    <span class="built_in">dispatch_sync</span>(_serialQueue, ^&#123;</span><br><span class="line">        localName = _name;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> localName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<p>方式二:异步派发(在set方法复杂的时候使用)<br>改动set方法</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">- (void)<span class="built_in">setName</span>:(NSString *)<span class="built_in">name</span> &#123;</span><br><span class="line">    dispatch_async(<span class="variable">_serialQueue</span>, ^&#123;</span><br><span class="line">         <span class="variable">_name</span> = <span class="built_in">name</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">// ...(还有许多操作)</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在异步派发的时候需要拷贝block,需要消耗一定时间,所以在set方法更复杂的场景下使用</p>
<h2 id="9-performSelector的局限性有哪些"><a href="#9-performSelector的局限性有哪些" class="headerlink" title="9.performSelector的局限性有哪些"></a>9.performSelector的局限性有哪些</h2><p>1.由于无法确定将要执行的selector具体是什么,ARC无法将其纳入合适的内存管理方法中,可能有内存泄漏<br>2.selector的返回值类型和参数个数、类型受到限制<br>建议使用GCD中的dispatch_async/dispatch_after等代替相应的performSelector</p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (void)fetchSelector:(NSInteger)condition &#123;</span><br><span class="line">    <span class="keyword">SEL </span><span class="keyword">selector;</span></span><br><span class="line"><span class="keyword"> </span>   <span class="meta">if</span> (condition == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">selector </span>= <span class="comment">@selector(dismiss);</span></span><br><span class="line">    &#125; <span class="meta">else</span> <span class="meta">if</span> (condition == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">selector </span>= <span class="comment">@selector(miss:);</span></span><br><span class="line">    &#125; <span class="meta">else</span> &#123;</span><br><span class="line">         <span class="keyword">selector </span>= <span class="comment">@selector(love);</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    [<span class="keyword">self </span>performSelector:<span class="keyword">selector];</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>
<p>警告:/Users/chenyalun/Desktop/iOS/program/Demo170404/Demo170404/YAHeader.m:70:11: PerformSelector may cause a leak because its selector is unknown</p>
<h2 id="10-bridge、bridge-retained与-bridge-transfer的区别"><a href="#10-bridge、bridge-retained与-bridge-transfer的区别" class="headerlink" title="10.bridge、bridge_retained与__bridge_transfer的区别"></a>10.<strong>bridge、</strong>bridge_retained与__bridge_transfer的区别</h2><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *array = @[@<span class="number">10</span>, @<span class="number">11</span>, @<span class="number">12</span>];</span><br><span class="line"><span class="built_in">CFArrayRef</span> cfarray = (__bridge <span class="built_in">CFArrayRef</span>)array;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFArrayRef</span> cfarray2 = (__bridge_retained <span class="built_in">CFArrayRef</span>)array;</span><br><span class="line"><span class="built_in">CFRelease</span>(cfarray2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSArray</span> *array2 = (__bridge_transfer <span class="built_in">NSArray</span> *)cfarray;</span><br></pre></td></tr></table></figure>
<p>__bridge表示ARC仍然具备该对象的所有权</p>
<p>__bridge_retained表示ARC交出该对象的所有权(需手动release)</p>
<p>__bridge_transfer:表示反向转换,同时ARC获取对象所有权</p>
<h2 id="11-NSCache相较NSDictionary的优点"><a href="#11-NSCache相较NSDictionary的优点" class="headerlink" title="11.NSCache相较NSDictionary的优点"></a>11.NSCache相较NSDictionary的优点</h2><p>1.在系统发出低内存通知时,NSCache自动删减缓存,并且先行删减最久未使用的对象<br>2.增加键的引用计数而不是拷贝它<br>3.NSCache线程安全,可以多线程访问而不出错<br>4.NSPurgeableData是NSMutableData的子类,将它与NSCache搭配使用,当NSPurgeableData对象所占内存为系统所丢弃时,该对象自动从NSCache缓存中清除</p>
<p>访问NSPurgeableData对象</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">NSCache *cache = [[NSCache alloc] init];</span><br><span class="line"></span><br><span class="line">NSPurgeableData *purgeableData = [NSPurgeableData <span class="string">dataWithBytes:</span>@<span class="string">"ILOVEYOU"</span> <span class="string">length:</span><span class="number">10</span>];</span><br><span class="line">[cache <span class="string">setObject:</span>purgeableData <span class="string">forKey:</span>@<span class="number">00</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问NSPurgeableData</span></span><br><span class="line"><span class="keyword">if</span> (purgeableData) &#123;</span><br><span class="line">    <span class="comment">// 开始访问,现在还不应该丢弃自己所占用的内存</span></span><br><span class="line">    [purgeableData beginContentAccess];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    [self <span class="string">useData:</span>purgeableData];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 结束访问,现在可以丢弃自己所占用的内存啦</span></span><br><span class="line">    [purgeableData endContentAccess];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参考资料:</p>
<blockquote>
<p>乞力马扎罗的雪的博客:<a href="http://blog.csdn.net/chenyufeng1991/article/details/49687215" target="_blank" rel="noopener"> blog.csdn.net/chenyufeng1991/article/details/49687215</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C++提要]]></title>
      <url>http://blog.chenyalun.com/2017/04/02/C++%E6%8F%90%E8%A6%81/</url>
      <content type="html"><![CDATA[<p align="center"> 不堪回首。 </p>

<a id="more"></a>
<p>Java、前端、Android、iOS的笔试题涌现大量C++的内容，我和小伙伴们苦不堪言，于是特意抽大半天时间试着回忆一下。</p>
<h1 id="钩玄"><a href="#钩玄" class="headerlink" title="钩玄"></a>钩玄</h1><h2 id="1-命名空间如何使用"><a href="#1-命名空间如何使用" class="headerlink" title="1.命名空间如何使用"></a>1.命名空间如何使用</h2><p>防止出现变量或函数的命名冲突.</p>
<p>在 main() 函数中声明命名空间 std，它的作用范围就位于 main() 函数内部，如果在其他函数中又用到了 std，就需要重新声明</p>
<p>如果希望在所有函数中都使用命名空间 std，可以将它声明在全局范围中<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义</span></span><br><span class="line"><span class="keyword">namespace</span> YA &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">// 变量、类、函数、typedef、#define 等都可以出现在命名空间中</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式一:域解析操作符</span></span><br><span class="line"><span class="comment">// :是域解析操作符,指明要使用的命名空间</span></span><br><span class="line">YA :: a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式二:针对变量</span></span><br><span class="line"><span class="comment">// 如果以后出现了未指明命名空间的a，就使用YA :: a</span></span><br><span class="line"><span class="keyword">using</span> YA :: a;</span><br><span class="line">a = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用方式三:针对命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> YA; <span class="comment">// 声明整个命名空间</span></span><br></pre></td></tr></table></figure></p>
<h2 id="2-C-现行标准库"><a href="#2-C-现行标准库" class="headerlink" title="2.C++现行标准库"></a>2.C++现行标准库</h2><p>对于不带.h的头文件，所有的符号都位于命名空间 std 中，使用时需要声明命名空间 std；<br>对于带.h的头文件，没有使用任何命名空间，所有符号都位于全局作用域</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure>
<p>C语言的头文件在 C++ 中依然被支持，C++ 新增的库更加强大和灵活,例如 iostream、fstream、string 等</p>
<p>推荐:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure></p>
<h2 id="3-cin与cout"><a href="#3-cin与cout" class="headerlink" title="3.cin与cout"></a>3.cin与cout</h2><p>cout 和 cin 分别是 ostream 和 istream 类的对象,而不是关键字<br>使用:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"a是"</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"b是"</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p>
<p>其中endl表示end of line,表示换行,可用\n代替</p>
<h2 id="4-C-中const的作用"><a href="#4-C-中const的作用" class="headerlink" title="4.C++中const的作用"></a>4.C++中const的作用</h2><p>1.定义常量<br><code>const int a = 10; // a不可修改</code></p>
<p>2.类型检查<br><code>void f(const int i){}
// 对传进来的参数进行类型检查,不匹配则提示</code></p>
<p>3.保护参数<br><code>void f(const int i){}
// i不可修改</code></p>
<p>4.节省空间<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 替换三次,分配三次内存空间</span></span><br><span class="line">#define pi <span class="number">3.14</span></span><br><span class="line"><span class="keyword">double</span> a = pi;</span><br><span class="line"><span class="keyword">double</span> b = pi;</span><br><span class="line"><span class="keyword">double</span> c = pi;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> <span class="literal">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 只分配一次内存空间</span></span><br><span class="line"><span class="keyword">double</span> d = <span class="literal">PI</span>;</span><br><span class="line"><span class="comment">// 不再分配内存空间</span></span><br><span class="line"><span class="keyword">double</span> e = <span class="literal">PI</span>;</span><br></pre></td></tr></table></figure></p>
<p>混淆点:<br>指针本身是常量不可变,不可以指向其他</p>
<pre><code>char* const pContent;
</code></pre><p>指针所指向的内容是常量不可变</p>
<pre><code>const char *pContent;
</code></pre><p>两者都不可变</p>
<pre><code>const char* const pContent;
</code></pre><h2 id="5-动态分配内存"><a href="#5-动态分配内存" class="headerlink" title="5.动态分配内存"></a>5.动态分配内存</h2><p>在C中<br>分配</p>
<pre><code>int *p = (int *)malloc(sizeof(int) * 10);
</code></pre><p>释放</p>
<pre><code>free(p);
</code></pre><p>在C++中 new[]分配 delete[]释放</p>
<pre><code>int *p = new int;
delete p;

int *p = new int[10];  //分配10个int型的内存空间
delete[] p;
</code></pre><p>new 是在堆区分配内存，必须手动释放，否则只能等到程序运行结束由操作系统回收<br>用 new 分配内存时会调用构造函数，用 delete 释放内存时会调用析构函数。</p>
<h2 id="6-函数调用的流程"><a href="#6-函数调用的流程" class="headerlink" title="6.函数调用的流程"></a>6.函数调用的流程</h2><p>函数调用是有时间和空间开销的(递归效率低下)。<br>程序在执行一个函数之前需要做一些准备工作，要将实参、局部变量、返回地址以及若干寄存器都压入栈中，然后才能执行函数体中的代码；函数体中的代码执行完毕后还要清理现场，将之前压入栈中的数据都出栈，才能接着执行函数调用位置以后的代码。</p>
<h2 id="7-内联函数"><a href="#7-内联函数" class="headerlink" title="7.内联函数"></a>7.内联函数</h2><p>作用:为了消除函数调用的时空开销，在编译时将函数调用处用函数体替换，类似于C语言中的宏展开。这种在函数调用处直接嵌入函数体的函数称为内联函数.</p>
<p>在<strong>函数定义处</strong>添加inline关键字,声明处添加无效.<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="title">p</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"内联函数"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>注意:</p>
<ol>
<li>当函数比较复杂时，函数调用的时空开销可以忽略，大部分的 CPU 时间都会花费在执行函数体代码上，所以一般是将非常短小的函数声明为内联函数。</li>
<li>对函数作 inline 声明只是程序员对编译器提出的一个建议，而不是强制性的。编译器有自己的判断能力，它会根据具体情况决定是否这样做。如何函数体非常大，那么编译器将忽略函数的内联声明，而将内联函数作为普通函数处理。</li>
</ol>
<p>缺点:编译后的程序会存在多份相同的函数拷贝，如果被声明为内联函数的函数体非常大，那么编译后的程序体积也将会变得很大。</p>
<p>总结:小而短的函数声明为内联函数.</p>
<p>内联函数替代宏<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sum(a,b) (a+b)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="8-函数的默认参数-重载"><a href="#8-函数的默认参数-重载" class="headerlink" title="8.函数的默认参数/重载"></a>8.函数的默认参数/重载</h2><p>默认参数只能放在形参列表的最后，而且一旦为某个形参指定了默认值，那么它后面的所有形参都必须有默认值。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b = <span class="number">10</span>)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用</span></span><br><span class="line">sum(<span class="number">12</span>,<span class="number">23</span>);</span><br><span class="line">sum(<span class="number">12</span>)</span><br></pre></td></tr></table></figure></p>
<p>重载就是在一个作用范围内（同一个类、同一个命名空间等）有多个名称相同但参数不同的函数。<br>重载的结果是让一个函数名拥有了多种用途，使得命名更加方便,调用更加灵活。<br>要求:函数名相同,参数列表不同,仅仅返回类型不同不足以成为函数的重载。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//交换 int 变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//交换 float 变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">float</span> *a, <span class="keyword">float</span> *b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">float</span> temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>重载的本质:<br>在编译时会根据参数列表对函数进行重命名,函数重载仅仅是语法层面的，本质上它们还是不同的函数，占用不同的内存，入口地址也不一样。</p>
<h2 id="9-对象的创建"><a href="#9-对象的创建" class="headerlink" title="9.对象的创建"></a>9.对象的创建</h2><p>类只是一个模板（Template），编译后不占用内存空间，所以在定义类时不能对成员变量进行初始化，因为没有地方存储数据。只有在创建对象以后才会给成员变量分配内存，这个时候就可以赋值了。</p>
<p>成员变量大都以m_开头。</p>
<p>存储在栈上的对象</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Student stu<span class="comment">;</span></span><br><span class="line">Student *p = &amp;stu<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>存储在堆上的对象<br><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Student *stu = <span class="keyword">new</span> <span class="type">Student</span>;</span><br></pre></td></tr></table></figure></p>
<p>使用 new 在堆上创建出来的对象是匿名的，必须要用一个指针指向它，再借助指针来访问它的成员变量或成员函数。</p>
<h2 id="10-成员函数"><a href="#10-成员函数" class="headerlink" title="10.成员函数"></a>10.成员函数</h2><p>在类体中定义的成员函数会自动成为内联函数，在类体外定义的不会。内联函数一般不是我们所期望的，它会将函数调用处用函数体替代，所以建议在类体内部对成员函数作声明，而在类体外部进行定义.</p>
<p>不使用内联函数:<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     <span class="keyword">int</span> age;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;  <span class="comment">//内联函数声明</span></span><br><span class="line"> &#125;;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> <span class="comment">//函数定义</span></span><br><span class="line"><span class="keyword">void</span> Student::say()&#123;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="11-构造函数"><a href="#11-构造函数" class="headerlink" title="11.构造函数"></a>11.构造函数</h2><p>构造函数必须是 public 属性的，否则创建对象时无法调用。<br>构造函数的调用是强制性的，一旦在类中定义了构造函数，那么创建对象时就一定要调用，不调用是错误的。</p>
<p>一个类必须有构造函数，要么用户自己定义，要么编译器自动生成。一旦用户自己定义了构造函数，不管有几个，也不管形参如何，编译器都不再自动生成</p>
<p>调用没有参数的构造函数也可以省略括号。<br><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Student stu()<span class="comment">;</span></span><br><span class="line">Student stu<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">Student *stu = new Student()<span class="comment">;</span></span><br><span class="line">Student *stu = new Student<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>参数初始化表可以用于全部成员变量，也可以只用于部分成员变量。<br>参数初始化顺序与初始化表列出的变量的顺序无关，它只与成员变量在类中声明的顺序有关。<br>初始化 const 成员变量的唯一方法就是使用参数初始化表。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//采用参数初始化表</span></span><br><span class="line">Student::Student(<span class="keyword">char</span> *name, <span class="keyword">int</span> age, <span class="keyword">float</span> score): m_name(name), m_age(age), m_score(score)&#123;</span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="12-析构函数"><a href="#12-析构函数" class="headerlink" title="12.析构函数"></a>12.析构函数</h2><p>析构函数（Destructor）也是一种特殊的成员函数，没有返回值，不需要程序员显式调用（程序员也没法显式调用），而是在销毁对象时自动执行。构造函数的名字和类名相同，而析构函数的名字是在类名前面加一个~符号。<br>析构函数没有参数，不能被重载，因此一个类只能有一个析构函数。如果用户没有定义，编译器会自动生成一个默认的析构函数。</p>
<h2 id="13-this的本质"><a href="#13-this的本质" class="headerlink" title="13.this的本质"></a>13.this的本质</h2><p>this 是 C++ 中的一个关键字，也是一个 <strong>const 指针</strong>，它指向当前对象，通过它可以访问当前对象的所有成员。</p>
<p>his 虽然用在类的内部，但是只有在对象被创建以后才会给 this 赋值，并且这个赋值的过程是编译器自动完成的，不需要用户干预，用户也不能显式地给 this 赋值。</p>
<p>this的本质:<br>this 实际上是成员函数的一个形参，在调用成员函数时将对象的地址作为实参传递给 this。不过 this 这个形参是隐式的，它并不出现在代码中，而是在编译阶段由编译器默默地将它添加到参数列表中。<br>this 作为隐式形参，本质上是成员函数的局部变量，所以只能用在成员函数的内部，并且只有在通过对象调用成员函数时才给 this 赋值。</p>
<h2 id="14-静态成员变量"><a href="#14-静态成员变量" class="headerlink" title="14.静态成员变量"></a>14.静态成员变量</h2><p>static 成员变量属于类，不属于某个具体的对象，即使创建多个对象,也只分配一份内存.</p>
<p>static 成员变量的内存既不是在声明类时分配，也不是在创建对象时分配，而是在（类外）初始化时分配。反过来说，没有在类外初始化的 static 成员变量不能使用</p>
<p>static 成员变量不占用对象的内存，而是在所有对象之外开辟内存，即使不创建对象也可以访问。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将 m_total 声明为静态成员变量</span></span><br><span class="line"><span class="comment">//通过类类访问 static 成员变量</span></span><br><span class="line">Student::m_total = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过对象来访问 static 成员变量</span></span><br><span class="line"><span class="function">Student <span class="title">stu</span><span class="params">(<span class="string">"小明"</span>, <span class="number">15</span>, <span class="number">92.5f</span>)</span></span>;</span><br><span class="line">stu.m_total = <span class="number">20</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//通过对象指针来访问 static 成员变量</span></span><br><span class="line">Student *pstu = <span class="keyword">new</span> Student(<span class="string">"李华"</span>, <span class="number">16</span>, <span class="number">96</span>);</span><br><span class="line">pstu -&gt; m_total = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p>
<p>静态成员变量必须初始化，而且只能在类体外进行</p>
<p>static 成员变量和普通 static 变量一样，都在内存分区中的全局数据区分配内存，到程序结束时才释放。这就意味着，static 成员变量不随对象的创建而分配内存，也不随对象的销毁而释放内存。而普通成员变量在对象创建时分配内存，在对象销毁时释放内存。</p>
<h2 id="15-静态成员函数"><a href="#15-静态成员函数" class="headerlink" title="15.静态成员函数"></a>15.静态成员函数</h2><p>普通成员函数可以访问所有成员（包括成员变量和成员函数），静态成员函数只能访问静态成员。</p>
<p>普通成员变量占用对象的内存，静态成员函数没有 this 指针，不知道指向哪个对象，无法访问对象的成员变量，也就是说静态成员函数不能访问普通成员变量，只能访问静态成员变量。</p>
<p>普通成员函数必须通过对象才能调用，而静态成员函数没有 this 指针，无法在函数体内部访问某个对象，所以不能调用普通成员函数，只能调用静态成员函数。</p>
<p>静态成员函数与普通成员函数的根本区别在于：普通成员函数有 this 指针，可以访问类中的任意成员；而静态成员函数没有 this 指针，只能访问静态成员（包括静态成员变量和静态成员函数）。</p>
<h2 id="16-常成员函数"><a href="#16-常成员函数" class="headerlink" title="16.常成员函数"></a>16.常成员函数</h2><p>const 成员函数可以使用类中的所有成员变量，但是不能修改它们的值，这种措施主要还是为了保护数据而设置的</p>
<p>常成员函数需要在声明和定义的时候在函数头部的结尾加上 const 关键字<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//声明常成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getage</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义常成员函数</span></span><br><span class="line"><span class="keyword">int</span> Student::getage() <span class="keyword">const</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="17-友元函数与友元类"><a href="#17-友元函数与友元类" class="headerlink" title="17.友元函数与友元类"></a>17.友元函数与友元类</h2><p>借助友元（friend），可以使得其他类中的成员函数以及全局范围内的函数访问当前类的 private 成员。<br>在当前类以外定义的、不属于当前类的函数可以在类中声明，但要在前面加 friend 关键字，这样就构成了友元函数。</p>
<p>友元函数不同于类的成员函数，在友元函数中不能直接访问类的成员，必须要借助对象。</p>
<p>一个函数可以被多个类声明为友元函数，这样就可以访问多个类中的 private 成员。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="comment">// 构造函数</span></span><br><span class="line">    Address(<span class="keyword">char</span> *province, <span class="keyword">char</span> *city, <span class="keyword">char</span> *district);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将Student类中的成员函数show()声明为友元函数</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> Student::show(Address *addr);</span><br></pre></td></tr></table></figure></p>
<p>友元类中的所有成员函数都是另外一个类的友元函数。<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    Address(<span class="keyword">char</span> *province, <span class="keyword">char</span> *city, <span class="keyword">char</span> *district);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//将Student类声明为Address类的友元类</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span>;</span></span><br></pre></td></tr></table></figure></p>
<p>友元的关系是单向的而不是双向的。如果声明了类 B 是类 A 的友元类，不等于类 A 是类 B 的友元类，类 A 中的成员函数不能访问类 B 中的 private 成员。<br>友元的关系不能传递。如果类 B 是类 A 的友元类，类 C 是类 B 的友元类，不等于类 C 是类 A 的友元类。</p>
<h2 id="18-struct与class比较"><a href="#18-struct与class比较" class="headerlink" title="18.struct与class比较"></a>18.struct与class比较</h2><p>使用 class 时，类中的成员默认都是 private 属性的；而使用 struct 时，结构体中的成员默认都是 public 属性的</p>
<p>class 继承默认是 private 继承，而 struct 继承默认是 public 继承</p>
<p>class 可以使用模板，而 struct 不能</p>
<h2 id="19-string的使用"><a href="#19-string的使用" class="headerlink" title="19.string的使用"></a>19.string的使用</h2><p>前提:<code>#include &lt;string&gt;</code></p>
<p>1.输入输出</p>
<pre><code>string s;
cin&gt;&gt;s;
cou&lt;&lt;s&lt;&lt;endl;
</code></pre><p>2.通过下标访问</p>
<pre><code>string s = &quot;qwert&quot;;
s[3] = &apos;d&apos;;
couy&lt;&lt;s[2];    
</code></pre><p>3.拼接</p>
<pre><code>string s = &quot;i&quot;;
char *s1 = &quot;love&quot;;
char s2[] = &quot;you&quot;;
char s3 = &apos;!&apos;;

string rs = s + s1 + s2 + s3;
</code></pre><p>4.插入</p>
<pre><code>string s = &quot;sdf&quot;;
s.insert(1,&quot;sds&quot;); // 索引/内容
</code></pre><p>5.删除</p>
<pre><code>s1 = s2 = s3 = &quot;1234567890&quot;;
s2.erase(5);
s3.erase(5, 3); // 长度为3
</code></pre><p>6.提取</p>
<pre><code>s1.substr(6, 6); // 长度为6
</code></pre><p>7.查找</p>
<pre><code>s.find(&quot;,&quot;,1); // 从索引1开始查找逗号,返回索引
</code></pre><h2 id="20-指针传递与引用传递的比较"><a href="#20-指针传递与引用传递的比较" class="headerlink" title="20.指针传递与引用传递的比较"></a>20.指针传递与引用传递的比较</h2><p>引用可以看做是数据的一个别名，通过这个别名和原来的名字都能够找到这份数据。</p>
<p>引用的定义方式类似于指针，只是用&amp;取代了*</p>
<pre><code>type &amp;name = data;

// 指针传递
// 比如交换数据
swap(int *a, int *b) {
int temp = *a;
*a = *b;
*b = temp;    
}
// 使用
swap(&amp;a, &amp;b);


//引用传递
swap2(int &amp;a, int &amp;b) {
int temp = a;
a = b;
b = temp;
}
// 使用
swap2(a,b);
</code></pre><p>引用也可以作为函数的返回值,不过不能返回局部变量的引用,因为局部变量过了作用域就销毁了</p>
<h2 id="21-继承"><a href="#21-继承" class="headerlink" title="21.继承"></a>21.继承</h2><p>继承方式包括 public（公有的）、private（私有的）和 protected（受保护的），此项是可选的，如果不写，那么默认为 private。</p>
<pre><code>class 派生类名:［继承方式］ 基类名{
    派生类新增加的成员
};
</code></pre><p>不同的继承方式会影响基类成员在派生类中的访问权限。</p>
<p>1) public继承方式</p>
<pre><code>基类中所有 public 成员在派生类中为 public 属性；
基类中所有 protected 成员在派生类中为 protected 属性；
基类中所有 private 成员在派生类中不能使用。
</code></pre><p>2) protected继承方式</p>
<pre><code>基类中的所有 public 成员在派生类中为 protected 属性；
基类中的所有 protected 成员在派生类中为 protected 属性；
基类中的所有 private 成员在派生类中不能使用。
</code></pre><p>3) private继承方式</p>
<pre><code>基类中的所有 public 成员在派生类中均为 private 属性；
基类中的所有 protected 成员在派生类中均为 private 属性；
基类中的所有 private 成员在派生类中不能使用。
</code></pre><p>基类的 private 成员是能够被继承的，并且（成员变量）会占用派生类对象的内存，它只是在派生类中不可见，导致无法使用罢了。</p>
<p>基类成员函数和派生类成员函数不会构成重载，如果派生类有同名函数，那么就会遮蔽基类中的所有同名函数，不管它们的参数是否一样。</p>
<p>类的构造函数不能被继承<br>析构函数也不能被继承<br>派生类构造函数中只能调用直接基类的构造函数，不能调用间接基类的。</p>
<h2 id="22-多重继承"><a href="#22-多重继承" class="headerlink" title="22.多重继承"></a>22.多重继承</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span> <span class="keyword">public</span> A, <span class="keyword">private</span> B, <span class="keyword">protected</span> C&#123;</span><br><span class="line">    <span class="comment">//类D新增加的成员</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基类构造函数的调用顺序和和它们在派生类构造函数中出现的顺序无关，而是和<strong>声明派生类时基类出现的顺序</strong>相同。</p>
<h2 id="23-虚继承"><a href="#23-虚继承" class="headerlink" title="23.虚继承"></a>23.虚继承</h2><p><img src="http://static.chenyalun.com/2017/04/03/20170403002.jpg" alt><br>假如类 A 有一个成员变量 a，那么在类 D 中直接访问 a 就会产生歧义，编译器不知道它究竟来自 A –&gt;B–&gt;D 这条路径，还是来自 A–&gt;C–&gt;D 这条路径。因为类 B 和类 C 中都有成员变量 a（从 A 类继承而来），编译器不知道选用哪一个，所以产生了错误。</p>
<p>消除歧义:使用域解析操作符</p>
<p>为了解决多继承时的命名冲突和冗余数据问题，C++ 提出了虚继承，使得在派生类中只保留一份间接基类的成员。<br>在继承方式前面加上 virtual 关键字就是虚继承<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//间接基类A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接基类B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接基类C</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> <span class="keyword">virtual</span> <span class="keyword">public</span> A&#123;  <span class="comment">//虚继承</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> m_c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//派生类D</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span> <span class="keyword">public</span> B, <span class="keyword">public</span> C&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">seta</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123; m_a = a; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setb</span><span class="params">(<span class="keyword">int</span> b)</span></span>&#123; m_b = b; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setc</span><span class="params">(<span class="keyword">int</span> c)</span></span>&#123; m_c = c; &#125;  <span class="comment">//正确</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setd</span><span class="params">(<span class="keyword">int</span> d)</span></span>&#123; m_d = d; &#125;  <span class="comment">//正确</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> m_d;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>虚继承的目的是让某个类做出声明，承诺愿意共享它的基类。其中，这个被共享的基类就称为虚基类（Virtual Base Class），本例中的 A 就是一个虚基类。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含一份虚基类的成员。</p>
<p>虚派生只影响从指定了虚基类的派生类中进一步派生出来的类，它不会影响派生类本身。</p>
<p>在最终派生类 D 的构造函数中，除了调用 B 和 C 的构造函数，还调用了 A 的构造函数，这说明 D 不但要负责初始化直接基类 B 和 C，还要负责初始化间接基类 A。直接派生类 B 和 C 对 A 的构造函数的调用是无效的.而在以往的普通继承中，派生类的构造函数只负责初始化它的直接基类，再由直接基类的构造函数初始化间接基类，用户尝试调用间接基类的构造函数将导致错误。</p>
<p>在类被构造的时候，先执行<strong>虚拟继承的父类的构造函数</strong>，然后从<strong>左到右执行普通继承的父类的构造函数</strong>，然后按照<strong>定义的顺序执行数据成员的初始化</strong>，最后是<strong>自身的构造函数的调用</strong>。析构函数与之完全相反，互成镜像。<br>见:<a href="http://gaocegege.com/Blog/cpp/cppclass" target="_blank" rel="noopener">http://gaocegege.com/Blog/cpp/cppclass</a></p>
<h2 id="24-C-向上转型"><a href="#24-C-向上转型" class="headerlink" title="24.C++向上转型"></a>24.C++向上转型</h2><p>编译器通过指针来访问成员变量，指针指向哪个对象就使用哪个对象的数据；编译器通过指针的类型来访问成员函数，指针属于哪个类的类型就使用哪个类的函数。<br>基类指针只能访问派生类的成员变量，但是不能访问派生类的成员函数。</p>
<h2 id="25-虚函数、纯虚函数与多态"><a href="#25-虚函数、纯虚函数与多态" class="headerlink" title="25.虚函数、纯虚函数与多态"></a>25.虚函数、纯虚函数与多态</h2><p>目的:让基类指针能够访问派生类的成员函数,只需要在该成员函数声明前面增加 virtual 关键字(基类\派生类都要操作)</p>
<p>有了虚函数，基类指针指向基类对象时就使用基类的成员（包括成员函数和成员变量），指向派生类对象时就使用派生类的成员。换句话说，基类指针可以按照基类的方式来做事，也可以按照派生类的方式来做事，它有多种形态，或者说有多种表现方式，我们将这种现象称为多态（Polymorphism）</p>
<p>虚函数的唯一用处就是构成多态,如果没有多态，我们只能访问成员变量。</p>
<p>只有派生类的虚函数遮蔽基类的虚函数（函数原型相同）才能构成多态（通过基类指针访问派生类函数）</p>
<p>构造函数不能是虚函数。对于基类的构造函数，它仅仅是在派生类构造函数中被调用，这种机制不同于继承。也就是说，派生类不继承基类的构造函数，将构造函数声明为虚函数没有什么意义。</p>
<p>析构函数可以声明为虚函数，而且有时候必须要声明为虚函数</p>
<p>将虚函数声明为纯虚函数，纯虚函数没有函数体，只有函数声明，在虚函数声明的结尾加上=0，表明此函数为纯虚函数。 语法格式为：</p>
<pre><code>virtual 返回值类型 函数名 (函数参数) = 0;
</code></pre><p><strong>包含纯虚函数的类称为抽象类（Abstract Class）</strong><br>一个纯虚函数就可以使类成为抽象基类，但是抽象基类中除了包含纯虚函数外，还可以包含其它的成员函数（虚函数或普通函数）和成员变量。</p>
<h2 id="26-运算符重载"><a href="#26-运算符重载" class="headerlink" title="26.运算符重载"></a>26.运算符重载</h2><p>运算符重载的格式为：</p>
<pre><code>返回值类型 operator 运算符名称 (形参表列){
//TODO:
}

// 如complex operator+(const complex &amp;A) const;
</code></pre><h2 id="27-模板"><a href="#27-模板" class="headerlink" title="27.模板"></a>27.模板</h2><p>函数模板<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> 类型参数<span class="number">1</span> , <span class="keyword">typename</span> 类型参数<span class="number">2</span> , ...&gt; 返回值类型  函数名(形参列表)&#123;</span><br><span class="line"><span class="comment">//在函数体中可以使用类型参数</span></span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">typename</span>关键字可使用<span class="class"><span class="keyword">class</span>代替</span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> </span></span><br><span class="line"><span class="class"> // 如</span></span><br><span class="line"><span class="class"><span class="title">template</span>&lt;class T&gt; <span class="title">void</span> <span class="title">Swap</span>(<span class="title">T</span> &amp;<span class="title">a</span>, <span class="title">T</span> &amp;<span class="title">b</span>)&#123;</span></span><br><span class="line">   T temp = a;</span><br><span class="line">   a = b;</span><br><span class="line">   b = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>关键在于函数定义前面加上 template<typename t, typename m></typename></p>
<p>类模板<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> 类型参数<span class="number">1</span> , <span class="keyword">typename</span> 类型参数<span class="number">2</span> , …&gt; <span class="class"><span class="keyword">class</span> 类名&#123;</span></span><br><span class="line">    <span class="comment">//<span class="doctag">TODO:</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// template&lt;typename T1, typename T2&gt;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类模板使用时需要指明类型,函数模板不需要</span></span><br><span class="line">Point&lt;<span class="keyword">float</span>, <span class="keyword">float</span>&gt; *p1 = <span class="keyword">new</span> Point&lt;<span class="keyword">float</span>, <span class="keyword">float</span>&gt;(<span class="number">10.6</span>, <span class="number">109.3</span>);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>参考博客<br>C语言中文网:<a href="http://c.biancheng.net/cpp/biancheng/cpp/rumen/" target="_blank" rel="noopener">http://c.biancheng.net/cpp/biancheng/cpp/rumen/</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> C++提要 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[排序算法实现]]></title>
      <url>http://blog.chenyalun.com/2017/03/05/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017.4.24 修改部分代码<br>2017.4.21 完善<br>2017.3.25 修改</p>
</blockquote>
<p align="center"> 排序算法。 </p>

<a id="more"></a>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为笔试使用的编译器语言为Python2.7，所以以下代码使用Python2实现并规定从小到大为目标顺序。</p>
<p>八大排序：<br>直接插入排序，希尔排序，简单选择排序，堆排序，冒泡排序，快速排序，归并排序，基数排序。</p>
<h2 id="排序的稳定性"><a href="#排序的稳定性" class="headerlink" title="排序的稳定性"></a>排序的稳定性</h2><p>假定n1 = n2,排序前n1位于n2前面,如果排序后n1扔领先于n2,则称排序算法稳定.</p>
<h2 id="内排序与外排序"><a href="#内排序与外排序" class="headerlink" title="内排序与外排序"></a>内排序与外排序</h2><p>内排序:排序的整个过程中,待排序的所有记录全部被放置在内存中.<br>外排序:由于排序的记录太多,排序的过程中,需要内外存之间多次交换才能进行.</p>
<h1 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a>一、冒泡排序</h1><p>原理:通过相邻元素的比较和交换，把较大的数交换到后面，类似水泡向上面(数组的后面，所以总是靠后的数字有序)升，故称为冒泡排序。如果两数相等，不交换，所以稳定。</p>
<p>普通方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line">	n = len(tempList)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, n - x):<span class="comment"># 索引n-x之后的数已经排序好了</span></span><br><span class="line">			<span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">				tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line">	<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure>
<p>优化1：某一趟遍历如果没有数据交换，则说明已经排好序了，无需继续迭代。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交换排序-冒泡排序优化1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort1</span><span class="params">(tempList)</span>:</span></span><br><span class="line">	n = len(tempList)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line">		<span class="comment">#标志位,倘若没有交换,说明已经排序好了</span></span><br><span class="line">		flag = <span class="keyword">True</span></span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, n - x):<span class="comment"># 索引n-x之后的数已经排序好了</span></span><br><span class="line">			<span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">				tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line">				flag = <span class="keyword">False</span></span><br><span class="line">		<span class="keyword">if</span> flag: <span class="comment"># 发现并没有发生交换</span></span><br><span class="line">			<span class="keyword">return</span> tempList</span><br><span class="line">	<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort1([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure>
<p>优化2：记录最后发生交换的位置，位置之后的数据已经井然有序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#交换排序-冒泡排序优化2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubbleSort2</span><span class="params">(tempList)</span>:</span></span><br><span class="line">	n = len(tempList)</span><br><span class="line">	<span class="comment"># 循环范围</span></span><br><span class="line">	m = n</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line">		<span class="comment">#标志位,倘若没有交换,说明已经排序好了</span></span><br><span class="line">		flag = <span class="keyword">True</span></span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> xrange(<span class="number">1</span>, m):<span class="comment"># 索引m之后的数已经排序好了</span></span><br><span class="line">			<span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]:</span><br><span class="line">				tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y]</span><br><span class="line">				m = y</span><br><span class="line">				flag = <span class="keyword">False</span></span><br><span class="line">		<span class="keyword">if</span> flag: <span class="comment"># 发现并没有发生交换</span></span><br><span class="line">			<span class="keyword">return</span> tempList</span><br><span class="line">	<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> bubbleSort2([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure>
<p><strong>分析</strong><br>最好情况:数据井然有序,根据优化后的代码,只需要迭代一次,即n-1次的比较,则时间复杂度为O(n)<br>最坏情况:数据逆序,需要比较的次数为1+2+3+4+…+(n-1)=n(n-1)/2次,时间复杂度为O(n^2)</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">假定有4个数,分别为4<span class="number"> 3 </span>2 1,排序过程为:</span><br><span class="line">原数据:<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">第1次:<span class="number"> 3 </span>4<span class="number"> 2 </span>1</span><br><span class="line">第2次:<span class="number"> 3 </span>2<span class="number"> 4 </span>1</span><br><span class="line">第3次:<span class="number"> 3 </span>2<span class="number"> 1 </span>4</span><br><span class="line">第4次:<span class="number"> 2 </span>3<span class="number"> 1 </span>4</span><br><span class="line">第5次:<span class="number"> 2 </span>1<span class="number"> 3 </span>4</span><br><span class="line">第6次:<span class="number"> 1 </span>2<span class="number"> 3 </span>4</span><br><span class="line"></span><br><span class="line">归纳推理:n(n-1)/2次</span><br></pre></td></tr></table></figure>
<h1 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a>二、选择排序</h1><p>在未排序序列中找到最小元素，存放到排序序列的起始位置(与第一个元素交换位置)，然后，再从剩余未排序元素中继续寻找最小元素，然后放到已排序序列的末尾(与第二个元素交换位置)。以此类推，直到所有元素均排序完毕。</p>
<p>通过n-i次关键字间的比较,从n-i+1个记录中选出最小的记录,并和第i个记录交换之.</p>
<p>选择排序的交换操作介于 0 和 ( n − 1 )次之间。<br>选择排序的比较操作为 n ( n − 1 ) / 2次之间。<br>选择排序的赋值操作介于 0 和 3 ( n − 1 )次之间。</p>
<p>当空间复杂度要求较高时，可以考虑选择排序；实际适用的场合非常罕见。</p>
<figure class="highlight glsl"><table><tr><td class="code"><pre><span class="line">def selectionSort(tempList):</span><br><span class="line">	n = len(tempList)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(n):</span><br><span class="line">		<span class="meta"># 假定索引x对应的是最小值</span></span><br><span class="line">		<span class="keyword">index</span> = x</span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> xrange(x + <span class="number">1</span>,n):</span><br><span class="line">			<span class="meta"># 如果找到比索引index对应的值还要小的值,交换两者位置</span></span><br><span class="line">			<span class="keyword">if</span> tempList[<span class="keyword">index</span>] &gt; tempList[y]:</span><br><span class="line">				tempList[<span class="keyword">index</span>], tempList[y] = tempList[y], tempList[<span class="keyword">index</span>]</span><br><span class="line">	<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print selectionSort([<span class="number">5</span>,<span class="number">10</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">0</span>,<span class="number">30</span>])</span><br></pre></td></tr></table></figure>
<p><strong>分析</strong><br>特点:交换移动数据次数相当少<br>最好情况与最坏情况:比较次数一样多,为n(n-1)/2次,时间复杂度:O(n^2)</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">假定有4个数据,分别为<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">原数据:<span class="number"> 4 </span>3<span class="number"> 2 </span>1</span><br><span class="line">第1次比较:<span class="number"> 4 </span>与 3</span><br><span class="line">第2次比较:<span class="number"> 4 </span>与 2</span><br><span class="line">第3次比较:<span class="number"> 4 </span>与<span class="number"> 1 </span>(此时数据为1<span class="number"> 3 </span>2 4)</span><br><span class="line">第4次比较:<span class="number"> 3 </span>与 2</span><br><span class="line">第5次比较:<span class="number"> 3 </span>与<span class="number"> 4 </span>(此时数据为<span class="number"> 1 </span>2<span class="number"> 3 </span>4)</span><br><span class="line">第6次比较:<span class="number"> 3 </span>与 4</span><br><span class="line"></span><br><span class="line">最终结果:<span class="number"> 1 </span>2<span class="number"> 3 </span>4</span><br><span class="line">比较次数:6次</span><br></pre></td></tr></table></figure>
<p>选择排序是不稳定的排序算法,比如<code>5 8 5 2 9</code>,显然第1个5最终落到第2个5的后面.</p>
<figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">原数据:    5'<span class="number"> 8 </span>5<span class="number"> 2 </span>9</span><br><span class="line">第1次交换:<span class="number"> 2 </span>8<span class="number"> 5 </span>5' 9</span><br><span class="line">第2次交换:<span class="number"> 2 </span>5<span class="number"> 8 </span>5' 9</span><br><span class="line">第3次交换:<span class="number"> 2 </span>5 5'<span class="number"> 8 </span>9</span><br><span class="line">第4次交换:<span class="number"> 2 </span>5 5'<span class="number"> 8 </span>9</span><br><span class="line"></span><br><span class="line">最终 5'在<span class="number"> 5 </span>的前面.</span><br></pre></td></tr></table></figure>
<h1 id="三、直接插入排序"><a href="#三、直接插入排序" class="headerlink" title="三、直接插入排序"></a>三、直接插入排序</h1><p>原理:在一个已经有序的数据序列中插入一个数，在插入后此数据序列仍然有序。默认前1个数有序，第二个数与前一个数组成的有序数列比较并插入，第三个数与前两个数组成的有序数列比较并插入……所以总是靠前的数字有序。</p>
<p>遇到相等的数，插入到该数的后面，而不是前面，所以是稳定排序算法。</p>
<p><img src="http://static.chenyalun.com/2017/03/15/2017031501.gif" alt></p>
<p>最好情况：序列已经是升序排列了，需要进行的比较操作需(n-1)次,时间复杂度为O(n)。<br>最坏情况：序列是降序排列，那么此时需要进行的比较共有 n ( n − 1 ) / 2 次。<br>插入排序的赋值操作是比较操作的次数加上(n-1)次。<br>平均来说插入排序算法复杂度为 O ( n^2 )。<br>插入排序不适合对于数据量比较大的排序应用。<strong>用于少量元素的排序</strong>（通常为8个或以下）。</p>
<p>直接插入</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insertionSort</span><span class="params">(tempList)</span></span><span class="symbol">:</span></span><br><span class="line">	<span class="comment"># 获取列表的长度</span></span><br><span class="line">	n = len(tempList)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">1</span>,n): <span class="comment"># 从第1个元素而非第0个元素开始遍历</span></span><br><span class="line">		<span class="keyword">for</span> y <span class="keyword">in</span> xrange(x, <span class="number">0</span>, -<span class="number">1</span>): <span class="comment"># 在已经排好序的列表中逐个扫描</span></span><br><span class="line">			<span class="keyword">if</span> tempList[y - <span class="number">1</span>] &gt; tempList[y]: <span class="comment"># 如果当前元素比前面的小</span></span><br><span class="line">				tempList[y], tempList[y - <span class="number">1</span>] = tempList[y - <span class="number">1</span>], tempList[y] <span class="comment"># 两者位置互换</span></span><br><span class="line">	<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"><span class="comment"># print insertionSort([])</span></span><br><span class="line"><span class="comment"># print insertionSort([8])</span></span><br><span class="line"><span class="comment"># print insertionSort([5,2,7,0,1,5,9])</span></span><br></pre></td></tr></table></figure>
<h1 id="四、二分插入排序"><a href="#四、二分插入排序" class="headerlink" title="四、二分插入排序"></a>四、二分插入排序</h1><p>二分查找插入与希尔排序是直接插入排序的优化。</p>
<p>二分查找插入</p>
<p>使用Python模块实现</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> bisect模块实现了一个算法, 用于向一个有序列表中插入一个元素,不改变列表的序列</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用这个模块的函数前先确保操作的列表是已排序的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">import bisect </span></span><br><span class="line">def insertionSortBisect(tempList):  </span><br><span class="line">    for i in xrange(1, len(tempList)):  </span><br><span class="line">        bisect.insort(tempList, tempList.pop(i), 0, i) # 排序列表,移除并插入元素,区间开始,区间结束</span><br><span class="line">    return tempList</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([])</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([8])</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">print</span> insertionSortBisect([5,2,7,0,1,5,9])</span></span><br></pre></td></tr></table></figure>
<p>手动实现</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#二分查找的前提必须待查找的序列有序</span></span><br><span class="line"><span class="comment"># 在有序列表中,返回值m应该所在的索引</span></span><br><span class="line">def indexOfInsertionSort(tempList, m):</span><br><span class="line">	<span class="comment"># 获取列表的长度</span></span><br><span class="line">	n = <span class="built_in">len</span>(tempList)</span><br><span class="line">	left, <span class="literal">right</span> = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> left &lt;= <span class="literal">right</span>:</span><br><span class="line">		<span class="keyword">middle</span> = (left + <span class="literal">right</span>) / <span class="number">2</span></span><br><span class="line">		<span class="keyword">if</span> tempList[<span class="keyword">middle</span>] &lt; m:<span class="comment"># 右半部分</span></span><br><span class="line">			left = <span class="keyword">middle</span> + <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>: <span class="comment">#左半部分,含相同元素</span></span><br><span class="line">			<span class="literal">right</span> = <span class="keyword">middle</span> <span class="number">-1</span></span><br><span class="line">	<span class="literal">return</span> <span class="literal">right</span> +<span class="number">1</span></span><br><span class="line">		</span><br><span class="line">def insertionSortbin(tempList):</span><br><span class="line">	<span class="comment"># 获取列表的长度</span></span><br><span class="line">	n = <span class="built_in">len</span>(tempList)</span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> xrange(<span class="number">0</span>,n): <span class="comment"># 从头至尾遍历列表中的元素</span></span><br><span class="line">		m = tempList[x]</span><br><span class="line">		tempList.pop(x)</span><br><span class="line">		index = indexOfInsertionSort(tempList[<span class="number">0</span>:x],m)</span><br><span class="line">		tempList.insert(index , m) <span class="comment">#第一个参数是索引,第二个参数是数值</span></span><br><span class="line">	<span class="literal">return</span> tempList</span><br><span class="line">				</span><br><span class="line"><span class="comment">#print insertionSortbin([12,12,16,8,5,10,7])</span></span><br></pre></td></tr></table></figure>
<h1 id="五、希尔排序"><a href="#五、希尔排序" class="headerlink" title="五、希尔排序"></a>五、希尔排序</h1><p>先将待排记录序列分割为若干个子序列，分别进行直接插入排序，待整个序列基本有序时，再对全体记录进行一次直接插入排序。</p>
<p>采用跳跃分割的策略:把相距某个”增量”的记录组成一个序列，保证在子序列内分别进行直接插入排序后得到的结果是基本有序的。</p>
<p>原始序列</p>
<blockquote>
<p>2 5 1 9 8 2 10 4</p>
</blockquote>
<p>4步长，分组，每列排序</p>
<blockquote>
<p>2 5 1 9<br>8 2 10 4</p>
</blockquote>
<p>排序后</p>
<blockquote>
<p>2 2 1 4<br>8 5 10 9</p>
</blockquote>
<p>也即</p>
<blockquote>
<p>2 2 1 4 8 5 10 9</p>
</blockquote>
<p>2步长，再分组</p>
<blockquote>
<p>2 2<br>1 4<br>8 5<br>10 9</p>
</blockquote>
<p>排序</p>
<blockquote>
<p>1 2<br>2 4<br>8 5<br>10 9</p>
</blockquote>
<p>也即：</p>
<blockquote>
<p>1 2 2 4 8 5 10 9</p>
</blockquote>
<p>最后以1步长进行排序（还是直接插入排序）。</p>
<p>一般插入</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def insertionSortShell(tempList):</span><br><span class="line">	n = len(tempList)</span><br><span class="line">	# 确定分组,假定n = 6</span><br><span class="line"><span class="built_in">	group </span>= n / 2 # 此时group = 3,分成3组,3组元素索引分别为3与3-3,4与4-3,5与5-3</span><br><span class="line">	<span class="keyword">while</span><span class="built_in"> group </span>&gt; 0:</span><br><span class="line">		#x从3到5</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> xrange(group,n):</span><br><span class="line">			# 每组元素:x,x-group,x-group-group <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>插入排序</span><br><span class="line">			temp = tempList[x]</span><br><span class="line">			y = x</span><br><span class="line">			# 这里使用简单的插入排序</span><br><span class="line">			<span class="keyword">while</span> y &gt;=<span class="built_in"> group </span><span class="keyword">and</span> tempList[y - group] &gt; temp:</span><br><span class="line">				tempList[y] = tempList[y - group]</span><br><span class="line">				y -= group</span><br><span class="line">			tempList[y] = temp</span><br><span class="line"></span><br><span class="line">	<span class="built_in">	group </span>/= 2</span><br><span class="line">	return tempList</span><br></pre></td></tr></table></figure>
<p>互换法</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">def insertionSortShellExchange(tempList):</span><br><span class="line">	n = len(tempList)</span><br><span class="line">	# 确定分组,假定n = 6</span><br><span class="line"><span class="built_in">	group </span>= n / 2 # 此时group = 3,分成3组,3组元素索引分别为3与3-3,4与4-3,5与5-3</span><br><span class="line">	<span class="keyword">while</span><span class="built_in"> group </span>&gt; 0:</span><br><span class="line">		#x从3到5</span><br><span class="line">		<span class="keyword">for</span> x <span class="keyword">in</span> xrange(group,n):</span><br><span class="line">			# 每组元素:x,x-group,x-group-group <span class="built_in">..</span><span class="built_in">..</span><span class="built_in">..</span>插入排序</span><br><span class="line">			y = x</span><br><span class="line">			m = tempList[x]</span><br><span class="line">			<span class="keyword">while</span> y &gt;=<span class="built_in"> group </span><span class="keyword">and</span> tempList[y - group] &gt; m:</span><br><span class="line">				# 这里直接交换位置</span><br><span class="line">				tempList[y], tempList[y - group] = tempList[y - group], tempList[y]</span><br><span class="line">				y -= group</span><br><span class="line"></span><br><span class="line">	<span class="built_in">	group </span>/= 2</span><br><span class="line">	return tempList</span><br><span class="line"></span><br><span class="line"><span class="comment">#print insertionSortShell([1,8,10,2,4,0])</span></span><br><span class="line"><span class="comment">#print insertionSortShellExchange([1,8,10,2,4,0])</span></span><br></pre></td></tr></table></figure>
<p>由于记录是跳跃式的，希尔排序是不稳定的排序算法。</p>
<h1 id="六、堆排序"><a href="#六、堆排序" class="headerlink" title="六、堆排序"></a>六、堆排序</h1><p>堆排序是对简单选择排序的改进。</p>
<p>堆是具有以下性质的完全二叉树:<br>每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆。<br>每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</p>
<p>性质:按层遍历的方式给结点编号，则有:</p>
<pre><code>k(i) &gt;= k(2i)
k(i) &gt;= k(2i+1)

或
k(i) &lt;= k(2i)
k(i) &lt;= k(2i+1)
</code></pre><p>堆排序就是利用堆进行排序的算法，基本思想是:将待排序的序列构造成一个大顶堆，此时整个序列的最大值就是堆顶的根结点。把它移走(其实就是将其与堆数组的末尾元素交换，此时末尾元素就是最大值)，然后将剩余的n-1个值重新构造成一个堆，这样就会得到n个元素中的次小值，如此反复执行，便能得到一个有序序列了。</p>
<p>需要解决的两个问题:<br><strong>1. 如何由一个无序序列构建成一个堆</strong><br><strong>2. 如何在获取堆顶元素后，调整剩余元素成为一个新的堆</strong></p>
<p>所谓的将待排序的序列构建成一个大顶堆，其实就是从下往上、从右往左，将每个非叶结点当作根节点，将其和其子树调整成大顶堆。</p>
<p>在正式排序时，第i次取堆顶记录重建需要O(logi)的时间，并且需要取n-1次堆顶记录，因此，重建堆的时间复杂度为O(nlogn)。</p>
<p>堆排序对原始状态的排序不敏感，无论是最好最坏还是平均情况时间复杂度总是为O(nlogn)。</p>
<p>注意:由于初始构建堆所需的比较次数较多，因此，它并<strong>不适合待排序序列个数较少的情况</strong>。</p>
<p>实现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># start是当前需要调整最小堆的位置,end是调整边界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapAdjust</span><span class="params">(tempList, start, end)</span>:</span></span><br><span class="line">    root = start</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        child = root * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> child &gt; end:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> child + <span class="number">1</span> &lt;= end <span class="keyword">and</span> tempList[child] &lt; tempList[child + <span class="number">1</span>]:</span><br><span class="line">            child += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> tempList[root] &lt; tempList[child]:</span><br><span class="line">            tempList[root], tempList[child] = tempList[child], tempList[root]</span><br><span class="line">            root = child</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heapSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line">    n = len(tempList)</span><br><span class="line">    <span class="comment"># 构造小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n / <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        heapAdjust(tempList, i, n - <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(n - <span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>):</span><br><span class="line">        <span class="comment"># 将堆顶记录和当前未排序子序列的最后一个记录交换</span></span><br><span class="line">        tempList[<span class="number">0</span>], tempList[i] = tempList[i], tempList[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># 重新调整为小顶堆</span></span><br><span class="line">        heapAdjust(tempList, <span class="number">0</span>, i - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> heapSort([<span class="number">2</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>])</span><br></pre></td></tr></table></figure>
<h1 id="七、归并排序"><a href="#七、归并排序" class="headerlink" title="七、归并排序"></a>七、归并排序</h1><p>归并排序就是利用归并的思想实现的排序算法。原理是:假设初始序列含有n个记录，则可以看成是n个有序的子序列，每个子序列的长度为1，然后两两合并，得到n/2的向上取整个长度为2或者为1的有序子序列，然后两两合并，如此重复，直到得到一个长度为n的有序序列。该方法也称为2路归并排序。</p>
<p>比较操作的次数介于 ( nlogn ) / 2 和 nlogn − n + 1。<br>赋值操作的次数是 ( 2 nlogn )。</p>
<p><img src="http://static.chenyalun.com/2017/03/15/2017031503.gif" alt></p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#归并排序</span></span><br><span class="line">def mergeSort(tempList):</span><br><span class="line">	<span class="built_in">length</span> = <span class="built_in">len</span>(tempList)</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">length</span> &lt;= <span class="number">1</span>:</span><br><span class="line">		<span class="literal">return</span> tempList</span><br><span class="line">	<span class="comment"># 二分列表</span></span><br><span class="line">	<span class="keyword">middle</span> = <span class="built_in">length</span> / <span class="number">2</span></span><br><span class="line">	leftList = mergeSort(tempList[:<span class="keyword">middle</span>])</span><br><span class="line">	rightList = mergeSort(tempList[<span class="keyword">middle</span>:])</span><br><span class="line"></span><br><span class="line">	<span class="literal">return</span> <span class="built_in">merge</span>(leftList,rightList)</span><br><span class="line"></span><br><span class="line">def <span class="built_in">merge</span>(leftList,rightList):</span><br><span class="line">	leftIndex,rightIndex = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">	<span class="built_in">result</span> = []</span><br><span class="line">	<span class="keyword">while</span> leftIndex &lt; <span class="built_in">len</span>(leftList) <span class="keyword">and</span> rightIndex &lt; <span class="built_in">len</span>(rightList):</span><br><span class="line">		<span class="keyword">if</span> leftList[leftIndex] &lt; rightList[rightIndex]:</span><br><span class="line">			<span class="built_in">result</span>.append(leftList[leftIndex])</span><br><span class="line">			leftIndex += <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">result</span>.append(rightList[rightIndex])</span><br><span class="line">			rightIndex += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">result</span> += leftList[leftIndex:]</span><br><span class="line">	<span class="built_in">result</span> += rightList[rightIndex:]</span><br><span class="line">	<span class="literal">return</span> <span class="built_in">result</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print mergeSort([<span class="number">2</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>一趟归并需要耗费O(n)时间，由完全二叉树的深度可知，整个归并排序需要进行logn次，故，总的时间复杂度为O(logn)，并且最好/最坏/平均时间性能均是如此。</p>
<p>归并排序需要两两比较，不存在跳跃，因此稳定。</p>
<h1 id="八、快速排序"><a href="#八、快速排序" class="headerlink" title="八、快速排序"></a>八、快速排序</h1><p>20世纪十大算法之一。</p>
<p>关键词:基准 分组 递归</p>
<p>在平均状况下，排序n个项目要Ο(n log n)次比较。<br>在最坏状况下则需要Ο(n2)次比较。</p>
<p><img src="http://static.chenyalun.com/2017/03/15/2017031502.gif" alt></p>
<p>快速排序使用分治法策略来把一个序列分为两个子序列。</p>
<p>步骤为：</p>
<ol>
<li>从数列中挑出一个元素，作为基准数，</li>
<li>分区：把比基准大的放在右边，比基准小的放在左边，等于基准的放在基准列表中。</li>
<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort</span><span class="params">(tempList)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> len(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> tempList</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 基准列表</span></span><br><span class="line">	pivotList = []</span><br><span class="line">	<span class="comment"># 比基准小的列表</span></span><br><span class="line">	lessList = []</span><br><span class="line">	<span class="comment"># 比基准大的列表</span></span><br><span class="line">	moreList = []</span><br><span class="line">	<span class="comment">#将第一个值作为基准</span></span><br><span class="line">	pivot = tempList[<span class="number">0</span>]</span><br><span class="line">	<span class="comment"># 遍历tempList</span></span><br><span class="line">	<span class="keyword">for</span> x <span class="keyword">in</span> tempList:</span><br><span class="line">		<span class="comment"># 比基准大,放入moreList</span></span><br><span class="line">		<span class="keyword">if</span> x &gt; pivot:</span><br><span class="line">			moreList.append(x)</span><br><span class="line">		<span class="comment"># 比基准小,放入lessList</span></span><br><span class="line">		<span class="keyword">elif</span> x &lt; pivot:</span><br><span class="line">			lessList.append(x)</span><br><span class="line">		<span class="comment"># 与基准相等,放入基准列表中</span></span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			pivotList.append(x)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 对lessList和moreList递归操作</span></span><br><span class="line">	lessList = quickSort(lessList)</span><br><span class="line">	moreList = quickSort(moreList)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 返回排序好的列表</span></span><br><span class="line">	<span class="keyword">return</span> lessList + pivotList + moreList</span><br></pre></td></tr></table></figure>
<p>甚至可以这么写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quickSort1</span><span class="params">(tempList)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tempList</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pivot = tempList[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> quickSort1([x <span class="keyword">for</span> x <span class="keyword">in</span> tempList[<span class="number">1</span>:] <span class="keyword">if</span> x &lt; pivot])\</span><br><span class="line">         + [pivot] + \</span><br><span class="line">         quickSort1([x <span class="keyword">for</span> x <span class="keyword">in</span> tempList[<span class="number">1</span>:] <span class="keyword">if</span> x &gt;= pivot])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> quickSort1([<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<p>快速排序的时间复杂度取决于快速排序递归的深度，在最优情况下时间复杂度为O(logn)。最坏情况下，待排序为正序或者逆序，时间复杂度为O(n^2)</p>
<p>由于关键字的比较和交换是跳跃进行的，因此快速排序不稳定。</p>
<p>快速排序的优化:</p>
<ol>
<li><strong>优化选取枢轴</strong><br>三数取中法:取三个关键字先进行排序，将中间数作为枢轴，一般取左端、右端和中间三个数，也可以随机选取，至少枢轴不是最大或者最小的数。</li>
</ol>
<h1 id="九、计数排序"><a href="#九、计数排序" class="headerlink" title="九、计数排序"></a>九、计数排序</h1><p>计数排序是用来排序0到100之间的数字的最好的算法。</p>
<p>步骤:</p>
<blockquote>
<p>找出待排序的数组中最大和最小的元素<br>统计数组中每个值为i的元素出现的次数，存入数组 C 的第 i 项<br>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）<br>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</p>
</blockquote>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="comment">#计数排序</span></span><br><span class="line">def countsort(tempList):</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(tempList) &lt;= <span class="number">1</span>:</span><br><span class="line">		<span class="literal">return</span> tempList</span><br><span class="line">		</span><br><span class="line">	maxValue = <span class="built_in">max</span>(tempList)</span><br><span class="line">	minValue = <span class="built_in">min</span>(tempList)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 创建计数列表countList</span></span><br><span class="line">	countList = [<span class="number">0</span>] * (maxValue - minValue + <span class="number">1</span>)</span><br><span class="line">	<span class="comment"># 获取元素出现次数</span></span><br><span class="line">	<span class="keyword">for</span> e <span class="keyword">in</span> tempList:</span><br><span class="line">		countList[e - minValue] += <span class="number">1</span></span><br><span class="line">	index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 填值</span></span><br><span class="line">	<span class="keyword">for</span> <span class="keyword">a</span> <span class="keyword">in</span> xrange(maxValue - minValue + <span class="number">1</span>):</span><br><span class="line">		<span class="keyword">for</span> c <span class="keyword">in</span> xrange(countList[<span class="keyword">a</span>]):</span><br><span class="line">			tempList[index] = <span class="keyword">a</span> + minValue</span><br><span class="line">			index += <span class="number">1</span></span><br><span class="line">	<span class="literal">return</span> tempList</span><br><span class="line">	</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">print countsort([<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>那么,以1,6,3,2,3为例<br>最值<br>maxValue = 6<br>minValue = 1</p>
<p>计数列表<br>countList = [0, 0, 0, 0, 0, 0]</p>
<p>元素出现的次数<br>countList = [1, 1, 2, 0, 0, 1]</p>
<table>
<thead>
<tr>
<th>a</th>
<th>countList[a] 即遍历次数</th>
<th>tempList[index]</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>1</td>
<td>tempList[0] = 1</td>
</tr>
<tr>
<td>1</td>
<td>1</td>
<td>tempList[1] = 2</td>
</tr>
<tr>
<td>2</td>
<td>2</td>
<td>tempList[2] = 3以及tempList[3] = 3</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>tempList[4] = 6</td>
</tr>
</tbody>
</table>
<p>排序成功:1, 2, 3, 3, 6</p>
<h1 id="十、总结"><a href="#十、总结" class="headerlink" title="十、总结"></a>十、总结</h1><p>算法分析：</p>
<p><img src="http://static.chenyalun.com/2017/03/15/2017031504.jpg" alt></p>
<p>代码保存在<a href="https://github.com/ChenYalun/YACode/tree/master/Blog" target="_blank" rel="noopener">GitHub</a>上。</p>
<p>参考资料：</p>
<blockquote>
<p>《大话数据结构》<br><a href="https://zh.wikipedia.org/zh-hans/" target="_blank" rel="noopener">维基百科</a><br><a href="https://segmentfault.com/a/1190000006546190#articleHeader17" target="_blank" rel="noopener">segmentfault</a><br><a href="http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/" target="_blank" rel="noopener">WuChong</a><br><a href="http://bubkoo.com/2014/01/13/sort-algorithm/selection-sort/" target="_blank" rel="noopener">bubkoo</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS自定义转场总结]]></title>
      <url>http://blog.chenyalun.com/2017/02/26/iOS%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AC%E5%9C%BA%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p align="center"> 自定义转场总结。 </p>

<a id="more"></a>
<h1 id="一、勾弦"><a href="#一、勾弦" class="headerlink" title="一、勾弦"></a>一、勾弦</h1><p>转场的本质是下一场景的视图替换当前场景的视图以及相应的控制器的替换，表现为当前视图消失和下一视图出现。容器类 VC 的转场里 fromView 和 toView 是 containerView 的子层次的视图，而 Modal 转场里 presentingView 与ontainerView 是同层次的视图，只有 presentedView 是 containerView 的子层次视图。Custom 模式下 Modal 转场结束时 fromView 并未从视图结构中移除；FullScreen 模式的 Modal 转场结束后 fromView 主动被从视图结构中移除了。Custom 模式下，在 dismissal 中，不要像其他转场中那样将 toView加入 containerView 中，否则 dismiss 结束后本来可见的 presentingView 将会随着 containerView 一起被移除。</p>
<p>在 Modal 转场中，presentingView 并非 containerView 的子视图，这时通过viewForKey:方法来获取presentingView 得到的是 nil，必须通过viewControllerForKey:得到presentingVC 后来获取。当 UIViewController 的modalPresentationStyle属性为.Custom 或.FullScreen时，就有机会定制转场效果，此时modalTransitionStyle指定的转场动画将会被忽略。</p>
<p>容器 VC 的转场的代理由容器 VC 自身的代理提供不同，Modal 转场的代理由 presentedVC(目标控制器) 提供。Modal 转场在 Custom 模式下必须区分 presentation 和 dismissal 转场，而在 FullScreen 模式下可以不用这么做，因为 UIKit 会在 dismissal 转场结束后自动将 presentingView 放置到原来的位置。转场代理（Transitioning Delegate）根据不同的转场类型提供其所需要的动画控制类和交互控制类。</p>
<p>动画控制类(器)（Animation Controller）遵从UIViewControllerAnimatedTransitioning协议，并且负责执行实际的动画。交互控制类(器)（Interaction Controller）遵从UIViewControllerInteractiveTransition协议来控制可交互的转场动画。转场上下文（Transitioning Context）定义了转场时需要的元数据（比如转场所参与了的视图控制器和视图的属性），其遵从UIViewControllerContextTransitioning协议，并且这是由系统负责生成和提供。</p>
<p>转场协调器（Transition Coordinators）可以在运行转场动画时，并行的运行其他动画。转场协调器遵从UIViewControllerTransitionCoordinator协议。转场动画交互方式分两种，第一种是属于非交互式：必须要实现动画控制类，第二种交互式：必须要实现动画控制类和交互控制类（例如可以通过手势的滑动距离来控制转场动画的一个进度，一般应用中都可以通过手势的滑动来推出一个视图控制器)。</p>
<h1 id="二、简单转场"><a href="#二、简单转场" class="headerlink" title="二、简单转场"></a>二、简单转场</h1><p>基本类型</p>
<blockquote>
<p>UIViewAnimationOptionLayoutSubviews：动画过程中保证子视图跟随运动。<br>UIViewAnimationOptionAllowUserInteraction：动画过程中允许用户交互。<br>UIViewAnimationOptionBeginFromCurrentState：所有视图从当前状态开始运行。<br>UIViewAnimationOptionRepeat：重复运行动画。<br>UIViewAnimationOptionAutoreverse ：动画运行到结束点后仍然以动画方式回到初始点。<br>UIViewAnimationOptionOverrideInheritedDuration：忽略嵌套动画时间设置。<br>UIViewAnimationOptionOverrideInheritedCurve：忽略嵌套动画速度设置。<br>UIViewAnimationOptionAllowAnimatedContent：动画过程中重绘视图（注意仅仅适用于转场 动画）。</p>
</blockquote>
<blockquote>
<p>UIViewAnimationOptionShowHideTransitionViews：视图切换时直接隐藏旧视图、显示新视图，<br>而不是将旧视图从父视图移除（仅仅适用于转场动画）<br>UIViewAnimationOptionOverrideInheritedOptions ：不继承父动画设置或动画类型。</p>
</blockquote>
<p>动画速度控制（可从其中选择一个设置）</p>
<blockquote>
<p>UIViewAnimationOptionCurveEaseInOut：动画先缓慢，然后逐渐加速。<br>UIViewAnimationOptionCurveEaseIn ：动画逐渐变慢。<br>UIViewAnimationOptionCurveEaseOut：动画逐渐加速。<br>UIViewAnimationOptionCurveLinear ：动画匀速执行，默认值。</p>
</blockquote>
<p>转场类型（仅适用于转场动画设置，可以从中选择一个进行设置，基本动画、关键帧动画不需要设置）</p>
<blockquote>
<p>UIViewAnimationOptionTransitionNone：没有转场动画效果。<br>UIViewAnimationOptionTransitionFlipFromLeft ：从左侧翻转效果。<br>UIViewAnimationOptionTransitionFlipFromRight：从右侧翻转效果。<br>UIViewAnimationOptionTransitionCurlUp：向后翻页的动画过渡效果。<br>UIViewAnimationOptionTransitionCurlDown ：向前翻页的动画过渡效果。<br>UIViewAnimationOptionTransitionCrossDissolve：旧视图溶解消失显示下一个新视图的效果。<br>UIViewAnimationOptionTransitionFlipFromTop ：从上方翻转效果。<br>UIViewAnimationOptionTransitionFlipFromBottom：从底部翻转效果。</p>
</blockquote>
<p>简单使用<br>  作用于fromView的父视图，切换两个view，将formView从其父视图上移除，将toView重新粘在其父视图上，展现一个动画效果。</p>
  <figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">UIView</span> transitionFromView:self.view toView:redView duration:5.0 options:</span><br><span class="line">UIViewAnimationOptionCurveLinear completion:^(<span class="name">BOOL</span> finished) &#123;</span><br><span class="line">        kLog(<span class="name">@</span><span class="string">"转场动画完成"</span>)<span class="comment">;</span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>  重绘View视图，任何其子视图的改变或者其自身的改变都会触发转场动画的效果。</p>
  <figure class="highlight clojure"><table><tr><td class="code"><pre><span class="line">[UIView transitionWithView:self.view duration:2.0 options:</span><br><span class="line">UIViewAnimationOptionCurveLinear animations:<span class="comment">^&#123;</span></span><br><span class="line"><span class="comment">        self.view.alpha = 0.1;</span></span><br><span class="line"><span class="comment">&#125;</span> completion:^(<span class="name">BOOL</span> finished) &#123;</span><br><span class="line">        kLog(@<span class="string">"动画完成"</span>)<span class="comment">;</span></span><br><span class="line">&#125;]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、模态转场"><a href="#三、模态转场" class="headerlink" title="三、模态转场"></a>三、模态转场</h1><p>源控制器A–&gt;目标控制器B</p>
<h2 id="1-提要"><a href="#1-提要" class="headerlink" title="(1) 提要"></a>(1) 提要</h2><p>可以只使用一个动画控制器Animator，但是要对Present/Dismiss分别实现。模态的类型默认为FullScreen，即在Present时，会移除fromView，而类型设置为Custom时，就会使fromView与toView共存。present时，要把toView加入到container的视图层级，dismiss时，要把fromView从container的视图层级中移除。非交互式转场，需要在动画执行完毕声明complete<code>[transitionContext completeTransition:YES];</code>交互式转场，需要判断转场完成或者取消。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">BOOL</span> isCancelled = transitionContext.transitionWasCancelled;</span><br><span class="line"><span class="comment">// 考虑到转场中途可能取消的情况，转场结束后，恢复视图状态。</span></span><br><span class="line">fromView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br><span class="line">toView.transform = <span class="built_in">CGAffineTransformIdentity</span>;</span><br></pre></td></tr></table></figure>
<p>在模态中，设置将要跳转到的视图控制器(presentedViewController)的transitioningDelegate。充当代理的对象可以是源视图控制器(presentingViewController)，也可以是自己创建的对象，它需要为转场动画提供一个animator对象。animator对象的animateTransition是整个动画的核心逻辑。</p>
<h2 id="2-无交互"><a href="#2-无交互" class="headerlink" title="(2) 无交互"></a>(2) 无交互</h2><p>设置<strong>目标控制器B</strong>的代理(可以是A，也可以是B)以及模态动画类型(常用UIModalPresentationCustom或UIModalPresentationFullScreen)。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">YAShareViewController *shareViewController = [[YAShareViewController alloc] init];</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 设置转场代理</span></span><br><span class="line">shareViewController.transitioningDelegate = <span class="keyword">self</span>;</span><br><span class="line"><span class="comment">// 设置转场动画类型</span></span><br><span class="line">shareViewController.modalPresentationStyle = <span class="built_in">UIModalPresentationCustom</span>;</span><br><span class="line">[<span class="keyword">self</span> presentViewController:shareViewController animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 目标控制器的代理遵守UIViewControllerTransitioningDelegate协议并相关实现方法</span></span><br><span class="line"><span class="meta">#pragma mark - Transitioning Delegate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 无交互出现动画</span></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForPresentedController:(<span class="built_in">UIViewController</span> *)presented presentingController:(<span class="built_in">UIViewController</span> *)presenting sourceController:(<span class="built_in">UIViewController</span> *)source &#123;</span><br><span class="line"> YATransitionAnimator *animator = [YATransitionAnimator transitionAnimatorWithType:TransitionAnimatorPresent];</span><br><span class="line"> </span><br><span class="line">     <span class="keyword">return</span> animator;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 无交互消失动画</span></span><br><span class="line">- (<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationControllerForDismissedController:(<span class="built_in">UIViewController</span> *)dismissed &#123;</span><br><span class="line"> YATransitionAnimator *animator = [YATransitionAnimator transitionAnimatorWithType:TransitionAnimatorDismiss];</span><br><span class="line">     <span class="keyword">return</span> animator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代理方法中的动画管理者Animator独立存在，可以新建一继承自NSObject且遵守<code>UIViewControllerAnimatedTransitioning</code>协议的对象担任(仅仅遵守协议实现方法即可，不需设置代理)。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#pragma mark – Life Cycle</span></span><br><span class="line">   </span><br><span class="line">+ (<span class="keyword">instancetype</span>)transitionAnimatorWithType:(TransitionAnimatorType)transitionAnimatorType &#123;</span><br><span class="line">  YATransitionAnimator *animator = [[YATransitionAnimator alloc] init];</span><br><span class="line">  animator.transitionAnimatorType = transitionAnimatorType;</span><br><span class="line">  <span class="keyword">return</span> animator;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="meta">#pragma mark - AnimatedTransitioning delegate</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//返回动画时间</span></span><br><span class="line">- (<span class="built_in">NSTimeInterval</span>)transitionDuration:(<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">5.0</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//执行动画的地方</span></span><br><span class="line">- (<span class="keyword">void</span>)animateTransition:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 1.获取动画必要元素</span></span><br><span class="line">  <span class="built_in">UIView</span> *containerView = [transitionContext containerView];</span><br><span class="line">  <span class="built_in">UIView</span> *fromView = [transitionContext viewForKey:<span class="built_in">UITransitionContextFromViewKey</span>];</span><br><span class="line">  <span class="built_in">UIView</span> *toView = [transitionContext viewForKey:<span class="built_in">UITransitionContextToViewKey</span>];</span><br><span class="line">  </span><br><span class="line">  toView.origin = <span class="built_in">CGPointMake</span>(<span class="number">0</span>， kScreenHeight);      </span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2.动画</span></span><br><span class="line">  <span class="comment">// 出场</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>.transitionAnimatorType == TransitionAnimatorPresent) &#123;</span><br><span class="line">      <span class="comment">// 2.添加toView，不一定是addSubview方式</span></span><br><span class="line">      [containerView addSubview:toView];</span><br><span class="line">      [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.5</span> animations:^&#123;</span><br><span class="line">          toView.origin = <span class="built_in">CGPointMake</span>(<span class="number">0</span>， <span class="number">0</span>);</span><br><span class="line">      &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">          <span class="comment">// 完成</span></span><br><span class="line">          [transitionContext completeTransition:<span class="literal">YES</span>];</span><br><span class="line">      &#125;];</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 消失</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>.transitionAnimatorType == TransitionAnimatorDismiss) &#123;</span><br><span class="line">      [<span class="built_in">UIView</span> animateWithDuration:<span class="number">2.5</span> animations:^&#123;</span><br><span class="line">          fromView.origin = <span class="built_in">CGPointMake</span>(<span class="number">0</span>， kScreenHeight);</span><br><span class="line">      &#125; completion:^(<span class="built_in">BOOL</span> finished) &#123;</span><br><span class="line">          <span class="comment">// 2.添加toView，不一定是addSubview方式</span></span><br><span class="line">          [fromView removeFromSuperview];</span><br><span class="line">          <span class="comment">// 完成</span></span><br><span class="line">          [transitionContext completeTransition:<span class="literal">YES</span>];</span><br><span class="line">  &#125;];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-交互"><a href="#3-交互" class="headerlink" title="(3) 交互"></a>(3) 交互</h2><p>(坑多，所以一般不用下列方式，取而代之使用UIPresentationController。)</p>
<p>在目标控制器的代理方法中，实现交互式代理方法:</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.交互出现动画</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForPresentation:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [[YAInteractiveTransition alloc] init];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.交互消失动画</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)interactionControllerForDismissal:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animator &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [[YAInteractiveTransition alloc] init];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>新建一继承自UIPercentDrivenInteractiveTransition的交互组件类(最好这么做，也可以自定义类遵守UIViewControllerInteractiveTransitioning协议，但极不推荐)，实现必须的startInteractiveTransition方法。</p>
  <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)startInteractiveTransition:(<span class="keyword">id</span>&lt;<span class="built_in">UIViewControllerContextTransitioning</span>&gt;)transitionContext &#123;&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-UIPresentationController"><a href="#4-UIPresentationController" class="headerlink" title="(4) UIPresentationController"></a>(4) UIPresentationController</h2><p>iOS8后的新API，极其方便。<br>把管理权限交给UIPresentationController.设置模态动画类型后，只需要在目标控制器的代理方法中实现:</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (nullable UIPresentationController *)<span class="selector-tag">presentationControllerForPresentedViewController</span><span class="selector-pseudo">:(UIViewController</span> *)<span class="selector-tag">presented</span> <span class="selector-tag">presentingViewController</span><span class="selector-pseudo">:(nullable</span> <span class="selector-tag">UIViewController</span> *)<span class="selector-tag">presenting</span> <span class="selector-tag">sourceViewController</span><span class="selector-pseudo">:(UIViewController</span> *)<span class="selector-tag">source</span> &#123;</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-attr">[[YAPresentationController alloc]</span> <span class="selector-tag">initWithPresentedViewController</span><span class="selector-pseudo">:presented</span> <span class="selector-tag">presentingViewController</span><span class="selector-pseudo">:presenting</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么所有的工作就在YAPresentationController控制器中了。<br>实现相应的方法:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在呈现过渡即将开始的时候被调用的</span></span><br><span class="line">- (<span class="keyword">void</span>)presentationTransitionWillBegin&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 源控制器的View</span></span><br><span class="line">  [<span class="keyword">self</span>.containerView addSubview:<span class="keyword">self</span>.presentingViewController.view];</span><br><span class="line">  <span class="comment">// 背景View</span></span><br><span class="line">  [<span class="keyword">self</span>.containerView addSubview:<span class="keyword">self</span>.backgroundView];</span><br><span class="line">  <span class="comment">// 目标控制器View</span></span><br><span class="line">  [<span class="keyword">self</span>.containerView addSubview:<span class="keyword">self</span>.presentedView];</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//在呈现过渡结束时被调用的</span></span><br><span class="line">- (<span class="keyword">void</span>)presentationTransitionDidEnd:(<span class="built_in">BOOL</span>)completed&#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//在退出过渡即将开始的时候被调用的</span></span><br><span class="line">- (<span class="keyword">void</span>)dismissalTransitionWillBegin&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//在退出的过渡结束时被调用的</span></span><br><span class="line">- (<span class="keyword">void</span>)dismissalTransitionDidEnd:(<span class="built_in">BOOL</span>)completed&#123;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 调整呈现的View的frame</span></span><br><span class="line">- (<span class="built_in">CGRect</span>)frameOfPresentedViewInContainerView&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、NavigationController转场"><a href="#四、NavigationController转场" class="headerlink" title="四、NavigationController转场"></a>四、NavigationController转场</h1><p>设置源控制器的导航控制器的代理，遵守UINavigationControllerDelegate协议，根据交互式或者非交互式实现相应方法.在方法中根据Push或者Pop返回相应的自定义动画控制器(或者交互控制器)。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 交互式</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController</span><br><span class="line">                                 interactionControllerForAnimationController:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;) animationController &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 非交互式</span></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)navigationController:(<span class="built_in">UINavigationController</span> *)navigationController</span><br><span class="line">                                          animationControllerForOperation:(<span class="built_in">UINavigationControllerOperation</span>)operation</span><br><span class="line">                                                       fromViewController:(<span class="built_in">UIViewController</span> *)fromVC</span><br><span class="line">                                                         toViewController:(<span class="built_in">UIViewController</span> *)toVC &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// Push情况下</span></span><br><span class="line">  <span class="keyword">if</span> (operation == <span class="built_in">UINavigationControllerOperationPush</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [YATransitionAnimator transitionAnimatorWithType:TransitionAnimatorPush];</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="built_in">UINavigationControllerOperationPop</span>) &#123; <span class="comment">// Pop情况下</span></span><br><span class="line">      <span class="keyword">return</span> [YATransitionAnimator transitionAnimatorWithType:TransitionAnimatorPop];</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="五、TabBarController转场"><a href="#五、TabBarController转场" class="headerlink" title="五、TabBarController转场"></a>五、TabBarController转场</h1><p>与导航控制器类似，设置源控制器的tabBarController的代理，遵循UITabBarControllerDelegate，实现相应的方法，只不过它既没有模态的Present和Dismiss，也没有导航控制器的Push和Pop，只有一种方式，更加简单，同样，在方法中返回自定义的动画控制器(或者交互控制器)。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerInteractiveTransitioning</span>&gt;)tabBarController: <span class="built_in">UITabBarController</span> *)tabBarControllerinteractionControllerForAnimationController:(<span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)animationController &#123;&#125;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">- (<span class="keyword">nullable</span> <span class="keyword">id</span> &lt;<span class="built_in">UIViewControllerAnimatedTransitioning</span>&gt;)tabBarController:(<span class="built_in">UITabBarController</span> *)tabBarController animationControllerForTransitionFromViewController:(<span class="built_in">UIViewController</span> *)fromVC  toViewController:(<span class="built_in">UIViewController</span> *)toVC &#123;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git/LLDB/Linux等常用命令]]></title>
      <url>http://blog.chenyalun.com/2017/02/20/Git:LLDB:Linux%E7%AD%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017.4.3 补充Clang指令<br>2017.4.2 补充</p>
</blockquote>
<p align="center"> Git/SVN/Linux/Vim/LLDB等常用、快忘记的命令总结。 </p>

<a id="more"></a>
<h1 id="CocoaPods"><a href="#CocoaPods" class="headerlink" title="CocoaPods"></a>CocoaPods</h1><pre><code>pod install --verbose --no-repo-update 
</code></pre><h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p>源代码管理工具能追踪一个项目从诞生一直到定案的过程，记录一个项目的所有内容变化，方便地查阅特定版本的修订情况。</p>
<p>Git与SVN的对比:<br>1.Git是分布式，有本地分支，SVN是集中式，无本地分支。<br>2.git合并操作保留原有的提交过程（即保留了合并来源的作者、提交次数、分离提交的内容）。<br>svn合并操作把来源多个提交合并成了一个合并提交。<br>3.git：可以修正提交(在自己的分支)。<br>svn：一旦提交就到服务器上，实际使用中就是不能修改。<br>4.SVN没有tag和真正意义的分支(它的分支是一个完整的目录。且这个目录拥有完整的实际文件)，Git支持。<br>5.Git有暂存区，提交速度快。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>1.清除本地以及远程的.DS_Store文件(修复后添加.gitignore)</p>
<pre><code>find . -name .DS_Store -print0 | xargs -0 git rm -f --ignore-unmatch
</code></pre><p>2.克隆仓库到本地</p>
<pre><code>git clone https://github.com/ChenYalun/a.git
</code></pre><p>3.添加忽略文件</p>
<pre><code>git add .gitignore
</code></pre><p>4.提交修改</p>
<pre><code>git commit -m &quot;注释&quot;
</code></pre><p>5.推送到远程仓库</p>
<pre><code>git push YAKit(仓库名称) origin(分支名称)
</code></pre><h2 id="初步"><a href="#初步" class="headerlink" title="初步"></a>初步</h2><p>在git中，版本号是一个由SHA1生成的哈希值。<br> 查看git所有命令的帮助</p>
<pre><code>$ git help 子命令
# 要退出帮助信息，按&quot;q&quot;
# 翻看下页，按&quot;空格&quot;
# 翻看上页，按&quot;CTRL+B&quot;
# 要搜索相关文字，按&quot;/&quot;然后输入&quot;相关文字&quot;
</code></pre><p>配置以及全局配置</p>
<pre><code>git config  user.name &quot;chenyalun&quot;
git config  user.email iChenYalun@gmail.com 

git config --global user.name &quot;chenyalun&quot;
git config --global user.email iChenYalun@gmail.com 

 查看当前所有配置
git config -l

 编辑(全局)配置文件
git config -e [--global]
</code></pre><p>在当前目录下初始化仓库</p>
<pre><code>git init
</code></pre><p>新建一个目录，将其初始化为Git代码库</p>
<pre><code>git init [目录]
</code></pre><p>添加所有的文件/指定的文件到暂存区</p>
<pre><code>git add .
git add a.h，a.m
</code></pre><p>添加目录到暂存区</p>
<pre><code>git add [dir]
</code></pre><p>删除工作区文件</p>
<pre><code>git rm a.h a.m
</code></pre><p>停止追踪指定文件,但是文件会保存在工作区</p>
<pre><code>git rm --cached a.h
</code></pre><p>改名,并且将这个改名放入暂存区</p>
<pre><code>git mv old.h new.h
</code></pre><p>提交文件，添加注释，要使用 -m 参数指定修改的备注信息</p>
<pre><code>git commit -m &quot;初始化仓库&quot;
使用git时，每一次修改都需要添加(add)再提交(commit)，这一点是与svn不一样
</code></pre><p>查询代码库当前状态(已加载，未加载等)</p>
<pre><code>git status
</code></pre><p>查看所有版本库日志</p>
<pre><code>git log
</code></pre><p>查看指定文件(a.m)的版本库日志</p>
<pre><code>git log a.m
</code></pre><p>追加提交</p>
<pre><code>git commit -m &apos;initial commit&apos;
git add forgotten_file
git commit --amend
</code></pre><p>撤销某次提交</p>
<pre><code>git revert commitId
</code></pre><p>提交时显示所有diff信息</p>
<pre><code>git commit -v
</code></pre><p>使用一次新的commit，替代上一次提交<br>如果代码没有任何新变化，则用来改写上一次commit的提交信息</p>
<pre><code>git commit --amend -m [message]
</code></pre><p>重做上一次commit，并包括指定文件的新变化</p>
<pre><code>git commit --amend a.h a.m
</code></pre><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>恢复暂存区的指定文件到工作区</p>
<pre><code>git checkout a.h
</code></pre><p>恢复某个commit的指定文件到暂存区和工作区</p>
<pre><code>git checkout [commit] [file]
</code></pre><p>恢复暂存区的所有文件到工作区</p>
<pre><code>git checkout .
</code></pre><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</p>
<pre><code>git reset a.h
</code></pre><p>重置暂存区与工作区，与上一次commit保持一致</p>
<pre><code>git reset --hard
</code></pre><p>重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</p>
<pre><code>git reset [commit]
</code></pre><p>重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</p>
<pre><code>git reset --hard [commit]
</code></pre><p>重置当前HEAD为指定commit，但保持暂存区和工作区不变</p>
<pre><code>git reset --keep [commit]
</code></pre><p>新建一个commit，用来撤销指定commit<br>后者的所有变化都将被前者抵消，并且应用到当前分支</p>
<pre><code>git revert [commit]
</code></pre><p>暂时将未提交的变化移除，稍后再移入</p>
<pre><code>git stash
git stash pop
</code></pre><p>查看git的总提交次数</p>
<pre><code>git rev-list head | sort | wc -l
</code></pre><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>列出所有本地分支</p>
<pre><code>git branch
</code></pre><p>列出所有远程分支</p>
<pre><code>git branch -r
</code></pre><p>列出所有本地分支和远程分支</p>
<pre><code>git branch -a
</code></pre><p>新建一个分支，但依然停留在当前分支</p>
<pre><code>git branch [branch-name]
</code></pre><p>新建一个分支，并切换到该分支</p>
<pre><code>git checkout -b [branch]
</code></pre><p>新建一个分支，指向指定commit</p>
<pre><code>git branch [branch] [commit]
</code></pre><p>新建一个分支，与指定的远程分支建立追踪关系</p>
<pre><code>git branch --track [branch] [remote-branch]
</code></pre><p>切换到指定分支，并更新工作区</p>
<pre><code>git checkout [branch-name]
</code></pre><p>切换到上一个分支</p>
<pre><code>git checkout -
</code></pre><p>建立追踪关系，在现有分支与指定的远程分支之间</p>
<pre><code>git branch --set-upstream [branch] [remote-branch]
如:git branch --set-upstream dev remotes/origin/dev,名字保持一致
</code></pre><p>合并指定分支到当前分支</p>
<pre><code>git merge [branch]
// 通常使用下面这条:
git merge --no-ff [branch]
</code></pre><p>选择一个commit，合并进当前分支</p>
<pre><code>git cherry-pick [commit]
</code></pre><p>删除分支</p>
<pre><code>git branch -d [branch-name]
</code></pre><p>删除远程分支</p>
<pre><code>git push origin --delete [branch-name]
git branch -dr [remote/branch]
</code></pre><h2 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h2><p>添加新的远程仓库</p>
<pre><code>git remote add &lt;name&gt; &lt;url&gt;
</code></pre><p>拉取远程仓库的内容</p>
<pre><code>git fetch &lt;name&gt; [branchName] //不会合并，只拉取
git pull &lt;name&gt;  [branchName] //拉取并且合并
</code></pre><p>移除某个远程仓库</p>
<pre><code>git remote rm &lt;name&gt;
</code></pre><p>重命名远程仓库</p>
<pre><code>git remote rename oldShortName newShortName
</code></pre><p>查看远程仓库的url</p>
<pre><code>git remote -v
</code></pre><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>列出所有tag</p>
<pre><code>git tag
</code></pre><p>新建一个tag在当前commit</p>
<pre><code>git tag [tag]
</code></pre><p>新建一个tag在指定commit</p>
<pre><code>git tag [tag] [commit]
</code></pre><p>删除本地tag</p>
<pre><code>git tag -d [tag]
</code></pre><p>删除远程tag</p>
<pre><code>git push origin :refs/tags/[tagName]
</code></pre><p>查看tag信息</p>
<pre><code>git show [tag]
</code></pre><p>提交指定tag</p>
<pre><code>git push [remote] [tag]
</code></pre><p>提交所有tag</p>
<pre><code>git push [remote] --tags
</code></pre><p>新建一个分支，指向某个tag</p>
<pre><code>git checkout -b [branch] [tag]
</code></pre><h2 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h2><p>下载远程仓库的所有变动</p>
<pre><code>git fetch [remote]
</code></pre><p>显示所有远程仓库</p>
<pre><code>git remote -v
</code></pre><p>显示某个远程仓库的信息</p>
<pre><code>git remote show [remote]
</code></pre><p>增加一个新的远程仓库，并命名</p>
<pre><code>git remote add [shortname] [url]
</code></pre><p>取回远程仓库的变化，并与本地分支合并</p>
<pre><code>git pull [remote] [branch]
</code></pre><p>上传本地指定分支到远程仓库</p>
<pre><code>git push [remote] [branch]
</code></pre><p>强行推送当前分支到远程仓库，即使有冲突</p>
<pre><code>git push [remote] --force
</code></pre><p>推送所有分支到远程仓库</p>
<pre><code>git push [remote] --all
</code></pre><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>设置git别名</p>
<pre><code>git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.unstage &apos;reset HEAD --&apos;
</code></pre><p>文件权限不纳入版本管理</p>
<pre><code>git config core.filemode false
</code></pre><h1 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h1><h2 id="初步-1"><a href="#初步-1" class="headerlink" title="初步"></a>初步</h2><p>checkout<br>将服务器上最新的代码仓库下载到本地，”只需要做一次”</p>
<p>update<br>从服务器上将其他人所做的修改下载到本地</p>
<p>commit<br>将工作提交到服务器</p>
<p>将文件添加到本地版本库中</p>
<pre><code>svn add main.c
</code></pre><p>将文件提交到服务器的版本库中</p>
<pre><code>svn ci -m &quot;添加了main.c文件&quot; 
</code></pre><p>删除文件</p>
<pre><code>svn rm Person.h
</code></pre><p>提交删除</p>
<pre><code>svn ci -m &quot;删除了文件&quot;
注意：不要使用文件管理器直接删除文件
</code></pre><p>撤销文件的修改</p>
<pre><code>svn revert Person.m
</code></pre><p>恢复到之前的某个版本</p>
<pre><code>svn update -r 5
svn up
</code></pre><p>svn help (查看svn所有命令的帮助)</p>
<h2 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h2><pre><code>svn co http://192.168.1.188/svn/weibo --username=manager --password=manager

checkout(co)之后，命令行会记录用户名和密码，后续操作不用再另行指定
</code></pre><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><pre><code>命令行格式：
svn &lt;subcommand&gt; [options] [args]

说明
svn 子命令 [选项] [参数]
</code></pre><p>提示：</p>
<pre><code>[中括号]中包含的内容是可选的
(子命令缩写)
</code></pre><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><pre><code>查看svn日志
svn log

查看某一个文件的日志
svn log filename

查看某一个文件某个版本的日志
svn log filename@1

查看工作目录状态
svn st
</code></pre><h2 id="SVN-st"><a href="#SVN-st" class="headerlink" title="SVN st"></a>SVN st</h2><p>状态说明：描述文件被添加、删除或其他修改</p>
<pre><code>&apos; &apos; 没有修改
&apos;A&apos; 被添加到本地代码仓库
&apos;C&apos; 冲突
&apos;D&apos; 被删除
&apos;I&apos; 被忽略
&apos;M&apos; 被修改
&apos;R&apos; 被替换
&apos;X&apos; 外部定义创建的版本目录
&apos;?&apos; 文件没有被添加到本地版本库内，不在SVN的管理之下
&apos;!&apos; 文件丢失或者不完整(不识别该文件)
&apos;~&apos; 受控文件被其他文件阻隔
&apos;U&apos; 更新最新的代码到本地(本地有文件的情况下)
&apos;G&apos; 产生冲突后，更新操作去解决冲突，相当于进行合并
</code></pre><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>Trunk<br>目前项目正在开发的版本</p>
<p>Tags<br>存放已经上线的重大版本</p>
<p>Branches<br>当发生重大bug或者有新需求时</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><ol>
<li>读权限（r）写权限（w) 可执行权限（x）。</li>
<li><p>第1个字母代表文件的类型：“d” 代表文件夹、“-” 代表普通文件、“c” 代表硬件字符设备、“b” 代表硬件块设备、“s”表示管道文件、“l” 代表软链接文件。</p>
</li>
<li><p>文件类型+所有者+用户组+其他用户。</p>
</li>
<li>空格:下一屏 回车:一行 q:退出 /word:搜索word (以及tab的自动补全)</li>
</ol>
<h2 id="初步-2"><a href="#初步-2" class="headerlink" title="初步"></a>初步</h2><p>最基本(不阐述)</p>
<pre><code>cd clear pwd mkdir rmdir who whoami exit ping
</code></pre><p>查看</p>
<pre><code>ls -a(所有) -l(列表) -h(显示大小)
</code></pre><p>重定向(结果重定向到一个文件，不存在创建，存在覆盖)</p>
<pre><code>ls &gt; a.txt 
</code></pre><p>分屏</p>
<pre><code>more
</code></pre><p>管道(一个命令的结果作为另一个命令的输入)</p>
<pre><code>ls -a | more
</code></pre><p>删除</p>
<pre><code>rm Dir/ -r 递归地删除，删除文件夹必带
rm a.txt -f 强制删除，忽略不存在的文件，无需提示
rm b -i 交互式
</code></pre><p>链接<br>软链接:软链接不占用磁盘空间，源文件删除则软链接失效。(快捷方式)<br>硬链接:硬链接只能链接普通文件，不能链接目录。两个文件占用相同大小的硬盘空间，不常用。</p>
<pre><code>ln 源文件 链接文件 (硬链接)
ln -s 源文件 链接文件 
</code></pre><p>查看或合并</p>
<pre><code>cat q.txt
cat 1.txt 2.txt &gt; 3.txt (重定向)
</code></pre><p>文本搜索可正则</p>
<pre><code>grep -v(选项) &apos;app&apos;(匹配字符串) a.txt(文件名)

-v 显示不包含匹配文本的所有行
-n 显示匹配行及行号
-i 忽略大小写
</code></pre><p>查找</p>
<pre><code>find ./ -name a.txt
find ./ -name &apos;*.txt&apos;
find ./ -size +10M(大于10M)
</code></pre><p>拷贝</p>
<pre><code>cp

-a     该选项通常在复制目录时使用，它保留链接、文件属性，并递归地复制目录，简单而言，保持文件原有属性。
-f     强制
-i     交互
-r     递归
-v     进度
</code></pre><p>移动(重命名)</p>
<pre><code>mv
-f -v -i
</code></pre><p>归档与压缩</p>
<pre><code>tar [参数] 打包文件名 文件
gzip  [选项]  被压缩文件
</code></pre><p>切换用户</p>
<pre><code>su 不切换目录
su - 切换目录
su root 到root
su -root 到root，同时到/root目录
</code></pre><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>日历</p>
<pre><code>cal
</code></pre><p>时间</p>
<pre><code>date
</code></pre><p>网卡</p>
<pre><code>ifconfig
</code></pre><p>进程</p>
<pre><code>ps
-a     所有
-u     详细状态
-x     显示没有控制终端的进程
-w     显示加宽
-r     正在运行
</code></pre><p>动态进程</p>
<pre><code>top
M     内存使用量 排序
P     CPU占有率 排序
T     运行时间 排序
U     可以根据后面输入的用户名来筛选进程
K     可以根据后面输入的PID来杀死进程。kill pid
q     退出
h     获得帮助
</code></pre><p>关机重启</p>
<pre><code>reboot     重启
shutdown –r now     重新启动
shutdown -h now     立刻关机
shutdown -h 20:25     在今天的20:25会关机
shutdown -h +10     过十分钟后自动关机
init 0     关机
init 6     重启
</code></pre><p>磁盘空间</p>
<pre><code>df
-a     所有
-m     以1024字节为单位显示
-t     显示各指定文件系统的磁盘空间使用情况
-T     显示文件系统
</code></pre><p>目录所占磁盘空间</p>
<pre><code>du
-a     递归
-s     显示指定文件或目录占用的数据块
-b     以字节为单位显示磁盘占用情况
-l     计算所有文件大小，对硬链接文件计算多次
</code></pre><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><h2 id="初步-3"><a href="#初步-3" class="headerlink" title="初步"></a>初步</h2><pre><code>i: 插入光标前一个字符 

I: 插入行首 

a: 插入光标后一个字符 

A: 插入行未 

o: 向下新开一行，插入行首 

O: 向上新开一行，插入行首
</code></pre><p>ESC:从插入模式或末行模式进入命令模式</p>
<p>移动光标:</p>
<pre><code>h: 左移 

j: 下移 

k: 上移 

l: 右移

M: 光标移动到中间行 

L: 光标移动到屏幕最后一行行首 

G: 移动到指定行，行号 -G

w: 向后一次移动一个字 

b: 向前一次移动一个字

{: 按段移动，上移 

}: 按段移动，下移

Ctr-d: 向下翻半屏 

Ctr-u: 向上翻半屏

Ctr-f: 向下翻一屏 

Ctr-b: 向上翻一屏

gg: 光标移动文件开头 

G: 光标移动到文件末尾
</code></pre><p>删除命令:</p>
<pre><code>x: 删除光标后一个字符，相当于 Del 

X: 删除光标前一个字符，相当于 Backspace

dd: 删除光标所在行，n dd 删除指定的行数 D: 删除光标后本行所有内容，包含光标所在字符 

d0: 删除光标前本行所有内容，不包含光标所在字符

dw: 删除光标开始位置的字，包含光标所在字符
</code></pre><p>撤销命令:</p>
<pre><code>u: 一步一步撤销 


Ctr-r: 反撤销
</code></pre><p>重复命令:</p>
<pre><code>.: 重复上一次操作的命令
</code></pre><p>文本行移动:</p>
<pre><code>&gt;&gt;:文本行右移动
&lt;&lt;:文本行左移动
</code></pre><p>复制粘贴:</p>
<pre><code>yy: 复制当前行，n yy 复制 n 行 
p: 在光标所在位置向下新开辟一行，粘贴
</code></pre><p>可视模式:</p>
<pre><code>v: 按字符移动，选中文本 

V: 按行移动，选中文本可视模式可以配合 d， y， &gt;&gt;， &lt;&lt; 实现对文本块的删除，复制，左右移动
</code></pre><p>替换操作:</p>
<pre><code>r: 替换当前字符 

R: 替换当前行光标后的字符
</code></pre><p>查找命令:</p>
<pre><code>/: str查找
n: 下一个
N：上一个
</code></pre><p>替换命令：</p>
<p>把abc全部替换成123</p>
<pre><code>末行模式下，将光标所在行的abc替换成123
:%s/abc/123/g

末行模式下，将第一行至第10行之间的abc替换成123
:1， 10s/abc/123/g
</code></pre><p>vim里执行 shell 下命令:</p>
<pre><code>末行模式里输入!，后面跟命令
</code></pre><h1 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h1><h2 id="初步-4"><a href="#初步-4" class="headerlink" title="初步"></a>初步</h2><pre><code>help
</code></pre><p>输出</p>
<pre><code>p (int)self.view.subviews.count 基本类型 
po self.view 对象
</code></pre><p>修改</p>
<pre><code>expr a = 3
expr int $c = 10 声明一个新变量
</code></pre><p>调用</p>
<pre><code>call self.view.backgroundColor = [UIColor redColor]
方法无返回值时使用call
</code></pre><p>堆栈</p>
<pre><code>bt 加all可打印所有thread的堆栈
</code></pre><p>寻址</p>
<pre><code>image lookup --address 0x0000000103aca1e1
寻找栈地址对应的代码位置
</code></pre><h1 id="Clang"><a href="#Clang" class="headerlink" title="Clang"></a>Clang</h1><h2 id="初步-5"><a href="#初步-5" class="headerlink" title="初步"></a>初步</h2><p> 编译单个c源文件，并产生一个目标文件  </p>
<pre><code>cc -c one.c
</code></pre><p> 编译多个c源文件，并为每个文件产生一个目标文件  </p>
<pre><code>cc -c one.c two.c three.c
</code></pre><p> 链接单个目标文件产生一个名为a.out的可执行文件  </p>
<pre><code>cc one.o
</code></pre><p> 链接多个目标文件  </p>
<pre><code>cc one.o two.o three.o
</code></pre><p> 编译并链接一个c源文件  </p>
<pre><code>cc one.c
</code></pre><p> 编译并链接多个c源文件  </p>
<pre><code>cc one.c two.c three.c
</code></pre><p> 编译一个c源文件，并把它和现存的目标文件链接在一起  </p>
<pre><code>cc one.o two.o three.c
</code></pre><p> 可执行文件重命名加上“-o name”这个选项  </p>
<pre><code>cc -o abc one.c
</code></pre><p> 执行可执行文件  </p>
<pre><code>./a.out
</code></pre><p>编译C++文件</p>
<pre><code>clang++ -Wall -g -std=c++11 -stdlib=libc++ fileName.cpp -o targetFileName
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> SVN </tag>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS应用优化总结]]></title>
      <url>http://blog.chenyalun.com/2017/02/14/iOS%E5%BA%94%E7%94%A8%E4%BC%98%E5%8C%96%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p align="center"> 一些优化的Tips。 </p>

<a id="more"></a>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><ul>
<li><p>UITableView采用注册的方式使用reuseIdentifier<br><code>static NSString *CellIdentifier = @&quot;Cell&quot;;</code>复用 Cell 与各个 Section 的 Header 和 Footer。<br>复用 Cell 时， storyboard 中的 cell 设置 reuseIdentifier 完毕即可，无需注册，xib 与 class 自定义的cell 需要设置 reuseIdentifier 而且要注册。</p>
</li>
<li><p>使用UITableView+FDTemplateLayoutCell<br>优点:预缓存机制/自动的缓存失效机制/根据 autolayout 约束自动计算高度。<br>注意:cacheByKey比cacheByIndexPath 更为高效。</p>
 <figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> [tableView <span class="string">fd_heightForCellWithIdentifier:</span>reuseIdentifier <span class="string">cacheByIndexPath:</span>indexPath <span class="string">configuration:</span>^(YACommentTableViewCell *cell) &#123;</span><br><span class="line">       cell.comment = self.comments[indexPath.section][indexPath.row];</span><br><span class="line">   &#125;];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>使用</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不缓存高度</span></span><br><span class="line"><span class="keyword">return</span> [tableView <span class="string">fd_heightForCellWithIdentifier:</span>reuseIdentifier <span class="string">configuration:</span>^(YACommentTableViewCell *cell)&#123;</span><br><span class="line">    cell.comment = self.comments[indexPath.section][indexPath.row];</span><br><span class="line">    </span><br><span class="line">&#125;];</span><br><span class="line">     </span><br><span class="line"><span class="comment">// 更高效，但是当高度变化时，需要手动清除缓存</span></span><br><span class="line">YACommentModel *model = self.comments[indexPath.section][indexPath.row];</span><br><span class="line"><span class="keyword">return</span> [tableView <span class="string">fd_heightForCellWithIdentifier:</span>reuseIdentifier <span class="string">cacheByKey:</span>model.ID <span class="string">configuration:</span>^(id cell) &#123;</span><br><span class="line">     cell.comment = self.comments[indexPath.section][indexPath.row];</span><br><span class="line">&#125;];</span><br><span class="line">     </span><br><span class="line"><span class="comment">// 移除 key 对应的高度缓存</span></span><br><span class="line">[tableView.fd_keyedHeightCache <span class="string">invalidateHeightForKey:</span>key];</span><br><span class="line"><span class="comment">// 移除所有高度缓存</span></span><br><span class="line">[tableView.fd_keyedHeightCache invalidateAllHeightCache];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>设置 opaque 为YES，尽量把 view 设置为透明。</li>
</ul>
<ul>
<li><p>尽量不使用<code>cellForRowAtIndexPath:</code>，用一次然后缓存结果。</p>
</li>
<li><p>尝试缓存。</p>
</li>
<li><p>保证XIB文件的小巧灵活。</p>
</li>
<li><p>预处理懒加载。</p>
</li>
<li><p>处理内存警告。</p>
</li>
<li><p>单一固定的情况下，使用<code>rowHeight</code>， <code>sectionFooterHeight</code>和 <code>sectionHeaderHeight</code>来设定固定的高，而不是请求delegate。</p>
</li>
<li><p>使用</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line">shadowPath，<span class="keyword">view</span>.layer.shadowPath = [[UIBezierPath bezierPathWithRect:<span class="keyword">view</span>.bounds] CGPath]<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 而不是:</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">view</span>.layer.shadowOffset = CGSizeMake(-<span class="number">1</span>， <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">view</span>.layer.shadowRadius = <span class="number">1.0</span>f<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">view</span>.layer.shadowOpacity = <span class="number">0.1</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><ul>
<li><p>合理开线程，主线程占1M，子线程占512K。UI 操作和 DataSource 的操作一定在主线程。DB 操作、日志记录、网络回调都在各自的固定线程。</p>
</li>
<li><p>选择合适的容器，减少subviews的数量。<br>NSArrayi:有序的。能搞按照索引快速查找元素。按照值查找很慢，插入和删除很慢。<br>NSDictionary:无序的。键值对存储。按照key可以快速查找。<br>NSSet: 无序的。按照值可以快速查找，插入和删除很快。</p>
</li>
<li><p>正确使用 <code>imageNamed:</code> 与 <code>imageWithContentsOfFile:</code>，<code>imageNamed:</code>的优点是当加载时会缓存图片，所以当图片会频繁的使用时，用<code>imageNamed:</code>。<code>imageWithContentsOfFile：</code>仅加载图片，图像数据不会缓存，对于较大的图片以及使用情况较少时，就可以用该方法，降低内存消耗。</p>
</li>
<li><p>慎用 NSDateFormatter和NSCalendar，缓存 NSDateFormatter 的结果。<br>Creating a date formatter is not a cheap operation. If you are likely to use a formatter frequently， it is typically more efficient to cache a single instance than to create and dispose of multiple instances. One approach is to use a static variable.</p>
</li>
</ul>
<ul>
<li><p>在iOS 7、macOS 10.9及以上系统版本，NSDateFormatter都是线程安全的。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>， <span class="keyword">strong</span>) <span class="built_in">NSDateFormatter</span> *formatter;</span><br><span class="line">   </span><br><span class="line">- (<span class="built_in">NSDateFormatter</span> *)formatter &#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="built_in">NSDateFormatter</span> *formatter;</span><br><span class="line"> <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line"> <span class="built_in">dispatch_once</span>(&amp;onceToken， ^&#123;</span><br><span class="line">     _formatter = [[<span class="built_in">NSDateFormatter</span> alloc] init];</span><br><span class="line">     _formatter.dateFormat = <span class="string">@"EEE MMM dd HH:mm:ss Z yyyy"</span>; <span class="comment">// twitter date format</span></span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">return</span> formatter</span><br><span class="line">;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>寻找 (NSDate *)dateFromString:(NSString )string 的替换品。下面是ISO8601 转成 NSDate 的 NSDateFormatter 的最著名替代品，也可以使用开源作品:NSDate+SSToolkitAdditions。</p>
 <figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">  //<span class="comment">#include &lt;time.h&gt;</span></span><br><span class="line">time_t t;</span><br><span class="line">struct tm tm;</span><br><span class="line">strptime([iso8601String cStringUsingEncoding:NSUTF8StringEncoding]， <span class="string">"%Y-%m-%dT%H:%M:%S%z"</span>， &amp;tm);</span><br><span class="line">tm.tm_isdst = -<span class="number">1</span>;</span><br><span class="line">t = mktime(&amp;tm);</span><br><span class="line">[NSDate dateWithTimeIntervalSince197<span class="number">0</span>:t + [[NSTimeZone localTimeZone] secondsFromGM</span><br><span class="line">T]];</span><br></pre></td></tr></table></figure>
</li>
<li><p>不要随意使用 <code>NSLog()</code>。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="comment">// Only log when attached to the debugger</span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> DLog(...) NSLog(__VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#    <span class="meta-keyword">define</span> DLog(...) <span class="comment">/* */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">// Always log， even in production</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ALog(...) NSLog(__VA_ARGS__)</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>当试图获取磁盘中一个文件的属性信息时，使用 <code>[NSFileManager attributesOfItemAtPath:error:]</code>会浪费大量时间读取可能根本不需要的附加属性。这时可以使用 stat 代替 NSFileManager，直接获取文件属性：</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line">  <span class="keyword">struct</span> stat statbuf;</span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *cpath = [filePath fileSystemRepresentation];</span><br><span class="line">  <span class="keyword">if</span> (cpath &amp;&amp; stat(cpath， &amp;statbuf) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">NSNumber</span> *fileSize = [<span class="built_in">NSNumber</span> numberWithUnsignedLongLong:statbuf.st_size];</span><br><span class="line">      <span class="built_in">NSDate</span> *modificationDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:statbuf.st_mtime];</span><br><span class="line">      <span class="built_in">NSDate</span> *creationDate = [<span class="built_in">NSDate</span> dateWithTimeIntervalSince1970:statbuf.st_ctime];</span><br><span class="line">      <span class="comment">// etc</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>MLeakFinder 能在开发阶段，把内存泄露问题暴露无遗，减少了很多潜在的性能问题.    原理:在一个 ViewController 被 pop 或 dismiss 一小段时间后，看看该 UIViewController，它的 view，view 的 subviews 等等是否还存在。</p>
</li>
<li><p>接入bugly。</p>
</li>
<li><p>创造圆形图片避免使用以下方式(会造成离屏渲染):</p>
 <figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">view</span>.layer.cornerRadius = <span class="built_in">view</span>.<span class="built_in">width</span> * <span class="number">0.5</span>;</span><br><span class="line">   <span class="built_in">view</span>.layer.masksToBounds = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>圆形图片</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">UIBezierPath *clipPath = [UIBezierPath bezierPathWithOvalInRect:CGRectMake(<span class="number">0</span>， <span class="number">0</span>， <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">width</span>， <span class="built_in">image</span>.<span class="built_in">size</span>.<span class="built_in">height</span>)] ;</span><br><span class="line">     </span><br><span class="line">[clipPath addClip] ;</span><br><span class="line">    </span><br><span class="line">[<span class="built_in">image</span> drawAtPoint:CGPointZero] ;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">image</span> = UIGraphicsGetImageFromCurrentImageContext() ;</span><br><span class="line"> </span><br><span class="line">UIGraphicsEndImageContext() ;</span><br><span class="line">     </span><br><span class="line"><span class="built_in">return</span> <span class="built_in">image</span> ;</span><br></pre></td></tr></table></figure>
</li>
<li><p>设置Label的圆角。</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不要这么做：label.backgroundColor = aColor </span></span><br><span class="line"><span class="comment">// 以及不要在 IB 里为 label 设置背景色</span></span><br><span class="line"><span class="selector-tag">label</span><span class="selector-class">.layer</span><span class="selector-class">.backgroundColor</span> = aColor</span><br><span class="line"><span class="selector-tag">label</span><span class="selector-class">.layer</span><span class="selector-class">.cornerRadius</span> = <span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指定图片的宽高为整数，否则造成离屏渲染。</p>
</li>
<li><p>cell当中不要动态的添加子控件，选中适时地显示与隐藏。</p>
</li>
<li><p>当控件非常多时，把不需要与用户进行交互的控件.通过异步绘制成一张图片，把图片添加到cell当中。</p>
</li>
<li>将 UIView 的属性 clearsContextBeforeDrawing 设置为 NO 在多数情况下可以提高绘制性能，尤其是在用绘制代码实现了一个定制 view 的时候。</li>
<li><p>设置阴影。</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="keyword">view</span>.layer.shadowPath = [[UIBezierPath bezierPathWithRect:<span class="keyword">view</span>.bounds] CGPath]<span class="comment">;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 而不是</span></span><br><span class="line"><span class="keyword">view</span>.layer.shadowOffset = CGSizeMake(-<span class="number">1.0</span>f， <span class="number">1.0</span>f)<span class="comment">;</span></span><br><span class="line"><span class="keyword">view</span>.layer.shadowRadius = <span class="number">5.0</span>f<span class="comment">;</span></span><br><span class="line"><span class="keyword">view</span>.layer.shadowOpacity = <span class="number">0.6</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>通常图层的以下属性将会触发离屏渲染：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">阴影（UIView<span class="selector-class">.layer</span><span class="selector-class">.shadowOffset</span>/shadowRadius/…）</span><br><span class="line">圆角（当 UIView<span class="selector-class">.layer</span><span class="selector-class">.cornerRadius</span> 和 UIView<span class="selector-class">.layer</span><span class="selector-class">.maskToBounds</span> 一起使用时）</span><br><span class="line">图层蒙板</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 Autorelease Pool，当需要在代码中创建许多临时对象时，可以显式的使用 Autorelease Pool。</p>
</li>
<li><p>使用IMP。</p>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS常用设计模式]]></title>
      <url>http://blog.chenyalun.com/2017/02/11/iOS%E5%B8%B8%E7%94%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p align="center"> 关于设计模式。 </p>

<a id="more"></a>
<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><ul>
<li><p>原型模式是通过克隆已有的对象来创建新的对象，已有的对象即为原型。(Objective-C中的深复制)</p>
</li>
<li><p>优点:将创建对象的代码隐藏，屏蔽初始化的具体细节，避免重复耗时的过程。</p>
</li>
<li><p>当需要创建一个新的实例，但不想依赖初始化器，使用此模式。</p>
</li>
<li><p>注意:深复制与浅复制的问题。浅复制:复制对象的引用，深复制:复制对象本身。不可变对象的copy操作是浅复制，其他情况是深复制，但是集合类对象即便是深复制，也是复制集合类对象自身，里面的元素并未复制，或者说是单层深复制，而要对集合类对象进行完全彻底的复制，归档可以解决。</p>
</li>
<li><p>应用:实现NSCopying协议并保证类的基类是NSObject。</p>
</li>
<li><p>实现方法: 根类遵循NSCopying协议，重写copyWithZone方法，创建一个复制方法Operation，方便自身以及增加属性的子类再次复制。</p>
</li>
<li><p>YAObject担当根类，遵循NSCopying协议，重写copyWithZone方法，提供复制接口copyWithObject，方便自身以及子类复制.YAPerson增加两个属性，且类型是集合类。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAObject</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>&gt;</span></span><br><span class="line"><span class="comment">/** 年龄 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>，<span class="keyword">assign</span>) <span class="built_in">NSInteger</span> age;</span><br><span class="line"><span class="comment">/** 姓名 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>，<span class="keyword">copy</span>) <span class="built_in">NSString</span> *name;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/** 复制操作 */</span></span><br><span class="line">- (<span class="keyword">void</span>)copyWithObject:(<span class="built_in">NSObject</span> *)object;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAPerson</span> : <span class="title">YAObject</span></span></span><br><span class="line"><span class="comment">/** 书籍 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>，<span class="keyword">strong</span>) <span class="built_in">NSArray</span> *books;</span><br><span class="line"><span class="comment">/** 朋友 */</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>，<span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span> *friends;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>copyWithZone操作中，[self class]使子类也能调用此方法，子类中，重写copyWithObject操作，当有集合类元素的时候，不能单纯的[array copy]，这样仅是复制了集合元素自身，却没有复制集合中的元素，是单层深复制，要copyItems。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="meta">@implementation</span> <span class="type">YAObject</span></span><br><span class="line"><span class="comment">// 实现的时候用copyWithZone，调用的时候用copy，最顶层的根类重写该方法，子类调用但不得重写</span></span><br><span class="line">- (id)copyWithZone:(<span class="type">NSZone</span> *)zone &#123;</span><br><span class="line">    <span class="type">YAObject</span> *<span class="class"><span class="keyword">object</span> </span>= [[[self <span class="class"><span class="keyword">class</span>] <span class="title">allocWithZone</span></span>:zone] init];</span><br><span class="line">    <span class="comment">// 把自己copy后赋予object</span></span><br><span class="line">    [self copyWithObject:<span class="class"><span class="keyword">object</span>]</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">object</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自身以及子类实现该方法以赋值给object</span></span><br><span class="line">- (void)copyWithObject:(<span class="type">YAObject</span> *)<span class="class"><span class="keyword">object</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>.<span class="title">name</span> </span>= self.name;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>.<span class="title">age</span> </span>= self.age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@implementation</span> <span class="type">YAPerson</span></span><br><span class="line"><span class="comment">// 又增加了属性</span></span><br><span class="line"><span class="comment">// 自身以及子类实现该方法以赋值给object</span></span><br><span class="line">- (void)copyWithObject:(<span class="type">YAPerson</span> *)<span class="class"><span class="keyword">object</span> </span>&#123;</span><br><span class="line">    [<span class="keyword">super</span> copyWithObject:<span class="class"><span class="keyword">object</span>]</span>;</span><br><span class="line">    <span class="class"><span class="keyword">object</span>.<span class="title">books</span> </span>= [[<span class="type">NSArray</span> alloc] initWithArray:self.books copyItems:<span class="type">YES</span>];</span><br><span class="line">    <span class="class"><span class="keyword">object</span>.<span class="title">friends</span> </span>= [[<span class="type">NSMutableArray</span> alloc] initWithArray:self.friends copyItems:<span class="type">YES</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">YAObject *object = [[YAObject alloc] init]<span class="comment">;</span></span><br><span class="line">object.name = @<span class="string">"Aaron"</span><span class="comment">;</span></span><br><span class="line">object.age = <span class="number">22</span><span class="comment">;</span></span><br><span class="line">kLog(@<span class="string">"%@--%ld"</span>，object.name， object.age)<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">YAObject *objectB = [object copy]<span class="comment">;</span></span><br><span class="line">kLog(@<span class="string">"%@--%ld"</span>，objectB.name， objectB.age)<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">YAPerson *person = [[YAPerson alloc] init]<span class="comment">;</span></span><br><span class="line">person.name = @<span class="string">"A"</span><span class="comment">;</span></span><br><span class="line">person.age = <span class="number">25</span><span class="comment">;</span></span><br><span class="line">person.<span class="keyword">books </span>= @[@<span class="string">"V"</span>，@<span class="string">"T"</span>，@<span class="string">"N"</span>]<span class="comment">;</span></span><br><span class="line">person.friends = [NSMutableArray arrayWithObjects:@<span class="string">"QQ"</span>，@<span class="string">"WeChat"</span>， nil]<span class="comment">;</span></span><br><span class="line">  </span><br><span class="line">YAPerson *personB = [person copy]<span class="comment">;</span></span><br><span class="line">kLog(@<span class="string">"%@-%ld-%@-%@"</span>，personB.name， personB.age， personB.<span class="keyword">books， </span>personB.friends)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="单例"><a href="#单例" class="headerlink" title="单例"></a>单例</h1><ul>
<li><p>单例模式保证某个类型的对象在应用中只存在一个实例。</p>
</li>
<li><p>封装共享资源，管理代表现实世界资源的对象。</p>
</li>
<li><p>当进一步创建对象却不能增加现实中的可用资源，或者希望对象只存在一个实例时使用。</p>
</li>
<li><p>要求该实例无法真正意义上被复制克隆。</p>
</li>
<li><p>实现:考虑多线程，重写alloc init方法。</p>
</li>
<li><p>考虑调用copy等方法，不遵循NSCopying协议，重写Copy等方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YASingleton</span> : <span class="title">NSObject</span></span></span><br><span class="line">  <span class="comment">// 接口</span></span><br><span class="line">  + (<span class="keyword">instancetype</span>)sharedSingleton;</span><br><span class="line">  <span class="keyword">@end</span></span><br><span class="line">  </span><br><span class="line">  <span class="class"><span class="keyword">@implementation</span> <span class="title">YASingleton</span></span></span><br><span class="line">     <span class="comment">// 重写alloc  init</span></span><br><span class="line">     <span class="keyword">static</span> YASingleton *singleton = <span class="literal">nil</span>;</span><br><span class="line">     + (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">         <span class="keyword">if</span> (singleton == <span class="literal">nil</span>) &#123;</span><br><span class="line">             <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">             <span class="built_in">dispatch_once</span>(&amp;onceToken， ^&#123;</span><br><span class="line">                 singleton = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">             &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> singleton;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     - (<span class="keyword">instancetype</span>)init &#123;</span><br><span class="line">         <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">         <span class="built_in">dispatch_once</span>(&amp;onceToken， ^&#123;</span><br><span class="line">             singleton = [<span class="keyword">super</span> init];</span><br><span class="line">         &#125;);</span><br><span class="line">         <span class="keyword">return</span> singleton;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 考虑复制的情况</span></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">      不建议</span></span><br><span class="line"><span class="comment">     - (id)mutableCopyWithZone:(struct _NSZone *)zone &#123;</span></span><br><span class="line"><span class="comment">         return singleton;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     - (id)copyWithZone:(struct _NSZone *)zone &#123;</span></span><br><span class="line"><span class="comment">         return singleton;</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     - (<span class="keyword">id</span>)<span class="keyword">copy</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> singleton;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">     - (<span class="keyword">id</span>)mutableCopy &#123;</span><br><span class="line">         <span class="keyword">return</span> singleton;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 接口</span></span><br><span class="line">     + (<span class="keyword">instancetype</span>)sharedSingleton &#123;</span><br><span class="line">         <span class="keyword">return</span> [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">      &#125;</span><br><span class="line">     <span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>除了使用GCD，也可以使用互斥锁。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 互斥锁的形式</span></span><br><span class="line">+ (<span class="keyword">instancetype</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone &#123;</span><br><span class="line">    <span class="keyword">if</span> (singleton == <span class="literal">nil</span>) &#123;</span><br><span class="line">    <span class="keyword">@synchronized</span> (<span class="keyword">self</span>) &#123;</span><br><span class="line">        singleton = [<span class="keyword">super</span> allocWithZone:zone];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>打印地址，验证：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">YASingleton *sing = [YASingleton <span class="keyword">sharedSingleton];</span></span><br><span class="line"><span class="keyword">YASingleton </span>*singB = [sing copy]<span class="comment">;</span></span><br><span class="line">YASingleton *singC = [sing mutableCopy]<span class="comment">;</span></span><br><span class="line">YASingleton *singD = [[YASingleton alloc] init]<span class="comment">;</span></span><br><span class="line">kLog(@<span class="string">"%p-%p-%p-%p"</span>，sing， singB， singC， singD)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>似乎封装成宏更好一点：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单例</span></span><br><span class="line"><span class="meta">#define YASingH(Name) + (instancetype)shared##Name;</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">#define YASingM(Name) \</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">id</span> _instace = <span class="literal">nil</span>; \</span><br><span class="line">+ (<span class="keyword">id</span>)allocWithZone:(<span class="keyword">struct</span> _NSZone *)zone \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">if</span> (_instace == <span class="literal">nil</span>) &#123; \</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken; \</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken， ^&#123; \</span><br><span class="line">_instace = [<span class="keyword">super</span> allocWithZone:zone]; \</span><br><span class="line">&#125;); \</span><br><span class="line">&#125; \</span><br><span class="line"><span class="keyword">return</span> _instace; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">- (<span class="keyword">id</span>)init \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken; \</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;onceToken， ^&#123; \</span><br><span class="line">_instace = [<span class="keyword">super</span> init]; \</span><br><span class="line">&#125;); \</span><br><span class="line"><span class="keyword">return</span> _instace; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">+ (<span class="keyword">instancetype</span>)shared<span class="meta">##Name \</span></span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">return</span> [[<span class="keyword">self</span> alloc] init]; \</span><br><span class="line">&#125; \</span><br><span class="line">- (<span class="keyword">instancetype</span>)<span class="keyword">copy</span> \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">return</span> _instace; \</span><br><span class="line">&#125; \</span><br><span class="line">\</span><br><span class="line">- (<span class="keyword">instancetype</span>)mutableCopy \</span><br><span class="line">&#123; \</span><br><span class="line"><span class="keyword">return</span> _instace; \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><ul>
<li><p>适配器使得两个不兼容的API组件协同工作，用于连接两种不同种类的对象。</p>
</li>
<li><p>解决无法修改或者不修改源代码的组件的兼容性问题。</p>
</li>
<li><p>类适配器:适配器继承主功能组件，遵循适配接口协议。</p>
</li>
<li><p>对象适配器:适配器持有主功能组件(作为成员变量)，遵循适配接口协议。</p>
</li>
<li><p>类适配器的实现</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAMac</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// Mac自带显示接口</span></span><br><span class="line">- (<span class="keyword">void</span>)show;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 一般显示器DVI接口</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">YADVI</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line">- (<span class="keyword">void</span>)dvi;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 适配器:继承自Mac，有显示的功能，遵循YADVI协议，可以显示到一般显示器上</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAMacDVIAdapter</span> : <span class="title">YAMac</span> &lt;<span class="title">YADVI</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAMac</span></span></span><br><span class="line">- (<span class="keyword">void</span>)show &#123;</span><br><span class="line">  kLog(<span class="string">@"Mac自带显示接口"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 适配器实现</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAMacDVIAdapter</span></span></span><br><span class="line">   </span><br><span class="line">- (<span class="keyword">void</span>)dvi &#123;</span><br><span class="line">  [<span class="keyword">super</span> show]; <span class="comment">// 可以显示内容</span></span><br><span class="line">  kLog(<span class="string">@"可以连接到一般的显示器"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 具体使用，调用接口即可</span></span><br><span class="line">YAMacDVIAdapter *adapter = [[YAMacDVIAdapter alloc] init];</span><br><span class="line">[adapter dvi];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>当不再继承主功能组件，而是把它作为属性持有的时候，便是对象适配器。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAMac</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// Mac自带显示接口</span></span><br><span class="line">- (<span class="keyword">void</span>)show;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 一般显示器DVI接口</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">YADVI</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line">- (<span class="keyword">void</span>)dvi;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 适配器:遵循YADVI协议，可以显示到一般显示器上，拥有Mac属性，有显示的功能</span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAMacDVIAdapter</span> : <span class="title">NSObject</span> &lt;<span class="title">YADVI</span>&gt;</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>，<span class="keyword">strong</span>) YAMac *mac;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAMac</span></span></span><br><span class="line">- (<span class="keyword">void</span>)show &#123;</span><br><span class="line">  kLog(<span class="string">@"Mac自带显示接口"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 适配器实现</span></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAMacDVIAdapter</span></span></span><br><span class="line">   </span><br><span class="line">- (<span class="keyword">void</span>)dvi &#123;</span><br><span class="line">  <span class="keyword">self</span>.mac = [[YAMac alloc] init];</span><br><span class="line">  [<span class="keyword">self</span>.mac show];</span><br><span class="line">  kLog(<span class="string">@"可以连接到一般的显示器"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 然而.使用方式没有改变</span></span><br><span class="line">YAMacDVIAdapter *adapter = [[YAMacDVIAdapter alloc] init];</span><br><span class="line">[adapter dvi];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h1><ul>
<li><p>MVC 能使整个应用结构化，使应用的各个部分更易开发测试维护。</p>
</li>
<li><p>M是指数据模型，V是指用户界面，C则是控制器。</p>
</li>
<li><p>模型对象封装了应用程序的数据，并定义操控和处理该数据的逻辑和运算.视图对象是应用程序中用户可以看见的对象.控制器对象解释在视图对象中进行的用户操作，并将新的或更改过的数据传达给模型对象。</p>
</li>
<li><p>Model 和 View 永远不能相互通信，只能通过Controller传递。</p>
</li>
<li><p>Controller 与 Model 的通信: Notification 和 KVO。</p>
</li>
<li><p>Controller 与 View 的通信:outlet， action， 数据源，代理等。</p>
</li>
</ul>
<h1 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h1><ul>
<li><p>MVC升级版</p>
</li>
<li><p>ViewController 从 ViewModel 层中读取数据然后显示在View上。</p>
</li>
<li><p>ViewController与ViewModel的通信:Block回调和ReactiveCocoa。</p>
</li>
<li><p>….// 待补充</p>
</li>
</ul>
<h1 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h1><ul>
<li><p>一个代理对象可以代表其他资源。</p>
</li>
<li><p>当A对象要监听B对象的一些行为时，A成为B的代理.当B对象要通知A对象一些事情时(消息传递)，A成为B的代理。</p>
</li>
<li><p>遵守协议，设置代理，实现方法。</p>
</li>
<li><p>实现:</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义协议</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">YACodeDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line">- (<span class="keyword">void</span>)code;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YAMan</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="comment">// 代理属性</span></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>， <span class="keyword">weak</span>) <span class="keyword">id</span> delegate;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">YACoder</span> : <span class="title">NSObject</span> &lt;<span class="title">YACodeDelegate</span>&gt;</span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YAMan</span></span></span><br><span class="line">- (<span class="keyword">void</span>)setup &#123;</span><br><span class="line">  <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(code)]) &#123;</span><br><span class="line">      <span class="comment">// 告诉代理要做的事</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">YACoder</span></span></span><br><span class="line">- (<span class="keyword">void</span>)code &#123;</span><br><span class="line">  <span class="comment">// 实现必须实现的方法</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 具体使用时，设置代理</span></span><br><span class="line">YAMan *man = [[YAMan alloc] init];</span><br><span class="line">YACoder *coder = [[YACoder alloc] init];</span><br><span class="line">man.delegate = coder;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h1><ul>
<li><p>观察者模式定义了一种一对多的依赖关系，让一个或者多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。 </p>
</li>
<li><p>一个对象需要在不依赖另一个对象的情况下，接收到另一个对象的通知。</p>
</li>
<li><p>实现:通知中心.假定A是观察者，B是被观察者。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在A中</span></span><br><span class="line"><span class="comment">// 添加自己为观察者，通知产生执行show方法</span></span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">addObserver:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(show) <span class="string">name:</span>@<span class="string">"show"</span> <span class="string">object:</span>nil];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在自己即将销毁的那刻移除通知</span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">removeObserver:</span>self];</span><br><span class="line"> &#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在B中，负责适时发送通知</span></span><br><span class="line"><span class="comment">// 发出通知</span></span><br><span class="line">[[NSNotificationCenter defaultCenter] <span class="string">postNotificationName:</span>@<span class="string">"show"</span> <span class="string">object:</span>nil <span class="string">userInfo:</span>nil];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>键值观察(某个属性值改变时通知被观察者)</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为view的alpha属性添加自己为观察者</span></span><br><span class="line"><span class="built_in">UIView</span> *view = [[<span class="built_in">UIView</span> alloc] init];</span><br><span class="line">[view addObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"alpha"</span> options:<span class="built_in">NSKeyValueObservingOptionOld</span> | <span class="built_in">NSKeyValueObservingOptionNew</span> context:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当自身销毁时为view移除观察</span></span><br><span class="line">- (<span class="keyword">void</span>)dealloc &#123;</span><br><span class="line">    [<span class="keyword">self</span>.view removeObserver:<span class="keyword">self</span> forKeyPath:<span class="string">@"alpha"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当alpha属性改变，就会进入</span></span><br><span class="line">- (<span class="keyword">void</span>)observeValueForKeyPath:(<span class="built_in">NSString</span> *)keyPath ofObject:(<span class="keyword">id</span>)object change:(<span class="built_in">NSDictionary</span>&lt;<span class="built_in">NSKeyValueChangeKey</span>，<span class="keyword">id</span>&gt; *)change context:(<span class="keyword">void</span> *)context &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python3入门笔记]]></title>
      <url>http://blog.chenyalun.com/2016/12/20/Python3%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017.1.11修改</p>
</blockquote>
<p align="center"> 人生苦短,我用Python。 </p>

<a id="more"></a>
<h1 id="钩玄"><a href="#钩玄" class="headerlink" title="钩玄"></a>钩玄</h1><ul>
<li>让Python打印出指定的文字，可以用print()函数，然后把希望打印的文字用单引号或者双引号括起来，但不能混用单引号和双引号</li>
<li>用exit()退出Python</li>
<li>在Python交互式命令行下，可以直接输入代码，然后执行，并立刻得到结果。</li>
<li>直接输入python进入交互模式，相当于启动了Python解释器，但是等待你一行一行地输入源代码，每输入一行就执行一行。直接运行.py文件相当于启动了Python解释器，然后一次性把.py文件的源代码给执行了，你是没有机会以交互的方式输入源代码的。</li>
<li>print()函数也可以接受多个字符串，用逗号“,”隔开，就可以连成一串输出,会依次打印每个字符串，遇到逗号“,”会输出一个空格</li>
<li>Python提供了一个input(“提示文本,可以为空”)，可以让用户输入字符串，并存放到一个变量里。</li>
<li>以#开头的语句是注释,Python程序是大小写敏感的</li>
<li>当语句以冒号:结尾时，缩进的语句视为代码块。Python使用缩进来组织代码块，请务必遵守约定俗成的习惯，坚持使用4个空格的缩进。在文本编辑器中，需要设置把Tab自动转换为4个空格，确保不混用Tab和空格。</li>
<li>Python还允许用r’’表示’’内部的字符串默认不转义:<code>print(r&#39;\\\n&#39;)</code></li>
<li>Python允许用<code>’’’…’’’</code>的格式表示多行内容</li>
<li>一个布尔值只有True、False两种值</li>
<li>布尔值可以用and、or和not运算。</li>
<li>空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。</li>
<li>在Python中，通常用全部大写的变量名表示常量,事实上仍然是一个变量，Python根本没有任何机制保证不会被改变</li>
<li>/除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数,//称为地板除，两个整数的除法仍然是整数</li>
<li>Python的整数没有大小限制，而某些语言的整数根据其存储长度是有大小限制的，Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。</li>
<li>ASCII编码是1个字节，而Unicode编码通常是2个字节。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。</li>
<li>在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。最新的Python 3版本中，字符串是以Unicode编码的，也就是说，Python的字符串支持多语言</li>
<li>对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符</li>
<li>由于Python的字符串类型是str，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把str变为以字节为单位的bytes。Python对bytes类型的数据用带b前缀的单引号或双引号表示<code>x = b&#39;ABC&#39;</code></li>
<li>bytes的每个字符都只占用一个字节,以Unicode表示的str通过encode()方法可以编码为指定的bytes,<code>&#39;中文&#39;.encode(&#39;utf-8&#39;)</code>,含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错</li>
<li>在bytes中，无法显示为ASCII字符的字节，用\x##显示</li>
<li>如果我们从网络或磁盘上读取了字节流，那么读到的数据就是bytes。要把bytes变为str，就需要用decode()方法</li>
<li><p>计算str包含多少个字符，可以用len()函数,len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数,<code>len(&#39;中文&#39;)</code></p>
<pre><code>#!/usr/bin/env python3
# -*- coding: utf-8 -*-
第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释；
第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。
</code></pre><p>字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%</p>
</li>
</ul>
<h1 id="实练"><a href="#实练" class="headerlink" title="实练"></a>实练</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">1,代码中有中文必须设置utf-8</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2,单行注释,以#开头</span></span><br><span class="line"><span class="keyword">import</span> time <span class="comment">#引入时间模块</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> calendar,os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="comment">#爬取数据</span></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="comment">#指定math模块中的sqrt函数</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">当你导入一个模块，Python解析器对模块位置的搜索顺序是：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1.当前目录</span></span><br><span class="line"><span class="string">2.如果不在当前目录，Python则搜索在shell变量PYTHONPATH下的每个目录。</span></span><br><span class="line"><span class="string">3.如果都找不到，Python会查看默认路径。UNIX下，默认路径一般为/usr/local/lib/python/</span></span><br><span class="line"><span class="string">4.模块搜索路径存储在system模块的sys.path变量中。</span></span><br><span class="line"><span class="string">变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  在Python中，每个Python文件都可以作为一个模块，模块的名字就是文件的名字。</span></span><br><span class="line"><span class="string">  创建text.py文件,定义相关函数,import text 即可引用自己的模块</span></span><br><span class="line"><span class="string">  注意,倘若在text.py中定义并执行相关函数,其他文件引用之后,并不会执行</span></span><br><span class="line"><span class="string">  测试函数代码，应该是单独执行text.py文件时才会执行</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  from math import *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  可以根据__name__变量的结果能够判断出，是直接执行的python脚本还是被引入执行的，</span></span><br><span class="line"><span class="string">  从而能够有选择性的执行测试代码</span></span><br><span class="line"><span class="string"> '''</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#区分文件是主动执行的，还是被调用执行的。</span></span><br><span class="line">如果当前文件是主动执行的，__name__ 变量的值就是：__main__，</span><br><span class="line">如果是被导入执行的，则是被导入的文件名</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">	print(<span class="string">"是直接执行的py脚本,而非引入"</span>)</span><br><span class="line"><span class="comment">#3,多行注释,使用3个单引号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#3,输出,使用print函数,字符串格式化]</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">%c %s %i %d %u无符号十进制整数</span></span><br><span class="line"><span class="string">%o %x十六进制小写 %X十六进制大写 %f</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">a = <span class="number">12</span></span><br><span class="line">b = <span class="number">58</span></span><br><span class="line">c = <span class="string">"swe"</span></span><br><span class="line">print(<span class="string">"hello %s 这孩子 %s 啊啊啊 %s"</span>%(a,b,c))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"sss"</span>,a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4,输入</span></span><br><span class="line">inputs = input(<span class="string">"请输入数字"</span>)</span><br><span class="line">print(<span class="string">"您的数字是:%s"</span>%inputs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> inputs == <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"哈哈哈哈"</span>)</span><br><span class="line">	print(<span class="string">"嘻嘻嘻嘻"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> inputs != <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"哦哦哦哦"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#5,数据类型</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">在python中，只要定义了一个变量，而且它有数据，那么它的类型就已经确定了</span></span><br><span class="line"><span class="string">可以使用type(变量的名字)，来查看变量的类型:type(a)</span></span><br><span class="line"><span class="string">常用的数据类型:</span></span><br><span class="line"><span class="string">* Numbers(包括int long float complex)</span></span><br><span class="line"><span class="string">* 布尔 True/False</span></span><br><span class="line"><span class="string">* String </span></span><br><span class="line"><span class="string">* List</span></span><br><span class="line"><span class="string">* Tuple(元组)</span></span><br><span class="line"><span class="string">* Dictionary</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#6,标识符</span></span><br><span class="line"><span class="comment"># 标识符由字符数字下划线组成,没有美元符号,且区分大小写</span></span><br><span class="line"><span class="comment"># 命名规则:驼峰式或者下划线连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#7,运算符</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">* %取余 3%2</span></span><br><span class="line"><span class="string">* **幂 3**2  3的2次方</span></span><br><span class="line"><span class="string">* // 取整除</span></span><br><span class="line"><span class="string">* / 正常除法,可有余数</span></span><br><span class="line"><span class="string">* //=  **/ </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#8,逻辑运算 and or not</span></span><br><span class="line"><span class="comment"># 与</span></span><br><span class="line"><span class="keyword">if</span> inputs == <span class="number">15</span> <span class="keyword">and</span> a == <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"and"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">if</span> inputs == <span class="number">15</span> <span class="keyword">or</span> b == <span class="number">58</span>:</span><br><span class="line">	print(<span class="string">"or"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> a == <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"not"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#9,多重判断 if 与 elif</span></span><br><span class="line">score = <span class="number">99</span></span><br><span class="line"><span class="keyword">if</span> score &lt; <span class="number">60</span>:</span><br><span class="line">	print(<span class="string">"不及格"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt;<span class="number">80</span>:</span><br><span class="line">	print(<span class="string">"良好"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span>:</span><br><span class="line">	print(<span class="string">"不错"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"优秀"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#10,if嵌套</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"a==12"</span>)</span><br><span class="line">	<span class="keyword">if</span> a &gt; <span class="number">12</span>:</span><br><span class="line">		print(<span class="string">"a&gt;12"</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		print(<span class="string">"a&lt;=12"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"a!=12"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#11,while循环与循环嵌套</span></span><br><span class="line"><span class="keyword">while</span> a == <span class="number">12</span>:</span><br><span class="line">	print(<span class="string">"你不好"</span>)</span><br><span class="line">	a = <span class="number">13</span></span><br><span class="line">	<span class="keyword">while</span> b == <span class="number">58</span>:</span><br><span class="line">		print(<span class="string">"哈哈哈哈"</span>)</span><br><span class="line">		b = <span class="number">59</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#12,for循环:i从0开始,每次自增1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">		<span class="keyword">continue</span><span class="comment">#跳过i==5这次</span></span><br><span class="line">	print(<span class="string">'i=%s'</span>%i)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> i == <span class="number">10</span>:</span><br><span class="line">		print(<span class="string">"停止break"</span>)</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#13,定义函数 print1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print1</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="string">"函数"</span>)</span><br><span class="line">	print(<span class="string">"函数"</span>)</span><br><span class="line"></span><br><span class="line">	print(<span class="string">"函数"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数print1</span></span><br><span class="line">print1()</span><br><span class="line"></span><br><span class="line"><span class="comment">#14,常用函数</span></span><br><span class="line"><span class="comment">#时间函数import time</span></span><br><span class="line">t = time.time()<span class="comment">#取出当前时间,以秒为单位的浮点小数</span></span><br><span class="line">t2 = time.localtime(t)<span class="comment">#取出本地时间</span></span><br><span class="line">t3 = time.asctime(t2) <span class="comment">#标准格式Fri Jun 10 10:58:53 2016</span></span><br><span class="line">print(t3)</span><br><span class="line"></span><br><span class="line"><span class="comment">#日历函数 import calendar</span></span><br><span class="line">cal = calendar.month(<span class="number">2016</span>,<span class="number">8</span>)</span><br><span class="line">print(cal) <span class="comment">#打印日历</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#随机数函数 import random</span></span><br><span class="line">r = random.randint(<span class="number">1</span>,<span class="number">3</span>)<span class="comment">#从1到3范围内的整数,包括1和3</span></span><br><span class="line">print(r)</span><br><span class="line"></span><br><span class="line">r2 = random.randrange(<span class="number">1</span>,<span class="number">25</span>,<span class="number">5</span>)<span class="comment">#从1开始到25结束递增基数为5</span></span><br><span class="line">print(r2)</span><br><span class="line"></span><br><span class="line">r3 = random.uniform(<span class="number">1</span>,<span class="number">5</span>) <span class="comment">#最小值1最大值5,返回浮点数</span></span><br><span class="line">print(r3)</span><br><span class="line"></span><br><span class="line">random.random() <span class="comment">#生成0&lt;=n&lt;=1的浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15,字符串,相当于字符数组,可以通过下标取出字符,</span></span><br><span class="line">ss = <span class="string">"qwertyu"</span></span><br><span class="line">print(ss[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#取出下标从1到3 的字符,包括上边界,不包括下边界</span></span><br><span class="line">print(ss[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从下标2开始 取到最后</span></span><br><span class="line">print(ss[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#从下标2开始到下标-2,不包括下标-2</span></span><br><span class="line">print(ss[<span class="number">2</span>:<span class="number">-2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#取出最后4个字符</span></span><br><span class="line">print(ss[<span class="number">-4</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment">#16,字符串常见操作</span></span><br><span class="line">sub = <span class="string">"my"</span></span><br><span class="line">s = <span class="string">"itismyapple"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找:检测sub是否在s中:s.find(sub, start=0, end=len(mystr))</span></span><br><span class="line"><span class="comment">#查找成功返回开始的索引,否则返回-1</span></span><br><span class="line">s.find(sub)</span><br><span class="line">re = s.find(sub,<span class="number">1</span>,<span class="number">8</span>)<span class="comment">#从下标1开始查找,到下标为8结束</span></span><br><span class="line">print(re)</span><br><span class="line"></span><br><span class="line">s.index(sub)<span class="comment">#与find相同,只不过没有找到会抛出异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回 在start和end之间(包括) 在 s里面出现的次数</span></span><br><span class="line">c = s.count(<span class="string">"i"</span>, <span class="number">0</span>,<span class="number">8</span>)</span><br><span class="line">print(c)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把 s 中的 str1 替换成 str2,如果 count 指定，则替换不超过 count 次.</span></span><br><span class="line">s.replace(<span class="string">"t"</span>,<span class="string">"d"</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#以 " " 为分隔符切片 s，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</span></span><br><span class="line">s.split(<span class="string">" "</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把字符串的第一个字符大写</span></span><br><span class="line">s.capitalize()</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查字符串是否是以 obj 开头, 是则返回 True，否则返回 False</span></span><br><span class="line">s.startswith(<span class="string">"i"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#检查字符串是否以obj结束，如果是返回True,否则返回 False.</span></span><br><span class="line">s.endswith(<span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换 s 中所有大写字符为小写</span></span><br><span class="line">s.lower()</span><br><span class="line"></span><br><span class="line"><span class="comment">#转换 s 中的小写字母为大写</span></span><br><span class="line">s.upper()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串</span></span><br><span class="line">s.ljust(<span class="number">5</span>) <span class="comment">#返回 "itismyapple     "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串</span></span><br><span class="line">s.rjust(<span class="number">5</span>) <span class="comment">#返回"     itismyapple"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</span></span><br><span class="line"><span class="string">"s"</span>.center(<span class="number">10</span>) <span class="comment">#"    s     "</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除 s 左边的空格</span></span><br><span class="line">s.lstrip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除 s 字符串末尾的空格</span></span><br><span class="line">s.rstrip()</span><br><span class="line"></span><br><span class="line"><span class="comment">#类似于 find()函数，不过是从右边开始查找.</span></span><br><span class="line"><span class="string">"sieiess"</span>.rfind(<span class="string">"ie"</span>) <span class="comment">#返回3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 类似于 index()，不过是从右边开始.</span></span><br><span class="line">s.rindex(<span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#把"asdeeeads"以str分割成三部分,str前，str和str后</span></span><br><span class="line"><span class="string">"asdeeeads"</span>.partition(<span class="string">"eee"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#类似于 partition()函数,不过是从右边开始.</span></span><br><span class="line"><span class="string">"asdeeeads"</span>.rpartition(<span class="string">"eee"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照行分隔，返回一个包含各行作为元素的列表</span></span><br><span class="line"><span class="string">"asas\nds"</span>.splitlines()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果 mystr 所有字符都是字母或数字则返回 True,否则返回 False</span></span><br><span class="line"><span class="string">"ssd"</span>.isalnum()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果 mystr 所有字符都是字母 则返回 True,否则返回 False</span></span><br><span class="line"><span class="string">"ssd"</span>.isalpha()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果 mystr 只包含数字则返回 True 否则返回 False.</span></span><br><span class="line"><span class="string">"232"</span>.isdigit()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果 mystr 中只包含空格，则返回 True，否则返回 False.</span></span><br><span class="line"><span class="string">" "</span>.isspace()</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果 mystr 所有字符都是大写，则返回 True，否则返回 False</span></span><br><span class="line"><span class="string">"sd"</span>.isupper()</span><br><span class="line"></span><br><span class="line"><span class="comment">#mystr 中每个字符后面插入str,构造出一个新的字符串</span></span><br><span class="line"><span class="string">"sasd"</span>.join(<span class="string">"s"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#17,列表</span></span><br><span class="line">A = [<span class="string">"ds3s"</span>,<span class="string">"ds4s"</span>,<span class="string">"a4sd"</span>]</span><br><span class="line">print(A[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">	print(a)<span class="comment">#打印每一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18,列表增加元素</span></span><br><span class="line">A.append(<span class="string">"asasdad"</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">	print(a)<span class="comment">#打印每一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#19,修改</span></span><br><span class="line">A[<span class="number">0</span>] = <span class="string">"1"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#20,查找</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"1"</span> <span class="keyword">in</span> A:</span><br><span class="line">	print(<span class="string">"1存在于a中"</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"1"</span> <span class="keyword">not</span> <span class="keyword">in</span> A:</span><br><span class="line">	print(<span class="string">"1不存在与a中"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#21,删除元素</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">    del：根据下标进行删除</span></span><br><span class="line"><span class="string">    pop：删除最后一个元素</span></span><br><span class="line"><span class="string">    remove：根据元素的值进行删除</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">del</span> A[<span class="number">0</span>]</span><br><span class="line">A.pop()</span><br><span class="line">A.remove(<span class="string">"ds4s"</span>)</span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> A:</span><br><span class="line">	print(a)<span class="comment">#打印每一个元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#21,统计字符个数</span></span><br><span class="line">cstr = input(<span class="string">"请输入字符"</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cstr:</span><br><span class="line">	print(<span class="string">"%c:%d"</span>%(c,cstr.count(c)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#22,字典</span></span><br><span class="line">info = &#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line">print(info[<span class="string">"name"</span>])</span><br><span class="line"><span class="comment">#增加键值对</span></span><br><span class="line">info[<span class="string">"sex"</span>] = <span class="string">"man"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除元素</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">"age"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#清空字典</span></span><br><span class="line">info.clear()</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除整个字典</span></span><br><span class="line"><span class="keyword">del</span> info</span><br><span class="line"><span class="comment">#注意删除字典和清空字典的区别</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#字典常用操作</span></span><br><span class="line">info2 = &#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"age"</span>:<span class="number">12</span>&#125;</span><br><span class="line"><span class="comment">#测量字典中，键值对的个数</span></span><br><span class="line">len(info2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个包含字典所有KEY的列表</span></span><br><span class="line">info2.keys()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个包含字典所有value的列表</span></span><br><span class="line">info2.values()</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回一个包含所有（键，值）元组的列表</span></span><br><span class="line">info2.items()</span><br><span class="line"></span><br><span class="line"><span class="comment">#if "name" in info2如果key在字典中，返回True，否则返回False</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"name"</span> <span class="keyword">in</span> info2:</span><br><span class="line">	print(<span class="string">"存在"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#遍历键/值/键值对</span></span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> info2.items():</span><br><span class="line">	print(key,value)</span><br><span class="line"></span><br><span class="line"><span class="comment">#23,Python的元组与列表类似，不同之处在于元组的元素不能修改。</span></span><br><span class="line">也可进行分片 和 连接操作. 元组使用小括号，列表使用方括号。</span><br><span class="line">atuple = (<span class="string">"as"</span>,<span class="number">121</span>,<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="number">0</span>)</span><br><span class="line">atuple2 = (<span class="string">"a"</span>,<span class="number">121</span>,<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="number">40</span>)</span><br><span class="line">print(atuple[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#合成新元组</span></span><br><span class="line">atuple3 = atuple + atuple2</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除元素</span></span><br><span class="line"><span class="comment">#元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</span></span><br><span class="line"><span class="keyword">del</span> atuple3</span><br><span class="line"></span><br><span class="line"><span class="comment">#24,元组运算符</span></span><br><span class="line"><span class="comment">#与字符串一样，元组之间可以使用 + 号和 * 号进行运算。</span></span><br><span class="line">这就意味着他们可以组合和复制，运算后会生成一个新的元组。</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">[<span class="string">'Hi!'</span>] * <span class="number">4</span> <span class="comment">#['Hi!', 'Hi!', 'Hi!', 'Hi!']</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">#True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#25,元组索引截取</span></span><br><span class="line"><span class="comment">#因为元组也是一个序列，所以我们可以访问元组中的指定位置的元素，也可以截取索引中的一段元素</span></span><br><span class="line"><span class="comment">#比较两个元组元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cmp(tuple1, tuple2)</span></span><br><span class="line">tuple2 = (<span class="number">12</span>,<span class="number">234</span>,<span class="number">546</span>,<span class="number">56</span>)</span><br><span class="line">tuple2s = [<span class="number">12</span>,<span class="number">23</span>]</span><br><span class="line"><span class="comment">#计算元组元素个数。</span></span><br><span class="line">len(tuple2)</span><br><span class="line"><span class="comment">#返回元组中元素最大值。</span></span><br><span class="line">max(tuple2)</span><br><span class="line"><span class="comment">#返回元组中元素最小值。</span></span><br><span class="line">min(tuple2)</span><br><span class="line"><span class="comment">#将列表转换为元组。</span></span><br><span class="line">tuple(tuple2s)</span><br><span class="line"></span><br><span class="line"><span class="comment">#25,多维元组</span></span><br><span class="line">tuple3 = [(<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>)]</span><br><span class="line">tuple3[<span class="number">1</span>] <span class="comment">#(2,5,6)</span></span><br><span class="line">tuple3[<span class="number">1</span>][<span class="number">0</span>] <span class="comment">#2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#26,带有参数和有返回值的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(a,b)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line">print(sum(<span class="number">45</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#27,缺省函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum2</span><span class="params">(a,b = <span class="number">25</span>)</span>:</span></span><br><span class="line">	<span class="keyword">return</span> a+b</span><br><span class="line">print(sum2(<span class="number">232</span>))</span><br><span class="line">print(sum2(<span class="number">232</span>,<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#28,不定长参数</span></span><br><span class="line"><span class="comment">#加了星号（*）的变量名会存放所有未命名的变量参数。</span></span><br><span class="line"><span class="comment">#参数以一个＊号开头的代表着一个任意长度的元组(tuple)，可以接收连续一串参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printinfo</span><span class="params">(a,b,*cs)</span>:</span></span><br><span class="line">	print(a,b)</span><br><span class="line">	<span class="keyword">for</span> c <span class="keyword">in</span> cs:</span><br><span class="line">		print(c)</span><br><span class="line">printinfo(<span class="number">23</span>,<span class="number">3</span>,<span class="number">34</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#29,函数的嵌套使用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print3</span><span class="params">(a,b)</span>:</span></span><br><span class="line">	print(a,b)</span><br><span class="line">	print(sum(a,b))</span><br><span class="line">print3(<span class="number">2</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#30,打印指定条横线</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printline</span><span class="params">()</span>:</span></span><br><span class="line">	print(<span class="string">"-"</span>*<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printlinewithnum</span><span class="params">(a)</span>:</span></span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(a):</span><br><span class="line">		printline()</span><br><span class="line">		print(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line">printlinewithnum(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#31,变量</span></span><br><span class="line"><span class="comment">#局部变量,是在函数内部定义的变量</span></span><br><span class="line"><span class="comment">#全局变量,能在某一函数中使用,也能在其他函数中使用</span></span><br><span class="line"><span class="comment">#全局变量能够在所有的函数中进行访问</span></span><br><span class="line"><span class="comment">#如果在函数中修改全局变量，那么就需要使用global进行声明，否则出错</span></span><br><span class="line">gol = <span class="number">12</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chnum</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">global</span> gol <span class="comment">#声明此处的gol是特指全局变量,而非重名的局部变量</span></span><br><span class="line">	gol = <span class="number">13</span></span><br><span class="line">	print(gol)</span><br><span class="line">chnum()</span><br><span class="line">print(gol)</span><br><span class="line"></span><br><span class="line"><span class="comment">#32,递归函数,一个函数在内部调用自己</span></span><br><span class="line"><span class="comment">#示例:计算n的阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calnum</span><span class="params">(n)</span>:</span></span><br><span class="line">	i = <span class="number">1</span></span><br><span class="line">	result = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> i &lt;= n:</span><br><span class="line">		result *= i</span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line">print(calnum(<span class="number">1</span>))</span><br><span class="line">print(calnum(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calnum2</span><span class="params">(n)</span>:</span></span><br><span class="line">	<span class="keyword">if</span> n &gt;= <span class="number">1</span>:</span><br><span class="line">		<span class="keyword">return</span> n * calnum2(n<span class="number">-1</span>)</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">print(calnum2(<span class="number">1</span>))</span><br><span class="line">print(calnum2(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#33,匿名函数</span></span><br><span class="line"><span class="comment">#用lambda关键词能创建小型匿名函数。</span></span><br><span class="line"><span class="comment">#Lambda函数能接收任何数量的参数但只能返回一个表达式的值</span></span><br><span class="line"><span class="comment">#匿名函数不能直接调用print，因为lambda需要一个表达式</span></span><br><span class="line">sum4 = <span class="keyword">lambda</span> a,b,c,d:a + b + c + d</span><br><span class="line">print(sum4(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#34,位运算:直接操作二进制数</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">&amp; 按位与 只有对应的两个二进位均为1时,结果位才为1</span></span><br><span class="line"><span class="string">| 按位或 只要对应的二个二进位有一个为1时,结果位就为1,否则为0</span></span><br><span class="line"><span class="string">^ 按位异或 不同为1 当对应的二进位相异(不相同)时,结果为1,否则为0</span></span><br><span class="line"><span class="string">~ 按位取反</span></span><br><span class="line"><span class="string">&lt;&lt; 按位左移:左移一位即乘以2,可能改变一个数的正负</span></span><br><span class="line"><span class="string">&gt;&gt; 按位右移::右移一位即除以2</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="number">0b1011</span> &amp; <span class="number">0b1001010110</span></span><br><span class="line"><span class="number">0b1000110</span> | <span class="number">0b10010</span></span><br><span class="line"><span class="number">0b11101</span> ^ <span class="number">0b110000011</span></span><br><span class="line">~<span class="number">132</span></span><br><span class="line">print(<span class="number">12</span>&lt;&lt;<span class="number">3</span>)</span><br><span class="line">print(<span class="number">1024</span>&gt;&gt;<span class="number">4</span>)</span><br><span class="line"><span class="comment">#进制书写</span></span><br><span class="line"><span class="number">0o377</span> <span class="comment">#八进制</span></span><br><span class="line"><span class="number">0xFF</span> <span class="comment">#十六进制</span></span><br><span class="line"><span class="number">0b010010110</span> <span class="comment">#二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#进制转换</span></span><br><span class="line">print(type(oct(<span class="number">25</span>))) <span class="comment">#转八进制字符串</span></span><br><span class="line">hex(<span class="number">25</span>) <span class="comment">#转十六进制字符串</span></span><br><span class="line">bin(<span class="number">25</span>) <span class="comment">#转二进制字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#35,数据类型转换</span></span><br><span class="line">int(<span class="string">"123"</span>) <span class="comment">#字符串转数值</span></span><br><span class="line">float(<span class="string">"2324.3"</span>) <span class="comment">#将字符串转换为浮点数</span></span><br><span class="line">print(complex(<span class="number">1.2</span>,<span class="number">3.2</span>)) <span class="comment">#创建一个复数,在 Python 中，复数的虚部被表示为 j</span></span><br><span class="line">print(<span class="number">3.2</span>+<span class="number">1.4j</span>)</span><br><span class="line"></span><br><span class="line">print(str(<span class="number">23</span>)) <span class="comment">#将23转换为字符串</span></span><br><span class="line">print(repr(<span class="number">124</span>)) <span class="comment">#转换为表达式字符串</span></span><br><span class="line">tuple([<span class="number">23</span>,<span class="number">3</span>])</span><br><span class="line">list((<span class="number">23</span>,<span class="number">234</span>))</span><br><span class="line">chr(<span class="number">2</span>)</span><br><span class="line">ord(<span class="string">"d"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#35,实现乘法表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print6</span><span class="params">()</span>:</span></span><br><span class="line">	i = <span class="number">1</span></span><br><span class="line">	<span class="keyword">while</span> i &lt;= <span class="number">9</span>:</span><br><span class="line">		j = i</span><br><span class="line">		<span class="keyword">while</span> j &lt;= <span class="number">9</span>:</span><br><span class="line">			print(<span class="string">"%d*%d=%d"</span>%(i,j,i*j))</span><br><span class="line">			j += <span class="number">1</span></span><br><span class="line">		i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print6()</span><br><span class="line">		</span><br><span class="line"><span class="comment">#36,打开文件</span></span><br><span class="line"><span class="comment">#使用open函数，可以打开一个已经存在的文件，或者创建一个新文件</span></span><br><span class="line"><span class="comment">#open(文件名，访问模式) 返回文件句柄</span></span><br><span class="line">f = open(<span class="string">"s.txt"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.close()<span class="comment">#关闭文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">r 	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</span></span><br><span class="line"><span class="string">w 	打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span></span><br><span class="line"><span class="string">a 	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</span></span><br><span class="line"><span class="string">也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">rb 以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">wb 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。</span></span><br><span class="line"><span class="string">如果该文件不存在，创建新文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ab 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</span></span><br><span class="line"><span class="string">也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">r+ 打开一个文件用于读写。文件指针将会放在文件的开头。</span></span><br><span class="line"><span class="string">w+ 打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">a+ 打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。</span></span><br><span class="line"><span class="string">文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</span></span><br><span class="line"><span class="string">rb+ 以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。</span></span><br><span class="line"><span class="string">wb+ 以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ab+ 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。</span></span><br><span class="line"><span class="string">如果该文件不存在，创建新文件用于读写。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#37,写数据到文件</span></span><br><span class="line">f = open(<span class="string">"s1"</span>,<span class="string">"w"</span>)</span><br><span class="line">f.write(<span class="string">"hello world"</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#38,读数据</span></span><br><span class="line">f = open(<span class="string">"s1"</span>)</span><br><span class="line">content = f.read(<span class="number">5</span>) <span class="comment">#读取数据长度,字节为单位</span></span><br><span class="line">print(content)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#readlines按照行的方式把整个文件中的内容进行一次性读取，返回的是一个列表，每一行的数据为一个元素</span></span><br><span class="line">f = open(<span class="string">"s"</span>)</span><br><span class="line">content2 = f.readlines()</span><br><span class="line">print(content2[<span class="number">2</span>])</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#38,获取当前读写的位置</span></span><br><span class="line">f = open(<span class="string">"222.txt"</span>, <span class="string">"r+"</span>)</span><br><span class="line">f.write(<span class="string">"123243454566"</span>)</span><br><span class="line">str12 = f.read(<span class="number">3</span>)</span><br><span class="line">print(<span class="string">"读取的数据是 : "</span>,str12)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line">print(<span class="string">"当前文件位置 : "</span>, position)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#如果在读写文件的过程中，需要从另外一个位置进行操作的话，可以使用seek()</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">seek(offset, from)有2个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    offset:偏移量</span></span><br><span class="line"><span class="string">    from:方向</span></span><br><span class="line"><span class="string">        0:表示文件开头</span></span><br><span class="line"><span class="string">        1:表示当前位置</span></span><br><span class="line"><span class="string">        2:表示文件末尾</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">f = open(<span class="string">"s"</span>, <span class="string">"r"</span>)</span><br><span class="line">str33 = f.read(<span class="number">30</span>)</span><br><span class="line">print(<span class="string">"读取的数据是 : "</span>, str33)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找当前位置</span></span><br><span class="line">position = f.tell()</span><br><span class="line">print(<span class="string">"当前文件位置 : "</span>, position)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新设置位置</span></span><br><span class="line">f.seek(<span class="number">5</span>,<span class="number">0</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#39,文件操作</span></span><br><span class="line"><span class="comment">#文件重命名</span></span><br><span class="line"><span class="comment">#需要import os</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">#os模块中的rename()可以完成对文件的重命名操作</span></span><br><span class="line"><span class="string">os.rename("s1","s111")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#删除文件</span></span><br><span class="line"><span class="string">os.remove("s111")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#创建文件夹</span></span><br><span class="line"><span class="string">os.mkdir("haha")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#获取当前目录</span></span><br><span class="line"><span class="string">print(os.getcwd())</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#改变默认目录</span></span><br><span class="line"><span class="string">os.chdir("../")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#获取目录中内容列表,返回数组</span></span><br><span class="line"><span class="string">os.listdir("./")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#删除文件夹</span></span><br><span class="line"><span class="string">os.rmdir("haha")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#判断是否是目录</span></span><br><span class="line"><span class="string">os.path.isdir("./react")</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#判断是否是文件</span></span><br><span class="line"><span class="string">os.path.isfile("./s")</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#40,捕获异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	open(<span class="string">"ssss"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment">#指定异常类型 定义异常变量</span></span><br><span class="line"><span class="keyword">except</span> IOError <span class="keyword">as</span> errmsg:</span><br><span class="line">	print(<span class="string">"捕获到异常"</span>,errmsg)</span><br><span class="line">	print(<span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#多个异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	open(<span class="string">"ssss"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment">#指定异常类型 定义异常变量</span></span><br><span class="line"><span class="keyword">except</span> (IOError,NameError) <span class="keyword">as</span> errmsg:</span><br><span class="line">	print(<span class="string">"捕获到异常"</span>,errmsg)</span><br><span class="line">	print(<span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#不指定异常</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	open(<span class="string">"ssss"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment">#指定异常类型 定义异常变量</span></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">	print(<span class="string">"捕获到异常"</span>)</span><br><span class="line">	print(<span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">常见异常：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Exception           所有异常的基类</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">AttributeError      特性应用或赋值失败时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">IOError             试图打开不存在的文件时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">IndexError          在使用序列中不存在的索引时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">KeyError            在使用映射不存在的键时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">NameError           在找不到名字（变量）时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">SyntaxError         在代码为错误形式时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TypeError          在内建操作或者函数应用于错误类型的对象是引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ValueError:       </span></span><br><span class="line"><span class="string">在内建操作或者函数应用于正确类型的对象，但是该对象使用不合适的值时引发</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ZeroDivisionError  在除法或者模除操作的第二个参数为0时引发</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment">#finally语句</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">	open(<span class="string">"ssss"</span>,<span class="string">"r"</span>)</span><br><span class="line"><span class="comment">#指定异常类型 定义异常变量</span></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line">	print(<span class="string">"捕获到异常"</span>)</span><br><span class="line">	print(<span class="string">"-"</span>*<span class="number">10</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">	print(<span class="string">"一定执行的语句"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#else应用</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    num = <span class="number">100</span></span><br><span class="line">    print(num)</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> errorMsg:</span><br><span class="line">        print(<span class="string">'产生错误了:%s'</span>%errorMsg)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'没有捕获到异常，真高兴'</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">        print(<span class="string">'我一定会执行的哦'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#41,定义类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#属性列表</span></span><br><span class="line">	<span class="comment">#公有属性</span></span><br><span class="line">	name = <span class="string">"AB"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#私有属性,私有属性是不能够在类外通过对象名来进行访问的</span></span><br><span class="line">	__age = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#在类中定义的方法至少会有一个参数，，一般以名为self的变量作为该参数，而且需要作为第一个参数。</span></span><br><span class="line">	<span class="comment">#公有方法列表</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(self.name)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#私有方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__getAge</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(self.__age)</span><br><span class="line"></span><br><span class="line">	<span class="comment">#def get():报错</span></span><br><span class="line">	<span class="comment">#	print("无参数方法")</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#构造器方法:在创建对象后执行</span></span><br><span class="line">	<span class="comment">#def __init__():</span></span><br><span class="line">	<span class="comment">#	self.name = "QWE"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#传递参数的构造器方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">		self.name = name</span><br><span class="line"></span><br><span class="line">	<span class="comment">#析构方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"析构方法被调用"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建对象</span></span><br><span class="line">p = Person(<span class="string">"zhangsan"</span>)</span><br><span class="line">print(p.name)</span><br><span class="line">p.getName()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提示找不到该属性p.__age</span></span><br><span class="line"><span class="comment"># 提示找不到该方法p.__getAge()</span></span><br><span class="line"><span class="comment">#self是对象自身的意思，在用某个对象调用该方法时，就将该对象作为第一个参数传递给self。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#42,继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(Person)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self,name)</span>:</span></span><br><span class="line">		self.name = name</span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"学生的姓名是"</span>,self.name)</span><br><span class="line"></span><br><span class="line">stu = Student(<span class="string">"zhangsan"</span>)</span><br><span class="line">stu.setName(<span class="string">"李四"</span>)</span><br><span class="line">stu.print()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  python中是可以多继承的</span></span><br><span class="line"><span class="comment">#  父类中的方法、属性，子类会继承</span></span><br><span class="line"><span class="comment">#  多继承:class HighStudent(Student,Worker)</span></span><br><span class="line"><span class="comment"># 假设A,B中都有方法test()</span></span><br><span class="line"><span class="comment">#若C继承A与B class C(A,B)  则调用A中的方法</span></span><br><span class="line"><span class="comment">#若C继承A与B class C(B,A)  则调用B中的方法</span></span><br><span class="line"><span class="comment">#若C继承A与B class C(A,B)  且C中也有test()方法,则调用C中重写的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#43,重写</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ani</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"调用Ani的方法"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span><span class="params">(Ani)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">print</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"调用Dog的方法"</span>)</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">dog = Dog()</span><br><span class="line">dog.print() <span class="comment">#调用自己的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#44,多态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">	<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A1</span><span class="params">(A)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"A1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A2</span><span class="params">(A)</span>:</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">		print(<span class="string">"A2"</span>)</span><br><span class="line"></span><br><span class="line">a1 = A1()</span><br><span class="line">a2 = A2()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showFunc</span><span class="params">(a)</span>:</span></span><br><span class="line">	a.show()</span><br><span class="line">		</span><br><span class="line">showFunc(a1)</span><br><span class="line">showFunc(a2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#45,类属性</span></span><br><span class="line"><span class="comment">#类属性就是类对象所拥有的属性，它被所有类对象的实例对象所共有，</span></span><br><span class="line"><span class="comment">#内存中只存在一个副本，对于公有的类属性，在类外可以通过类对象和实例对象访问</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">object</span>:</span></span><br><span class="line">	name = <span class="string">"object"</span></span><br><span class="line"></span><br><span class="line">obj1 = object()</span><br><span class="line">obj2 = object()</span><br><span class="line">print(obj1.name) <span class="comment">#实例没有name,会查找类的name,结果:object</span></span><br><span class="line">object.name = <span class="string">"lisi"</span></span><br><span class="line">print(obj2.name) <span class="comment">#显示 lisi</span></span><br><span class="line">print(obj1.name) <span class="comment">#显示 lisi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#给实例obj1增加实例属性</span></span><br><span class="line">obj1.name = <span class="string">"ads"</span></span><br><span class="line">print(obj1.name) <span class="comment">#屏蔽掉类属性,显示ads</span></span><br><span class="line">print(object.name) <span class="comment">#显示 lisi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#结论:</span></span><br><span class="line"><span class="comment">#相同名称的实例属性将屏蔽掉类属性</span></span><br><span class="line"><span class="comment">#但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</span></span><br><span class="line"><span class="comment">#Python是动态语言,可以动态增加属性</span></span><br><span class="line"><span class="comment">#想要修改类属性，如果在类外，可以通过类对象修改，如果在类里面，只有在类方法中进行修改。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#46,类方法</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">是类对象所拥有的方法，需要用修饰器@classmethod来标识其为类方法</span></span><br><span class="line"><span class="string">对于类方法，第一个参数必须是类对象，一般以cls作为第一个参数</span></span><br><span class="line"><span class="string">当然可以用其他名称的变量作为其第一个参数.</span></span><br><span class="line"><span class="string">但是大部分人都习惯以'cls'作为第一个参数的名字，就最好用'cls'了</span></span><br><span class="line"><span class="string">能够通过实例对象和类对象去访问。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">people</span>:</span></span><br><span class="line">    country = <span class="string">'china'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#类方法，用classmethod来进行修饰</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getCountry</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls.country</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="comment">#类属性</span></span><br><span class="line">    price = <span class="string">"1000"</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">#类方法</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPrice</span><span class="params">(cls,price)</span>:</span></span><br><span class="line">        cls.price = price</span><br><span class="line">        <span class="keyword">return</span> cls.price</span><br><span class="line"></span><br><span class="line">car1 = Car()</span><br><span class="line">print(car1.getPrice(<span class="number">200</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#47,静态方法</span></span><br><span class="line"><span class="comment">#通过修饰器@staticmethod来进行修饰，静态方法不需要多定义参数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>:</span></span><br><span class="line">	name = <span class="string">"Tom"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">	@staticmethod</span></span><br><span class="line">	<span class="comment">#静态方法</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">getName</span><span class="params">()</span>:</span></span><br><span class="line">		print(Cat.name)</span><br><span class="line"></span><br><span class="line">Cat.getName()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#48,爬取数据</span></span><br><span class="line">response = urllib.request.urlopen(<span class="string">"http://acm.hit.edu.cn"</span>)</span><br><span class="line">html = response.read()</span><br><span class="line"><span class="comment">#中文转码</span></span><br><span class="line">htmlC = html.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">print(htmlC)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将网页存入文本</span></span><br><span class="line">f = open(<span class="string">"t.html"</span>,<span class="string">"wb"</span>)<span class="comment">#python是types格式，得用二进制读写. </span></span><br><span class="line">f.write(html) <span class="comment">#写入原始文件,不需要解码</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#49,get参数拼接</span></span><br><span class="line">query = &#123;&#125;</span><br><span class="line">query[<span class="string">"key"</span>] = <span class="string">"python3"</span></span><br><span class="line">queryURL = urllib.parse.urlencode(query) <span class="comment">#得到key=python3</span></span><br><span class="line">url = <span class="string">"http://chenyalun.com/s?"</span> + queryURL</span><br><span class="line">print(url)</span><br><span class="line"></span><br><span class="line"><span class="comment">#50,使用BeautifulSoup</span></span><br><span class="line">html = <span class="string">"""&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="title" name="dromouse"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;&lt;!-- Elsie --&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">    &lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">    and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html)</span><br><span class="line">print(soup.prettify())</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印标签</span></span><br><span class="line">print(<span class="string">"标题是:"</span>,soup.title)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"头部是"</span>,soup.head)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"第一个a标签"</span>,soup.a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"第一个p标签"</span>,soup.p)</span><br><span class="line"></span><br><span class="line"><span class="comment">#它查找的是在所有内容中的第一个符合要求的标签</span></span><br><span class="line"><span class="comment">#标签的两个重要的属性:name 和 attrs</span></span><br><span class="line">print(soup.a.name)</span><br><span class="line">print(soup.p.attrs)</span><br><span class="line"><span class="comment">#属性的值</span></span><br><span class="line">print(<span class="string">"属性的值"</span>,soup.p.attrs[<span class="string">"name"</span>]) </span><br><span class="line">print(<span class="string">"属性的值"</span>,soup.p[<span class="string">"name"</span>])<span class="comment">#attrs可以省略</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用 .string获取文字</span></span><br><span class="line">print(soup.p.string)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#利用"CSS选择器"查找标签</span></span><br><span class="line"><span class="comment">#通过标签名查找</span></span><br><span class="line">print(soup.select(<span class="string">"title"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过类名查找</span></span><br><span class="line">print(soup.select(<span class="string">".sister"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过id查找</span></span><br><span class="line">print(soup.select(<span class="string">"#link1"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#组合查找</span></span><br><span class="line">print(soup.select(<span class="string">"p #link1"</span>)) <span class="comment">#格式同CSS</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接子标签查找</span></span><br><span class="line">print(soup.select(<span class="string">"head &gt; title"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#属性查找</span></span><br><span class="line"><span class="comment">#属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空格</span></span><br><span class="line">print(soup.select(<span class="string">'a[class="sister"]'</span>))</span><br><span class="line">print(soup.select(<span class="string">'a[href="http://example.com/elsie"]'</span>))</span><br><span class="line">print(soup.select(<span class="string">'p a[href="http://example.com/elsie"]'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># select 方法返回的结果都是列表形式，可以遍历形式输出，然后用 get_text() 方法来获取它的内容</span></span><br><span class="line"><span class="keyword">for</span> title <span class="keyword">in</span> soup.select(<span class="string">"title"</span>):</span><br><span class="line">	print(title.get_text)</span><br></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端学习笔记]]></title>
      <url>http://blog.chenyalun.com/2016/12/06/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20/</url>
      <content type="html"><![CDATA[<p align="center"> 大前端时代。 </p>

<a id="more"></a>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><ul>
<li><code>&lt;html&gt;&lt;/html&gt;</code>是根标签,<code>&lt;heal&gt;</code>定义文档的头部,常包含<code>&lt;title&gt; &lt;script&gt;</code></li>
<li><code>&lt;style&gt; &lt;meta&gt; &lt;link&gt;</code></li>
<li><code>&lt;em&gt;</code>表示强调，<code>&lt;strong&gt;</code> 表示更强烈的强调。并且在浏览器中<code>&lt;em&gt;</code> 默认用斜体表示，<code>&lt;strong&gt;</code>用粗体表示。</li>
<li><code>&lt;span&gt;</code>标签是没有语义的，它的作用就是为了设置单独的样式用的。</li>
<li>用<code>&lt;q&gt;</code>标签引用别人的语句,是对简短文本的引用:加上双引号</li>
<li><code>&lt;blockquote</code>是长文本引用:整体缩进</li>
<li>空标签现在一般使用 xhtml1.0 的版本的写法,如<code>&lt;br/&gt; &lt;img/&gt; &lt;hr/&gt;</code></li>
<li>在html代码中输入空格、回车都是没有作用的。要想输入空格，必须写入<code>&amp;nbsp;</code>。</li>
<li><code>&lt;adress&gt;</code>标签,添加地址:显示为斜体</li>
<li><code>&lt;code&gt;</code>标签:添加一行代码,<code>&lt;pre&gt;</code>预显示格式标签,被包围在 pre 元素中的文本通常会保留空格和换行符:添加一段代码(会转换其中的<code>&lt;br/&gt;</code>等)</li>
<li>ul-li是没有前后顺序的信息列表:每项li前都自带一个圆点</li>
<li>ol-li是有前后顺序的信息列表:每项li前都自带一个序号,序号默认从1开始</li>
<li>容器标签<code>&lt;div&gt;</code>,为网页划分独立的版块,给div命名:添加唯一的id属性，使逻辑更加清晰<br>创建表格的五个元素：`table、tr(一行)、th(表格表头)、td(一个单元格,有几个说明就有几列,表格中列的个数，取决于一行中数据单元格的个数。),</li>
<li>注意<code>tbody</code>:当表格内容非常多时，表格会下载一点显示一点，但如果加上<tbody>标签后，这个表格就要等表格内容全部下载完才会显示。注意1、table表格在没有添加css样式之前，在浏览器中显示是没有表格线的 2、表头，也就是th标签中的文本默认为粗体并且居中显示</tbody></li>
<li><code>&lt;table summary=&quot;表格简介文本&quot;&gt;</code>添加表格摘要,表格摘要并不会显示,<code>&lt;caption&gt;标题文本&lt;/caption&gt;</code>添加表格标题,显示在表格上方居中,需要包含在table标签中</li>
<li><code>&lt;a  href=&quot;目标网址&quot;  title=&quot;鼠标滑过显示的文本&quot;&gt;链接显示的文本&lt;/a&gt;</code>,title属性的作用，鼠标滑过链接文字时会显示这个属性的文本内容。加入a标签后，文字的颜色就会自动变为蓝色（被点击过的文本颜色为紫色）</li>
<li>新窗口打开超链接<code>&lt;a href=&quot;目标网址&quot; target=&quot;_blank&quot;&gt;click here!&lt;/a&gt;</code></li>
<li>使用mailto协议发送电子邮件,<code>mailto://abc@qq.com?&amp;cc=abcd@qq.com&amp;bcc=ab@qq.com&amp;subject=主题&amp;body=邮件内容</code>,其中,cc表示抄送,bcc表示密件抄送</li>
<li>插入图片语法<code>&lt;img src=&quot;图片地址&quot; alt=&quot;下载失败时的替换文本&quot; title = &quot;提示文本&quot;&gt;</code></li>
<li>表单是可以把浏览者输入的数据传送到服务器端,语法:<code>&lt;form   method=&quot;传送方式&quot;   action=&quot;服务器文件&quot;&gt;</code>,action ：浏览者输入的数据被传送到的地方,比如一个PHP页面(save.php)。method ： 数据传送的方式（get/post）</li>
<li><p>文本输入框input的类型:<code>text：文本框 password：密码框 raido：单选按钮 checkbox：复选框 file：文件选择框 submit：提交按钮,reset:重置</code></p>
<pre><code>&lt;form&gt;
   &lt;input type=&quot;text/password&quot; name=&quot;名称&quot; value=&quot;文本&quot; /&gt;
&lt;/form&gt;`其中name为文本框命名,方便后台使用,value为文本框设置默认值,一般起提示作用

文本输入域`&lt;textarea  rows=&quot;行数&quot; cols=&quot;列数&quot;&gt;文本&lt;/textarea&gt;`,在&lt;textarea&gt;&lt;/textarea&gt;标签之间可以输入默认值。注意这两个属性可用css样式的width和height来代替：col用width、row用height来代替。
</code></pre></li>
<li>单选框与复选框:注意:同一组的单选按钮，name 取值一定要一致</li>
<li><p>下拉列表:</p>
<pre><code>&lt;select&gt;
  &lt;option value=&quot;看书&quot;&gt;看书&lt;/option&gt;
  &lt;option value=&quot;旅游&quot;&gt;旅游&lt;/option&gt;
  &lt;option value=&quot;运动&quot;&gt;运动&lt;/option&gt;
  &lt;option value=&quot;购物&quot;&gt;购物&lt;/option&gt;
&lt;/select&gt;` value为向服务器提交的值,设置selected=“selected”属性,则默认选中.
</code></pre></li>
<li>下拉列表也可以进行多选操作，在<code>&lt;select&gt;</code>标签中设置multiple=”multiple”属性，就可以实现多选功能，在 windows 操作系统下，进行多选时按下Ctrl键同时进行单击（在 Mac下使用 Command +单击），可以选择多个选项。</li>
<li><p>form表单中的label标签:用于显示提示文本,并且当用户点击label时,将焦点转移到与之对应的控件(常用输入框)上,但是标签的 for 属性中的值应当与相关控件的 id 属性值一定要相同。 </p>
<pre><code>&lt;label for=&quot;male&quot;&gt;男&lt;/label&gt;
&lt;input type=&quot;radio&quot; name=&quot;gender&quot; id=&quot;male&quot; /&gt;
</code></pre></li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><ul>
<li>css 样式由选择符和声明组成，而声明又由属性和值组成,属性和值之间用英文冒号“：”分隔。当有多条声明时，中间可以英文分号“;”分隔,最后一条声明可以没有分号，但是为了以后修改方便，一般也加上分号。</li>
<li>CSS中有注释语句：用<code>/*</code>注释语句<code>*/</code>来标明,（Html中使用<code>&lt;!--注释语句--&gt;</code>)</li>
<li>内联式css样式表就是把css代码直接写在现有的HTML标签中，注意要写在元素的开始标签里,css样式代码要写在style=””双引号中，如果有多条css样式代码设置可以写在一起，中间用分号隔开</li>
<li><p>嵌入式css样式，写在当前的文件中.嵌入式css样式必须写在<code>&lt;style&gt;&lt;/style&gt;之间</code>，并且一般情况下嵌入式css样式写在<code>&lt;head&gt;&lt;/head&gt;</code>之间。注意设置style的type属性.</p>
<pre><code>&lt;style type=&quot;text/css&quot;&gt;
span{
   color:blue;
}
&lt;/style&gt;
</code></pre></li>
<li>外部式css样式(也可称为外联式)就是把css代码写一个单独的外部文件中，这个css样式文件以“.css”为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将css样式文件链接到HTML文件内,<code>&lt;link href=&quot;base.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;</code>,<code>rel=&quot;stylesheet&quot; type=&quot;text/css&quot;</code>是固定写法不可修改。<code>&lt;link&gt;</code>标签位置一般写在<code>&lt;head&gt;</code>标签之内。</li>
<li>标签选择器; <code>标签名称{css样式代码;}</code></li>
<li>类选择器:<code>.类选器名称{css样式代码;}</code></li>
<li>ID选择器:<code>#id名称{css样式代码;}</code></li>
<li>子选择器:即大于符号(&gt;),用于选择指定标签元素的第一代子元素(只能是孩子)。<code>.food&gt;li{border:1px solid red;}</code></li>
<li>包含选择器:加入空格,用于选择指定标签元素下的后辈元素。<code>.first  span{color:red;}</code></li>
<li>通用选择器是功能最强大的选择器，它使用一个（*）号指定，它的作用是匹配html中所有标签元素</li>
<li>伪类选择符:<code>a:hover{color:red;}</code></li>
<li>分组选择符:为html中多个<strong>标签元素</strong>设置同一个样式（，)<code>h1,span{color:red;}</code></li>
<li>类选择器和ID选择器的区别:1.ID选择器只能在文档中使用一次,类选择器可以使用多次,也即id选择器(名称)具有唯一性;2.可以使用类选择器词列表方法为一个元素同时设置多个样式。也即一个元素可以具有多个类,但只能有一个id:<code>&lt;span class=&quot;stress bigsize&quot;&gt;三年级&lt;/span&gt;</code></li>
<li><code>border:1px solid red;相当于border-width:1px;//边框宽度    border-style:solid; //边框风格    border-color:red; //边框颜色</code></li>
<li>继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代。<code>border:1px solid red;</code>无法继承.</li>
<li>标签的权值为1，类选择符的权值为10，ID选择符的权值最高为100。层叠就是在html文件中对于同一个元素可以有多个css样式存在，当有相同权重的样式存在时，会根据这些css样式的前后顺序来决定，处于最后面的css样式会被应用。</li>
<li>继承是指标签的样式可以由子代继承，但有些标签是不能继承的，eg：border。<br>特殊性指用用权重来确定最后起作用的样式，id=100，class=10，标签=1，继承=0.1；<br>层叠指当权重相同时，后面的样式覆盖前面的样式。<br>important的使用。</li>
<li>浏览器默认的样式 &lt; 网页制作者样式 &lt; 用户自己设置的样式，但记住!important优先级样式是个例外，权值高于用户自己设置的样式。<code>p{color:red !important;}</code>注意分号放在!important的后面</li>
<li>任意浏览器的默认字体高度16px（16像素）。所有未经调整的浏览器都符合:1em=16px。为了简化font-size的换算，需要在css中的body选择器中声明font-size=62.5%，这就使em值变为16px*62.5%=10px,这样12px=1.2em,10px=1em,也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。注：建议不要使用em作为中文站点的文字单位，会导致文字变形十分严重的。em的值并不是固定的； em会继承父级元素的字体大小。</li>
<li><p>图片居中，不能直接对img标签使用<code>text-align:center;</code>而是对该img标签所在的div或者其他块级元素使用才会达到这种效果。</p>
<pre><code>字体:`font-family:”Microsoft Yahei”;`
文字颜色,字号:`font-size:12px;color:#666`
文字粗体:`font-weight:bold;`
文字斜体:`font-style:italic;`
文字下划线;`text-decoration:underline;`
文字删除线:`text-decoration:line-through;`
文本缩进:`text-indent:2em;`两个空格
行间距(行高):`line-height:2em;`
设置文字间隔或者字母间隔:`letter-spacing:50px;`注意：这个样式使用在英文单词时，是设置字母与字母之间的间距。
单词间距:`word-spacing:50px;`
为块状元素中的文本、图片设置居中样式:`text-align:center;`
常用的块状元素有：`&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt;`
常用的内联元素有：`&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;`
常用的内联块状元素有：`&lt;img&gt;、&lt;input&gt;`
</code></pre></li>
<li>块状元素都自带换行效果；内联元素都是定义行内小区域且不换行，但如果没有内容就没有意义，不占空间；内联块状元素除了不换行，即使没有内容也会占空间。</li>
<li>在html中<code>&lt;div&gt;、 &lt;p&gt;、&lt;h1&gt;、&lt;form&gt;、&lt;ul&gt; 和 &lt;li&gt;</code>就是块级元素。设置<code>display:block</code>就是将元素显示为块级元素。</li>
<li>将内联元素转换为块级元素:<code>a{display:block;}</code></li>
<li>块级元素特点：1、每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行）2、元素的高度、宽度、行高以及顶和底边距都可设置。3、元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。</li>
<li>在html中，<code>&lt;span&gt;、&lt;a&gt;、&lt;label&gt;、 &lt;strong&gt; 和&lt;em&gt;</code>就是典型的内联元素（行内元素）（inline）元素。当然块状元素也可以通过代码<code>display:inline</code>将元素设置为内联元素。<code>display:inline;</code></li>
<li>内联元素特点：1、和其他元素都在一行上；2、元素的高度、宽度及顶部和底部边距不可设置；3、元素的宽度就是它包含的文字或图片的宽度，不可改变。</li>
<li>联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码<code>display:inline-block</code>就是将元素设置为内联块状元素。(css2.1新增)，<code>&lt;img&gt;、&lt;input&gt;</code>标签就是这种内联块状标签。</li>
<li>inline-block 元素特点：1、和其他元素都在一行上；2、元素的高度、宽度、行高以及顶和底边距都可设置。</li>
<li>边框:<code>border:2px  solid  red;</code>对应:<code>border-width:2px;border-style:solid;border-color:red;</code>border-style（边框样式）常见样式有：<br>dashed（虚线）| dotted（点线）| solid（实线）。border-width（边框宽度）中的宽度也可以设置为：thin | medium | thick（但不是很常用），最常还是用像素（px）</li>
<li>单独设置下边框:<code>border-bottom:1px solid red;</code> top right left bottom</li>
<li>css内定义的宽（width）和高（height），指的是填充以里的内容范围。因此一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。</li>
<li>元素与其它元素之间的距离可以使用边界（margin）来设置。</li>
<li>元素内容与边框之间是可以设置距离的，称之为“填充”<code>padding-top</code>。 顺时针:上 右 下 左  或者 上下 左右 或者 上下左右</li>
<li>CSS包含3种基本的布局模型，用英文概括为：Flow、Layer 和 Float。在网页中，元素有三种布局模型：1、流动模型（Flow）2、浮动模型 (Float)3、层模型（Layer）</li>
<li>流动（Flow）是默认的网页布局模式。也就是说网页在默认状态下的 HTML 网页元素都是根据流动模型来分布网页内容的。流动布局模型具有2个比较典型的特征：第一点，块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，因为在默认状态下，块状元素的宽度都为100%。实际上，块状元素都会以行的形式占据位置。第二点，在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。（内联元素可不像块状元素这么霸道独占一行）</li>
<li>块状元素这么霸道都是独占一行，设置元素浮动就可以实现让两个块状元素并排显示。<br>任何元素在默认情况下是不能浮动的，但可以用 CSS 定义为浮动.<code>float:left;</code></li>
<li>层布局模型就像是图像软件PhotoShop中非常流行的图层编辑功能一样，每个图层能够精确定位操作.CSS定义了一组定位（positioning）属性来支持层布局模型。层模型有三种形式：1、绝对定位(position: absolute)2、相对定位(position: relative)3、固定定位(position: fixed)</li>
<li>设置position:absolute(表示绝对定位)，作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。对于以前位置(<strong>右上角</strong>）向左移动100像素，向下移动20像素。<code>right:100px;   top:20px;</code>right的是让right的margin变为100px，同理top是让top的margin变为20px，所以要向右和向下移。</li>
<li>如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。<code>position:relative;    left:100px;    top:50px;</code>（相对于以前位置<strong>左上角</strong>）向右移动100像素，向下移动50像素。</li>
<li>absolute表里如一，移动了就是移动了。relative只是表面显示移动了，但实际还在文档流中原有位置，别的元素无法占据。</li>
<li>fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响，这与<code>background-attachment:fixed;</code>属性功能相同。</li>
<li>使用<code>position:relative</code>,相对于其它元素进行定位,参照定位的元素必须是相对定位元素的前辈元素;参照定位的元素必须加入position:relative;定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了</li>
<li><p>参照物不是浏览器</p>
<pre><code>#box1{
    width:200px;
    height:200px;
    position:relative;        
    }

#box2{
    position:absolute;
    top:20px;
    left:30px;
    } //box2就可以相对于父元素box1定位
</code></pre></li>
<li><p>设置的颜色是16进制的色彩值时，如果每两位的值相同，可以缩写一半。<code>p{color:#000000;} == p{color:#000;} p{color: #336699;}==p{color: #369;}</code></p>
</li>
<li>字体的缩写<code>body{    font:12px/1.5em  &quot;宋体&quot;,sans-serif;}</code>1、使用这一简写方式你至少要指定 font-size 和 font-family 属性，其他的属性(如 font-weight、font-style、font-varient、line-height)如未指定将自动使用默认值。2、在缩写时 font-size 与 line-height 中间要加入“/”斜扛。</li>
<li>设置颜色值的三种方式:1,英文命令.2.RGB <code>p{color:rgb(133,45,200);}</code>每一项在0-255之间,也可以是百分数<code>p{color:rgb(20%,33%,25%);}</code>.3.十六进制(较普遍)<code>p{color:#00ffff;}</code></li>
<li><p>长度单位</p>
<pre><code>目前比较常用到px（像素）、em、% 百分比，要注意其实这三种单位都是相对单位。
1、像素
像素为什么是相对单位呢？因为像素指的是显示器上的小点（CSS规范中假设“90像素=1英寸”）。实际情况是浏览器会使用显示器的实际像素值有关，在目前大多数的设计者都倾向于使用像素（px）作为单位。
2、em
就是本元素给定字体的 **font-size 值**，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。如下代码：
p{font-size:12px;text-indent:2em;}
上面代码就是可以实现段落首行缩进 24px（也就是两个字体大小的距离）。
下面注意一个特殊情况：
但当给 font-size 设置单位为 em 时，此时计算的标准以 p 的父元素的 font-size 为基础。如下代码：
html:
&lt;p&gt;以这个&lt;span&gt;例子&lt;/span&gt;为例。&lt;/p&gt;
css:
p{font-size:14px}
span{font-size:0.8em;}
结果 span 中的字体“例子”字体大小就为 11.2px（14 * 0.8 = 11.2px）。
3、百分比
p{font-size:12px;line-height:130%}
设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。
</code></pre></li>
<li><p>水平居中设置-行内元素:如果被设置元素为文本、图片等行内元素时，水平居中是通过给父元素设置 <code>text-align:center</code>来实现的。</p>
</li>
<li>水平居中设置-定宽块状元素:当被设置元素为 块状元素 时用 <code>text-align：center</code>就不起作用了，这时也分两种情况：定宽块状元素和不定宽块状元素。定宽块状元素：块状元素的宽度width为固定值。满足定宽和块状两个条件的元素是可以通过设置“左右margin”值为“auto”来实现居中的。</li>
<li><p>水平居中设置-不定宽块状元素方法（一）:(不定宽块状元素：块状元素的宽度width不固定。)不定宽度的块状元素有三种方法居中（这三种方法目前使用的都很多）:1.加入 table 标签,为这个 table 设置“左右 margin 居中”（这个和定宽块状元素的方法一样,利用table标签的长度自适应性,可以看做一个定宽度块元素)<br>2.设置 display: inline 方法：与第一种类似，显示类型设为 行内元素，进行不定宽元素的属性设置3.设置 position:relative 和 left:50%：利用 相对定位 的方式，将元素向左偏移 50% ，即达到居中的目的</p>
<pre><code>&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td&gt;
    &lt;ul&gt;
        &lt;li&gt;我是第一行文本&lt;/li&gt;
        &lt;li&gt;我是第二行文本&lt;/li&gt;
        &lt;li&gt;我是第三行文本&lt;/li&gt;
    &lt;/ul&gt;
    &lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
或者直接设置`display:table; margin:0 auto;
`也即 .wrap{background:#ccc;display:table;margin:0 auto;
}
</code></pre></li>
<li><p>水平居中设置-不定宽块状元素方法（二）:改变块级元素的 display 为 inline 类型（设置为 行内元素 显示），然后使用 text-align:center 来实现居中效果。它将块状元素的 display 类型改为 inline，变成了行内元素，所以少了一些功能，比如设定长度值。</p>
</li>
<li>水平居中设置-不定宽块状元素方法（三）:通过给父元素设置 float值为left，然后给父元素设置 position:relative 和 left:50%，子元素设置 position:relative 和 left: -50% 来实现水平居中。</li>
<li>垂直居中-父元素高度确定的单行文本:设置父元素的 height 和 line-height 高度一致来实现的。(height: 该元素的高度，line-height: 顾名思义，行高（行间距），指在文本中，行与行之间的 基线间的距离 )。这种文字行高与块高一致带来了一个弊端：当文字内容的长度大于块的宽时，就有内容脱离了块。</li>
<li>垂直居中-父元素高度确定的多行文本（方法一）:插入 table标签，同时设置 vertical-align：middle。</li>
<li>垂直居中-父元素高度确定的多行文本（方法二）:设置块级元素的 display 为 table-cell（设置为表格单元显示），激活 vertical-align 属性，但注意 IE6、7 并不支持这个样式, 兼容性比较差。    <code>display:table-cell;/*IE8以上及Chrome、Firefox*/    vertical-align:middle;/*IE8以上及Chrome、Firefox*/</code></li>
<li>隐性改变display类型:有一个有趣的现象就是当为元素（不论之前是什么类型元素，display:none 除外）设置以下 2 个句之一： 1. position : absolute  2. float : left 或 float:right 简单来说，只要html代码中出现以上两句之一，元素的display显示类型就会自动变为以 display:inline-block（块状元素）的方式显示，当然就可以设置元素的 width 和 height 了，且默认宽度不占满父元素。</li>
</ul>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><ul>
<li>我们可以将JavaScript代码放在html文件中任何位置，但是我们一般放在网页的head或者body部分。放在<head><meta name="generator" content="Hexo 3.8.0">部分最常用的方式是在页面中head部分放置script&gt;元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分。</head></li>
<li><p>放在<body>部分JavaScript代码在网页读取到该语句的时候就会执行。注意: javascript作为一种脚本语言可以放在html页面中任何位置，但是浏览器解释html时是按先后顺序的，所以前面的script就先被执行。比如进行页面显示初始化的js必须放在head里面，因为初始化都要求提前进行（如给页面body设置css等）；而如果是通过事件调用执行的function那么对位置没什么要求的。</body></p>
<pre><code> &lt;script type=&quot;text/javascript&quot;&gt;
  document.write(&quot;I love JS&quot;)
&lt;/script&gt;
</code></pre></li>
<li>单行注释，在注释内容前加符号 “//”。多行注释以”/<em>“开始，以”</em>/“结束。</li>
<li>1.变量必须使用字母、下划线(<em>)或者美元符(<code>$</code>)开始。2.然后可以使用任意多个英文字母、数字、下划线(</em>)或者美元符(<code>$</code>)组成。 3.不能使用JavaScript关键词与JavaScript保留字。变量要先声明再赋值，JS中区分大小写，如变量mychar与myChar是不一样的，表示是两个变量。 变量虽然也可以不声明，直接使用，但不规范，需要先声明，后使用。</li>
<li>document.write() 可用于直接向 HTML 输出流写内容。简单的说就是直接在网页中输出内容。第一种:输出内容用””括起，直接输出””号内的内容。第二种:通过变量，输出内容.第三种:输出多项内容，内容之间用+号连接。第四种:输出HTML标签，并起作用，标签使用<code>&quot;&quot;</code>括起来。<code>document.write(mystr+&quot;&lt;br&gt;&quot;);</code></li>
<li>js输出空格:<code>&quot;&amp;nbsp;”</code>或者<code>document.write(&quot;&lt;span style=&#39;white-space:pre;&#39;&gt;&quot;+&quot;  1        2    3    &quot;+&quot;&lt;/span&gt;”);</code>输出时添加<code>“white-space:pre;”</code>样式属性。这个样式表示”空白会被浏览器保留”</li>
<li>JavaScript-警告（alert 消息对话框）</li>
<li><p>JavaScript-确认（confirm 消息对话框）弹出对话框(包括一个确定按钮和一个取消按钮)。 <code>confirm(str);</code>当用户点击”确定”按钮时，返回true当用户点击”取消”按钮时，返回false</p>
<pre><code>function rec(){
   var mymessage=confirm(&quot;你好棒&quot;)         ;
   if(mymessage==true)
   {
       document.write(&quot;你是女士!&quot;);
   }
   else
   {
       document.write(&quot;你是男士!&quot;);
   }
 }    
</code></pre></li>
<li><p>JavaScript-提问（prompt 消息对话框）弹出消息对话框（包含一个确定按钮、取消按钮与一个文本输入框）。<code>prompt(str1, str2);</code>str1: 要显示在消息对话框中的文本，不可修改,str2：文本框中的内容，可以修改.1. 点击确定按钮，文本框中的内容将作为函数返回值2. 点击取消按钮，将返回null.注:在用户点击对话框的按钮前，不能进行任何其它操作。</p>
<pre><code>score =  prompt(&quot;哈喽哈&quot;,&quot;默认值&quot;);
if(score&gt;=90)
{
   document.write(&quot;你很棒!&quot;);
}
</code></pre></li>
<li><p>JavaScript-打开新窗口（window.open）<code>window.open([URL], [窗口名称], [参数字符串])</code></p>
<pre><code>           URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。
          窗口名称：可选参数，被打开窗口的名称。                  

 1.该名称由字母、数字和下划线字符组成。
 2.&quot;_top&quot;、&quot;_blank&quot;、&quot;_self&quot;具有特殊意义的名称。
    _blank：在新窗口显示目标网页
    _self：在当前窗口显示目标网页
    _top：框架网页中在上部窗口中显示目标网页
 3.相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。
4.name 不能包含有空格。
</code></pre></li>
<li><p>参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。toolbar工具栏,scrollbars滚动条,status状态栏menubar菜单栏 值为yes/no 窗口宽高度width/height以及窗口顶部/左端距离屏幕顶部的像素数top/left  </p>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt; window.open(&apos;http://www.imooc.com&apos;,
&apos;_blank&apos;,&apos;width=300,height=200,
menubar=no,toolbar=no, status=no,scrollbars=yes’)
    &lt;/script&gt;
</code></pre></li>
</ul>
<ul>
<li><p>JavaScript-关闭窗口（window.close）</p>
<pre><code> window.close();   //关闭本窗口
 &lt;窗口对象&gt;.close();   //关闭指定的窗口
 &lt;script type=&quot;text/javascript&quot;&gt;
   var mywin=window.open(&apos;http://www.imooc.com&apos;); //将新打的窗口对象，存储在变量mywin中
   mywin.close();
&lt;/script&gt;
</code></pre></li>
<li>文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。</li>
<li><p>HTML文档可以说由节点构成的集合，三种常见的DOM节点:1. 元素节点：上图中<code>&lt;html&gt;、&lt;body&gt;、&lt;p&gt;</code>等都是元素节点，即标签。2. 文本节点:向用户展示的内容，如<code>&lt;li&gt;...&lt;/li&gt;</code>中的JavaScript、DOM、CSS等文本。3. 属性节点:元素属性，如<code>&lt;a&gt;</code>标签的链接属性<code>href=&quot;http://www.chenyalun.com&quot;</code>。</p>
</li>
<li><p>通过ID获取元素:<code>document.getElementById(“id”)</code>,返回<code>[object HTMLParagraphElement]</code> ,注:获取的元素是一个对象，如想对元素进行操作，我们要通过它的属性或方法。用<code>document.getELementById().innerHTML;</code>才可以获取到其中的内容.</p>
</li>
<li>innerHTML 属性用于获取或替换 HTML 元素的内容。Object.innerHTML,1.Object是获取的元素对象，如通过document.getElementById(“ID”)获取的元素。2.注意书写，innerHTML区分大小写。</li>
<li>改变 HTML 样式:<code>Object.style.property=new style;</code>例如:<code>mychar.style.color=red;</code></li>
<li>显示和隐藏（display属性）Object.style.display = value,其中value为none隐藏,value为block块级元素显示.其中none与block要加上引号</li>
<li>控制类名（className 属性）className 属性设置或返回元素的class 属性。<code>object.className = classname</code>作用:1.获取元素的class 属性2. 为网页内的某个元素指定一个css样式来更改该元素的外观</li>
<li>删除修改的样式:<code>document.getElementById(&quot;txt&quot;).removeAttribute(&quot;style&quot;);</code></li>
<li>外部引入JS <code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li>
<li>变量:字母数字下划线美元符,变量名区分大小写,不允许使用关键字保留字</li>
<li>变量也可以不声明，直接使用，但为了规范，需要先声明，后使用。</li>
<li>“+”连接字符串时,符号两边不能有空格</li>
<li><code>jq1=numa + 30 &gt;10 &amp;&amp; numb * 3&lt;20;</code>算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号</li>
<li>定义数组: <code>var myarr=new Array();  myarr[0]=80;</code>实际上数组都是变长的,即使指定了长度为8，仍然可以将元素存储在规定长度以外。</li>
<li>创建数组:<code>var myarr = new Array(11,25,35); var myarr = [12,25,416];</code></li>
<li>只需使用下一个未用的索引，任何时刻可以不断向数组增加新元素。<code>myarray[5]=88; //使用一个新索引，为数组增加一个新元素</code></li>
<li>数组的属性:length长度</li>
<li>二维数组的表示:<code>myarray[ ][ ]</code>,简单定义:<code>var Myarr = [[0 , 1 , 2 ],[1 , 2 , 3]]</code>,也可以使用循环,myarr[0][1]=5; //将5的值传入到数组中，覆盖原有值。</li>
<li><code>==先转换类型再比较，===先判断类型，如果不是同一类型直接为false。</code></li>
<li>函数调用的两种情况:1.script标签中直接调用,2.点击按钮调用onClick事件</li>
<li>有参数的函数:<code>function 函数名(参数1,参数2){     函数代码}</code>,参数不要声明类型</li>
<li><code>function add2(x,y){   sum = x + y;   return sum; //返回函数值,return后面的值叫做返回值。}</code></li>
<li>事件是可以被 JavaScript 侦测到的行为。 网页中的每个元素都可以产生某些可以触发 JavaScript 函数或程序的事件。</li>
<li><p>常用JS事件:</p>
<pre><code>onclick鼠标单击事件
onmouseover鼠标经过事件
onmouseout鼠标移开事件
onchange文本框**内容**改变事件,一般是textarea
onselect文本框**内容**选中事件,一般是textarea
onfocus光标聚焦
onblur光标移开
onload网页加载后,事件会在页面加载完成后，立即发生，同时执行被调用的程序。
加载页面时，触发onload事件，**事件写在&lt;body&gt;标签内**。
onunload卸载事件,当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，
同时执行被调用的程序。该事件目前只对IE起作用。
</code></pre></li>
<li><p>使用parseInt()函数可解析一个字符串,并返回一个整数。</p>
</li>
<li>JavaScript 中的所有事物都是对象，如:字符串、数值、数组、函数等，每个对象带有属性和方法。对象的属性：反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等；对象的方法：能够在对象上执行的动作。例如，表单的“提交”(Submit)，时间的“获取”(getYear)等；</li>
</ul>
<h2 id="Date日期对象"><a href="#Date日期对象" class="headerlink" title="Date日期对象"></a>Date日期对象</h2><ul>
<li><p>日期对象,使用关键字new，Date()的首字母必须大写。</p>
<pre><code>// 日期的相关属性与方法
get/setDate() 返回设置日期
get/setFullYear()  返回设置年份,用四位数表示
get/setYear() 返回/设置年份
get/setMonth() 返回/设置月份
get/setHours() 返回/设置小时,24小时制
get/setMinutes() 返回/设置分钟数
get/setSeconds() 返回/设置秒钟数
get/setTime() 返回/设置时间(毫秒为单位)
getDay() 返回星期，返回的是0-6的数字，0 表示星期天。
</code></pre></li>
<li><p>使用 String 对象的 toUpperCase() 方法来将字符串小写字母转换为大写.使用toLowerCase()方法，将字符串所有大写字母都变成小写的字符串</p>
</li>
<li>charAt() 方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。</li>
<li>注意：1.字符串中第一个字符的下标是 0。最后一个字符的下标为字符串长度减一（string.length-1）。2.如果参数 index 不在 0 与 string.length-1 之间，该方法将返回一个空字符串。</li>
<li>indexOf(,) 方法可返回某个指定的字符串值在字符串中首次出现的位置。1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 substring。2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。3.如果找到一个 substring，则返回 substring 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。</li>
<li>split(separator,limit) 方法将字符串分割为字符串数组，并返回此数组。注意：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。separator必须,从该参数指定的地方分割stringObject,limite,可选参数,分割的次数,如果设置该参数,则返回的子串不会多于这个参数指定的数组,如果无参数,则不限定次数</li>
<li>substring(起始位置,可选的结束位置(不包含该位置的字符)) 方法用于提取字符串中介于两个指定下标之间的字符。注意：1. 返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。2. 如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。3. 如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。</li>
<li>substr() 方法从字符串中提取从 startPos位置开始的指定数目的字符串。<code>stringObject.substr(startPos,length)</code>  注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。如果startPos为负数且绝对值大于字符串长度，startPos为0。</li>
<li>string.substring( 起点 ， 终点 )  string.substr( 起点 ，长度 )</li>
<li>Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。</li>
</ul>
<h2 id="MATH常用属性方法"><a href="#MATH常用属性方法" class="headerlink" title="MATH常用属性方法"></a>MATH常用属性方法</h2><ul>
<li><p>MATH</p>
<pre><code>E 返回算数常量e(约为2.71828)
LN2 返回2的自然对数
LN10 返回10的自然对数
LOG2E 返回以2为底的e的对数
LOG10E 返回以10为底的e的对数
PI 圆周率
SQRT1_2 返回2的平方根的倒数
SQRT2 返回2 的平方根
MATH常用方法
abs(x) 返回数的绝对值
acos(x) 返回数的反余弦值
asin(x) 返回数的反正弦值
atan(x) 返回数的反正切值
atan2(y,x)返回由x轴到点(x,y)的角度(以弧度为单位)
ceil(x)对数进行上舍入
cos(x) 返回数的余弦
exp(x) 返回e的指数
floor(x)对数进行下舍入
log(x) 返回数的自然对数
max(x,y) 返回最高值
min(x,y) 返回最小值
pow(x,y) 返回x的y 次方
random() 返回0--1之间的随机数
round(x) 把数四舍五入最为接近的数
sin(x) 正弦
cos(x) 余弦
tan(x) 正切
sqrt(x) 平方根
toSourse() 返回该对象的源代码
value() 返回MATH对象的原始值
</code></pre></li>
</ul>
<h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><ul>
<li><p>数组</p>
<pre><code>concat() 连接两个或更多的数组,并返回结果
join() 把数组的所有元素放入一个字符串,元素通过指定的分隔符分割
pop() 删除并返回数组的最后一个元素
push() 向数组的末尾添加一个或更多元素,并返回新的长度
reverse() 颠倒数组元素的顺序
shift() 删除并返回数组的第一个元素
slice(start,可选的end) 从某个已有的数组返回选定的元素
sort() 对数组的元素进行排序
splice() 删除元素,并向数组添加新元素
toSource() 返回该对象的源代码
toString() 把数组转换为字符串,并返回结果
toLocalString() 把数组转化为本地数组,并返回结果
unshift() 向数组的开头添加一个或者更多元素,并返回新的长度()
valueOf() 返回数组对象的原始值
</code></pre></li>
</ul>
<h2 id="window对象方法"><a href="#window对象方法" class="headerlink" title="window对象方法"></a>window对象方法</h2><ul>
<li><p>window</p>
<pre><code>alert() 显示带有一段消息和一个确定按钮的警告框
prompt() 显示可以提示用户输入的对话框
confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框
open() 打开一个新的浏览器窗口或者查找一个已命名的窗口
close() 关闭浏览器窗口
print() 打印当前窗口的内容
focus() 把键盘焦点给予一个窗口
blur() 把键盘焦点从顶层窗口移开
moveBy() 相对窗口的当前坐标移动指定的像素
moveTo() 把窗口的左上角移动一个指定的坐标
resizeBy() 按照指定的像素调整窗口的大小
resizeTo() 把窗口的大小调整到指定的宽度和高度
scrollBy() 按照指定的像素滚动内容
scrollTo() 把内容滚动到指定的坐标
setInterval(代码,间隔时间) 每隔一定时间执行代码(间隔性触发计时器),在执行时,从载入页面后每隔指定的时间执行代码。代码:函数或代码串,如”clock()”或者clock,交互时间:以毫秒为单位.返回该定时器
setTimeout() 在指定的时间延迟后指定代码(一次性计时器)
clearInterval() 取消setInterval() 的设置,传入定时器
clearTimeout() 取消setTimeout() 的设置
</code></pre></li>
</ul>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><ul>
<li><p>history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。<code>window.history.[属性|方法]</code></p>
<pre><code>length 返回浏览器历史列表的URL数量
back() 加载history列表中前一个URL
forward() 加载history列表下一个URL
go(number) 加载history列表某一个具体的页面,0:当前页面
back()相当于go(-1),forward()相当于go(1)
</code></pre></li>
</ul>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><ul>
<li><p>location用于获取或设置窗体的URL，并且可以用于解析URL。<code>location.[属性|方法]</code></p>
<pre><code>hash 设置或返回从#开始的URL(锚点)
host 设置或返回主机名和当前URL的端口号
hostname 设置或返回当前URL的主机名
href 设置或返回完成的URL
pathname 设置或返回当前URL的路径部分
port 设置或返回当前URL的端口号
protocol 设置或返回当前URL的协议
search 设置或者返回从?开始的URL(查询部分)
assign() 加载新的文档
reload() 重新加载当前文档
replace() 用新的文档替换当前文档
</code></pre></li>
</ul>
<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><ul>
<li><p>navigator 对* navigator 对象包含有关浏览器的信息</p>
<pre><code>appCodeName 浏览器代码名的字符串表示
appName 浏览器的名称
appVersion 浏览器平台以及版本
platform 运行浏览器的操作系统平台
userAgent 返回user-agent头部的值
</code></pre></li>
</ul>
<h2 id="window中的screen-对象"><a href="#window中的screen-对象" class="headerlink" title="window中的screen 对象"></a>window中的screen 对象</h2><ul>
<li>window.screen 对象在编写时可以不使用 window 这个前缀。</li>
<li><p>screen对象用于获取用户的屏幕信息。<code>window.screen.属性</code>    </p>
<pre><code>height 屏幕的高度,单位像素
width  屏幕的宽度,单位像素
availHeight 窗口可用的屏幕高度,单位像素,减去界面特性，比如任务栏。
availWidth 窗口可用的屏幕宽度,单位像素,减去界面特性，比如任务栏。
colorDepth 用户浏览器表示的颜色位数,通常32位(每像素的位数)
pixelDepth 浏览器颜色位数,通常32位(每像素的位数)(IE不支持)
</code></pre></li>
</ul>
<h2 id="文档对象模型"><a href="#文档对象模型" class="headerlink" title="文档对象模型"></a>文档对象模型</h2><ul>
<li><p>节点属性与方法</p>
<pre><code>nodeName 返回一个字符串,其内容是给定节点的名字
nodeType 返回一个整数,这个数值代表给定节点的类型
nodeValue 返回给定节点的当前值
innerHTML 节点内置文本
childNodes 返回一个数组,这个数组由给定元素节点的子节点构成
firstChild 返回第一个子节点
lastChild 返回最后一个子节点
parentNode 返回一个给定节点的父节点
nextSibling返回给定节点的下一个子节点
previousSibling 返回给定节点的上一个子节点
document.createElement(&quot;elementType&quot;) 创建一个新的元素节点

document.cr    document.createTextNode(&quot;text&quot;) 创建一个包含着给定文本的新文本节点,text为文本
appendChild(node) 指定节点的最后一个子节点列表后添加一个新的子节点
insertBefore(newnode,node) 将一个给定节点插入到一个给定元素节点的给定节点前面
removeChild(node) 从一个给定元素中删除一个子节点
replaceChild(newnode,oldnew) 把一个给定元素里的一个子节点替换为另外一个节点
</code></pre><h3 id="docuument常用方法"><a href="#docuument常用方法" class="headerlink" title="docuument常用方法"></a>docuument常用方法</h3></li>
<li>document.getElementsByName(name) 返回带有指定名称的节点对象的集合。与getElementById() 方法不同的是，通过元素的 name 属性查询元素，而不是通过 id 属性</li>
<li>document.getElementsByTagName(Tagname)  Tagname是标签的名称，如p、a、img等标签名。和数组类似也有length属性，可以和访问数组一样的方法来访问，所以从0开始。</li>
<li>elementNode.getAttribute(name),其中elementNode：使用getElementById()、getElementsByTagName()等方法，获取到的元素节点.name：要想查询的元素节点的属性名字.</li>
<li>elementNode.setAttribute(name,value),name: 要设置的属性名。value: 要设置的属性值。把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。</li>
<li><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：nodeName : 节点的名称,nodeValue ：节点的值,nodeType ：节点的类型</p>
</li>
<li><p>nodeName 属性: 节点的名称，是只读的。</p>
<pre><code>1. 元素节点的 nodeName 与标签名相同
2. 属性节点的 nodeName 是属性的名称
3. 文本节点的 nodeName 永远是 #text
4. 文档节点的 nodeName 永远是 #document
</code></pre></li>
<li><p>nodeValue 属性：节点的值</p>
<pre><code>1. 元素节点的 nodeValue 是 undefined 或 null
2. 文本节点的 nodeValue 是文本自身
3. 属性节点的 nodeValue 是属性的值
</code></pre></li>
<li><p>nodeType 属性: 节点的类型，是只读的。以下常用的几种结点类型:</p>
<pre><code>元素类型    节点类型
  元素          1
  属性          2
  文本          3
  注释          8
  文档          9
</code></pre></li>
<li><p>elementNode.childNodes,访问子节点.</p>
</li>
<li>node.firstChild,node.lastChild,访问子节点的第一项,最后一项,如果选定的节点没有子节点，则该属性返回 NULL。</li>
<li>elementNode.parentNode,获取指定节点的父节点,父节点只能有一个。览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。</li>
<li><code>nodeObject.nextSibling,nodeObject.previousSibling</code>,访问兄弟节点</li>
<li>appendChild(newnode),在指定节点的最后一个子节点列表之后添加一个新的子节点。</li>
<li>removeChild(),把删除的子节点赋值给 x，这个子节点不在DOM树中，但是还存在内存中，可通过 x 操作。如果要完全删除对象，给 x 赋 null 值</li>
<li><code>document.documentElement.clientHeight</code>表示HTML文档所在窗口的当前高度。,<code>window.innerHeight</code>- 浏览器窗口的内部高度,<code>document.body.clientHeight</code>,Document对象的body属性对应HTML文档的<body>标签</body></li>
<li><p>通用解决方案:</p>
<pre><code>var w=document.documentElement.scrollWidth
   || 
   document.body.scrollWidth;
var h=document.documentElement.scrollHeight
   || 
   document.body.scrollHeight;
</code></pre></li>
</ul>
<ul>
<li>网页尺寸:scrollHeight和scrollWidth，获取网页内容高度和宽度。scrollHeight 是网页内容实际高度，可以小于 clientHeight。scrollHeight 是网页内容高度，不过最小值是 clientHeight。也就是说网页内容实际高度小于 clientHeight 时，scrollHeight 返回 clientHeight 。</li>
<li><p>通用解决方案:</p>
<pre><code>var w=document.documentElement.scrollWidth || 
document.body.scrollWidt h;
var h=document.documentElement.scrollHeight || 
document.body.scrollHeight;
</code></pre></li>
<li><p>offsetHeight和offsetWidth，获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)。</p>
</li>
<li><p>通用解决方案</p>
<pre><code>var w= document.documentElement.offsetWidth || 
document.body.offsetWidth;
var h= document.documentElement.offsetHeight || 
document.body.offsetHeight;       
</code></pre></li>
<li><p>scrollLeft:设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容。</p>
</li>
<li>scrollTop:设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离 ，即上边灰色的内容。</li>
<li>offsetLeft:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 。</li>
<li>offsetTop:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 。</li>
<li>offsetParent：布局中设置postion属性(Relative、Absolute、fixed)的父容器，从最近的父节点开始，一层层向上找，直到HTML的body。</li>
<li>clientHeight,大家对 clientHeight 都没有什么异议，都认为是内容可视区域的高度，也就是说页面浏览器中可以看到内容的这个区域的高度，一般是最后一个工具条以下到状态栏以上的这个区域，与页面内容无关。</li>
<li>offsetHeight,IE、Opera 认为 offsetHeight = clientHeight + 滚动条 + 边框。,NS、FF 认为 offsetHeight 是网页内容实际高度，可以小于 clientHeight。</li>
<li>scrollHeight,IE、Opera 认为 scrollHeight 是网页内容实际高度，可以小于 clientHeight。,NS、FF 认为 scrollHeight 是网页内容高度，不过最小值是 clientHeight。</li>
<li>浏览器中负责执行JavaScript代码的引擎会自动在每个语句的结尾补上;</li>
<li>JavaScript不区分整数和浮点数，统一用Number表示</li>
<li>NaN;NaN表示Not a Number，当无法计算结果时用NaN表示.Infinity;Infinity表示无限大，当数值超过了JavaScript的Number所能表示的最大值时，就表示为Infinity</li>
<li><code>==</code>比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；<br>第二种是<code>===</code>比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。始终坚持使用===比较</li>
<li>NaN这个特殊的Number与所有其他值都不相等，包括它自己,唯一能判断NaN的方法是通过isNaN()函数,<code>isNaN(NaN); // true</code></li>
<li>Swift用nil，Python用None表示,JavaScript用null</li>
<li>JavaScript的数组可以包括任意数据类型。</li>
<li>JavaScript的对象是一组由键-值组成的无序集合,JavaScript对象的键都是字符串类型，值可以是任意数据类型。</li>
<li>变量本身类型不固定的语言称之为动态语言，与之对应的是静态语言。静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错。</li>
<li>如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量,在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误,启用strict模式的方法是在JavaScript代码的第一行写上：<code>&#39;use strict&#39;;</code></li>
<li><code></code>你好, ${name}, 你今年${age}岁了!<code>;</code>注意不是单引号</li>
<li>直接给Array的length赋一个新的值会导致Array大小的变化,如果通过索引赋值时，索引超过了范围，同样会引起Array大小的变化</li>
<li>空数组继续pop不会报错，而是返回undefined,如果要往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉</li>
<li>空数组继续shift不会报错，而是返回undefined</li>
<li>splice()方法是修改Array的“万能方法”，它可以从指定的索引开始删除若干元素，然后再从该位置添加若干元素,从索引2开始删除3个元素,然后再添加两个元素:<code>arr.splice(2, 3, &#39;Google&#39;, &#39;Facebook’);</code></li>
<li>concat()方法可以接收任意个元素和Array，并且自动把Array拆开，然后全部添加到新的Array里</li>
<li>unshift()和push()对应,头部添加若干元素,shift()和pop()对应删除末尾元素.</li>
<li><p>声明对象</p>
<pre><code>var person = {
name : “AA”,
age : 12,
&apos;m-s&apos;: &apos;No&apos;,// 非有效变量
sex : true
};
// 访问:person.name;  person[&apos;m-s&apos;]; person.a;
// 访问不存在的属性不报错，而是返回undefined
// 自由增加属性:person.b = 12;
// 删除属性 delete person.age;
// 检测对象以及父类具有某属性 &apos;name&apos; in person 返回布尔
// 检测某对象具有某属性 person.hasOwnProperty(&apos;name&apos;); 返回布尔
</code></pre></li>
<li><p>JavaScript把null、undefined、0、NaN和空字符串’’视为false，其他值一概视为true</p>
</li>
<li>for (var index in array) {// 此处的index是索引而非array中的元素}</li>
<li><p>Map是一组键值对的结构，具有极快的查找速度。<br><code>var m = new Map([[&#39;Michael&#39;, 95], [&#39;Bob&#39;, 75], [&#39;Tracy&#39;, 85]]); m.get(&#39;Michael&#39;); // 95</code><br>常用操作:</p>
<pre><code>var m = new Map(); // 空Map
m.set(&apos;Adam&apos;, 67); // 添加新的key-value
m.set(&apos;Bob&apos;, 59);
m.has(&apos;Adam&apos;); // 是否存在key &apos;Adam&apos;: true
m.get(&apos;Adam&apos;); // 67
m.delete(&apos;Adam&apos;); // 删除key &apos;Adam&apos;
m.get(&apos;Adam&apos;); // undefined
</code></pre></li>
<li><p>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key。<code>var s2 = new Set([1, 2, 3]); // 含1, 2, 3</code>.通过add(key)方法可以添加元素到Set中,通过delete(key)方法可以删除元素</p>
</li>
<li>遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。为了统一集合类型，ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。具有iterable类型的集合可以通过新的for … of循环来遍历。</li>
<li>for … in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。索引+属性</li>
<li>for … of循环则完全修复了这些问题，它只循环集合本身的元素,元素本身</li>
<li><p>forEach遍历</p>
<pre><code>var a = [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;];
a.forEach(function (element, index, array) {
    // element: 指向当前元素的值
    // index: 指向当前索引
    // array: 指向Array对象本身
    alert(element);
});

var s = new Set([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]);
s.forEach(function (element, sameElement, set) {
    alert(element);
});

var m = new Map([[1, &apos;x&apos;], [2, &apos;y&apos;], [3, &apos;z&apos;]]);
m.forEach(function (value, key, map) {
    alert(value);
});
</code></pre></li>
<li>JavaScript允许传入任意个参数而不影响调用,传入的参数比定义的少也没有问题</li>
<li>JavaScript还有一个关键字arguments，它只在函数内部起作用，并且永远指向当前函数的调用者传入的所有参数。类似数组不是数组</li>
<li><p>不在任何函数内定义的变量就具有全局作用域。全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。</p>
<pre><code>// 唯一的全局变量MYAPP:
var MYAPP = {};

// 其他变量:
MYAPP.name = &apos;myapp&apos;;
MYAPP.version = 1.0;

// 其他函数:
MYAPP.foo = function () {
    return &apos;foo&apos;;
};
</code></pre></li>
<li>JavaScript的变量作用域实际上是函数内部,用let替代var可以申明一个块级作用域的变量,const来定义常量，const与let都具有块级作用域</li>
<li>绑定到对象上的函数称为方法，和普通函数也没啥区别，但是它在内部使用了一个this关键字</li>
<li>非strict环境下:直接使用this没毛病,strict环境下:函数内部首先写上var that = this;之后使用that</li>
<li>据是否是strict模式，this指向undefined或window</li>
<li>apply()把参数打包成Array再传入；  call()把参数按顺序传入。</li>
<li>简单的高阶函数:一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数</li>
<li><p>map():对<strong>数组</strong>中的每一个且仅是单独的元素执行操作,</p>
<pre><code>// 把每一个元素转化为字符串 ,得到的仍是数组
array.map(String)

// 执行pow()
function pow(x) {
    return x * x;
}
array.map(pow),得到的仍是数组
</code></pre></li>
<li><p>reduce():对<strong>数组</strong>中的最开始两个元素进行操作,将结果与第三个元素操作,以此类推</p>
<pre><code>// 数组求和
arr.reduce(function (x, y) {
    return x + y;
});
</code></pre></li>
<li><p>filter():根据传入的函数,作用于每一个元素,返回true或false,把数组中的某些元素过滤掉,返回剩余的元素</p>
<pre><code>var r = arr.filter(function (s) {
    return  x % 2 !== 0; 
            });
arr; // [&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]
</code></pre></li>
<li>sort():排序,默认把所有元素先转换为String再排序,传入的排序函数,根据返回-1进行排序</li>
<li><p>箭头函数:在箭头函数中,可以直接使用this,而非that</p>
<pre><code>x =&gt; x*x
// 相当于
function (x) {
return x*x;
}
// 含有多条语句,多个参数时
(x,y) =&gt; {
if (x &gt;0 ) {
return 0;
}
return x*y;
}
// 不能省略{}
// 特别注意返回一个对象:
x =&gt; ({ foo: x })
</code></pre></li>
<li><p>generator和函数不同的是，generator由function*定义,除了return语句，还可以用yield返回多次。调用generator对象有两个方法，一是不断地调用generator对象的next()方法,第二个方法是直接用for … of循环迭代generator对象</p>
</li>
<li>用typeof操作符获取对象的类型，它总是返回一个字符串:’number’,’boolean’,’string’,’function’,’object’,’undefined’,特别注意null的类型是object，Array的类型也是object</li>
<li>包装对象:<code>var n = new Number(123);</code>,返回object</li>
<li>JavaScript的月份范围用整数表示是0~11，0表示一月，1表示二月</li>
<li>RegExp中:在正则表达式中，如果直接给出字符，就是精确匹配。<code>用\d可以匹配一个数字，\w可以匹配一个字母或数字,.可以匹配任意字符，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符，用{n}表示n个字符，用{n,m}表示n-m个字符,\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格</code></li>
<li>更精确的匹配,[]表示范围:<code>[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线,[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串,[a-zA-Z\_\$][0-9a-zA-Z\_\$]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）,A|B可以匹配A或B,^表示行的开头，^\d表示必须以数字开头。$表示行的结束，\d$表示必须以数字结束。js也可以匹配&#39;jsp&#39;，但是加上^js$就变成了整行匹配，就只能匹配&#39;js&#39;了</code></li>
<li><p>JavaScript有两种方式创建一个正则表达式：第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp(‘正则表达式’)创建一个RegExp对象。</p>
<pre><code>var re1 = /as\_32/; // 最好,不用考虑转义问题
var re2 = new RegExp(“as\\_32”);
// 如果使用第二种写法，因为字符串的转义问题，字符串的两个\\实际上是一个\

//RegExp对象的test()方法用于测试给定的字符串是否符合条件
re1.test(&apos;sfdf&apos;);// 返回false
</code></pre></li>
<li><p>用()表示的就是要提取的分组（Group）,exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。exec()方法在匹配失败时返回null</p>
<pre><code>var re = /^(\d{3})-(\d{3,8})$/;
re.exec(&apos;010-12345&apos;); // [&apos;010-12345&apos;, &apos;010&apos;, &apos;12345&apos;]
</code></pre></li>
<li>正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符,加个?就可以让\d+采用非贪婪匹配</li>
<li><code>g表示全局匹配,var r1 = /test/g;// 等价于:var r2 = new RegExp(&#39;test&#39;, &#39;g&#39;);指定i标志，表示忽略大小写，m标志，表示执行多行匹配</code></li>
<li>注意,在范围匹配[]中,字符要加上反斜杠\,在一般匹配中不需要</li>
<li><code>[a-zA-Z_]其实就是\w</code></li>
<li>JSON序列化:JSON.stringify(object,[propertyName:value],’  ‘); 第二个参数用于控制如何筛选对象的键值，标明指定属性可以输出指定的属性,也可以传入函数进行处理,可以不写,第三个参数是缩进</li>
<li>反序列化:JSON.parse()把它变成一个JavaScript对象</li>
<li>JavaScript不区分类和实例的概念，而是通过原型（prototype）来实现面向对象编程。<code>xiaoming.__proto__ = Student;</code></li>
<li>JavaScript的原型链和Java的Class区别就在，它没有“Class”的概念，所有对象都是实例，所谓继承关系不过是把一个对象的原型指向另一个对象而已。</li>
<li>如果写了new，它就变成了一个构造函数，它绑定的this指向新创建的对象，并默认返回this，也就是说，不需要在最后写return this;</li>
<li>造函数首字母应当大写，而普通函数首字母应当小写</li>
</ul>
<p><br></p>
<p>花了一个周末学习一下前端方面的知识,笔记略微粗糙,复习时再做修正.</p>
]]></content>
      
        
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[泛读博客笔记]]></title>
      <url>http://blog.chenyalun.com/2016/10/28/%E6%B3%9B%E8%AF%BB%E5%8D%9A%E5%AE%A2%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2017.04.03 修改<br>2016.12.04 修改<br>2019.08.15 完善</p>
</blockquote>
<p align="center"> C语言和Objective-C语言。 </p>

<a id="more"></a>
<h1 id="读感"><a href="#读感" class="headerlink" title="读感"></a>读感</h1><p>一口气把前辈博客里面的所有文章都读完了，文章质量都特别高，在此做个记录。</p>
<h1 id="钩玄"><a href="#钩玄" class="headerlink" title="钩玄"></a>钩玄</h1><h2 id="1-C语言中怎么控制输入与输出格式"><a href="#1-C语言中怎么控制输入与输出格式" class="headerlink" title="1.C语言中怎么控制输入与输出格式"></a>1.C语言中怎么控制输入与输出格式</h2><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">printf</span>(<span class="string">"My height is %8.1f"</span>, <span class="number">179.95</span>f);<span class="regexp">//</span> 左对齐,小数点后<span class="number">1</span>位        </span><br><span class="line">   </span><br><span class="line"><span class="keyword">printf</span>(<span class="string">"My height is %-4d"</span>, <span class="number">60</span>); <span class="regexp">//</span> 左对齐，右边填空格</span><br><span class="line">scanf(<span class="string">"%d-%d-%d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">scanf(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">  </span><br><span class="line">// putchar一次只能输出一个字符，而<span class="keyword">printf</span>可以同时输出多个字符</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">65</span>;</span><br><span class="line">putchar(a);</span><br></pre></td></tr></table></figure>
<h2 id="2-getchar-scanf-gets的区别"><a href="#2-getchar-scanf-gets的区别" class="headerlink" title="2.getchar/scanf/gets的区别"></a>2.getchar/scanf/gets的区别</h2><ol>
<li><p>gets和getchar函数可以读入空格、TAB，直到遇到回车为止。scanf不能读入空格和TAB。</p>
</li>
<li><p>gets一次只能读取一个字符串，getchar一次只能读入一个字符。scanf则可以同时接收多个字符。</p>
</li>
<li><p>getchar还能读入回车换行符，这时候要敲2次回车键。第1次敲的回车换行符被getchar读入，第2次敲的回车键代表输入结束。</p>
</li>
</ol>
<h2 id="3-puts-prints-putchar的区别"><a href="#3-puts-prints-putchar的区别" class="headerlink" title="3.puts/prints/putchar的区别"></a>3.puts/prints/putchar的区别</h2><ol>
<li>putchar一次只能输出一个字符，puts函数一次只能输出一个字符串，printf函数则可以同时输出多个字符串。</li>
<li>printf与puts函数会首地址开始输出字符，一直到\0字符为止。</li>
</ol>
<h2 id="4-介绍指针"><a href="#4-介绍指针" class="headerlink" title="4.介绍指针"></a>4.介绍指针</h2><ol>
<li>计算机中的内存是以字节为单位的存储空间，内存的每一个字节都有一个唯一的编号，这个编号就称为地址。</li>
<li>凡存放在内存中的程序和数据都有一个地址，也就是说，一个函数也有自己的内存地址。变量存储单元的第一个字节的地址就是该变量的地址。</li>
<li><p>通过变量名引用变量，由系统自动完成变量名和其存储地址之间的转换，称为变量的“直接引用”方式。首先将变量a的地址存放在另一个变量中，比如存放在变量b中，然后通过变量b来间接引用变量a，间接读写变量a的值。这就是“间接引用”。</p>
</li>
<li><p>在指针变量没有指向确定地址之前，不要对它所指的内容赋值。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> *p; *p = <span class="number">10</span>; <span class="comment">//这是错误的</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 正确做法</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 也可以int *b = &amp;a;</span></span><br><span class="line"><span class="keyword">int</span> *b; <span class="comment">//b是指针变量</span></span><br><span class="line">b = &amp;a;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 通过*b间接修改a的值</span></span><br><span class="line">*b = <span class="number">15</span>; <span class="comment">// 根据b地址访问对应的存储值</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>指针操作中，数组名a是个常量，不能进行赋值运算</p>
 <figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">char s[<span class="number">10</span>]<span class="comment">;</span></span><br><span class="line"><span class="attribute">s</span> = <span class="string">"mj"</span><span class="comment">;// 错误! s是常量</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="5-常见字符串处理函数的用法"><a href="#5-常见字符串处理函数的用法" class="headerlink" title="5.常见字符串处理函数的用法"></a>5.常见字符串处理函数的用法</h2><p>包含string.h头文件后，strlen\strcpy\strcat\strcmp函数的用法<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 测量字符串的字符个数，不包括\0</span></span><br><span class="line"><span class="comment">// 长度为7</span></span><br><span class="line"><span class="keyword">int</span> size = <span class="built_in">strlen</span>(<span class="string">"abcdefg"</span>);</span><br><span class="line"><span class="comment">// 长度为2</span></span><br><span class="line"><span class="keyword">char</span> s[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'\0'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 右边拷贝到左边,</span></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(s, <span class="string">"abcdefg"</span>);</span><br><span class="line"><span class="comment">// 遇到\0截断</span></span><br><span class="line"><span class="keyword">char</span> c[] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'\0'</span>,<span class="string">'c'</span>&#125;;</span><br><span class="line"><span class="built_in">strcpy</span>(s,c);<span class="comment">// 结果ab</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 右边拼接到左边,遇到\0截断</span></span><br><span class="line"><span class="keyword">char</span> s1[<span class="number">30</span>] = &#123;<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'\0'</span>, <span class="string">'d'</span>&#125;;</span><br><span class="line"><span class="built_in">strcat</span>(s1, <span class="string">"OC"</span>);<span class="comment">// 结果abOC</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">// 左减右,逐字符比较ASCII码差值,直到字符不相同或者遇见'\0'为止</span></span><br><span class="line"><span class="built_in">strcmp</span>(s1, s2);</span><br></pre></td></tr></table></figure></p>
<p>注意:strcpy中若数组长度不足以容纳整个字符串，则程序运行崩溃。</p>
<h2 id="6-如何使一个函数有多个返回值"><a href="#6-如何使一个函数有多个返回值" class="headerlink" title="6.如何使一个函数有多个返回值"></a>6.如何使一个函数有多个返回值</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> *c)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 赋值给指针指向的变量</span></span><br><span class="line">  *c = a + b;</span><br><span class="line">  <span class="keyword">return</span> a * b;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m = <span class="number">2</span>,n = <span class="number">4</span>,s1,s2;</span><br><span class="line">  s1 =  test(m, n, &amp;s2);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"%d---%d"</span>,s1,s2);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-字符串常量与字符串变量"><a href="#7-字符串常量与字符串变量" class="headerlink" title="7.字符串常量与字符串变量"></a>7.字符串常量与字符串变量</h2><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">char *s = <span class="string">"mj"</span><span class="comment">;</span></span><br><span class="line">*s = <span class="string">"like"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>两个错误:</p>
<ol>
<li>s指向的是“mj”的首字符“m”，只有一个字节，要“like”存进1个字节的空间内，肯定内存溢出。</li>
<li>s指向的是字符串常量“mj”，不能再通过指针来修改字符串内容(字符数组可以修改)。</li>
</ol>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> <span class="keyword">a</span>[] = <span class="string">"lmj"</span>;<span class="comment"> // 定义的是一个字符串变量</span></span><br><span class="line"><span class="keyword">char</span> *p2 = <span class="string">"lmj"</span>;<span class="comment"> // 定义的是一个字符串常量</span></span><br></pre></td></tr></table></figure>
<h2 id="8-返回指针的函数"><a href="#8-返回指针的函数" class="headerlink" title="8.返回指针的函数"></a>8.返回指针的函数</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将字符串str中的小写字母变成大写字母，并返回改变后的字符串</span></span><br><span class="line"><span class="comment">// 注意的是：这里的参数要传字符串变量，不能传字符串常量</span></span><br><span class="line"><span class="keyword">char</span> * upper(<span class="keyword">char</span> *<span class="keyword">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 先保留最初的地址。因为等会str指向的位置会变来变去的。</span></span><br><span class="line">    <span class="keyword">char</span> *dest = <span class="keyword">str</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 如果还不是空字符</span></span><br><span class="line">    <span class="keyword">while</span> (*<span class="keyword">str</span> != <span class="string">'\0'</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果是小写字母</span></span><br><span class="line">        <span class="keyword">if</span> (*<span class="keyword">str</span> &gt;= <span class="string">'a'</span> &amp;&amp; *<span class="keyword">str</span> &lt;= <span class="string">'z'</span>) &#123;</span><br><span class="line">            <span class="comment">// 变为大写字母。小写和大写字母的ASCII值有个固定的差值</span></span><br><span class="line">            *<span class="keyword">str</span> -= <span class="string">'a'</span> - <span class="string">'A'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">             </span><br><span class="line">        <span class="comment">// 遍历下一个字符</span></span><br><span class="line">        <span class="keyword">str</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 返回字符串</span></span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 调用:</span></span><br><span class="line"><span class="keyword">int</span> main() &#123;</span><br><span class="line">    <span class="comment">// 定义一个字符串变量</span></span><br><span class="line">    <span class="keyword">char</span> <span class="keyword">str</span>[] = <span class="string">"lmj"</span>;</span><br><span class="line">         </span><br><span class="line">    <span class="comment">// 调用函数</span></span><br><span class="line">    <span class="keyword">char</span> *dest = upper(<span class="keyword">str</span>);</span><br><span class="line">         </span><br><span class="line">    printf(<span class="string">"%s"</span>, dest);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="9-指向函数的指针"><a href="#9-指向函数的指针" class="headerlink" title="9.指向函数的指针"></a>9.指向函数的指针</h2><p>函数名的本质就是函数的地址。<br>假定函数的名称为func，返回类型是整型。则，<code>int *a = func; // 指针a与指针func一致</code></p>
<p>调用的三种方式:<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">func</span>(); <span class="comment">// 原先的调用方式:通过指针func调用</span></span><br><span class="line">*<span class="selector-tag">a</span>();   <span class="comment">// *a指向函数本身</span></span><br><span class="line"><span class="selector-tag">a</span>();    <span class="comment">// 相当于func();</span></span><br></pre></td></tr></table></figure></p>
<p>实例:</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> <span class="built_in">sum</span>(<span class="built_in">int</span> a, <span class="built_in">int</span> b) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">// 定义一个指针变量p，指向<span class="built_in">sum</span>函数</span><br><span class="line">// 把函数名替换为(*p)即可,*p就相当于<span class="built_in">sum</span></span><br><span class="line"><span class="built_in">int</span> (*p)(<span class="built_in">int</span> a, <span class="built_in">int</span> b) = <span class="built_in">sum</span>;</span><br><span class="line">    // 或者 <span class="built_in">int</span> (*p)(<span class="built_in">int</span>, <span class="built_in">int</span>) = <span class="built_in">sum</span>;</span><br><span class="line">    // 或者 <span class="built_in">int</span> (*p)() = <span class="built_in">sum</span>;</span><br><span class="line">     </span><br><span class="line">    // *p就相当于<span class="built_in">sum</span></span><br><span class="line">    <span class="built_in">int</span> result = (*p)(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    // 或者</span><br><span class="line">    <span class="built_in">int</span> result = p(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">     </span><br><span class="line">    printf(<span class="string">"%d"</span>, result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="10-将函数作为参数在函数间传递"><a href="#10-将函数作为参数在函数间传递" class="headerlink" title="10.将函数作为参数在函数间传递"></a>10.将函数作为参数在函数间传递</h2><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 减法运算</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">minus</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 加法运算</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span>(<span class="params"><span class="keyword">int</span> a, <span class="keyword">int</span> b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 这个counting函数是用来做a和b之间的计算，至于做加法还是减法运算，由函数的第1个参数决定</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">counting</span>(<span class="params"><span class="keyword">int</span> (*p</span>)(<span class="params"><span class="keyword">int</span>, <span class="keyword">int</span></span>) , <span class="keyword">int</span> a, <span class="keyword">int</span> b) </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = p(a, b);</span><br><span class="line">    printf(<span class="string">"计算结果为：%d\n"</span>, result);</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 进行加法运算,传进来函数指针sum</span></span><br><span class="line">    counting(sum, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 进行减法运算</span></span><br><span class="line">    counting(minus, <span class="number">6</span>, <span class="number">4</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="11-宏的使用"><a href="#11-宏的使用" class="headerlink" title="11.宏的使用"></a>11.宏的使用</h2><ol>
<li><p>所有预处理指令都以符号“#”开头，并且结尾不用分号，作用范围是从它出现的位置到文件尾，主要有：宏定义、文件包含、条件编译等。</p>
</li>
<li><p>使用带参数的宏定义，最好将参数和结果都用括号括起来。</p>
</li>
<li><p>宏定义不涉及存储空间的分配、参数类型匹配、参数传递、返回值问题，宏替换只在<strong>编译预处理</strong>阶段进行，带参数的宏比函数具有更高的执行效率。</p>
</li>
<li><p>条件编译</p>
 <figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#if</span> 条件<span class="number">1</span></span><br><span class="line">..<span class="selector-class">.code1</span>...</span><br><span class="line"><span class="selector-id">#elif</span> 条件<span class="number">2</span></span><br><span class="line">..<span class="selector-class">.code2</span>...</span><br><span class="line">#<span class="keyword">else</span></span><br><span class="line">..<span class="selector-class">.code3</span>...</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#if</span> defined(MAX)</span><br><span class="line"> ..<span class="selector-class">.code</span>...</span><br><span class="line">#endif</span><br><span class="line"> </span><br><span class="line"><span class="selector-id">#if</span> !defined(MAX)</span><br><span class="line"> ..<span class="selector-class">.code</span>...</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="12-include中-lt-gt-与“”的区别"><a href="#12-include中-lt-gt-与“”的区别" class="headerlink" title="12.include中&lt;&gt;与“”的区别"></a>12.include中&lt;&gt;与“”的区别</h2><p><code>#include　&lt;文件名&gt;</code>到C语言库函数头文件所在的目录中寻找文件。<br><code>#include　&quot;文件名&quot;</code>系统会先在源程序当前目录下寻找，若找不到，再到操作系统的path路径中查找，最后才到C语言库函数头文件所在目录中查找。</p>
<h2 id="13-如何避免-include重复包含同一个头文件"><a href="#13-如何避免-include重复包含同一个头文件" class="headerlink" title="13.如何避免#include重复包含同一个头文件"></a>13.如何避免#include重复包含同一个头文件</h2><p>使用条件编译<br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _ONE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _ONE_H_</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">one</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p>
<h2 id="14-变量的作用域"><a href="#14-变量的作用域" class="headerlink" title="14.变量的作用域"></a>14.变量的作用域</h2><ol>
<li><p>在函数内部定义的变量，称为局部变量。形式参数也属于局部变量，在所有函数外部定义的变量，称为全局变量。</p>
</li>
<li><p>所有的局部变量在默认情况下都是自动变量，是存储在堆栈中的。所有的全局变量和被关键字<code>static</code>修饰的局部变量都是静态变量，是存储在静态内存中的，也就是不属于堆栈。</p>
</li>
<li><p>静态变量在程序运行之前创建，在程序的整个运行期间始终存在，直到程序结束。在程序执行到声明自动变量的代码块(函数)时，自动变量才被创建；当自动变量所在的代码块(函数)执行完毕后，这些自动变量就会自行销毁。</p>
</li>
<li><p>被关键字<code>register</code>修饰的<strong>自动变量</strong>都是寄存器变量，是存储在硬件寄存器中的，其生命周期即是自动变量的生命周期。寄存器变量只限于int、char和指针类型变量使用，将一些频繁使用的自动变量定义为寄存器变量，这样程序尽可能地为它分配寄存器存放，而不用内存。</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">char</span> b;</span><br><span class="line"><span class="keyword">register</span> <span class="keyword">int</span> *c;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="15-编译链接流程"><a href="#15-编译链接流程" class="headerlink" title="15.编译链接流程"></a>15.编译链接流程</h2><ol>
<li><p>如果一个程序中有多个源文件(.c)，编译成功会生成对应的多个目标文件(.obj)，这些目标文件不能单独运行，因为这些目标文件之间可能会有关联。将这些相关联的目标文件链接在一起后才能生成可执行文件。</p>
</li>
<li><p>所谓编译，就是单独检查每个源文件的语法是否合理，并不会检查每个源文件之间的关联关系，一个源文件编译成功就生成一个目标文件。所谓链接，就是检查目标文件的关联关系，将相关联的目标文件组合在一起，生成可执行文件。</p>
</li>
<li><p>根据在当前文件中定义的函数是否允许其他文件访问，可将函数分为内部函数和外部函数。默认情况下，所有的函数都是外部函数。不允许重复定义同一个外部函数。</p>
</li>
</ol>
<h2 id="16-extern与static关键字的作用"><a href="#16-extern与static关键字的作用" class="headerlink" title="16.extern与static关键字的作用"></a>16.extern与static关键字的作用</h2><p>使用<code>extern</code>关键字，表示引用其他文件的“外部函数”: <code>extern void test();</code>，然而extern可以省略，故直接声明即可。正规的项目里面，把“外部函数”的声明另写到一个头文件中，使用时直接包含头文件即可。</p>
<p>在定义函数时，在函数的最左边加上<code>static</code>可以把该函数声明为内部函数(又叫静态函数)，不允许其他文件访问。不同的文件中有同名的内部函数，则互不干扰。</p>
<p>默认情况下，一个函数不可以访问在它后面定义的全局变量。不同源文件中的同名全局变量代表着同一个变量。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a文件</span></span><br><span class="line"><span class="keyword">int</span> ss =<span class="number">10</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// b文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span>  ss ;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ss);<span class="comment">// 是10</span></span><br></pre></td></tr></table></figure>
<p>在定义全局变量的时候加上<code>static</code>关键字，此时<code>static</code>的作用在于限制该全局变量的作用域，只能在定义该全局变量的文件中才能使用，跟其他源文件中的同名变量互不干扰。</p>
<h2 id="17-如何定义结构体"><a href="#17-如何定义结构体" class="headerlink" title="17.如何定义结构体"></a>17.如何定义结构体</h2><p>定义结构体的三种形式(枚举变量的定义与之类似)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 利用上面结构体定义结构体变量stu</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">stu</span>;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 直接定义结构体变量stu</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; stu;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义结构体变量stu后,此结构体永不再用</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; stu;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 特殊:struct前放置typedef表示声明此"匿名"结构体的名字为Student</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> *name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125; Student;</span><br></pre></td></tr></table></figure>
<p>注意:</p>
<ol>
<li>定义结构体类型，只是说明了该类型的组成情况，并没有给它分配存储空间。</li>
<li>将结构体变量作为函数参数进行传递时，其实传递的是全部成员的值，也就是将实参中成员的值一一赋值给对应的形参成员。因此，形参的改变不会影响到实参。</li>
</ol>
<h2 id="18-结构体指针的使用"><a href="#18-结构体指针的使用" class="headerlink" title="18.结构体指针的使用"></a>18.结构体指针的使用</h2><p>结构体指针变量的定义形式：<code>struct 结构体名称 *指针变量名</code>，三种访问方式:</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">结构体变量名.成员名</span><br><span class="line">(*指针变量名).成员名</span><br><span class="line">指针变量名-&gt;成员名</span><br></pre></td></tr></table></figure>
<h2 id="19-typedef的主要使用"><a href="#19-typedef的主要使用" class="headerlink" title="19.typedef的主要使用"></a>19.typedef的主要使用</h2><ol>
<li><p>typedef给指针起别名</p>
 <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line">// 相当于char *<span class="keyword">str </span>= <span class="string">"This is a string!"</span><span class="comment">;</span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str </span>= <span class="string">"This is a string!"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>typedef给结构体起别名</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="built_in">CGRect</span> &#123;</span><br><span class="line">    <span class="built_in">CGPoint</span> origin;</span><br><span class="line">    <span class="built_in">CGSize</span> size;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="built_in">CGRect</span> <span class="built_in">CGRect</span>;</span><br><span class="line"><span class="comment">// 为 struct CGRect 起别名叫作 CGRect</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>typedef给指向结构体的指针起别名</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义一个结构体并起别名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">float</span> x;</span><br><span class="line">    <span class="keyword">float</span> y;</span><br><span class="line">&#125; Point;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 给Point *起别名PP</span></span><br><span class="line"><span class="keyword">typedef</span> Point *PP;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义结构体变量</span></span><br><span class="line">    Point point = &#123;<span class="number">10</span>, <span class="number">20</span>&#125;;</span><br><span class="line">         </span><br><span class="line">    <span class="comment">// 定义指针变量Point *p = &amp;point;</span></span><br><span class="line">    PP p = &amp;point;</span><br><span class="line">         </span><br><span class="line">    <span class="comment">// 利用指针变量访问结构体成员</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"x=%f，y=%f"</span>, p-&gt;x, p-&gt;y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="4">
<li>typedef与枚举类型 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义枚举类型</span></span><br><span class="line"><span class="keyword">enum</span> Season &#123;spring, summer, autumn, winter&#125;;</span><br><span class="line"><span class="comment">// 给枚举类型enum Season起别名为Season</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> Season Season;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义枚举变量</span></span><br><span class="line">    Season s = spring;</span><br><span class="line">         </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="5">
<li><p>typedef给指向函数的指针类型起别名</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个sum函数，计算a跟b的和</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d + %d = %d"</span>, a, b, c);</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*MySum)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 定义一个指向sum函数的指针变量p</span></span><br><span class="line">    MySum p = sum;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 利用指针变量p调用sum函数</span></span><br><span class="line">    (*p)(<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>typedef与#define，给类型起别名，最好使用typedef，而不是使用#define</p>
 <figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">typedef</span> char *<span class="keyword">String1;</span></span><br><span class="line"><span class="keyword">#define </span><span class="keyword">String2 </span>char *</span><br><span class="line"> </span><br><span class="line">// 相当于char *<span class="keyword">str1;char </span>*<span class="keyword">str2;</span></span><br><span class="line"><span class="keyword">String1 </span><span class="keyword">str1, </span><span class="keyword">str2;</span></span><br><span class="line"><span class="keyword">// </span>相当于char *<span class="keyword">str3;char </span> <span class="keyword">str4;产生误会</span></span><br><span class="line"><span class="keyword">String2 </span><span class="keyword">str3, </span><span class="keyword">str4;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<hr>
<h2 id="20-import与include的区别"><a href="#20-import与include的区别" class="headerlink" title="20.import与include的区别"></a>20.import与include的区别</h2><p> <code>#import</code>是一个预处理指令，作用跟C语言的<code>#include</code>类似，都是 包含(拷贝)某个文件的内容 到 预处理指令所在的位置。在Objective-C中，使用<code>#import</code>来包含头文件，可以自动<strong>防止同一个头文件被包含多次</strong>。<code>#import &lt;...&gt;</code>表示包含系统自带的文件，<code>#import &quot;...&quot;</code>表示包含开发人员自己创建的文件。</p>
<h2 id="21-UIView显示的过程"><a href="#21-UIView显示的过程" class="headerlink" title="21.UIView显示的过程"></a>21.UIView显示的过程</h2><p><code>UIView</code>之所以能显示在屏幕上，完全是因为它内部的一个层(<code>CALayer</code>对象)。当<code>UIView</code>需要显示到屏幕上时，会调用<code>drawRect:</code>方法进行绘图，并且会将所有内容绘制在自己的层上，绘图完毕后，系统会将层拷贝到屏幕上，于是就完成了<code>UIView</code>的显示。<br>当<code>UIView</code>需要显示时，它内部的层会准备好一个<code>CGContextRef</code>(图形上下文)，然后调用<code>delegate</code>(这里就是<code>UIView</code>)的<code>drawLayer:inContext:</code>方法，并且传入已经准备好的<code>CGContextRef</code>对象。而<code>UIView</code>在<code>drawLayer:inContext:</code>方法中又会调用自己的<code>drawRect:</code>方法。</p>
<h2 id="22-position与anchorPoint"><a href="#22-position与anchorPoint" class="headerlink" title="22.position与anchorPoint"></a>22.position与anchorPoint</h2><p><code>position</code>可以用来设置<code>CALayer</code>在父层中的位置，它是以父层的左上角为坐标原点(0, 0);<code>anchorPoint</code>称为“定位点”，它决定着CALayer身上的哪个点会在<code>position</code>属性所指的位置。它的x、y取值范围都是0~1，默认值为(0.5, 0.5)。</p>
<h2 id="23-Core-Animation会阻塞主线程吗"><a href="#23-Core-Animation会阻塞主线程吗" class="headerlink" title="23.Core Animation会阻塞主线程吗"></a>23.Core Animation会阻塞主线程吗</h2><p>Core Animation的动画执行过程都是在后台操作的，不会阻塞主线程，而且是直接作用在CALayer上的，并非UIView。</p>
<h2 id="24-空指针"><a href="#24-空指针" class="headerlink" title="24.空指针"></a>24.空指针</h2><p>没有存储任何内存地址的指针就称为空指针(<code>NULL</code>指针，指向<code>nil</code>)，空指针就是被赋值为0的指针，在没有被具体初始化之前，其值为0。可以给空指针发送消息，但消息发送不出去。“野指针”不是<code>NULL</code>指针，是指向“垃圾”内存（不可用内存）的指针。</p>
<h2 id="25-不同编译器下各类型所占字节"><a href="#25-不同编译器下各类型所占字节" class="headerlink" title="25.不同编译器下各类型所占字节"></a>25.不同编译器下各类型所占字节</h2><p><img src="http://static.chenyalun.com/2017/04/03/20170403001.png" alt></p>
<h2 id="26-self与super"><a href="#26-self与super" class="headerlink" title="26.self与super"></a>26.self与super</h2><p><code>self</code> 是方法的隐藏的参数，指向当前调用方法的对象，另一个隐藏参数是 <code>_cmd</code>，代表当前方法的 <code>selector</code>。<code>super</code> 只是一个“编译器指示符”(编译器特性)，它和 <code>self</code> 指向的是相同的消息接收者。不同的是，<code>super</code> 告诉编译器，要先去调用父类的方法，而不是本类里的。当使用 <code>self</code> 调用方法时，会从当前类的方法列表中开始找，如果没有，就从父类中再找；而当使用 super 时，则先从父类的方法列表中开始找，然后调用父类的这个方法。</p>
<h2 id="27-消息发送"><a href="#27-消息发送" class="headerlink" title="27.消息发送"></a>27.消息发送</h2><p><code>id objc_msgSend(id theReceiver, SEL theSelector, ...)</code></p>
<p>以<code>[self setName:]</code> 为例，编译器会替换成调用<code>objc_msgSend</code> 的函数调用，其中 <code>theReceiver</code> 是 <code>self</code>，<code>theSelector</code> 是 <code>@selector(setName:)</code>，这个 <code>selector</code> 是从当前 <code>self</code> 的 <code>class</code> 的方法列表开始找的 <code>setName</code>，当找到后把对应的 <code>selector</code> 传递过去。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">id</span> objc_msgSendSuper(<span class="keyword">struct</span> objc_super *<span class="keyword">super</span>, SEL op, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> objc_super &#123;</span><br><span class="line">    <span class="keyword">id</span> receiver;</span><br><span class="line">    Class superClass;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>而当使用<code>[super setName]</code> 调用时，会使用 <code>objc_msgSendSuper</code> 函数，结构体包含了两个成员，一个是 <code>receiver</code>，这个类似<code>objc_msgSend</code> 的第一个参数 <code>receiver</code>，第二个成员是记录所谓的“父类”。从 <code>objc_super</code> 结构体指向的 <code>superClass</code> 的方法列表开始找 <code>setName</code> 的 <code>selector</code>，找到后再以 <code>objc_super-&gt;receiver</code> 去调用这个 <code>selector</code>。</p>
<h2 id="28-通知"><a href="#28-通知" class="headerlink" title="28.通知"></a>28.通知</h2><p><code>NSNotification</code>使用的是<strong>同步操作</strong>，如果想让<code>NSNotification</code>的<code>post</code>处和<code>observer</code>处异步执行，可以通过<code>NSNotificationQueue</code>实现。对于同一个通知，如果注册了多个观察者，则这多个观察者的<strong>执行顺序和他们的注册顺序是保持一致</strong>的。<code>observer</code>的回调方法执行线程和<code>post</code>的线程保持一致，如果想让<code>post</code>的线程和转发的线程不同，可以通过<code>NSNotification</code>重定向技术实现。<code>addObserver</code>和<code>removeObserver</code>必须成对出现，或者说添加了<code>Observer</code>必须适时移除<code>Observer</code>。因为通知中心并不retain Observer，若不移除，会极易造成给释放的对象发送消息，出现坏内存访问。</p>
<h2 id="29-屏幕"><a href="#29-屏幕" class="headerlink" title="29.屏幕"></a>29.屏幕</h2><p>普屏中1点 = 1像素，Retina屏：1点 = 2像素。人手指的最小点击范围是44pixels，所以在iPhone的很多细节上都是44 pixels。使用图片资源时，方法：<code>[UIImage imageNamed:@&quot;adflower.png&quot;]]</code>，在实际运行时，如果发现当前的设备是Retina屏，会自动寻找图片名为<code>adflower@ 2x.png</code>的图片。  <code>[UIScreen mainScreen].applicationFrame</code>获取app尺寸(去掉状态栏)，<code>[UIScreen mainScreen].bounds</code>获取屏幕尺寸，<code>[[UIApplicationsharedApplication] statusBarFrame]</code>获取状态栏尺寸。</p>
<h2 id="30-程序启动"><a href="#30-程序启动" class="headerlink" title="30.程序启动"></a>30.程序启动</h2><p>在程序启动的时候任何类定义都对应于一块内存。在编译的时候，编译器会给每一个类生成一个且只生成一个“描述其定义的对象”，也就是<strong>类对象</strong>(class object)，它<strong>是一个单例</strong>(singleton)，这个类对象(class object)就是运行时库用来创建实例对象(instance object)的依据。任何直接或间接继承了<code>NSObject</code>的类，它的实例对象(instance objec)中都有一个<code>isa</code>指针，指向它的类对象(class object)。这个类对象(class object)中存储了关于这个  <strong>实例对象(instace object)</strong>  所属的类的定义的一切：包括变量、方法、遵守的协议等等。 类对象并不是类的实例本身。它没有自己的实例变量，也不能执行类的实例的方法。类对象是一个功能完整的对象，也能被动态识别（dynamically typed），接收消息，从其他类继承方法。特殊之处在于<strong>它们是由编译器创建的</strong>，缺少它们自己的数据结构(实例变量），只是在运行时产生实例的代理。类对象是元类对象的一个实例，元类是根元类(root class’s metaclass)的实例，而根元类是其自身的实例，即根元类的<code>isa</code>指针指向自身。</p>
<p>一个消息发送给任何一个对象， 方法的检查 从对象的 <code>isa</code> 指针开始，然后是父类。<strong>实例方法在类中定义， 类方法 在元类和根类中定义</strong>。（根类的元类就是根类自己）。类对象(class object)中包含了类的实例变量、实例方法的定义，而元类对象(metaclass object)中包括了类的类方法的定义。类对象存的是关于实例对象的信息(变量，实例方法等)，而元类对象(metaclass object)中存储的是关于类的信息(类的版本，名字，类方法等)。</p>
<p>①<code>object_getClass</code>跟随实例的<code>isa</code>指针，返回此实例所属的类，对于实例对象(instance)返回的是类(class)，对于类(class)则返回的是元类(metaclass)。<br>②<code>- class</code>方法对于实例对象(instance)会返回类(class)，但对于类(class)则不会返回元类(metaclass)，而只会返回类本身。<br>③<code>class_isMetaClass</code>可判断某类是否为元类。<br>④使用<code>objc_allocateClassPair</code>可在运行时创建新的类与元类对，使用<code>class_addMethod</code>和<code>class_addIvar</code>可向类中增加方法和实例变量，最后使用<code>objc_registerClassPair</code>注册后，就可以使用此类了。</p>
<h2 id="31-alloc方法"><a href="#31-alloc方法" class="headerlink" title="31.alloc方法"></a>31.alloc方法</h2><p>通过<code>alloc</code>或<code>allocWithZone</code>方法创建对象时，</p>
<ol>
<li>cocoa会遍历该对象所有的成员变量，通过成员变量的类型来计算所需占用的内存返回一个未“初使化”过的对象。</li>
<li>将该新对象的引用计数(Retain Count)设置成1。</li>
<li>该新对象的<code>isa</code>成员变量指向它的类对象。</li>
<li>将该新对象的所有其它成员变量的值设置成零。（根据成员变量类型的不同，零有可能是指nil或0）</li>
<li>返回指向该对象的一个指针。</li>
</ol>
<h2 id="32-init方法"><a href="#32-init方法" class="headerlink" title="32.init方法"></a>32.init方法</h2><p>大部分情况下，我们都不希望所有成员变量都是零，所以<br>①<code>init</code>方法做初使化工作，让对象的成员变量的值符合我们程序逻辑中的初始化状态。<br>②返回真正可以使用的指向该对象的指针<br>某些情况下，init会造成alloc的原本空间不够用，而进行第二次分配内存空间。所以下面的写法是错的：<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span>  *s = [<span class="built_in">NSString</span> alloc];</span><br><span class="line">[s init];<span class="comment">// 这儿init返回的地址可能会变。s原本的指针地址可能是无效的地址。</span></span><br></pre></td></tr></table></figure></p>
<p>正确的写法是<code>NSString  *s = [[NSString alloc] init];</code><br>new简单地等价于 alloc + init，但不能指定<code>init</code>的参数，很少用。<br><code>NSInteger</code>是一个有符号型<code>int</code>，它与<code>int</code>的区别就在于<code>NSInteger</code>可以自动识别机器是32位还是64位。<code>NSInteger</code>的无符号版本是<code>NSUInteger</code>。</p>
<h2 id="33-运行时"><a href="#33-运行时" class="headerlink" title="33.运行时"></a>33.运行时</h2><p>消息只有到运行时才会和函数实现绑定起来，而不是按照编译好的逻辑一成不变的执行。编译阶段只是确定了要去向<code>receiver</code>对象发送<code>message</code>消息，但是却没有发送，真正发送是等到运行的时候进行。<code>NSObject</code> 类定义了<code>description</code>方法，返回该类内容的字符串表示。某些 <code>NSObject</code> 的方法只是简单地从运行时系统中获得信息，从而允许对象进行一定程度的自我检查。</p>
<p>例如，<code>class</code> 返回对象的类;<code>isKindOfClass:</code>和 <code>isMemberOfClass:</code>则检查对象是否在指定的 类继承体系中;<code>respondsToSelector:</code>检查对象能否响应指定的消息;<code>conformsToProtocol:</code> 检查对象是否实现了指定协议类的方法;<code>methodForSelector:</code>则返回指定方法实现的地址。</p>
<p>①message（消息）<br><code>message</code> 是一种抽象，包括了函数名+参数列表，并没有实际的实体存在。<br>②method（方法）<br><code>method</code>是真正的存在的代码。如：<code>- (int)meaning { return 42; }</code><br>③selector（方法选择器）<br><code>selector</code> 通过<code>SEL</code>类型存在，描述一个特定的<code>method</code> 或者说 <code>message</code>。在实际编程中，可以通过<code>selector</code>进行检索方法等操作。</p>
<h2 id="34-方法选择器"><a href="#34-方法选择器" class="headerlink" title="34.方法选择器"></a>34.方法选择器</h2><p>它是一个<code>char *</code>指针，仅仅表示它所代表的方法名字。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector *SEL;  </span><br><span class="line">SEL selector = <span class="keyword">@selector</span>(message); <span class="comment">// @selector不是函数调用，只是给编译器的一个提示   </span></span><br><span class="line"><span class="built_in">NSLog</span> (<span class="string">@"%s"</span>, (<span class="keyword">char</span> *)selector);   <span class="comment">//print message</span></span><br></pre></td></tr></table></figure></p>
<p><code>Objective-C</code>在编译的时候，会根据方法的名字，生成一个用来区分这个方法的唯一的一个ID，这个ID就是<code>SEL</code>类型的（生成唯一的<code>SEL</code>）。只要方法的名字相同，那么它们的ID都是相同的。编译器会根据，这个Set简单的说就是一个经过了优化过的<strong>hash表</strong>。<code>SEL</code>实际上就是根据方法名<code>hash</code>化了的一个字符串，而对于字符串的比较仅仅需要比较他们的地址就可以了，从而加快方法的查询速度。</p>
<h2 id="35-IMP"><a href="#35-IMP" class="headerlink" title="35.IMP"></a>35.IMP</h2><p><code>typedef id (*IMP)(id, SEL, ...);</code><br>由于每个方法都对应唯一的<code>SEL</code>，可以通过<code>SEL</code>方便、快速、准确的获得它所对应的<code>IMP</code>（也就是函数指针），而在取得了函数指针之后，也就意味着取得了执行这段方法的代码的入口，这样就可以像普通的C语言函数调用一样使用这个函数指针。</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">void <span class="comment">(*performMessage)(id,SEL); //定义一个IMP（函数指针）   </span></span><br><span class="line"><span class="comment">performMessage = (void (*)</span>(id,SEL))</span><br><span class="line"><span class="comment">// 通过methodForSelector方法根据SEL获取对应的函数指针   </span></span><br><span class="line">[<span class="keyword">self</span> methodForSelector:@<span class="keyword">selector</span>(message)];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过取到的IMP（函数指针）跳过runtime消息传递机制，直接执行message方法。</span></span><br><span class="line">performMessage(<span class="keyword">self</span>,@<span class="keyword">selector</span>(message));</span><br></pre></td></tr></table></figure>
<p>用<code>IMP</code> 的方式，省去了runtime消息传递过程中所做的一系列动作，比直接向对象发送消息高效一些。</p>
<h2 id="36-消息调用流程"><a href="#36-消息调用流程" class="headerlink" title="36.消息调用流程"></a>36.消息调用流程</h2><p>消息表达式<code>[receiver message]</code>在被转换成<code>objc_msgSend(receiver, SEL)</code>后，在运行时，runtime system会做以下事情：</p>
<ul>
<li><p>1、检查忽略的<code>selector</code>（比如将会忽略retain和release消息）。</p>
</li>
<li><p>2、检查<code>receiver</code>是否为<code>nil</code>。（如果<code>receiver</code>为空，则会将 <code>selector</code>也设置为空，并且直接返回到消息调用的地方。）如果对象非空，就继续下一步。</p>
</li>
<li><p>3、根据<code>SEL</code>到当前类中查找对应的<code>IMP</code>，首先会在<code>cache</code>中检索它，如果找到了就根据函数指针跳转到这个函数执行，否则进行下一步。</p>
</li>
<li><p>4、检索当前类对象中的方法表（method list），如果找到了，加入<code>cache</code>中，并且就跳转到这个函数执行，否则进行下一步。</p>
</li>
<li><p>5、从父类中寻找，直到根类：<code>NSObject</code>类。找到了就将方法加入对应类的<code>cache</code>表中，如果仍未找到，则要进入动态方法决议。</p>
</li>
<li><p>6、如果动态方法决议仍不能解决问题，只能进行最后一次尝试，进入消息转发流程。</p>
</li>
</ul>
<p>注意：cache的原则就是缓存那些可能要执行的函数地址，下次调用的时候，速度就可以快速很多。</p>
<p>类方法和实例方法中，都可以访问<code>self</code>和<code>_cmd</code>这两个属性，因为它们都不属于类的实例变量，而是<strong>形参</strong>。<code>objc_msgSend</code>找到方法对应的实现时，将直接调用该方法实现，并将消息中所有的参数都传递给方法实现，同时，它还将传递两个隐藏的参数:接收消息的对象（也就是<code>self</code>指向的内容），方法选标（<code>_cmd</code>指向的内容）</p>
<p>隐藏：因为它们并没有在定义方法的源代码中声明，而是<strong>在代码编译时是插入方法的实现中</strong>的。在方法中可以通过 self 来引用消息接收者对象，通过选标<code>_cmd</code>来引用方法本身。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)message &#123;</span><br><span class="line">    <span class="keyword">self</span>.name = <span class="string">@"James"</span>;<span class="comment">//通过self关键字给当前对象的属性赋值  </span></span><br><span class="line">    SEL currentSel = _cmd;<span class="comment">//通过_cmd关键字取到当前函数对应的SEL  </span></span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"currentSel is :%s"</span>,(<span class="keyword">char</span> *)currentSel);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p> 当被调用的方法实现部分没有找到，而消息转发机制启动之前的这个中间时刻(动态添加方法)。<code>+(BOOL) resolveInstanceMethod:(SEL) sel</code>将被调用。这是<code>NSObject</code>根类提供的类方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> dynamicMethodIMP(<span class="keyword">id</span> <span class="keyword">self</span>, SEL _cmd) &#123;</span><br><span class="line">    <span class="comment">// implementation ....  </span></span><br><span class="line">&#125;  </span><br><span class="line">    </span><br><span class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123; </span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"sel is %@"</span>, <span class="built_in">NSStringFromSelector</span>(sel));  </span><br><span class="line">    <span class="keyword">if</span> (sel == <span class="keyword">@selector</span>(setName:)) &#123;  </span><br><span class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>],sel,(IMP)dynamicMethodIMP,<span class="string">"v@:"</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>@dynamic</code>关键字的作用:①告诉编译器<strong>不要创建</strong>实现属性所用的<strong>实例变量</strong>；②告诉编译器<strong>不要创建</strong>该属性的<strong>get和setter方法</strong>。让编译器相信存取方法会在运行时找到。<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明文件中</span></span><br><span class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *name; </span><br><span class="line">   </span><br><span class="line"><span class="comment">// 实现文件中</span></span><br><span class="line"><span class="keyword">@dynamic</span> name;</span><br></pre></td></tr></table></figure></p>
<h2 id="37-synthesize"><a href="#37-synthesize" class="headerlink" title="37.@synthesize"></a>37.@synthesize</h2><p>默认情况下，编译器会为当前类自动生成一个<code>NSString *_name</code>的实例变量（如果想改变实例变量的名称可以用<code>@synthesize</code>关键字），同时会生成两个名为<code>- (NSString *)name</code>和<code>- (void)setName:(NSString *)aName</code>的存取方法。</p>
<h2 id="38-消息转发"><a href="#38-消息转发" class="headerlink" title="38.消息转发"></a>38.消息转发</h2><p>外部调用的某个方法对象没有实现，而且<code>resolveInstanceMethod</code>方法中也没有做重定向处理时，就会触发<code>- (void)forwardInvocation:(NSInvocation *)anInvocation</code>方法。这个方法通常用来将不能处理的消息转发给其它的对象。</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">forwardInvocation:</span>(NSInvocation *)invocation  &#123;</span><br><span class="line">    SEL invSEL = invocation.selector;  </span><br><span class="line">    <span class="keyword">if</span> ([someOtherObject <span class="string">respondsToSelector:</span>invSEL])  </span><br><span class="line">         [anInvocation <span class="string">invokeWithTarget:</span>someOtherObject];  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">         [self <span class="string">doesNotRecognizeSelector:</span>invSEL];   </span><br><span class="line">    &#125;                                                                            </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="39-Cocoa"><a href="#39-Cocoa" class="headerlink" title="39.Cocoa"></a>39.Cocoa</h2><p>它是一个面向对象的软件组件——类的集成套件，它使开发者可以快速创建强壮和全功能的 Mac OS X （iOS）应用程序。Cocoa包含了很多框架，其中最最核心的是Foundation框架和Application Kit（AppKit）框架（Cocoa Touch中叫UIKit框架）。</p>
<h2 id="40-Runloop"><a href="#40-Runloop" class="headerlink" title="40.Runloop"></a>40.Runloop</h2><p>它是为了线程而生，是线程的基础架构部分，<strong>每个线程，包括程序的主线程（main thread）都有与之相应的run loop对象</strong>。主线程的run loop默认是启动的。<code>UIApplicationMain()</code>函数，会为main thread设置一个<code>NSRunLoop</code>对象。<code>NSRunLoop</code>类并不是线程安全的，不能在一个线程中去操作另外一个线程的run loop对象，<code>CFRunLoopRef</code>是线程安全的。<br>获取到当前线程的run loop:<code>[NSRunLoop currentRunLoop];</code><br>获取对应的<code>CFRunLoopRef</code>类：<code>- (CFRunLoopRef)getCFRunLoop;</code></p>
<p>一个run loop就是一个事件处理循环，用来不停的监听和处理输入事件并将其分配到对应的目标上进行处理。对消息处理过程进行了更好的抽象和封装，在<code>NSRunLoop</code>中每一个消息就被打包在input source或者是timer source中了。使用run loop可以使线程在有工作的时候工作，没有工作的时候休眠，这可以大大节省系统资源。创建输入源的时候，需要将其分配给run loop中的一个或多个模式。定时源在预设的时间点同步方式传递消息，这些消息都会发生在特定时间或者重复的时间间隔。定时源则直接传递消息给处理例程，不会立即退出run loop。</p>
<h2 id="41-创建NSTimer"><a href="#41-创建NSTimer" class="headerlink" title="41.创建NSTimer"></a>41.创建NSTimer</h2><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方式一:自动把timer加入MainRunloop的NSDefaultRunLoopMode中</span></span><br><span class="line">NSTimer *timer = [NSTimer <span class="string">scheduledTimerWithTimeInteral:</span><span class="number">1.0</span> <span class="string">target:</span>self <span class="string">selector:</span><span class="meta">@selector</span>(<span class="string">action:</span>) <span class="string">userInfo:</span>ni] <span class="string">repeat:</span>NO]; </span><br><span class="line"><span class="comment">// 停止</span></span><br><span class="line">[timer invalidate];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二(需手动加到run loop中)</span></span><br><span class="line">NSTimer *timer = [NSTimer <span class="string">timerWithTimeInterval:</span><span class="number">5</span> <span class="string">target:</span>self <span class="string">seletor:</span><span class="meta">@selector</span>(timerAction) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</span><br><span class="line">[[NSRunloop mainRunloop] <span class="string">addTimer:</span>timer <span class="string">forMode:</span>NSDefaultRunloopMode];</span><br></pre></td></tr></table></figure>
<p>调用创建方法后，target对象的引用计数会+1，直到执行完毕，自动-1。如果RunLoop正在执行一个连续的运算，timer就会被延迟触发。</p>
<h2 id="42-响应者对象（Responder-Object）"><a href="#42-响应者对象（Responder-Object）" class="headerlink" title="42.响应者对象（Responder Object）"></a>42.响应者对象（Responder Object）</h2><p>指的是有响应和处理事件能力的对象。响应者链就是由一系列的响应者对象构成的一个层次结构。<code>UIResponder</code>是所有响应对象的基类，在<code>UIResponder</code>类中定义了处理上述各种事件的接口。</p>
<h2 id="43-响应者链"><a href="#43-响应者链" class="headerlink" title="43.响应者链"></a>43.响应者链</h2><p>通常是由视图（UIView）构成的。</p>
<ul>
<li>一个视图的下一个响应者是它视图控制器（UIViewController）（如果有的话），然后再转给它的父视图（Super View）。</li>
<li>视图控制器（如果有的话）的下一个响应者为其管理的视图的父视图。</li>
<li>单例的窗口（UIWindow）的内容视图将指向窗口本身作为它的下一个响应者。</li>
<li>单例的应用（UIApplication）是一个响应者链的终点，它的下一个响应者指向nil，以结束整个循环。</li>
</ul>
<p>第一响应者（First responder）指的是当前接受触摸的响应者对象（通常是一个UIView对象），即表示当前该对象正在与用户交互，它是响应者链的开端。<code>UIWindow</code>对象以消息的形式将事件发送给第一响应者，使其有机会首先处理事件。如果第一响应者没有进行处理，系统就将事件（通过消息）传递给响应者链中的下一个响应者，看看它是否可以进行处理。<code>UIWindow</code>实例对象会首先在它的内容视图上调用<code>hitTest:withEvent:</code>，此方法会在其视图层级结构中的每个视图上调用<code>pointInside:withEvent:</code>。</p>
<h2 id="44-响应者链方法的处理流程"><a href="#44-响应者链方法的处理流程" class="headerlink" title="44.响应者链方法的处理流程"></a>44.响应者链方法的处理流程</h2><p>首先调用当前视图的<code>pointInside:withEvent:</code>方法判断触摸点是否在当前视图内；<br>若返回NO，则<code>hitTest:withEvent:</code>返回<code>nil</code>;<br>若返回YES，则向当前视图的所有子视图(subviews)发送<code>hitTest:withEvent:</code>消息，所有子视图的遍历顺序是从最顶层视图一直到到最底层视图，即从<code>subviews</code>数组的末尾向前遍历，直到有子视图返回非空对象或者全部子视图遍历完毕；<br>若第一次有子视图返回非空对象，则<code>hitTest:withEvent:</code>方法返回此对象，处理结束；<br>如所有子视图都返回空对象，则<code>hitTest:withEvent:</code>方法返回自身(self)。</p>
<h2 id="45-类别与类扩展的区别："><a href="#45-类别与类扩展的区别：" class="headerlink" title="45.类别与类扩展的区别："></a>45.类别与类扩展的区别：</h2><p>①类别中只能增加方法。<br>②类扩展不仅可以增加方法，还可以增加实例变量（或者合成属性），只是该实例变量默认是<code>@private</code>类型的。<br>③类扩展中声明的方法没被实现，编译器会警告，但是类别中的方法没被实现编译器是不会有任何警告的。这是因为<strong>类扩展是在编译阶段被添加到类中，而类别是在运行时添加到类中</strong>。<br>④类扩展所声明的方法必须依托对应类的实现部分来实现。<br>⑤定义在 .m 文件中的类扩展方法为私有的，定义在 .h 文件（头文件）中的类扩展方法为公有的。</p>
<h2 id="46-KVC"><a href="#46-KVC" class="headerlink" title="46.KVC"></a>46.KVC</h2><p>全称是Key-value coding，翻译成键值编码。它提供了一种使用字符串而不是访问器方法去访问一个对象实例变量的机制。KVO全称是Key-value observing，翻译成键值观察。提供了一种当其它对象属性被修改的时候能通知当前对象的机制。KVO机制很适合实现model和controller类之间的通讯。<br>KVC是不会自动调用键值验证方法的，我们需要手动验证：<code>- (BOOL)validateValue:(inout id *)ioValue forKey:(NSString *)inKey error:(out NSError **)outError;</code><br>KVC可以自动的将数值或结构体型的数据打包或解包成<code>NSNumber</code>或<code>NSValue</code>对象，以达到适配的目的。</p>
<h2 id="47-内存管理规则"><a href="#47-内存管理规则" class="headerlink" title="47.内存管理规则"></a>47.内存管理规则</h2><p>ARC的英文全名是：Automatic Reference Counting，是编译器提供的管理Objective-C对象内存的一个机制。它并不是像垃圾回收机制那样，有一个负责内存回收的系统，而是仍然以引用计数为基础：在编译阶段，编译器会在需要<code>retain</code>或<code>release</code>对象的地方自动为我们加上对应的代码。一个对象存在<code>strong</code>类型的指针指向时，该对象就不会被释放。</p>
<p>采用散列表来管理引用计数，统一存储所有对象的引用计数，不用考虑每个对象内存块中引用计数所占的内存，在引用计数表中存储各个对象的内存地址。</p>
<p>①strong<br>该属性值对应 <code>__strong</code>关键字，即该属性所声明的指针变量将成为对象的持有者。<code>strong</code>是指向对象指针的默认属性。<br>②weak<br>该属性对应<code>__weak</code>关键字，与<code>__weak</code>定义的变量一致，该属性所声明的变量将没有对象的所有权，并且当对象被破弃之后，指针将被自动赋值<code>nil</code>。<br>④copy<br>也是对象的所有者，与<code>strong</code>的区别是声明的指针变量是拷贝对象的持有者。<br>⑤assign<br>一般数值型变量用该属性声明，比如，<code>int、BOOL</code>，但无需显示写出，因为数值型变量的默认属性类型就是<code>assign</code>。</p>
<p>使用关键字声明指针类型规范写法:<br><figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">//规范的写法</span></span><br><span class="line">MyClass * __<span class="keyword">weak</span> myWeakReference;</span><br></pre></td></tr></table></figure></p>
<h2 id="48-weak和assign的异同"><a href="#48-weak和assign的异同" class="headerlink" title="48.weak和assign的异同"></a>48.weak和assign的异同</h2><p>相同点：指向的对象都是随时有可能被释放，即不拥有指向的对象。<br>不同点：<br>①<code>weak</code>只能用来修饰对象，<code>assign</code><strong>既可以用来声明对象，也可以用来声明数值型变量</strong>；<br>②很关键的一点区别，当一个<code>weak</code>关键字声明的指针指向的对象被释放掉得时候，该指针会自动的被指向<code>nil</code>，而<code>assign</code>不存在该特性。</p>
<p>使用<code>@property</code>声明或作为普通实例变量声明的指向对象的指针属性默认都是<code>strong</code>；而使用<code>@property</code>声明的数值型变量属性默认的是<code>assign</code>。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>关键字</th>
<th>所有权</th>
</tr>
</thead>
<tbody>
<tr>
<td>strong</td>
<td>__strong</td>
<td>有</td>
</tr>
<tr>
<td>copy</td>
<td>__strong</td>
<td>有</td>
</tr>
<tr>
<td>retain</td>
<td>__strong</td>
<td>有</td>
</tr>
<tr>
<td>weak</td>
<td>__weak</td>
<td>无</td>
</tr>
<tr>
<td>assign</td>
<td>__unsafe_unretained</td>
<td>无</td>
</tr>
<tr>
<td>unsafe_unretained</td>
<td>__unsafe_unretained</td>
<td>无</td>
</tr>
</tbody>
</table>
<h2 id="49-使用ARC需要遵守的新规则"><a href="#49-使用ARC需要遵守的新规则" class="headerlink" title="49.使用ARC需要遵守的新规则"></a>49.使用ARC需要遵守的新规则</h2><p>①不要在<code>dealloc</code>方法中调用<code>[super dealloc];</code>。<br>②不能使用 <code>retain/release/retainCount/autorelease</code><br>③不能使用 <code>NSAllocateObject/NSDeallocateObject</code><br>④不能使用 <code>NSZone</code><br>⑤对象不能作为C语言结构体（struct/union）的成员</p>
<h2 id="50-instancetype"><a href="#50-instancetype" class="headerlink" title="50.instancetype"></a>50.instancetype</h2><p>表示某个方法返回的某种类型的对象，<code>instancetype</code>的作用，就是使那些<strong>非关联返回类型的方法返回所在类的类型</strong>，能够确定对象的类型。有利于开发者在编译阶段发现错误。<br>关联返回类型（related result types）<br>1、类方法中，以<code>alloc</code>或<code>new</code>开头；<br>2、实例方法中，以<code>autorelease，init，retain</code>或<code>self</code>开头；</p>
<p><code>instancetype</code>和<code>id</code>的异同:<br>1、相同点:都可以作为方法的返回类型<br>2、不同点<br>①<code>instancetype</code>可以返回和方法所在类相同类型的对象，<code>id</code>只能返回未知类型的对象；<br>②<code>instancetype</code>只能作为返回值，不能像<code>id</code>那样作为参数；</p>
<h2 id="51-沙盒目录："><a href="#51-沙盒目录：" class="headerlink" title="51.沙盒目录："></a>51.沙盒目录：</h2><p>1、MyApp.app<br>存放应用程序本身的数据，整个目录是只读的，不能被iTunes同步。<br>2、Documents<br>存放不可再生的的数据文件，会被iTunes同步。<br>3、Library<br>存放默认设置或其它状态信息。<br>除了Caches子目录外，会被iTunes同步。<br>4、Library/Caches<br>存放缓存文件，保存那些可再生的文件，不会被iTunes同步。<br>5、Library/Preferences<br>存放应用程序的偏好设置文件。我们使用NSUserDefaults写的设置数据都会保存到该目录下的一个plist文件中，会被iTunes同步。<br>6、tmp<br>存放各种临时文件，不会被iTunes同步。</p>
<h2 id="52-空"><a href="#52-空" class="headerlink" title="52.空"></a>52.空</h2><p><code>NULL</code>本质上是：<code>(void*)0</code>，表示C指针为空，如<code>charchar *string = NULL;</code>。<br><code>nil</code>本质上是：<code>(void *)0</code>，表示指向对象的指针为空。<br><code>Nil</code>本质上也是：(void *)0,表示<code>Class</code>类型的变量值为空，<code>Class anyClass = Nil;</code>。</p>
<h2 id="53-NSNull"><a href="#53-NSNull" class="headerlink" title="53.NSNull"></a>53.NSNull</h2><p>是一个Objective-C类，该类通常用于在集合对象中保存一个空的占位对象。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遇到nil截断</span></span><br><span class="line"><span class="built_in">NSArray</span> *arr = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"wang"</span>,<span class="string">@"zz"</span>,<span class="literal">nil</span>,<span class="string">@"foogry"</span>];</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 存储空的占位对象</span></span><br><span class="line"><span class="built_in">NSArray</span> *arr = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"wang"</span>,<span class="string">@"zz"</span>,[<span class="built_in">NSNull</span> null], <span class="string">@"foogry"</span>];</span><br></pre></td></tr></table></figure>
<h2 id="54-imageNamed"><a href="#54-imageNamed" class="headerlink" title="54.imageNamed"></a>54.imageNamed</h2><p><code>imageNamed</code>的优点在于可以缓存已经加载的图片。这种方法会首先在系统缓存中根据指定的名字寻找图片，如果找到了就返回。如果没有在缓存中找到图片，该方法会从指定的文件中加载图片数据，并将其缓存起来，然后再把结果返回。<br><code>imageWithContentsOfFile</code>方法只是简单的加载图片，并不会将图片缓存起来，图像会被系统以数据方式加载到程序。当不需要重用该图像，或者需要将图像以数据方式存储到数据库，又或者要通过网络下载一个很大的图像时，可以使用这种方式。</p>
<blockquote>
<p>读完他们的博客，仿佛看到未来的自己……</p>
</blockquote>
<blockquote>
<p>向前辈致谢：<br><a href="http://blog.csdn.net/wzzvictory" target="_blank" rel="noopener">王中周的个人博客</a><br><a href="http://www.cnblogs.com/mjios/" target="_blank" rel="noopener">M了个J</a><br>参考：<br><a href="http://c.biancheng.net/cpp/html/88.html" target="_blank" rel="noopener">C语言中文网</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> iOS开发 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C语言交换两个数值的八种方法]]></title>
      <url>http://blog.chenyalun.com/2016/10/23/C%E8%AF%AD%E8%A8%80%E4%BA%A4%E6%8D%A2%E4%B8%A4%E4%B8%AA%E6%95%B0%E5%80%BC%E7%9A%84%E5%85%AB%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<p></p><p align="center"> 简单总结，以鞭笞岁月。 </p><br><a id="more"></a><p></p>
<blockquote>
<p>编译器:XCode8.0</p>
</blockquote>
<h1 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h1><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc， const <span class="built_in">char</span> * argv[]) &#123;</span><br><span class="line">   <span class="built_in">int</span> m = <span class="number">5</span>， <span class="built_in">n</span> = <span class="number">3</span>;</span><br><span class="line">   m = m ^ <span class="built_in">n</span>;</span><br><span class="line">   <span class="built_in">n</span> = m ^ <span class="built_in">n</span>;</span><br><span class="line">   m = m ^ <span class="built_in">n</span>;</span><br><span class="line">   </span><br><span class="line">   printf(<span class="string">"m:%d---n:%d"</span>，m，<span class="built_in">n</span>);</span><br><span class="line">   return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>异或一般是针对二进制数.</p>
<ol>
<li>两数异或，相同则得0，不同则得1。</li>
<li>x ^ x = 0，x ^ 0 = x<br>第二行:  m:0101 n:0011<br>第三行:  m:0110 n:0011<br>第四行:  n:0101 m:0110<br>第五行:  m:0011 n:0101<br>此时，已完成交换.</li>
</ol>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc， <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> m = <span class="number">2147483648</span>， n = <span class="number">2147483647</span>;</span><br><span class="line">   m = m + n - (n = m);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"m:%d---n:%d"</span>，m，n);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>从左向右依次进行，首先获取m与n的和，接着利用()运算符直接将m的值赋予n，此时n完成交换。</li>
<li>同时()内的值是m的值，两数之和减去m值便是n的值，再将n的值赋予m，到这里m完成交换。</li>
</ol>
<h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc， <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m = <span class="number">5</span>， n = <span class="number">3</span>;</span><br><span class="line">    n = (<span class="keyword">long</span>)((<span class="keyword">long</span>)m &lt;&lt; <span class="number">32</span> | (m = n)) &gt;&gt; <span class="number">32</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"m:%d---n:%d"</span>，m，n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注:<code>__int64表示64位整型变量，Xcode中用long代替，VC6.0可直接使用__int64，即: b = (__int64)((__int64)a &lt;&lt; 32 | (a = b)) &gt;&gt; 32；</code></p>
<ol>
<li>(m = n):完成m的交换，()内的值是n。</li>
<li>(long)((long)m &lt;&lt; 32 | n):得到的结果是 <code>00...0  0101   00...0  11</code>第一部分28个0，第三部分30个0 。</li>
<li>((long)((long)m &lt;&lt; 32 ) &gt;&gt; 32:得到的结果:把第三第四部分去掉，即<code>00...0  0101</code> 正好32位，且此值为m的值，再将其赋予n，完成n的交换。</li>
</ol>
<h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">#define swap(<span class="name">x</span>， y， z) ((<span class="name">z</span>) = (<span class="name">x</span>)， (<span class="name">x</span>) = (<span class="name">y</span>)， (<span class="name">y</span>) = (<span class="name">z</span>))</span><br><span class="line">    </span><br><span class="line">int main(<span class="name">int</span> argc， const char * argv[]) &#123;</span><br><span class="line">   int m = 5， n = 3，t = 0;</span><br><span class="line">   swap(m， n， t);</span><br><span class="line">   printf("m:%d---n:%d"，m，n);</span><br><span class="line">   return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比较巧妙，把中间变量放在宏中。</p>
<h1 id="两数之和"><a href="#两数之和" class="headerlink" title="两数之和"></a>两数之和</h1><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc， <span class="built_in">char</span> *argv[]) &#123;</span><br><span class="line">    <span class="built_in">int</span> m = <span class="number">5</span>， <span class="built_in">n</span> = <span class="number">3</span>;</span><br><span class="line">    m = m + <span class="built_in">n</span>;</span><br><span class="line">    <span class="built_in">n</span> = m - <span class="built_in">n</span>;</span><br><span class="line">    m = m - <span class="built_in">n</span>;</span><br><span class="line">        </span><br><span class="line">    printf(<span class="string">"m:%d---n:%d"</span>，m，<span class="built_in">n</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>算是一种数学方法吧，但可能溢出。</p>
<h1 id="两数之积"><a href="#两数之积" class="headerlink" title="两数之积"></a>两数之积</h1><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> main(<span class="built_in">int</span> argc， const <span class="built_in">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="built_in">int</span> m = <span class="number">5</span>， <span class="built_in">n</span> = <span class="number">3</span>;</span><br><span class="line">    m = m * <span class="built_in">n</span>;</span><br><span class="line">    <span class="built_in">n</span> = m / <span class="built_in">n</span>;</span><br><span class="line">    m = m / <span class="built_in">n</span>;</span><br><span class="line">       </span><br><span class="line">    printf(<span class="string">"m:%d---n:%d"</span>，m，<span class="built_in">n</span>);</span><br><span class="line">    return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>两数之和方法的变形，n不能为0，m更可能溢出。</p>
<h1 id="经典的交换函数"><a href="#经典的交换函数" class="headerlink" title="经典的交换函数"></a>经典的交换函数</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *a， <span class="keyword">int</span> *b)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">   temp = *a;</span><br><span class="line">   *a = *b;</span><br><span class="line">   *b = temp;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc， <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> m = <span class="number">2147483648</span>， n = <span class="number">2147483647</span>;</span><br><span class="line">   swap(&amp;m，&amp;n);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"m:%d---n:%d"</span>，m，n);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="临时变量"><a href="#临时变量" class="headerlink" title="临时变量"></a>临时变量</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc， <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> m = <span class="number">2147483648</span>， n = <span class="number">2147483647</span>，temp = <span class="number">0</span>;</span><br><span class="line">   temp = m;</span><br><span class="line">   m = n;</span><br><span class="line">   n = temp;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"m:%d---n:%d"</span>，m，n);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h1><p><code>int</code>最大值，根据编译器类型不同而变化。</p>
<ol>
<li>对于16位编译器，int占16位(2字节)。int的最大值为32767。</li>
<li>对于32位和64位编译器，int占32位(4字节)。int的最大值为2147483647。</li>
<li>可以通过打印<code>sizeof(int)</code>查看平台对应的int占用字节数。乘8后即为位数。最高位为符号位，如位数为n，则最大值为<code>2^(n-1)</code> 即2的n-1次幂。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">"%lu"</span>，<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2147483648</span>;</span><br></pre></td></tr></table></figure>
<p>做了一次标题党。。。</p>
<blockquote>
<p>参考并致谢:<br><a href="http://blog.csdn.net/ljx_5489464/article/details/50042571" target="_blank" rel="noopener">C语言交换两个变量数值的几种方法</a><br><a href="http://www.cnblogs.com/kubixuesheng/p/4104800.html" target="_blank" rel="noopener">一道面试题：用多种方法实现两个数的交换</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> C语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods的安装与使用]]></title>
      <url>http://blog.chenyalun.com/2016/10/10/CocoaPods%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p align="center"> CocoaPods是非常好用的第三方库管理工具。 </p>

<a id="more"></a>
<h1 id="升级Gem"><a href="#升级Gem" class="headerlink" title="升级Gem"></a>升级Gem</h1><pre><code>sudo gem update --system
</code></pre><h1 id="切换CocoaPods的数据源"><a href="#切换CocoaPods的数据源" class="headerlink" title="切换CocoaPods的数据源"></a>切换CocoaPods的数据源</h1><pre><code># 1.删除
gem sources --remove https://rubygems.org/

# 2.添加淘宝数据源
gem sources -a https://ruby.taobao.org/

# 3.查看
gem sources -l
</code></pre><h1 id="安装CocoaPods"><a href="#安装CocoaPods" class="headerlink" title="安装CocoaPods"></a>安装CocoaPods</h1><pre><code>sudo gem install CocoaPods
或者（如10.11系统）
sudo gem install -n /usr/local/bin CocoaPods
</code></pre><h2 id="报错解决"><a href="#报错解决" class="headerlink" title="报错解决"></a>报错解决</h2><pre><code>Error installing pods:activesupport requires Ruby version &gt;= 2.2.2
</code></pre><p>解决方式:</p>
<h3 id="安装-RVM"><a href="#安装-RVM" class="headerlink" title="安装 RVM"></a>安装 RVM</h3><pre><code>curl -L get.rvm.io | bash -s stable  
</code></pre><p>等待。</p>
<pre><code>source ~/.bashrc  
source ~/.bash_profile  
</code></pre><p>测试是否安装成功。</p>
<pre><code>rvm -v  
</code></pre><h3 id="用RVM升级Ruby"><a href="#用RVM升级Ruby" class="headerlink" title="用RVM升级Ruby"></a>用RVM升级Ruby</h3><pre><code># 1.查看当前ruby版本  
ruby -v  
# 显示 ruby 1.8.7  

# 2.列出已知的ruby版本  
rvm list known  

# 3.安装ruby 2.3  
rvm install 2.3  
</code></pre><p>安装完成之后ruby -v查看是否安装成功。</p>
<h1 id="更换托管地址"><a href="#更换托管地址" class="headerlink" title="更换托管地址"></a>更换托管地址</h1><ul>
<li><p>将Podspec文件托管地址从github切换到国内的oschina或者coding。</p>
</li>
<li><p>注意:如果pod setup 可以将github的代码下载得动，那就不用去更换托管地址了。</p>
<pre><code># 1.先移除
pod repo remove master

# 2.再添加
pod repo add master https://git.coding.net/CocoaPods/Specs.git

# 3.再更新
pod repo update
</code></pre></li>
</ul>
<h1 id="设置pod仓库-初始化CocoaPods"><a href="#设置pod仓库-初始化CocoaPods" class="headerlink" title="设置pod仓库(初始化CocoaPods)"></a>设置pod仓库(初始化CocoaPods)</h1><pre><code>pod setup 
# 会将Specs.git的代码下载到~/.CocoaPods/repo/master,自己前往查看是否有文件
# 如果还是太慢，尝试下
pod install --verbose
</code></pre><h2 id="报错解决-1"><a href="#报错解决-1" class="headerlink" title="报错解决"></a>报错解决</h2><pre><code>[!] To setup the master specs repo, please run `pod setup`.
</code></pre><p>手动下载代码解决:</p>
<pre><code># 1.手动克隆文件至该目录
git clone https://git.coding.net/CocoaPods/Specs.git ~/.CocoaPods/repos/master

# 2.初始化,完成后显示Setup completed
pod setup  
</code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><pre><code># 如果有版本号，则说明已经pod安装成功
pod --version
# 如果~/.CocoaPods/repo/master目录下有文件,说明文件下载成功
</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>利用CocoaPods来安装第三方框架</p>
<ol>
<li>进入要安装框架的项目的.xcodeproj同级文件夹</li>
<li>在该文件夹中新建一个文件podfile</li>
<li><p>在文件中告诉CocoaPods需要安装的框架信息</p>
<p>a.该框架支持的平台<br>b.适用的iOS版本<br>c.框架的名称<br>d.框架的版本</p>
</li>
</ol>
<h2 id="Podfile文件格式"><a href="#Podfile文件格式" class="headerlink" title="Podfile文件格式"></a>Podfile文件格式</h2><pre><code>platform :ios, &apos;9.0&apos;
target &apos;你的项目名称&apos; do
pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;
end     
</code></pre><h2 id="创建Podfile文件"><a href="#创建Podfile文件" class="headerlink" title="创建Podfile文件"></a>创建Podfile文件</h2><p>进入.xcodeproj同级文件夹下</p>
<pre><code># 初始化:会生成模板的Podfile文件
pod init  

# 或者手动创建Podfile文件
touch Podfile
</code></pre><h2 id="添加自己需要的第三方库"><a href="#添加自己需要的第三方库" class="headerlink" title="添加自己需要的第三方库"></a>添加自己需要的第三方库</h2><pre><code>pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;

# If you are using Swift, be sure to add use_frameworks! and set your target to iOS 8+:
pod &apos;SDWebImage&apos;, &apos;~&gt;3.8&apos;
use_frameworks!

pod &apos;Masonry&apos;

pod &apos;MBProgressHUD&apos;, &apos;~&gt; 1.0.0&apos;

pod &apos;MJExtension&apos;

pod &apos;MJRefresh&apos;

pod &apos;SVProgressHUD&apos;
</code></pre><h2 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h2><pre><code>pod install --verbose --no-repo-update
# 显示
# Pod installation complete! There is 1 dependency from the Podfile and 1 total pod installed.
</code></pre><h2 id="Start"><a href="#Start" class="headerlink" title="Start!"></a>Start!</h2><p>以后打开项目点击xcworksapce后缀的文件，不要点击原来的项目文件。<br>导入头文件应该使用:</p>
<pre><code>#import &lt;&lt;#header#&gt;&gt;
</code></pre><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>platform :ios, ‘9.0’ 用来设置所有第三方库所支持的iOS最低版本<br>pod ‘SDWebImage’,’~&gt;2.6’ 设置框架的名称和版本号</p>
<p>版本号的规则：<br>‘&gt;1.0’    可以安装任何高于1.0的版本<br>‘&gt;=1.0’   可以安装任何高于或等于1.0的版本<br>‘&lt;1.0’    任何低于1.0的版本<br>‘&lt;=1.0’   任何低于或等于1.0的版本<br>‘~&gt;0.1’   任何高于或等于0.1的版本，但是不包含高于1.0的版本<br>‘~&gt;0’     任何版本，相当于不指定版本，默认采用最新版本号</p>
<h1 id="pod-install过程"><a href="#pod-install过程" class="headerlink" title="pod install过程"></a>pod install过程</h1><ol>
<li>分析依赖:该步骤会分析Podfile,查看不同类库之间的依赖情况。如果有多个类库依赖于同一个类库，但是依赖于不同的版本，那么CocoaPods会自动设置一个兼容的版本。</li>
<li><p>下载依赖:根据分析依赖的结果，下载指定版本的类库到本地项目中。</p>
</li>
<li><p>生成Pods项目：创建一个Pods项目专门用来编译和管理第三方框架，CocoaPods会将所需的框架，库等内容添加到项目中，并且进行相应的配置。</p>
</li>
<li>整合Pods项目：将Pods和项目整合到一个工作空间中，并且设置文件链接。</li>
</ol>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>Mac显示隐藏的文件</p>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean true ; 
killall Finder
</code></pre><p>Mac取消显示隐藏文件</p>
<pre><code>defaults write com.apple.finder AppleShowAllFiles -boolean false ; 
killall Finder
</code></pre><blockquote>
<p>参考并致谢:<br><a href="http://blog.csdn.net/lissdy/article/details/9191351" target="_blank" rel="noopener">Mac上更新Ruby</a><br><a href="http://www.cnblogs.com/yan520/p/5583362.html" target="_blank" rel="noopener">cocoapods的安装和使用以及版本升级遇到的问题</a></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> iOS开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Objective-C学习笔记]]></title>
      <url>http://blog.chenyalun.com/2016/05/12/Objective-C%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2016.10.28  更正部分错误<br>2019.03.29  整合所有关于Objective-C的笔记</p>
</blockquote>
<p align="center"> 关于Objective-C的学习笔记。 </p>

<a id="more"></a>
<h2 id="1-类的设计"><a href="#1-类的设计" class="headerlink" title="1.类的设计"></a>1.类的设计</h2><p>三要素：事物名称（类名）；属性；行为（功能）。具有相同（或者类似）属性和行为的对象可以抽象出一个类。</p>
<h2 id="2-类的声明"><a href="#2-类的声明" class="headerlink" title="2.类的声明"></a>2.类的声明</h2><p><strong>类名</strong><br>1，首字母大写；2，不能有下划线；3，多个英文单词，使用驼峰标识；</p>
<p><strong>行为</strong><br>哪个对象最清楚行为怎么做，就把行为设计在哪个对象身上。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="meta">@interface</span> Person : NSObject &#123;</span><br><span class="line"><span class="meta">@public</span></span><br><span class="line">    <span class="built_in">int</span> _age;</span><br><span class="line">    <span class="built_in">bool</span> _sex;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">- (<span class="keyword">void</span>)<span class="built_in">print</span>;</span><br><span class="line"><span class="meta">@end</span></span><br></pre></td></tr></table></figure>
<p>大括号内用来声明对象的成员变量（也即实例变量），<code>@public</code>让外界指针可以间接访问对象内部的成员变量。值类型的成员变量默认会初始化为0，引用类型的成员变量默认会初始化为<code>nil</code>。<br><code>nil</code>表示指向一个对象的空指针，<code>Nil</code>表示指向一个类的空指针。</p>
<p><code>: NSObject</code>：表示继承自<code>NSObject</code>类。</p>
<h2 id="3-类的实现"><a href="#3-类的实现" class="headerlink" title="3.类的实现"></a>3.类的实现</h2><p>需要导入声明文件<code>#import &quot;Person.h&quot;</code></p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Person</span></span></span><br><span class="line">- (<span class="keyword">void</span>)print  &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"输出内容"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>类的实现主要是方法的实现。</p>
<h2 id="4-创建对象"><a href="#4-创建对象" class="headerlink" title="4.创建对象"></a>4.创建对象</h2><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span> *p = <span class="comment">[<span class="comment">[Person alloc]</span> init]</span>;</span><br><span class="line"><span class="comment">[p print]</span>;</span><br></pre></td></tr></table></figure>
<p>对象的本质是结构体，对象需要通过指针操纵。</p>
<p>类在内存中也占据存储空间，在创建对象之前为类分配一份内存空间，将类加载进内存，而且只存储方法列表，其中由类产生的对象，都有一个<code>isa</code>指针指向类。</p>
<p>方法调用：<code>[行为执行者   行为名称]</code>;</p>
<p><code>[Person new]</code>执行<code>Person</code>这个类的<code>new</code>行为，创建对象，返回对象地址。</p>
<p><code>Person *p = [Person new];</code>定义一个Person 类型的指针变量<code>p</code>，指向<code>Person</code>类型的对象。指针的类型是<code>Person *</code>，指针指向的类型是<code>Person</code>。</p>
<p><code>[p print];</code>表示给<code>p</code>指向的对象发送一条<code>print</code>消息。</p>
<p><code>Person p = [Person new];</code>等价于 <code>Person p; p = [Person new];</code>另外<code>Person *p2 = p;</code>表示<code>p2、p</code>指向同一个内容。<br><code>p2 = p</code>:将<code>p</code>存储的指针交给<code>p2</code>，使<code>p2</code>存储的也是<code>p</code>存储的内容。</p>
<h2 id="5-方法与函数的区别以及注意"><a href="#5-方法与函数的区别以及注意" class="headerlink" title="5.方法与函数的区别以及注意"></a>5.方法与函数的区别以及注意</h2><ol>
<li><p>方法只能声明在<code>@interface</code>和<code>@end</code>之间，只能实现在<code>@implementation</code>和<code>@end</code>之间。也就是说方法不能独立于类存在。</p>
</li>
<li><p>C函数不属于类，跟类没有联系，C函数只归定义函数的文件所有。</p>
</li>
<li><p>C函数不能访问对象的成员变量。</p>
</li>
<li><p>对象方法归类／对象所有，函数属于整个文件所有，任何地方都可以放置函数（如果放在<code>@interface</code>与<code>@end</code>之间，将会忽略掉函数，即未定义）。</p>
</li>
<li><p>方法只有声明，没有实现（经典错误）</p>
</li>
<li>方法没有声明，只有实现（编译器警告，但是能调用，弱语法）。</li>
<li>编译的时候：访问没有的成员变量直接报错，访问没有的方法，只是警告。</li>
<li>同一个类中不允许两个对象方法同名。</li>
</ol>
<h2 id="6-匿名对象"><a href="#6-匿名对象" class="headerlink" title="6.匿名对象"></a>6.匿名对象</h2><p>属性访问 <code>[Car new]-&gt;speed = 200;</code><br>方法调用<code>[[Car new] run];</code></p>
<h2 id="7-对象方法"><a href="#7-对象方法" class="headerlink" title="7.对象方法"></a>7.对象方法</h2><p>不带参数的对象方法：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法名 print</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="built_in">print</span>;</span><br></pre></td></tr></table></figure>
<p>带一个参数的对象方法：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法名 print:</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="built_in">print</span>:(<span class="keyword">int</span>) a;</span><br></pre></td></tr></table></figure>
<p>带多个参数的对象方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法名 print:WithOther:</span></span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">print:</span>(<span class="keyword">int</span>)a <span class="string">WithOther:</span>(<span class="keyword">int</span>)b;</span><br></pre></td></tr></table></figure>
<h2 id="8-枚举"><a href="#8-枚举" class="headerlink" title="8.枚举"></a>8.枚举</h2><p>C语言中的枚举：<br><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span>｛</span></span><br><span class="line">    SexMan,</span><br><span class="line">    SexWoman</span><br><span class="line">｝Sex;</span><br></pre></td></tr></table></figure></p>
<p>建议使用Objective-C风格的枚举，示例：<br><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line">typedef <span class="type">NS_ENUM</span>(<span class="type">NSInteger</span>, <span class="type">YAViewType</span>) &#123;</span><br><span class="line">    <span class="type">YAViewTypeDefault</span>    = 0,        // 默认 value</span><br><span class="line">    <span class="type">YAViewTypeButton</span>     = 1,        </span><br><span class="line">    <span class="type">YAViewTypeCell</span>       = 2</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h2 id="9-结构体"><a href="#9-结构体" class="headerlink" title="9.结构体"></a>9.结构体</h2><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">typedef struct&#123;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">year</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">month</span>;</span><br><span class="line">    <span class="built_in">int</span> <span class="built_in">day</span>;</span><br><span class="line">&#125; <span class="built_in">Date</span>;</span><br></pre></td></tr></table></figure>
<p>访问枚举：<code>s-&gt;sex = SexMan;</code><br>访问结构体：<code>s-&gt;birthday.year = 2016;</code><br>定义结构体：<code>Date d = {2016,4,30};</code><br>访问结构体：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">s-&gt;<span class="keyword">birthday.year </span>= <span class="number">2016</span><span class="comment">;</span></span><br><span class="line">s-&gt;<span class="keyword">birthday.month </span>= <span class="number">4</span><span class="comment">;</span></span><br><span class="line">s-&gt;<span class="keyword">birthday.day </span>= <span class="number">16</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>等价于：</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">Date d = &#123;<span class="number">2016</span>,<span class="number">4</span>,<span class="number">16</span>&#125;;  </span><br><span class="line">s-&gt;birthday = d;</span><br></pre></td></tr></table></figure>
<h2 id="10-注意事项"><a href="#10-注意事项" class="headerlink" title="10.注意事项"></a>10.注意事项</h2><ul>
<li>在使用打印函数<code>NSLog</code>时注意<code>％</code>与<code>%</code>的区别。</li>
<li>定义枚举、结构体等建议放在<code>@interface</code>的前面使用。</li>
<li>方法中一个参数对应一个冒号。</li>
<li>对象中的成员变量指向另一个对象：  <figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">interface</span> <span class="title">Student</span> : <span class="title">NSObject</span> &#123;</span><br><span class="line">@<span class="keyword">public</span></span><br><span class="line"><span class="comment">// 狗</span></span><br><span class="line">Dog *dog;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">- (<span class="keyword">void</span>)letDogRun &#123;</span><br><span class="line">    [<span class="meta">dog run</span>];</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line"><span class="comment">// main.m文件</span></span><br><span class="line">Student *stu = [Student <span class="keyword">new</span>];</span><br><span class="line">Dog *dog = [Dog <span class="keyword">new</span>];</span><br><span class="line">stu-&gt;dog = dog;</span><br><span class="line">[<span class="meta">stu letDogRun</span>];</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="11-封装"><a href="#11-封装" class="headerlink" title="11.封装"></a>11.封装</h2><p>过滤不合理的值，屏蔽内部的赋值过程，让外界不必关注内部的细节。</p>
<p>成员变量的命名：以下划线开头。用于区分get方法名称和局部变量名称。尽量不设置为<code>@public</code>公有属性，如：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    int _speed<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>set方法：设置成员变量，过滤一些不符合要求的值。以<code>set</code>开头，返回类型为<code>void</code>，后面跟上成员变量名，形参不与成员变量重名，形参类型与成员变量相同，成员变量的首字母大写。<br><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="built_in">setSpeed</span>:(<span class="keyword">int</span>)s;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="built_in">setSpeed</span>:(<span class="keyword">int</span>)s &#123;</span><br><span class="line">    _speed = s+<span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>get方法：获取对象内部的成员变量，不接收参数，返回类型与成员变量类型相同，方法名称与成员变量名称相同（不含下划线）。不推荐以<code>get</code>开头。</p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> (int)speed;</span></span><br><span class="line"><span class="ruby">   </span></span><br><span class="line"><span class="ruby">- (int)speed &#123;</span></span><br><span class="line"><span class="ruby">    <span class="keyword">return</span> _speed; </span></span><br><span class="line"><span class="ruby">&#125;</span></span><br></pre></td></tr></table></figure>
<p>只读：只提供<code>get</code>方法。可读可写：提供<code>get</code>和<code>set</code>方法。</p>
<h2 id="12-调用未声明、未实现的对象方法"><a href="#12-调用未声明、未实现的对象方法" class="headerlink" title="12.调用未声明、未实现的对象方法"></a>12.调用未声明、未实现的对象方法</h2><p>编译报错： <code>No visible @interface for ‘Dog’ declares the selector ‘ssss’</code>。<br>链接运行报错：<code>reason: ‘-[Dog ssss]: unrecognized selector sent to instance 0x1002014a0’</code>，表示给Dog对象发送不能识别的消息。</p>
<h2 id="13-调用已声明、未实现的对象方法"><a href="#13-调用已声明、未实现的对象方法" class="headerlink" title="13.调用已声明、未实现的对象方法"></a>13.调用已声明、未实现的对象方法</h2><p>编译警告：<code>Method definition for ‘ssss’ not found</code> 未实现方法。<br>链接正常，运行报错：<code>reason: ‘-[Dog ssss]: unrecognized selector sent to instance 0x1001002a0’</code>。</p>
<h2 id="14-调用未声明、已实现的对象方法"><a href="#14-调用未声明、已实现的对象方法" class="headerlink" title="14.调用未声明、已实现的对象方法"></a>14.调用未声明、已实现的对象方法</h2><p>编译错误： <code>No visible @interface for ‘Dog’ declares the selector ‘ssss’</code>。</p>
<h2 id="15-类方法"><a href="#15-类方法" class="headerlink" title="15.类方法"></a>15.类方法</h2><p>类本身在内存中占据存储空间，里面有类\对象方法列表。直接通过类名执行的方法以<code>+</code>开头，只能由类名调用，类方法中不能访问成员变量（实例变量）。允许类方法与对象方法重名。<br>使用场合：当不需要访问成员变量的时候，尽量使用类方法，提升效率。</p>
<p>输出类的名称：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">+ (<span class="keyword">void</span>)showClassName;</span><br><span class="line">+ (<span class="keyword">void</span>)showClassName &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"类的名称是：%@"</span>,<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用：<code>[Dog showClassName];</code></p>
<h2 id="16-self关键字"><a href="#16-self关键字" class="headerlink" title="16.self关键字"></a>16.self关键字</h2><p><code>self</code>是指针，指向当前对象方法或类方法的调用者。出现在对象方法中，代表当前对象，出现在类方法中，代表当前类。不能出现在函数中（会报错：<code>Use of undeclared identifier ‘self’</code>使用未声明的标识符）。</p>
<p>用途：</p>
<ol>
<li><p>self-&gt;成员变量名 在对象方法中访问当前方法调用的成员变量，也即当成员变量与局部变量同名时，用来区分同名的局部变量。</p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- (void)<span class="keyword">showSelfOfObject;</span></span><br><span class="line"><span class="keyword">- </span>(void)<span class="keyword">showSelfOfObject </span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"showSelfOfObject方法被调用"</span>)<span class="comment">;</span></span><br><span class="line">    int _speed<span class="comment">;</span></span><br><span class="line">    self-&gt;_speed=<span class="number">200</span><span class="comment">;</span></span><br><span class="line">    _speed += <span class="number">1000</span><span class="comment">;</span></span><br><span class="line">    int result = self-&gt;_speed+<span class="number">10</span><span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"result的值是：%i"</span>,result)<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"_speed的值是：%i"</span>,_speed)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 当成员变量与局部变量同名时（编译警告<code>Local declaration of ‘_speed’ hides the instance variable</code>局部变量隐藏了成员变量），采用就近原则，访问局部变量。因此需要用<code>self</code>访问成员变量。</p>
</li>
<li><p>方法的调用:在对象方法中调用当前对象的对象方法以及在类方法中调用当前类的类方法。</p>
<p> <strong>在对象方法中调用当前对象的对象方法：</strong></p>
 <figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">-<span class="ruby"> (void)showSelfOfObject;</span></span><br><span class="line"><span class="ruby">- (void)showTestObject;</span></span><br><span class="line"><span class="ruby">- (void)showSelfOfObject &#123;</span></span><br><span class="line"><span class="ruby">    NSLog(@<span class="string">"showSelfOfObject方法被调用"</span>);</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br><span class="line"><span class="ruby">   </span></span><br><span class="line"><span class="ruby">- (void)showTestObject &#123;</span></span><br><span class="line"><span class="ruby">    [<span class="keyword">self</span> showSelfOfObject];</span></span><br><span class="line"><span class="ruby">&#125;</span></span><br></pre></td></tr></table></figure>
<p> <strong>在类方法中调用当前类的类方法：</strong></p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">+ (void)<span class="keyword">showSelfOfClass;</span></span><br><span class="line"><span class="keyword">+ </span>(void)<span class="keyword">showTestClass;</span></span><br><span class="line"><span class="keyword">+ </span>(void)<span class="keyword">showSelfOfClass </span>&#123;</span><br><span class="line">    NSLog(@<span class="string">"showSelfOfClass方法被调用"</span>)<span class="comment">;</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">+ (void)<span class="keyword">showTestClass </span>&#123;</span><br><span class="line">    [self <span class="keyword">showSelfOfClass];</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure>
<p> 常见错误：</p>
<ol>
<li><p>在对象方法中调用类方法（编译错误<code>No visible @interface for ‘Dog’ declares the selector ‘showSelfOfClass‘</code>）错误相当于未声明未定义却调用这个方法。</p>
</li>
<li><p>在类方法中调用对象方法（编译错误<code>No known class method for selector ‘showSelfOfObject‘</code>）未知的类方法。</p>
</li>
</ol>
</li>
<li><p>self的死循环:调用本身</p>
 <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-</span> (void)<span class="selector-tag">showSelfOfObject</span> &#123;</span><br><span class="line">    <span class="selector-tag">NSLog</span>(@<span class="string">"showSelfOfObject方法被调用"</span>);</span><br><span class="line">    <span class="selector-attr">[self showSelfOfObject]</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用函数</p>
</li>
</ol>
<p>函数不依赖对象。<code>void f(); [self f]</code> 错误。</p>
<h2 id="17-继承"><a href="#17-继承" class="headerlink" title="17.继承"></a>17.继承</h2><p>场景：当两个类拥有相同的属性和方法时，将相同的内容抽取到父类中。当A类完全拥有B类的部分属性或方法时，考虑A类作为父类。</p>
<ol>
<li><p>父类必须声明在子类前面。</p>
</li>
<li><p>不允许子类和父类拥有相同的成员变量（如果子类有和父类拥有相同的成员变量，意味着，同一成员变量声明定义两次，编译错误 <code>Duplicute member ‘_age’</code>，哪怕成员变量的访问属性不同，子类公开父类私有，或者父类公开子类私有，都不行！）</p>
</li>
<li><p>子类方法和属性的访问过程：如果子类没有，再访问父类。即由子类开始。</p>
</li>
<li><p>Objective-C中只有单继承（与C＋＋不同）。</p>
</li>
</ol>
<p>方法的重写:父类和子类拥有相同签名的类方法或者对象方法（子类重新实现了父类中的方法），则优先调用子类的同名方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类Person：</span></span><br><span class="line">- (<span class="keyword">void</span>)show &#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"调用了Person的show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 子类Student：</span></span><br><span class="line">- (<span class="keyword">void</span>)show &#123;</span><br><span class="line"><span class="comment">// [super show];</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"调用了Student的show方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 调用：</span></span><br><span class="line">Student *p = [[Student alloc] init]; </span><br><span class="line">[p show];</span><br></pre></td></tr></table></figure>
<p>很明显，调用的是重写的子类<code>Student</code>的<code>show</code>方法。</p>
<h2 id="18-super"><a href="#18-super" class="headerlink" title="18.super"></a>18.super</h2><p>场景：子类重写父类的方法时，想调用父类的方法（包括类方法和对象方法）。</p>
<p>效果与<code>self</code>类似，<code>super</code>在对象方法中就调用父类的对象方法，在类方法中就调用父类的类方法。</p>
<p>继承可以在不改变原来模型的基础上拓充方法，抽取公共代码，建立类与类之间的联系，减少代码的冗余性，但是，会增加耦合性。</p>
<h2 id="19-多态"><a href="#19-多态" class="headerlink" title="19.多态"></a>19.多态</h2><p>某一种事物的多种形态。<br>在实现继承的前提下，父类类型指针指向子类对象，指向子类对象的父类指针可以调用子类中重写父类的方法，但是指向子类对象的父类指针不能调用子类中拓展的方法（父类中没有的方法）。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span> *p = <span class="comment">[<span class="comment">[Student alloc]</span> init]</span>; </span><br><span class="line"><span class="comment">[p show]</span>;</span><br></pre></td></tr></table></figure>
<p><code>Student</code>是<code>Person</code>，<code>show</code>方法在子类和父类中都有，这里调用的是子类的<code>show</code>方法。<br>当子类拓展了一个<code>showStudent</code>对象方法，如果还想调用，则强制转换：将指向子类对象的父类指针强制转化为子类指针。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span> *p = <span class="comment">[<span class="comment">[Student alloc]</span> init]</span>;</span><br><span class="line">Student *p2 = (Student *)p;</span><br><span class="line"><span class="comment">[p2 showStudent]</span>;</span><br></pre></td></tr></table></figure>
<p>将父类指针p强制转换为子类指针，使它可以调用子类<code>Student</code>拓展的<code>showStudent</code>方法。</p>
<p>如果不做强制转换，而直接调用子类拓展的方法</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Person</span> *p = <span class="comment">[<span class="comment">[Student alloc]</span> init]</span>;</span><br><span class="line"><span class="comment">[p showStudent]</span>;</span><br></pre></td></tr></table></figure>
<p>编译报错： <code>No visible @interface for ‘Person’ declares the selector ‘showStudent’</code></p>
<p>主要应用：<strong>动态绑定</strong><br>如果参数使用父类类型，可以传入父类、子类对象，调用相应的方法（如将子类对象传递给参数，调用子类的方法；将父类对象传递给参数，则调用父类的方法）</p>
<h2 id="20-NSString的使用"><a href="#20-NSString的使用" class="headerlink" title="20.NSString的使用"></a>20.NSString的使用</h2><ol>
<li><p>创建字符串与输出字符串</p>
 <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">NSString *s = @<span class="string">"Sometimes"</span><span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"%@"</span>,s)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>格式化字符串</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">85</span>;</span><br><span class="line"><span class="built_in">NSString</span> *s = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"传入的年龄参数是%d"</span>,age];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,s);</span><br></pre></td></tr></table></figure>
</li>
<li><p>调用<code>NSString</code>类方法。<br> <code>length</code>返回字数（不是字符数），返回的是7，包括空格。</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *s = <span class="string">@"123 456"</span>; </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,s);</span><br><span class="line"><span class="built_in">NSUInteger</span> size = [s length];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%lu"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span>)size);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="21-点语法"><a href="#21-点语法" class="headerlink" title="21.点语法"></a>21.点语法</h2><p>本质是方法调用，不访问成员变量。前提是已经存在get和set方法(否则报错：<code>Property ‘age’ not found on object of type ‘Person *’</code>)。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">[p setAge:<span class="number">50</span>]<span class="comment">;</span></span><br><span class="line">int result = [p age]<span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"result的结果是：%i"</span>,result)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>相当于：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">p.age = <span class="number">50</span><span class="comment">;</span></span><br><span class="line">int result = p.age<span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"result的结果是：%i"</span>,result)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="22-方法的展开原理："><a href="#22-方法的展开原理：" class="headerlink" title="22.方法的展开原理："></a>22.方法的展开原理：</h2><p><code>[p setAge:50];</code>对应 <code>p.age = 50;</code> 而<code>int result = [p age];</code>对应<code>int result = p.age;</code></p>
<h2 id="23-死循环"><a href="#23-死循环" class="headerlink" title="23.死循环"></a>23.死循环</h2><p>set方法中</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)<span class="string">setAge:</span>(<span class="keyword">int</span>)a &#123;</span><br><span class="line">   self.age=a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实际上是在set方法中调用set方法。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">int</span>)age &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>.age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在get方法中调用get方法。<br>以上编译链接均无警告、无错误，但是运行会报错。</p>
<h2 id="24-成员变量的作用域"><a href="#24-成员变量的作用域" class="headerlink" title="24.成员变量的作用域"></a>24.成员变量的作用域</h2><h3 id="private"><a href="#private" class="headerlink" title="@private"></a>@private</h3><p>私有。<br>只能在当前类的对象方法中直接访问（当前类的对象方法的<code>@implementation</code>中访问），子类虽然继承（内存中存在），但无权限访问。</p>
<h3 id="protected"><a href="#protected" class="headerlink" title="@protected"></a>@protected</h3><p>保护（默认是保护，不是私有）。<br>可以在当前类和子类的对象方法中直接访问（当前类和子类的<code>@implementation</code>中访问）。<br>假设父类<code>Person</code>有保护的成员变量<code>_number</code>，子类继承，什么变量都不增加，那么子类对象方法中访问的是父类的<code>_number</code>。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">- (void)<span class="keyword">show </span>&#123;</span><br><span class="line">    self-&gt;_number = <span class="number">1000</span><span class="comment">;</span></span><br><span class="line">    int result = self-&gt;_number<span class="comment">;</span></span><br><span class="line">    _number = <span class="number">5000</span><span class="comment">;</span></span><br><span class="line">    int result2 = _number<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"self-&gt;_number的值是：%i"</span>,result)<span class="comment">;</span></span><br><span class="line">    NSLog(@<span class="string">"_number的值是：%i"</span>,result2)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="public"><a href="#public" class="headerlink" title="@public"></a>@public</h3><p>公开。任何地方都可以访问。一般用不到。</p>
<h3 id="package"><a href="#package" class="headerlink" title="@package"></a>@package</h3><p>同一个框架内可以访问，介于<code>@public</code>和<code>@private</code>之间。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li>在类方法中不可能访问成员变量。</li>
<li><p>也可以在<code>@implementation</code>中声明成员变量。</p>
 <figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@implementation</span> <span class="attribute">Student</span>:NSObject &#123;</span><br><span class="line">   <span class="variable">@public</span> int age;</span><br><span class="line">   <span class="variable">@private</span> int number;</span><br><span class="line">   <span class="variable">@protected</span> int no;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="25-property和-synthesize属性合成"><a href="#25-property和-synthesize属性合成" class="headerlink" title="25.@property和@synthesize属性合成"></a>25.@property和@synthesize属性合成</h2><p><code>@property</code>用在<code>@interface</code>中，代替get和set方法<br>如：<code>@property int age;</code><br>等价于</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">int</span>)age;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">setAge:</span>(<span class="keyword">int</span>)age;</span><br></pre></td></tr></table></figure>
<p>即便是<code>@property int _age;</code>那也会生成</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- (<span class="keyword">int</span>)_age;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">setAge:</span>(<span class="keyword">int</span>)_age;</span><br></pre></td></tr></table></figure>
<p>而<code>@synthesize</code>用在<code>@implementation</code>实现中：<code>@synthesize  age = 成员变量名;</code> 不允许对成员变量进行条件过滤，如<code>@synthesize age = _age+100;</code></p>
<p><code>@synthesize age=_age;</code></p>
<p>等价于</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">- (<span class="keyword">int</span>)age &#123;</span><br><span class="line">   <span class="keyword">return</span> _age;</span><br><span class="line">&#125;</span><br><span class="line">- (<span class="keyword">void</span>)<span class="string">setAge:</span>(<span class="keyword">int</span>)age &#123;</span><br><span class="line">   _age=age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p> 1，如果.h文件中没有这个<code>_age</code>成员变量。那么，利用<code>@property</code>可以自动生成私有<code>@private</code>的<code>_age</code>。而默认的<code>_age</code>却是<code>@protected</code>的。<br> 2，<code>@synthesize age</code>将会访问<code>age</code>这个成员变量而非<code>_age</code>。<br> 3，若手动实现getter方法，编译器只会自动生成setter方法；若手动实现setter方法，编译器只会自动生成getter方法。</p>
<h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><p><code>@property</code>已经独揽<code>@synthesize</code>的实现了，也即</p>
<p><code>@synthesize age=_age;</code>可以省略。只用写<code>@property int  age</code>就好了。（当然，前提是不对参数进行过滤，直接传到成员变量中，如果要过滤，还是要自己生成相应的方法。）</p>
<h2 id="26-id"><a href="#26-id" class="headerlink" title="26.id"></a>26.id</h2><p>相当于<code>NSObject  *</code> ，是万能指针。</p>
<h3 id="id类型的定义"><a href="#id类型的定义" class="headerlink" title="id类型的定义"></a>id类型的定义</h3><figure class="highlight thrift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> </span>&#123;</span><br><span class="line">    Class isa;</span><br><span class="line">&#125;*id;</span><br></pre></td></tr></table></figure>
<h2 id="27-构造方法"><a href="#27-构造方法" class="headerlink" title="27.构造方法"></a>27.构造方法</h2><p>用来初始化对象的方法，完整地创建一个可用对象。</p>
<p><code>Person *p = [Person alloc];</code><br><code>+alloc</code>方法分配存储空间，返回对象。</p>
<p><code>p = [p init];</code><br><code>-init</code>方法初始化。</p>
<h2 id="28-init方法的重写"><a href="#28-init方法的重写" class="headerlink" title="28.init方法的重写"></a>28.init方法的重写</h2><p>目的：在对象创建完毕之后，使成员变量就有了一些默认的值。<br>注意：一定要先调用父类的构造方法，再进行子类内部成员变量的初始化。<br>在<code>@implementation</code>中进行重写：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">init</span> &#123;</span><br><span class="line">   <span class="comment">// 一定要先调用super的init方法，这是为了初始化父类的一些成员变量和其他属性</span></span><br><span class="line">   <span class="keyword">self</span> = [<span class="keyword">super</span> <span class="keyword">init</span>];</span><br><span class="line">   <span class="comment">// 判断对象是否初始化成功，如果对象初始化成功，再进行接下来的自定义初始化</span></span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">self</span> != <span class="literal">nil</span>) &#123;</span><br><span class="line">       _age=<span class="number">10086</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 返回一个已经初始化完毕的对象</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码不够简化，一般用下面代码。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">- (id)<span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="comment">// 简化版</span></span><br><span class="line">   <span class="keyword">if</span>([<span class="keyword">super</span> <span class="keyword">init</span>]) &#123;</span><br><span class="line">       _age=<span class="number">10086</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="29-自定义构造方法"><a href="#29-自定义构造方法" class="headerlink" title="29.自定义构造方法"></a>29.自定义构造方法</h2><p>要求：是对象方法（对象的初始化），返回值是id类型，方法名以<code>initWith</code>开头。<br>注意：<code>-init</code>方法重写不需要在<code>@interface</code>中声明，因为已经声明过了，而自定义的构造方法需要在<code>@interface</code>中显式声明。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line">- (<span class="keyword">id</span>)initWithAge:(<span class="keyword">int</span>)age;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line">- (<span class="keyword">id</span>)initWithAge:(<span class="keyword">int</span>)age &#123;</span><br><span class="line">   <span class="keyword">if</span>([<span class="keyword">super</span> init]) &#123;</span><br><span class="line">       _age=age+<span class="number">100</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">self</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用示例：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Person *p = [Person alloc]<span class="comment">;</span></span><br><span class="line">p = [p init]<span class="comment">;</span></span><br><span class="line">int r = p.age<span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"r的值是%i"</span>,r)<span class="comment">;</span></span><br><span class="line">    </span><br><span class="line">p= [p initWithAge:<span class="number">110</span>]<span class="comment">;</span></span><br><span class="line">int r2 = p.age<span class="comment">;</span></span><br><span class="line">NSLog(@<span class="string">"r2的值是%i"</span>,r2)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>含有多个参数的构造方法：<br><code>- (id)initWithAge:(int)age andNumber:(int)number;</code></p>
<h2 id="30-h文件和-m文件"><a href="#30-h文件和-m文件" class="headerlink" title="30. .h文件和.m文件"></a>30. .h文件和.m文件</h2><p>每个类分布在不同的文件中<br>类的声明放在.h文件中，类的实现放在.m文件中<br>若想使用某个类，就包含某个类的.h文件即可。</p>
<h2 id="31-分类"><a href="#31-分类" class="headerlink" title="31.分类"></a>31.分类</h2><p>场合：在不修改原来类模型的情况下，给类扩充一些方法，且仅是方法，不扩充成员变量。可以给系统自带的类添加分类，扩充方法。（注意引入分类文件）<br>当添加分类的方法是重写原来类中的方法时,不需要引入分类文件。<br>声明文件的命名方式 【类+分类.h】</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@interface</span> 类名 (分类名)</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure>
<p>实现文件的命名方式 【类+分类.m】<br><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@implementation</span> 类名 (分类名)</span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<p>特征：用括号括住添加的分类<br>好处：一个庞大的类可以分模块开发、由多个人编写，有利于团队合作。</p>
<h3 id="注意点-1"><a href="#注意点-1" class="headerlink" title="注意点"></a>注意点</h3><p>1，分类可以访问原来类中的成员变量，但不能增加成员变量（若要增加成员变量，可以使用继承）。</p>
<p>2，分类的优先级最高，当调用类中的一个方法时，优先去分类中查找，再去原类中查找，最后去父类中查找。也即，倘若在分类中重写了原类中的方法，会“覆盖”掉原来的方法，导致原来的方法无法使用。（不建议重写原来类中的方法）<br>重写会出现警告：Category is implementing a method which will also be implemented by its primary class.</p>
<p>3，如果多个分类中有相同（方法签名相同，但不一样）的方法，则调用的是最后编译的方法。</p>
<h2 id="32-类的私有方法"><a href="#32-类的私有方法" class="headerlink" title="32.类的私有方法"></a>32.类的私有方法</h2><ul>
<li>方式1，直接在.m文件中写方法实现，不要在.h文件中进行方法声明</li>
<li>方式2，在.m文件中定义一个category，然后在category中声明一些方法，最后在<code>@implementation</code>和<code>@end</code>之间作方法实现。</li>
</ul>
<h2 id="33-类的本质"><a href="#33-类的本质" class="headerlink" title="33.类的本质"></a>33.类的本质</h2><p>类也是一个对象，是Class类型的对象，简称类对象，类对象就是类。<br>class类型的定义:<code>typedef struct objc_class *Class;</code><br>类名代表着类对象，每个类只有一个类对象。</p>
<h2 id="34-load"><a href="#34-load" class="headerlink" title="34.+load"></a>34.+load</h2><p>在程序启动的时候，就会加载所有的类和分类，并调用一次所有类和分类的+load方法。</p>
<ul>
<li>先加载父类，再加载子类，也即先调用父类的+load方法，再调用子类的+load方法。</li>
<li>先加载原始类，再加载分类（顺序也即父类——父类的分类——子类）。</li>
<li>不管程序运行过程中有没有用到这个类，都会调用+load加载。</li>
</ul>
<h2 id="35-initialize"><a href="#35-initialize" class="headerlink" title="35.+initialize"></a>35.+initialize</h2><p>在第一次使用某个类时（比如创建对象），就会调用一次<code>+initialize</code>方法。<br>一个类只会调用一次<code>+initialize</code>方法，先调用父类的，再调用子类的。<br>获取类对象的两种方式</p>
<figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> c = [Person <span class="keyword">class</span>];<span class="comment">//类方法</span></span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Person *p = [Person <span class="keyword">new</span>];</span><br><span class="line"><span class="keyword">Class</span> c = [p <span class="keyword">class</span>];<span class="comment">//对象方法</span></span><br></pre></td></tr></table></figure>
<p>很明显，<code>[p class]</code>和<code>[Person class]</code>方法返回的都是是<code>class</code>类型<br>类对象调用类方法：</p>
<figure class="highlight cos"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Class</span> c = [Person <span class="keyword">class</span>]<span class="comment">;</span></span><br><span class="line">Person *p2 = [c <span class="keyword">new</span>]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h2 id="36-description方法"><a href="#36-description方法" class="headerlink" title="36.description方法"></a>36.description方法</h2><p>类似其他语言的<code>ToString</code>方法，<code>NSObject</code>自带的方法。返回值类型是<code>NSString ＊</code>。<br>默认情况下，使用<code>NSLog</code>和<code>%@</code>打印一个对象，输出的是<code>&lt;类名:内存地址&gt;</code>，如：<code>&lt;Person: 0x1002070a0&gt;</code>，而<code>NSLog(@&quot;%@&quot;,p)</code>会调用<code>-description</code>方法。</p>
<h3 id="description方法"><a href="#description方法" class="headerlink" title="-description方法"></a>-description方法</h3><p>使用<code>NSLog</code>和<code>%@</code>输出某个对象时，会调用对象的<code>-description</code>方法。</p>
<h3 id="description方法-1"><a href="#description方法-1" class="headerlink" title="+description方法"></a>+description方法</h3><p>使用<code>NSLog</code>和<code>%@</code>输出某个类对象时，会调用类对象的<code>+description</code>方法。</p>
<p>可以重写<code>+description</code>和<code>-description</code>方法修改NSLog的默认输出<br>注意：如果在-description方法中使用NSLog打印self，会造成死循环。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写-description方法</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line">   <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@"</span>, <span class="keyword">self</span>];    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译无警告，无报错，运行出错。<br>真正重写：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 重写-description方法</span></span><br><span class="line">- (<span class="built_in">NSString</span> *)description &#123;</span><br><span class="line"> <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"姓名：%@ 年龄：%d"</span>, _name,_age];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="37-SEL"><a href="#37-SEL" class="headerlink" title="37.SEL"></a>37.SEL</h2><p>每个类的方法列表都存储在类对象中，每个方法都有一个与之对应的<code>SEL</code>，根据一个<code>SEL</code>就可以找到方法的地址，进而调用方法。<br><code>SEL</code>类型定义 <code>typedef struct objc_selector *SEL;</code><br><code>SEL</code>的获取：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">SEL s = @selector(test)<span class="comment">;</span></span><br><span class="line">SEL <span class="built_in">s2</span> = NSSelectorFromString(@<span class="string">"test"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>将<code>SEL</code>转换为<code>NSString</code>对象:<code>NSString *s3=NSStringFromSelector(s);</code></p>
<p>调用对象p的show方法：</p>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建p对象</span></span><br><span class="line">Person *p = [[Person alloc] init];</span><br><span class="line"><span class="comment">// 将show方法封装为SEL类型数据的s</span></span><br><span class="line">SEL s = <span class="meta">@selector</span>(show);</span><br><span class="line"><span class="comment">// 调用s间接调用show方法</span></span><br><span class="line">[p <span class="string">performSelector:</span>s];</span><br></pre></td></tr></table></figure>
<h2 id="38-p-test-原理解释"><a href="#38-p-test-原理解释" class="headerlink" title="38. [p test]原理解释"></a>38. [p test]原理解释</h2><ol>
<li>把test包装成SEL类型的数据。</li>
<li>根据SEL数据找到对应的方法地址。</li>
<li>根据方法地址调用相应的方法。<br>消息就是SEL。</li>
</ol>
<h2 id="39-NSLog方法总结"><a href="#39-NSLog方法总结" class="headerlink" title="39.NSLog方法总结"></a>39.NSLog方法总结</h2><ol>
<li><p>打印对象的内存地址</p>
<pre><code>NSLog(@&quot;%p&quot;,p);
</code></pre></li>
<li><p>打印指针的内存地址（&amp;p取出地址）</p>
<pre><code>NSLog(@&quot;%p&quot;,&amp;p);
</code></pre></li>
<li><p>打印某一对象（默认返回类名+内存地址，可以通过重写-description方法改变输出内容）</p>
<pre><code>NSLog(@&quot;%@&quot;,p);
</code></pre></li>
<li><p>打印代码行号</p>
<pre><code>NSLog(@&quot;%d&quot;,__LINE__);
</code></pre></li>
<li><p>打印文件路径</p>
<pre><code>NSLog(@&quot;%d&quot;,__FILE__);
</code></pre><p>注意：如果文件路径中存在中文，则无法输出<br>这时可以使用：</p>
<pre><code>printf(&quot;%s\n&quot;__FILE__);输出包含中文字符的路径（\n只是为了观看清晰）
</code></pre></li>
<li><p>打印当前函数名称</p>
<pre><code>NSLog(@&quot;%s&quot;,__func__);
</code></pre></li>
</ol>
<h2 id="40-代理"><a href="#40-代理" class="headerlink" title="40.代理"></a>40.代理</h2><p>一系列方法的列表（不能增加成员变量）。其中声明的方法可以被任何类实现，这种模式一般称作代理（delegation）。<br>如果一些类之间没有继承的关系，但是有某些相同的行为，这时要考虑使用代理。<br>代理的定义：<br>当一代理只针对某个类中，代理最好放在一个类的.h文件中，使用时引入即可。（假定在Person.h文件中）</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Person</span> : <span class="title">NSObject</span></span></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 要在@interface之外设置代理</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">MyProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="comment">// 必须实现的方法</span></span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line">- (<span class="keyword">void</span>)show;</span><br><span class="line">- (<span class="keyword">void</span>)myShow;</span><br><span class="line"><span class="comment">// 可选实现的方法</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">+ (<span class="keyword">void</span>)herShow;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在Dog.h文件中遵守协议：</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="comment">// 声明协议@protocol  MyProtocol;</span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span>  <span class="title">MyProtocol</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Dog</span> : <span class="title">NSObject</span>&lt;<span class="title">MyProtocol</span>&gt;</span></span><br><span class="line"><span class="comment">// 遵守某个协议</span></span><br><span class="line"><span class="comment">// 注意导入协议文件#import "Person.h"或者声明协议@protocol  MyProtocol;</span></span><br><span class="line">- (<span class="keyword">void</span>)show;</span><br><span class="line">- (<span class="keyword">void</span>)myShow;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>当某一代理用在多个类中，协议需要放在单独创建的.h文件中<br>此时创建的只有一个名为BigProtocol的.h文件。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span> </span></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BigProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@required</span></span><br><span class="line">- (<span class="keyword">void</span>)bigShow;</span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)bigShow2;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在Cat.h文件中遵守协议</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="comment">//@protocol BigProtocol;</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"BigProtocol.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Cat</span> : <span class="title">NSObject</span>&lt;<span class="title">BigProtocol</span>&gt;</span></span><br><span class="line">- (<span class="keyword">void</span>)bigShow;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<p>在Dog.h文件中遵守协议</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="comment">//@protocol BigProtocol;</span></span><br><span class="line"><span class="meta">#import <span class="meta-string">"BigProtocol.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">_Dog</span> : <span class="title">NSObject</span>&lt;<span class="title">BigProtocol</span>&gt;</span></span><br><span class="line">- (<span class="keyword">void</span>)bigShow;</span><br><span class="line">- (<span class="keyword">void</span>)bigShow2;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<h3 id="注意点-2"><a href="#注意点-2" class="headerlink" title="注意点"></a>注意点</h3><ol>
<li><p>在遵守协议时，如果使用<code>@protocol BigProtocol;</code>编译器会警告：无法找到协议的定义<br>而使用<code>#import &quot;BigProtocol.h&quot;</code>，则完全没有问题。</p>
</li>
<li><p>如果某个类遵守多个协议，协议之间用逗号分隔：</p>
<pre><code>@interface Cat : NSObject&lt;BigProtocol,MyProtocol&gt;
</code></pre></li>
<li><p>一个协议本身可以遵守其他协议，如遵守名字叫NSObject的协议（默认是这种情况，基协议NSObject）<br>如果A协议遵守B协议，这时A协议就能拥有B协议的所有方法声明。</p>
<pre><code>@protocol BigProtocol &lt;NSObject&gt;
@end
</code></pre><p> BigProtocol拥有NSObject协议的所有方法声明。</p>
</li>
<li><p>约定框架中后缀为Delegate的都是协议。（协议类似其他语言的接口，就像C#中默认以I开头的都是接口 ）</p>
</li>
<li><p>要求某个对象必须遵守某个协议（如要求obj保存的对象遵守协议MyProtocol，并且继承Person）</p>
<pre><code>Person&lt;MyProtocol&gt; *obj = [[Person alloc] init];
</code></pre></li>
<li><p>利用conformsToProtocol:判断某个类是否实现了某个协议</p>
<pre><code>Cat *c = [[Cat alloc] init ];
bool result = [c conformsToProtocol:@protocol(BigProtocol)];
NSLog(@&quot;%@&quot;,result?@&quot;YES&quot;:@&quot;NO&quot;);
[c conformsToProtocol:@protocol(BigProtocol)];返回的是bool类型。
</code></pre></li>
</ol>
<h2 id="41-block"><a href="#41-block" class="headerlink" title="41.block"></a>41.block</h2><p>块。<br>有返回值（void也可以）、有形参。block封装了一段代码，可以在任何时候执行。block可以作为函数参数或者函数返回值，而其本身又可以带输入参数和返回值。<br>在多线程，异步任务，集合遍历，集合排序，动画专场使用较多。</p>
<p>定义: <code>返回值类型  (^+block名称)(参数类型列表)=^(参数列表){   代码内容  };</code></p>
<ol>
<li><p>注意大括号后面有分号</p>
</li>
<li><p>对比函数</p>
 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> (^MySum)(<span class="keyword">int</span> ,<span class="keyword">int</span> )=^(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123; <span class="keyword">return</span> a+b;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MySum</span> <span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> a+b;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>block可以访问局部变量，但不能更改局部变量。<br>如果更改则报错：<code>Variable is not assignable (missing__block type specifier)</code>，如：</p>
 <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// Block的定义</span></span><br><span class="line"><span class="keyword">int</span> (^MySum)(<span class="keyword">int</span> ,<span class="keyword">int</span> ) = ^(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">   c = <span class="number">21</span>;</span><br><span class="line">   <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@"%i<span class="string">",MySum(10,20));</span></span><br></pre></td></tr></table></figure>
<p> 如果硬是要修改：在局部变量前面加上<code>__block</code> ，如   <code>__block int c=21;</code>这时，便可以在block中修改局部变量了。</p>
 <figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">__block  <span class="keyword">int</span> c=<span class="number">10</span>;</span><br><span class="line"><span class="comment">// Block的定义</span></span><br><span class="line"><span class="keyword">int</span> (^MySum)(<span class="keyword">int</span> ,<span class="keyword">int</span> ) = ^(<span class="keyword">int</span> a,<span class="keyword">int</span> b) &#123;</span><br><span class="line">    c = <span class="number">21</span>;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;;</span><br><span class="line">NSLog(@"%i<span class="string">",MySum(10,20));</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>block的调用，和函数一样，使用名称即可：<code>MySum(形参列表);</code></p>
</li>
<li><p>如果block没有形参，则可以省略等号后面的()<br>如： <code>int (^SomeSum)()=^{return 25;};</code>但是等号前面的两对括号不可省略。</p>
</li>
<li><p>利用typedef声明类型</p>
 <figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">格式：<span class="keyword">typedef</span>  返回值类型 (^block块名称)(参数_类型列表)</span><br><span class="line">例如：<span class="keyword">typedef</span> <span class="keyword">int</span> (^MyBlock)(<span class="keyword">int</span>,<span class="keyword">int</span>);</span><br><span class="line">    </span><br><span class="line">以后就可以用MyBlock这种类型定义Block变量</span><br><span class="line">MyBlock m = ^(<span class="keyword">int</span> a,<span class="keyword">int</span> b)&#123;<span class="keyword">return</span> a+b;&#125;;</span><br><span class="line"><span class="keyword">int</span> c = m(<span class="number">15</span>,<span class="number">25</span>);</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"%i"</span>,c);</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> Objective-C </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
